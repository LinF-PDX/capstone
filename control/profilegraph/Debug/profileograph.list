
profileograph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005854  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005a4c  08005a4c  00006a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a5c  08005a5c  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005a5c  08005a5c  00006a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a64  08005a64  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a64  08005a64  00006a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a68  08005a68  00006a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005a6c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000010  08005a7c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08005a7c  000072a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b43  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002903  00000000  00000000  00017b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc7  00000000  00000000  0001b3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290e0  00000000  00000000  0001bf87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fa0  00000000  00000000  00045067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001005ab  00000000  00000000  00058007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001585b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f64  00000000  00000000  001585f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0015c55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08005a34 	.word	0x08005a34

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08005a34 	.word	0x08005a34

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <writeRegister>:
 * @param num Number of bytes to be written
 * @retval none
 * @note Since the register values to be written are 8-bit, there is no need to multiple writing
 */
static void writeRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	6039      	str	r1, [r7, #0]
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b3f      	cmp	r3, #63	@ 0x3f
 800053c:	d901      	bls.n	8000542 <writeRegister+0x1a>
		address = 63;
 800053e:	233f      	movs	r3, #63	@ 0x3f
 8000540:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
		address = (address << 1 & ~0x01);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2104      	movs	r1, #4
 800054e:	480c      	ldr	r0, [pc, #48]	@ (8000580 <writeRegister+0x58>)
 8000550:	f002 fc56 	bl	8002e00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000554:	1df9      	adds	r1, r7, #7
 8000556:	230a      	movs	r3, #10
 8000558:	2201      	movs	r2, #1
 800055a:	480a      	ldr	r0, [pc, #40]	@ (8000584 <writeRegister+0x5c>)
 800055c:	f003 f98f 	bl	800387e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,value,num,10);
 8000560:	79bb      	ldrb	r3, [r7, #6]
 8000562:	b29a      	uxth	r2, r3
 8000564:	230a      	movs	r3, #10
 8000566:	6839      	ldr	r1, [r7, #0]
 8000568:	4806      	ldr	r0, [pc, #24]	@ (8000584 <writeRegister+0x5c>)
 800056a:	f003 f988 	bl	800387e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2104      	movs	r1, #4
 8000572:	4803      	ldr	r0, [pc, #12]	@ (8000580 <writeRegister+0x58>)
 8000574:	f002 fc44 	bl	8002e00 <HAL_GPIO_WritePin>
	

}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40020c00 	.word	0x40020c00
 8000584:	20000110 	.word	0x20000110

08000588 <readRegister>:
 *	@param value Pointer to buffer that stores the read value
 *	@param num Number of bytes to be written
 * 	@retval none
 */
static void readRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b3f      	cmp	r3, #63	@ 0x3f
 800059c:	d901      	bls.n	80005a2 <readRegister+0x1a>
		address = 63;
 800059e:	233f      	movs	r3, #63	@ 0x3f
 80005a0:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
		address = (address << 1 | 0x01);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2104      	movs	r1, #4
 80005b6:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <readRegister+0x60>)
 80005b8:	f002 fc22 	bl	8002e00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 80005bc:	1df9      	adds	r1, r7, #7
 80005be:	230a      	movs	r3, #10
 80005c0:	2201      	movs	r2, #1
 80005c2:	480a      	ldr	r0, [pc, #40]	@ (80005ec <readRegister+0x64>)
 80005c4:	f003 f95b 	bl	800387e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 80005c8:	79bb      	ldrb	r3, [r7, #6]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	230a      	movs	r3, #10
 80005ce:	6839      	ldr	r1, [r7, #0]
 80005d0:	4806      	ldr	r0, [pc, #24]	@ (80005ec <readRegister+0x64>)
 80005d2:	f003 fac9 	bl	8003b68 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2104      	movs	r1, #4
 80005da:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <readRegister+0x60>)
 80005dc:	f002 fc10 	bl	8002e00 <HAL_GPIO_WritePin>
	
	
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40020c00 	.word	0x40020c00
 80005ec:	20000110 	.word	0x20000110

080005f0 <adxlFormat>:
						2 		|  				+-8g		
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	uint8_t formatreg=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1); //Set register to 0
 80005fc:	f107 030f 	add.w	r3, r7, #15
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	202c      	movs	r0, #44	@ 0x2c
 8000606:	f7ff ff8f 	bl	8000528 <writeRegister>
	formatreg = (adxl->IntMode << 6 | adxl->Range) & RANGE_REG_MASK;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	78db      	ldrb	r3, [r3, #3]
 800060e:	019b      	lsls	r3, r3, #6
 8000610:	b25a      	sxtb	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	b25b      	sxtb	r3, r3
 8000618:	4313      	orrs	r3, r2
 800061a:	b25b      	sxtb	r3, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 0343 	and.w	r3, r3, #67	@ 0x43
 8000622:	b2db      	uxtb	r3, r3
 8000624:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1);
 8000626:	f107 030f 	add.w	r3, r7, #15
 800062a:	2201      	movs	r2, #1
 800062c:	4619      	mov	r1, r3
 800062e:	202c      	movs	r0, #44	@ 0x2c
 8000630:	f7ff ff7a 	bl	8000528 <writeRegister>

	formatreg = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg,1);
 8000638:	f107 030f 	add.w	r3, r7, #15
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	202d      	movs	r0, #45	@ 0x2d
 8000642:	f7ff ff71 	bl	8000528 <writeRegister>
	formatreg = (adxl->DataReadyMode << 2 | adxl->TempMode << 1 | adxl->StandbyMode) & POWER_CTL_REG_MASK;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	b25a      	sxtb	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	b25b      	sxtb	r3, r3
 8000656:	4313      	orrs	r3, r2
 8000658:	b25a      	sxtb	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b25b      	sxtb	r3, r3
 8000660:	4313      	orrs	r3, r2
 8000662:	b25b      	sxtb	r3, r3
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	b2db      	uxtb	r3, r3
 800066c:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg, 1);
 800066e:	f107 030f 	add.w	r3, r7, #15
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	202d      	movs	r0, #45	@ 0x2d
 8000678:	f7ff ff56 	bl	8000528 <writeRegister>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <adxlReset>:

/**
 * @brief Call to reset ADXL355
 */
static void adxlReset(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
    uint8_t shadow_reg_store[5] = {};
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	2300      	movs	r3, #0
 8000690:	753b      	strb	r3, [r7, #20]
    uint8_t shadow_reg_read[5] = {};
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	2300      	movs	r3, #0
 8000698:	733b      	strb	r3, [r7, #12]
    uint8_t reset_write = ADXL_RESET_WRITE;
 800069a:	2352      	movs	r3, #82	@ 0x52
 800069c:	71fb      	strb	r3, [r7, #7]
    //Store values from shadow registers
    readRegister(SHADOW_REG1, shadow_reg_store, 5);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	2205      	movs	r2, #5
 80006a4:	4619      	mov	r1, r3
 80006a6:	2050      	movs	r0, #80	@ 0x50
 80006a8:	f7ff ff6e 	bl	8000588 <readRegister>
    while (1) {
        //Perform a software reset
        writeRegister(ADXL_RESET, &reset_write, 1);
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	2201      	movs	r2, #1
 80006b0:	4619      	mov	r1, r3
 80006b2:	202f      	movs	r0, #47	@ 0x2f
 80006b4:	f7ff ff38 	bl	8000528 <writeRegister>
        //Read shadow registers after reset
        readRegister(SHADOW_REG1, shadow_reg_read, 5);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2205      	movs	r2, #5
 80006be:	4619      	mov	r1, r3
 80006c0:	2050      	movs	r0, #80	@ 0x50
 80006c2:	f7ff ff61 	bl	8000588 <readRegister>
        // Check if shadow registers match the stored values
        uint8_t match = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	77fb      	strb	r3, [r7, #31]
        for (int i = 0; i < 5; i++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	e011      	b.n	80006f4 <adxlReset+0x70>
            if (shadow_reg_read[i] != shadow_reg_store[i]) {
 80006d0:	f107 0208 	add.w	r2, r7, #8
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	4413      	add	r3, r2
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	f107 0110 	add.w	r1, r7, #16
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	440b      	add	r3, r1
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d002      	beq.n	80006ee <adxlReset+0x6a>
                match = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	77fb      	strb	r3, [r7, #31]
                break;
 80006ec:	e005      	b.n	80006fa <adxlReset+0x76>
        for (int i = 0; i < 5; i++) {
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	3301      	adds	r3, #1
 80006f2:	61bb      	str	r3, [r7, #24]
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	ddea      	ble.n	80006d0 <adxlReset+0x4c>
            }
        }
        // If all shadow registers match, exit the loop
        if (match) break;
 80006fa:	7ffb      	ldrb	r3, [r7, #31]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d100      	bne.n	8000702 <adxlReset+0x7e>
    while (1) {
 8000700:	e7d4      	b.n	80006ac <adxlReset+0x28>
        if (match) break;
 8000702:	bf00      	nop
    }
}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2104      	movs	r1, #4
 8000718:	482d      	ldr	r0, [pc, #180]	@ (80007d0 <ADXL_Init+0xc4>)
 800071a:	f002 fb71 	bl	8002e00 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 800071e:	2005      	movs	r0, #5
 8000720:	f001 f854 	bl	80017cc <HAL_Delay>
	//Reset device
	adxlReset();
 8000724:	f7ff ffae 	bl	8000684 <adxlReset>
	uint8_t testval[2] = {};
 8000728:	2300      	movs	r3, #0
 800072a:	81bb      	strh	r3, [r7, #12]
	// The Device Address register is constant, i.e. = 0xAD
	readRegister(DEVID_AD, testval, 2);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2202      	movs	r2, #2
 8000732:	4619      	mov	r1, r3
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff ff27 	bl	8000588 <readRegister>
	if (testval[0] != DEVID_AD_DEFAULT_VAL || testval[1] != DEVID_MST_DEFAULT_VAL) return ADXL_ERR;
 800073a:	7b3b      	ldrb	r3, [r7, #12]
 800073c:	2bad      	cmp	r3, #173	@ 0xad
 800073e:	d102      	bne.n	8000746 <ADXL_Init+0x3a>
 8000740:	7b7b      	ldrb	r3, [r7, #13]
 8000742:	2b1d      	cmp	r3, #29
 8000744:	d001      	beq.n	800074a <ADXL_Init+0x3e>
 8000746:	2301      	movs	r3, #1
 8000748:	e03d      	b.n	80007c6 <ADXL_Init+0xba>

	//Init of BW_RATE and DATAFORMAT registers
	adxlFormat(adxl);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff50 	bl	80005f0 <adxlFormat>
	
	// Settings gains 
	switch (adxl->Range) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d01e      	beq.n	8000796 <ADXL_Init+0x8a>
 8000758:	2b03      	cmp	r3, #3
 800075a:	dc28      	bgt.n	80007ae <ADXL_Init+0xa2>
 800075c:	2b01      	cmp	r3, #1
 800075e:	d002      	beq.n	8000766 <ADXL_Init+0x5a>
 8000760:	2b02      	cmp	r3, #2
 8000762:	d00c      	beq.n	800077e <ADXL_Init+0x72>
 8000764:	e023      	b.n	80007ae <ADXL_Init+0xa2>
		case ADXL_RANGE_2G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 8000766:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <ADXL_Init+0xc8>)
 8000768:	4a1b      	ldr	r2, [pc, #108]	@ (80007d8 <ADXL_Init+0xcc>)
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <ADXL_Init+0xc8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1a      	ldr	r2, [pc, #104]	@ (80007dc <ADXL_Init+0xd0>)
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <ADXL_Init+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a19      	ldr	r2, [pc, #100]	@ (80007e0 <ADXL_Init+0xd4>)
 800077a:	6013      	str	r3, [r2, #0]
			break;
 800077c:	e022      	b.n	80007c4 <ADXL_Init+0xb8>
		case ADXL_RANGE_4G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_4G;
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <ADXL_Init+0xc8>)
 8000780:	4a18      	ldr	r2, [pc, #96]	@ (80007e4 <ADXL_Init+0xd8>)
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <ADXL_Init+0xc8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a14      	ldr	r2, [pc, #80]	@ (80007dc <ADXL_Init+0xd0>)
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <ADXL_Init+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a13      	ldr	r2, [pc, #76]	@ (80007e0 <ADXL_Init+0xd4>)
 8000792:	6013      	str	r3, [r2, #0]
			break;
 8000794:	e016      	b.n	80007c4 <ADXL_Init+0xb8>
		case ADXL_RANGE_8G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_8G;
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <ADXL_Init+0xc8>)
 8000798:	4a13      	ldr	r2, [pc, #76]	@ (80007e8 <ADXL_Init+0xdc>)
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <ADXL_Init+0xc8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <ADXL_Init+0xd0>)
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <ADXL_Init+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <ADXL_Init+0xd4>)
 80007aa:	6013      	str	r3, [r2, #0]
			break;
 80007ac:	e00a      	b.n	80007c4 <ADXL_Init+0xb8>
		default:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <ADXL_Init+0xc8>)
 80007b0:	4a09      	ldr	r2, [pc, #36]	@ (80007d8 <ADXL_Init+0xcc>)
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <ADXL_Init+0xc8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <ADXL_Init+0xd0>)
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <ADXL_Init+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <ADXL_Init+0xd4>)
 80007c2:	6013      	str	r3, [r2, #0]
}
			
	return ADXL_OK;
 80007c4:	2300      	movs	r3, #0
	
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40020c00 	.word	0x40020c00
 80007d4:	20000034 	.word	0x20000034
 80007d8:	36831049 	.word	0x36831049
 80007dc:	20000030 	.word	0x20000030
 80007e0:	2000002c 	.word	0x2000002c
 80007e4:	37031494 	.word	0x37031494
 80007e8:	3783126f 	.word	0x3783126f

080007ec <ADXL_Measure>:
/** Starts Measure Mode
* @param: s = ON or OFF				

*/
void ADXL_Measure(Switch s)
		{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 80007f6:	f107 030f 	add.w	r3, r7, #15
 80007fa:	2201      	movs	r2, #1
 80007fc:	4619      	mov	r1, r3
 80007fe:	202d      	movs	r0, #45	@ 0x2d
 8000800:	f7ff fec2 	bl	8000588 <readRegister>
			switch (s) {
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <ADXL_Measure+0x24>
 800080a:	2b01      	cmp	r3, #1
 800080c:	d012      	beq.n	8000834 <ADXL_Measure+0x48>
				case OFF:
				reg &= ~(1<<3);
				writeRegister(POWER_CTL,&reg,1);
				break;				
				}
		}
 800080e:	e01e      	b.n	800084e <ADXL_Measure+0x62>
				reg &= ~(1<<2);
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	f023 0304 	bic.w	r3, r3, #4
 8000816:	b2db      	uxtb	r3, r3
 8000818:	73fb      	strb	r3, [r7, #15]
				reg |= (1<<3);
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	b2db      	uxtb	r3, r3
 8000822:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,&reg,1);
 8000824:	f107 030f 	add.w	r3, r7, #15
 8000828:	2201      	movs	r2, #1
 800082a:	4619      	mov	r1, r3
 800082c:	202d      	movs	r0, #45	@ 0x2d
 800082e:	f7ff fe7b 	bl	8000528 <writeRegister>
				break;
 8000832:	e00c      	b.n	800084e <ADXL_Measure+0x62>
				reg &= ~(1<<3);
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	f023 0308 	bic.w	r3, r3, #8
 800083a:	b2db      	uxtb	r3, r3
 800083c:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,&reg,1);
 800083e:	f107 030f 	add.w	r3, r7, #15
 8000842:	2201      	movs	r2, #1
 8000844:	4619      	mov	r1, r3
 8000846:	202d      	movs	r0, #45	@ 0x2d
 8000848:	f7ff fe6e 	bl	8000528 <writeRegister>
				break;				
 800084c:	bf00      	nop
		}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800086a:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <MX_ADC1_Init+0x98>)
 800086c:	4a21      	ldr	r2, [pc, #132]	@ (80008f4 <MX_ADC1_Init+0x9c>)
 800086e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000870:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <MX_ADC1_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000876:	4b1e      	ldr	r3, [pc, #120]	@ (80008f0 <MX_ADC1_Init+0x98>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800087c:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <MX_ADC1_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000882:	4b1b      	ldr	r3, [pc, #108]	@ (80008f0 <MX_ADC1_Init+0x98>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b19      	ldr	r3, [pc, #100]	@ (80008f0 <MX_ADC1_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000890:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <MX_ADC1_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000896:	4b16      	ldr	r3, [pc, #88]	@ (80008f0 <MX_ADC1_Init+0x98>)
 8000898:	4a17      	ldr	r2, [pc, #92]	@ (80008f8 <MX_ADC1_Init+0xa0>)
 800089a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <MX_ADC1_Init+0x98>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a2:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <MX_ADC1_Init+0x98>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_ADC1_Init+0x98>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_ADC1_Init+0x98>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b6:	480e      	ldr	r0, [pc, #56]	@ (80008f0 <MX_ADC1_Init+0x98>)
 80008b8:	f000 ffac 	bl	8001814 <HAL_ADC_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008c2:	f000 fb25 	bl	8000f10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008c6:	230a      	movs	r3, #10
 80008c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <MX_ADC1_Init+0x98>)
 80008d8:	f000 ffe0 	bl	800189c <HAL_ADC_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008e2:	f000 fb15 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000038 	.word	0x20000038
 80008f4:	40012000 	.word	0x40012000
 80008f8:	0f000001 	.word	0x0f000001

080008fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	@ 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a15      	ldr	r2, [pc, #84]	@ (8000970 <HAL_ADC_MspInit+0x74>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d123      	bne.n	8000966 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <HAL_ADC_MspInit+0x78>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000922:	4a14      	ldr	r2, [pc, #80]	@ (8000974 <HAL_ADC_MspInit+0x78>)
 8000924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000928:	6453      	str	r3, [r2, #68]	@ 0x44
 800092a:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <HAL_ADC_MspInit+0x78>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <HAL_ADC_MspInit+0x78>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a0e      	ldr	r2, [pc, #56]	@ (8000974 <HAL_ADC_MspInit+0x78>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <HAL_ADC_MspInit+0x78>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800094e:	2301      	movs	r3, #1
 8000950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000952:	2303      	movs	r3, #3
 8000954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	@ (8000978 <HAL_ADC_MspInit+0x7c>)
 8000962:	f002 f8a1 	bl	8002aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	@ 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40012000 	.word	0x40012000
 8000974:	40023800 	.word	0x40023800
 8000978:	40020800 	.word	0x40020800

0800097c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000980:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_CAN1_Init+0x64>)
 8000982:	4a18      	ldr	r2, [pc, #96]	@ (80009e4 <MX_CAN1_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000986:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <MX_CAN1_Init+0x64>)
 8000988:	2202      	movs	r2, #2
 800098a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_CAN1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000992:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <MX_CAN1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000998:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_CAN1_Init+0x64>)
 800099a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800099e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_CAN1_Init+0x64>)
 80009a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80009a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <MX_CAN1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_CAN1_Init+0x64>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <MX_CAN1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_CAN1_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <MX_CAN1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_CAN1_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_CAN1_Init+0x64>)
 80009ce:	f001 f9b5 	bl	8001d3c <HAL_CAN_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009d8:	f000 fa9a 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000080 	.word	0x20000080
 80009e4:	40006400 	.word	0x40006400

080009e8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1b      	ldr	r2, [pc, #108]	@ (8000a74 <HAL_CAN_MspInit+0x8c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d12f      	bne.n	8000a6a <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <HAL_CAN_MspInit+0x90>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8000a78 <HAL_CAN_MspInit+0x90>)
 8000a10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <HAL_CAN_MspInit+0x90>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <HAL_CAN_MspInit+0x90>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a14      	ldr	r2, [pc, #80]	@ (8000a78 <HAL_CAN_MspInit+0x90>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_CAN_MspInit+0x90>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a4a:	2309      	movs	r3, #9
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4809      	ldr	r0, [pc, #36]	@ (8000a7c <HAL_CAN_MspInit+0x94>)
 8000a56:	f002 f827 	bl	8002aa8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2014      	movs	r0, #20
 8000a60:	f001 ffeb 	bl	8002a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a64:	2014      	movs	r0, #20
 8000a66:	f002 f804 	bl	8002a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	@ 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40006400 	.word	0x40006400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020c00 	.word	0x40020c00

08000a80 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a96:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <MX_GPIO_Init+0xe8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a33      	ldr	r2, [pc, #204]	@ (8000b68 <MX_GPIO_Init+0xe8>)
 8000a9c:	f043 0310 	orr.w	r3, r3, #16
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b31      	ldr	r3, [pc, #196]	@ (8000b68 <MX_GPIO_Init+0xe8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b2e      	ldr	r3, [pc, #184]	@ (8000b68 <MX_GPIO_Init+0xe8>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8000b68 <MX_GPIO_Init+0xe8>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b2b      	ldr	r3, [pc, #172]	@ (8000b68 <MX_GPIO_Init+0xe8>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b28      	ldr	r3, [pc, #160]	@ (8000b68 <MX_GPIO_Init+0xe8>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a27      	ldr	r2, [pc, #156]	@ (8000b68 <MX_GPIO_Init+0xe8>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b25      	ldr	r3, [pc, #148]	@ (8000b68 <MX_GPIO_Init+0xe8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b22      	ldr	r3, [pc, #136]	@ (8000b68 <MX_GPIO_Init+0xe8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a21      	ldr	r2, [pc, #132]	@ (8000b68 <MX_GPIO_Init+0xe8>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <MX_GPIO_Init+0xe8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <MX_GPIO_Init+0xe8>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a1b      	ldr	r2, [pc, #108]	@ (8000b68 <MX_GPIO_Init+0xe8>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <MX_GPIO_Init+0xe8>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b14:	4815      	ldr	r0, [pc, #84]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000b16:	f002 f973 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	4814      	ldr	r0, [pc, #80]	@ (8000b70 <MX_GPIO_Init+0xf0>)
 8000b20:	f002 f96e 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b24:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480b      	ldr	r0, [pc, #44]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000b3e:	f001 ffb3 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000b42:	2304      	movs	r3, #4
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_GPIO_Init+0xf0>)
 8000b5a:	f001 ffa5 	bl	8002aa8 <HAL_GPIO_Init>

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	@ 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	00000000 	.word	0x00000000

08000b78 <HAL_TIM_IC_CaptureCallback>:
void C_transverseHeight(uint16_t transverseLength);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
//	static uint32_t encoder_position = 0;
//	static uint32_t overflow_counter = 0;
//	static uint32_t encoder_temp = 0;

    // Read the current value from the timer counter
	current_encoder_value  = __HAL_TIM_GET_COUNTER(htim);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b86:	4a22      	ldr	r2, [pc, #136]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000b88:	6013      	str	r3, [r2, #0]

    // Detect overflow: if the current value is less than the previous value,
    // it means the counter has wrapped around from 65535 back to 0.
	if (current_encoder_value < prev_encoder_value) {
 8000b8a:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b21      	ldr	r3, [pc, #132]	@ (8000c14 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d205      	bcs.n	8000ba2 <HAL_TIM_IC_CaptureCallback+0x2a>
	        extended_counter += 65536; // add one full count cycle (0x10000)
 8000b96:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c18 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000ba0:	6013      	str	r3, [r2, #0]
	}

    prev_encoder_value = current_encoder_value;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c14 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000ba8:	6013      	str	r3, [r2, #0]

//	if (current_encoder_value  >= 65531) {
//		extended_counter += 65536;
//		overflow_counter = extended_counter - 1;
//	} else {
		total_count = extended_counter + current_encoder_value;
 8000baa:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a19      	ldr	r2, [pc, #100]	@ (8000c1c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000bb6:	6013      	str	r3, [r2, #0]
//	}
	encoder_position = total_count/4;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	089b      	lsrs	r3, r3, #2
 8000bbe:	4a18      	ldr	r2, [pc, #96]	@ (8000c20 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000bc0:	6013      	str	r3, [r2, #0]
	C_drivenDistance = (float) (encoder_position/ENCODER_PULSES_PER_WHEEL_TURN_26RPM) * DRIVE_WHEEL_CIRCUMFERENCE_METER;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	ee07 3a90 	vmov	s15, r3
 8000bca:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000bce:	ed9f 5b0c 	vldr	d5, [pc, #48]	@ 8000c00 <HAL_TIM_IC_CaptureCallback+0x88>
 8000bd2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bd6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bde:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8000c08 <HAL_TIM_IC_CaptureCallback+0x90>
 8000be2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000be6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000bec:	edc3 7a00 	vstr	s15, [r3]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	f3af 8000 	nop.w
 8000c00:	00000000 	.word	0x00000000
 8000c04:	40a2a600 	.word	0x40a2a600
 8000c08:	c0ebedfa 	.word	0xc0ebedfa
 8000c0c:	3fca2339 	.word	0x3fca2339
 8000c10:	200000f8 	.word	0x200000f8
 8000c14:	20000108 	.word	0x20000108
 8000c18:	20000104 	.word	0x20000104
 8000c1c:	20000100 	.word	0x20000100
 8000c20:	200000fc 	.word	0x200000fc
 8000c24:	2000010c 	.word	0x2000010c

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2e:	f000 fd70 	bl	8001712 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c32:	f000 f885 	bl	8000d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c36:	f7ff ff23 	bl	8000a80 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000c3a:	f7ff fe9f 	bl	800097c <MX_CAN1_Init>
  MX_TIM2_Init();
 8000c3e:	f000 fa73 	bl	8001128 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000c42:	f7ff fe09 	bl	8000858 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000c46:	f000 fae5 	bl	8001214 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c4a:	f000 fb5b 	bl	8001304 <MX_TIM4_Init>
  MX_TIM9_Init();
 8000c4e:	f000 fbaf 	bl	80013b0 <MX_TIM9_Init>
  MX_SPI3_Init();
 8000c52:	f000 f963 	bl	8000f1c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_MspInit(&hcan1);
 8000c56:	4832      	ldr	r0, [pc, #200]	@ (8000d20 <main+0xf8>)
 8000c58:	f7ff fec6 	bl	80009e8 <HAL_CAN_MspInit>
  CAN_Config();
 8000c5c:	f000 f8cc 	bl	8000df8 <CAN_Config>

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000c60:	2102      	movs	r1, #2
 8000c62:	482f      	ldr	r0, [pc, #188]	@ (8000d20 <main+0xf8>)
 8000c64:	f001 fbb8 	bl	80023d8 <HAL_CAN_ActivateNotification>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <main+0x4a>
	  Error_Handler();
 8000c6e:	f000 f94f 	bl	8000f10 <Error_Handler>
  }

  ADXL.StandbyMode = ADXL_MODE_MEASUREMENT;
 8000c72:	4b2c      	ldr	r3, [pc, #176]	@ (8000d24 <main+0xfc>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
  ADXL.TempMode = ADXL_TEMP_OFF;
 8000c78:	4b2a      	ldr	r3, [pc, #168]	@ (8000d24 <main+0xfc>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	705a      	strb	r2, [r3, #1]
  ADXL.DataReadyMode = ADXL_DRDY_ON;
 8000c7e:	4b29      	ldr	r3, [pc, #164]	@ (8000d24 <main+0xfc>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	709a      	strb	r2, [r3, #2]
  ADXL.IntMode = ADXL_INT_ACTIVELOW;
 8000c84:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <main+0xfc>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	70da      	strb	r2, [r3, #3]
  ADXL.Range = ADXL_RANGE_2G;
 8000c8a:	4b26      	ldr	r3, [pc, #152]	@ (8000d24 <main+0xfc>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	711a      	strb	r2, [r3, #4]

  TxHeader.StdId = 0x101;
 8000c90:	4b25      	ldr	r3, [pc, #148]	@ (8000d28 <main+0x100>)
 8000c92:	f240 1201 	movw	r2, #257	@ 0x101
 8000c96:	601a      	str	r2, [r3, #0]
  TxHeader.DLC = 5;
 8000c98:	4b23      	ldr	r3, [pc, #140]	@ (8000d28 <main+0x100>)
 8000c9a:	2205      	movs	r2, #5
 8000c9c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000c9e:	4b22      	ldr	r3, [pc, #136]	@ (8000d28 <main+0x100>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000ca4:	4b20      	ldr	r3, [pc, #128]	@ (8000d28 <main+0x100>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000caa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <main+0x100>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0x00;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <main+0x104>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x00;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <main+0x104>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	705a      	strb	r2, [r3, #1]
//  TxData[3] = 0x00;
//  TxData[4] = 0x00;
//  TxData[5] = 0x00;


  ADXL_Init(&ADXL);
 8000cbc:	4819      	ldr	r0, [pc, #100]	@ (8000d24 <main+0xfc>)
 8000cbe:	f7ff fd25 	bl	800070c <ADXL_Init>
  ADXL_Measure(ON);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff fd92 	bl	80007ec <ADXL_Measure>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4819      	ldr	r0, [pc, #100]	@ (8000d30 <main+0x108>)
 8000ccc:	f003 fd62 	bl	8004794 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4818      	ldr	r0, [pc, #96]	@ (8000d34 <main+0x10c>)
 8000cd4:	f003 fd5e 	bl	8004794 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4817      	ldr	r0, [pc, #92]	@ (8000d38 <main+0x110>)
 8000cdc:	f003 fd5a 	bl	8004794 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	4815      	ldr	r0, [pc, #84]	@ (8000d38 <main+0x110>)
 8000ce4:	f003 fd56 	bl	8004794 <HAL_TIM_PWM_Start>

  htim2.Instance->CCR1 = SERVO_CCR_AT_CENTER;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <main+0x108>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f240 22fd 	movw	r2, #765	@ 0x2fd
 8000cf0:	635a      	str	r2, [r3, #52]	@ 0x34
  htim9.Instance->CCR1 = MARKER_SERVO_HIGH_CCR;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <main+0x110>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	22fa      	movs	r2, #250	@ 0xfa
 8000cf8:	635a      	str	r2, [r3, #52]	@ 0x34
  htim9.Instance->CCR2 = MARKER_SERVO_HIGH_CCR;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <main+0x110>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	22fa      	movs	r2, #250	@ 0xfa
 8000d00:	639a      	str	r2, [r3, #56]	@ 0x38

  State nextState = STATE_IDLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  C_transverseHeight(127);
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d06:	2101      	movs	r1, #1
 8000d08:	480c      	ldr	r0, [pc, #48]	@ (8000d3c <main+0x114>)
 8000d0a:	f002 f892 	bl	8002e32 <HAL_GPIO_TogglePin>
	  HAL_Delay(490);
 8000d0e:	f44f 70f5 	mov.w	r0, #490	@ 0x1ea
 8000d12:	f000 fd5b 	bl	80017cc <HAL_Delay>
//	 	  }

//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

//	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  HAL_Delay(10);
 8000d16:	200a      	movs	r0, #10
 8000d18:	f000 fd58 	bl	80017cc <HAL_Delay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d1c:	bf00      	nop
 8000d1e:	e7f2      	b.n	8000d06 <main+0xde>
 8000d20:	20000080 	.word	0x20000080
 8000d24:	200000ec 	.word	0x200000ec
 8000d28:	200000a8 	.word	0x200000a8
 8000d2c:	200000dc 	.word	0x200000dc
 8000d30:	20000174 	.word	0x20000174
 8000d34:	200001c0 	.word	0x200001c0
 8000d38:	20000258 	.word	0x20000258
 8000d3c:	40020400 	.word	0x40020400

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b094      	sub	sp, #80	@ 0x50
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	2234      	movs	r2, #52	@ 0x34
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f004 fe44 	bl	80059dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d64:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <SystemClock_Config+0xb0>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d68:	4a21      	ldr	r2, [pc, #132]	@ (8000df0 <SystemClock_Config+0xb0>)
 8000d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <SystemClock_Config+0xb0>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <SystemClock_Config+0xb4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d84:	4a1b      	ldr	r2, [pc, #108]	@ (8000df4 <SystemClock_Config+0xb4>)
 8000d86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <SystemClock_Config+0xb4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da0:	2310      	movs	r3, #16
 8000da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4618      	mov	r0, r3
 8000dae:	f002 f85b 	bl	8002e68 <HAL_RCC_OscConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000db8:	f000 f8aa 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd0:	f107 0308 	add.w	r3, r7, #8
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 faf4 	bl	80033c4 <HAL_RCC_ClockConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000de2:	f000 f895 	bl	8000f10 <Error_Handler>
  }
}
 8000de6:	bf00      	nop
 8000de8:	3750      	adds	r7, #80	@ 0x50
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40007000 	.word	0x40007000

08000df8 <CAN_Config>:
    TxData[3] = ((height_diff_send) >> 8) & 0xFF;
    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
}

static void CAN_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	@ 0x28
 8000dfc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 8000dfe:	230d      	movs	r3, #13
 8000e00:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e06:	2301      	movs	r3, #1
 8000e08:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000; //Only ID 0x284 and 0x285 can pass through
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480a      	ldr	r0, [pc, #40]	@ (8000e54 <CAN_Config+0x5c>)
 8000e2c:	f001 f882 	bl	8001f34 <HAL_CAN_ConfigFilter>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <CAN_Config+0x42>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000e36:	f000 f86b 	bl	8000f10 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000e3a:	4806      	ldr	r0, [pc, #24]	@ (8000e54 <CAN_Config+0x5c>)
 8000e3c:	f001 f966 	bl	800210c <HAL_CAN_Start>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <CAN_Config+0x52>
	{
		/* Start Error */
		Error_Handler();
 8000e46:	f000 f863 	bl	8000f10 <Error_Handler>
	}
}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	@ 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000080 	.word	0x20000080

08000e58 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000e60:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000e62:	4a23      	ldr	r2, [pc, #140]	@ (8000ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000e64:	2100      	movs	r1, #0
 8000e66:	4823      	ldr	r0, [pc, #140]	@ (8000ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000e68:	f001 f994 	bl	8002194 <HAL_CAN_GetRxMessage>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d005      	beq.n	8000e7e <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e72:	2180      	movs	r1, #128	@ 0x80
 8000e74:	4820      	ldr	r0, [pc, #128]	@ (8000ef8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000e76:	f001 ffdc 	bl	8002e32 <HAL_GPIO_TogglePin>
		Error_Handler();
 8000e7a:	f000 f849 	bl	8000f10 <Error_Handler>
	}

	if (RxHeader.StdId == 0x123) {
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f240 1223 	movw	r2, #291	@ 0x123
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10b      	bne.n	8000ea2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	481a      	ldr	r0, [pc, #104]	@ (8000ef8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000e8e:	f001 ffd0 	bl	8002e32 <HAL_GPIO_TogglePin>
		dis_off = RxData[0]*(-1);
 8000e92:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	425b      	negs	r3, r3
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	b25a      	sxtb	r2, r3
 8000e9c:	4b17      	ldr	r3, [pc, #92]	@ (8000efc <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000e9e:	701a      	strb	r2, [r3, #0]
		S_heightThreashold = RxData[1];
		S_wheelBase = RxData[2] | (RxData[3] << 8);
		S_startSurvey = RxData[4] & 0x01;
	}

}
 8000ea0:	e01f      	b.n	8000ee2 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
	} else if (RxHeader.StdId == 0x102) {
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000eaa:	d11a      	bne.n	8000ee2 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
		S_surveyDistanceSet = RxData[0];
 8000eac:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000eae:	781a      	ldrb	r2, [r3, #0]
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000eb2:	701a      	strb	r2, [r3, #0]
		S_heightThreashold = RxData[1];
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000eb6:	785a      	ldrb	r2, [r3, #1]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000eba:	701a      	strb	r2, [r3, #0]
		S_wheelBase = RxData[2] | (RxData[3] << 8);
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000ebe:	789b      	ldrb	r3, [r3, #2]
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000ec4:	78db      	ldrb	r3, [r3, #3]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000ed2:	801a      	strh	r2, [r3, #0]
		S_startSurvey = RxData[4] & 0x01;
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000ed6:	791b      	ldrb	r3, [r3, #4]
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000ee0:	701a      	strb	r2, [r3, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000e4 	.word	0x200000e4
 8000ef0:	200000c0 	.word	0x200000c0
 8000ef4:	20000080 	.word	0x20000080
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	200000f1 	.word	0x200000f1
 8000f00:	200000f2 	.word	0x200000f2
 8000f04:	20000000 	.word	0x20000000
 8000f08:	200000f4 	.word	0x200000f4
 8000f0c:	200000f6 	.word	0x200000f6

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <Error_Handler+0x8>

08000f1c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f22:	4a1c      	ldr	r2, [pc, #112]	@ (8000f94 <MX_SPI3_Init+0x78>)
 8000f24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f2e:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f34:	4b16      	ldr	r3, [pc, #88]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f36:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f3a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f42:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f4e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f52:	2210      	movs	r2, #16
 8000f54:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f68:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f6a:	2207      	movs	r2, #7
 8000f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f76:	2208      	movs	r2, #8
 8000f78:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f7c:	f002 fbd4 	bl	8003728 <HAL_SPI_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f86:	f7ff ffc3 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000110 	.word	0x20000110
 8000f94:	40003c00 	.word	0x40003c00

08000f98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a17      	ldr	r2, [pc, #92]	@ (8001014 <HAL_SPI_MspInit+0x7c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d128      	bne.n	800100c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	4a16      	ldr	r2, [pc, #88]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc6:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000fea:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	4805      	ldr	r0, [pc, #20]	@ (800101c <HAL_SPI_MspInit+0x84>)
 8001008:	f001 fd4e 	bl	8002aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	@ 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40003c00 	.word	0x40003c00
 8001018:	40023800 	.word	0x40023800
 800101c:	40020800 	.word	0x40020800

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <HAL_MspInit+0x44>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <HAL_MspInit+0x44>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001030:	6413      	str	r3, [r2, #64]	@ 0x40
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <HAL_MspInit+0x44>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_MspInit+0x44>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <HAL_MspInit+0x44>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001048:	6453      	str	r3, [r2, #68]	@ 0x44
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_MspInit+0x44>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <NMI_Handler+0x4>

08001070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <MemManage_Handler+0x4>

08001080 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <UsageFault_Handler+0x4>

08001090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010be:	f000 fb65 	bl	800178c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010cc:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <CAN1_RX0_IRQHandler+0x10>)
 80010ce:	f001 f9a9 	bl	8002424 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000080 	.word	0x20000080

080010dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010e0:	4802      	ldr	r0, [pc, #8]	@ (80010ec <TIM2_IRQHandler+0x10>)
 80010e2:	f003 fcf7 	bl	8004ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000174 	.word	0x20000174

080010f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010f4:	4802      	ldr	r0, [pc, #8]	@ (8001100 <TIM4_IRQHandler+0x10>)
 80010f6:	f003 fced 	bl	8004ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000020c 	.word	0x2000020c

08001104 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <SystemInit+0x20>)
 800110a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800110e:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <SystemInit+0x20>)
 8001110:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08e      	sub	sp, #56	@ 0x38
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
 8001156:	615a      	str	r2, [r3, #20]
 8001158:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800115a:	4b2d      	ldr	r3, [pc, #180]	@ (8001210 <MX_TIM2_Init+0xe8>)
 800115c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001160:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001162:	4b2b      	ldr	r3, [pc, #172]	@ (8001210 <MX_TIM2_Init+0xe8>)
 8001164:	221f      	movs	r2, #31
 8001166:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <MX_TIM2_Init+0xe8>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800116e:	4b28      	ldr	r3, [pc, #160]	@ (8001210 <MX_TIM2_Init+0xe8>)
 8001170:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001174:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b26      	ldr	r3, [pc, #152]	@ (8001210 <MX_TIM2_Init+0xe8>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <MX_TIM2_Init+0xe8>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001182:	4823      	ldr	r0, [pc, #140]	@ (8001210 <MX_TIM2_Init+0xe8>)
 8001184:	f003 fa4e 	bl	8004624 <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800118e:	f7ff febf 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001192:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001196:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001198:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800119c:	4619      	mov	r1, r3
 800119e:	481c      	ldr	r0, [pc, #112]	@ (8001210 <MX_TIM2_Init+0xe8>)
 80011a0:	f003 feb4 	bl	8004f0c <HAL_TIM_ConfigClockSource>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011aa:	f7ff feb1 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011ae:	4818      	ldr	r0, [pc, #96]	@ (8001210 <MX_TIM2_Init+0xe8>)
 80011b0:	f003 fa8f 	bl	80046d2 <HAL_TIM_PWM_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011ba:	f7ff fea9 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	4810      	ldr	r0, [pc, #64]	@ (8001210 <MX_TIM2_Init+0xe8>)
 80011ce:	f004 fb59 	bl	8005884 <HAL_TIMEx_MasterConfigSynchronization>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011d8:	f7ff fe9a 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011dc:	2360      	movs	r3, #96	@ 0x60
 80011de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	4619      	mov	r1, r3
 80011f2:	4807      	ldr	r0, [pc, #28]	@ (8001210 <MX_TIM2_Init+0xe8>)
 80011f4:	f003 fd76 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80011fe:	f7ff fe87 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001202:	4803      	ldr	r0, [pc, #12]	@ (8001210 <MX_TIM2_Init+0xe8>)
 8001204:	f000 f9da 	bl	80015bc <HAL_TIM_MspPostInit>

}
 8001208:	bf00      	nop
 800120a:	3738      	adds	r7, #56	@ 0x38
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000174 	.word	0x20000174

08001214 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08e      	sub	sp, #56	@ 0x38
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001246:	4b2d      	ldr	r3, [pc, #180]	@ (80012fc <MX_TIM3_Init+0xe8>)
 8001248:	4a2d      	ldr	r2, [pc, #180]	@ (8001300 <MX_TIM3_Init+0xec>)
 800124a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 800124c:	4b2b      	ldr	r3, [pc, #172]	@ (80012fc <MX_TIM3_Init+0xe8>)
 800124e:	2207      	movs	r2, #7
 8001250:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <MX_TIM3_Init+0xe8>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001258:	4b28      	ldr	r3, [pc, #160]	@ (80012fc <MX_TIM3_Init+0xe8>)
 800125a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800125e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <MX_TIM3_Init+0xe8>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <MX_TIM3_Init+0xe8>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800126c:	4823      	ldr	r0, [pc, #140]	@ (80012fc <MX_TIM3_Init+0xe8>)
 800126e:	f003 f9d9 	bl	8004624 <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001278:	f7ff fe4a 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001280:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001282:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001286:	4619      	mov	r1, r3
 8001288:	481c      	ldr	r0, [pc, #112]	@ (80012fc <MX_TIM3_Init+0xe8>)
 800128a:	f003 fe3f 	bl	8004f0c <HAL_TIM_ConfigClockSource>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001294:	f7ff fe3c 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001298:	4818      	ldr	r0, [pc, #96]	@ (80012fc <MX_TIM3_Init+0xe8>)
 800129a:	f003 fa1a 	bl	80046d2 <HAL_TIM_PWM_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80012a4:	f7ff fe34 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	4811      	ldr	r0, [pc, #68]	@ (80012fc <MX_TIM3_Init+0xe8>)
 80012b8:	f004 fae4 	bl	8005884 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012c2:	f7ff fe25 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c6:	2360      	movs	r3, #96	@ 0x60
 80012c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	2200      	movs	r2, #0
 80012da:	4619      	mov	r1, r3
 80012dc:	4807      	ldr	r0, [pc, #28]	@ (80012fc <MX_TIM3_Init+0xe8>)
 80012de:	f003 fd01 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80012e8:	f7ff fe12 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012ec:	4803      	ldr	r0, [pc, #12]	@ (80012fc <MX_TIM3_Init+0xe8>)
 80012ee:	f000 f965 	bl	80015bc <HAL_TIM_MspPostInit>

}
 80012f2:	bf00      	nop
 80012f4:	3738      	adds	r7, #56	@ 0x38
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001c0 	.word	0x200001c0
 8001300:	40000400 	.word	0x40000400

08001304 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	@ 0x30
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	2224      	movs	r2, #36	@ 0x24
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f004 fb62 	bl	80059dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	463b      	mov	r3, r7
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001322:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 8001324:	4a21      	ldr	r2, [pc, #132]	@ (80013ac <MX_TIM4_Init+0xa8>)
 8001326:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001328:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001334:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 8001336:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800133a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001348:	2303      	movs	r3, #3
 800134a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001350:	2301      	movs	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001360:	2301      	movs	r3, #1
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4619      	mov	r1, r3
 8001372:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 8001374:	f003 fb08 	bl	8004988 <HAL_TIM_Encoder_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800137e:	f7ff fdc7 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <MX_TIM4_Init+0xa4>)
 8001390:	f004 fa78 	bl	8005884 <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800139a:	f7ff fdb9 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	3730      	adds	r7, #48	@ 0x30
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000020c 	.word	0x2000020c
 80013ac:	40000800 	.word	0x40000800

080013b0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	@ 0x30
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80013d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001484 <MX_TIM9_Init+0xd4>)
 80013d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001488 <MX_TIM9_Init+0xd8>)
 80013da:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 32-1;
 80013dc:	4b29      	ldr	r3, [pc, #164]	@ (8001484 <MX_TIM9_Init+0xd4>)
 80013de:	221f      	movs	r2, #31
 80013e0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b28      	ldr	r3, [pc, #160]	@ (8001484 <MX_TIM9_Init+0xd4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 80013e8:	4b26      	ldr	r3, [pc, #152]	@ (8001484 <MX_TIM9_Init+0xd4>)
 80013ea:	f242 720f 	movw	r2, #9999	@ 0x270f
 80013ee:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <MX_TIM9_Init+0xd4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f6:	4b23      	ldr	r3, [pc, #140]	@ (8001484 <MX_TIM9_Init+0xd4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80013fc:	4821      	ldr	r0, [pc, #132]	@ (8001484 <MX_TIM9_Init+0xd4>)
 80013fe:	f003 f911 	bl	8004624 <HAL_TIM_Base_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001408:	f7ff fd82 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001410:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001412:	f107 0320 	add.w	r3, r7, #32
 8001416:	4619      	mov	r1, r3
 8001418:	481a      	ldr	r0, [pc, #104]	@ (8001484 <MX_TIM9_Init+0xd4>)
 800141a:	f003 fd77 	bl	8004f0c <HAL_TIM_ConfigClockSource>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001424:	f7ff fd74 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001428:	4816      	ldr	r0, [pc, #88]	@ (8001484 <MX_TIM9_Init+0xd4>)
 800142a:	f003 f952 	bl	80046d2 <HAL_TIM_PWM_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001434:	f7ff fd6c 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001438:	2360      	movs	r3, #96	@ 0x60
 800143a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2200      	movs	r2, #0
 800144c:	4619      	mov	r1, r3
 800144e:	480d      	ldr	r0, [pc, #52]	@ (8001484 <MX_TIM9_Init+0xd4>)
 8001450:	f003 fc48 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800145a:	f7ff fd59 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2204      	movs	r2, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4807      	ldr	r0, [pc, #28]	@ (8001484 <MX_TIM9_Init+0xd4>)
 8001466:	f003 fc3d 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8001470:	f7ff fd4e 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001474:	4803      	ldr	r0, [pc, #12]	@ (8001484 <MX_TIM9_Init+0xd4>)
 8001476:	f000 f8a1 	bl	80015bc <HAL_TIM_MspPostInit>

}
 800147a:	bf00      	nop
 800147c:	3730      	adds	r7, #48	@ 0x30
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000258 	.word	0x20000258
 8001488:	40014000 	.word	0x40014000

0800148c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800149c:	d114      	bne.n	80014c8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800149e:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <HAL_TIM_Base_MspInit+0x8c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001518 <HAL_TIM_Base_MspInit+0x8c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <HAL_TIM_Base_MspInit+0x8c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	201c      	movs	r0, #28
 80014bc:	f001 fabd 	bl	8002a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014c0:	201c      	movs	r0, #28
 80014c2:	f001 fad6 	bl	8002a72 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80014c6:	e022      	b.n	800150e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a13      	ldr	r2, [pc, #76]	@ (800151c <HAL_TIM_Base_MspInit+0x90>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10c      	bne.n	80014ec <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <HAL_TIM_Base_MspInit+0x8c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	4a10      	ldr	r2, [pc, #64]	@ (8001518 <HAL_TIM_Base_MspInit+0x8c>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <HAL_TIM_Base_MspInit+0x8c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
}
 80014ea:	e010      	b.n	800150e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM9)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001520 <HAL_TIM_Base_MspInit+0x94>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d10b      	bne.n	800150e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80014f6:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <HAL_TIM_Base_MspInit+0x8c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	4a07      	ldr	r2, [pc, #28]	@ (8001518 <HAL_TIM_Base_MspInit+0x8c>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001500:	6453      	str	r3, [r2, #68]	@ 0x44
 8001502:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <HAL_TIM_Base_MspInit+0x8c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40000400 	.word	0x40000400
 8001520:	40014000 	.word	0x40014000

08001524 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	@ 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1b      	ldr	r2, [pc, #108]	@ (80015b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d130      	bne.n	80015a8 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001546:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	4a1a      	ldr	r2, [pc, #104]	@ (80015b4 <HAL_TIM_Encoder_MspInit+0x90>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6413      	str	r3, [r2, #64]	@ 0x40
 8001552:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800155e:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a14      	ldr	r2, [pc, #80]	@ (80015b4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <HAL_TIM_Encoder_MspInit+0x90>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001576:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001588:	2302      	movs	r3, #2
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4809      	ldr	r0, [pc, #36]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001594:	f001 fa88 	bl	8002aa8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	201e      	movs	r0, #30
 800159e:	f001 fa4c 	bl	8002a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015a2:	201e      	movs	r0, #30
 80015a4:	f001 fa65 	bl	8002a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	@ 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40000800 	.word	0x40000800
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020c00 	.word	0x40020c00

080015bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	@ 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015dc:	d11c      	bne.n	8001618 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b32      	ldr	r3, [pc, #200]	@ (80016a8 <HAL_TIM_MspPostInit+0xec>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a31      	ldr	r2, [pc, #196]	@ (80016a8 <HAL_TIM_MspPostInit+0xec>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b2f      	ldr	r3, [pc, #188]	@ (80016a8 <HAL_TIM_MspPostInit+0xec>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015f6:	2301      	movs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001606:	2301      	movs	r3, #1
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4826      	ldr	r0, [pc, #152]	@ (80016ac <HAL_TIM_MspPostInit+0xf0>)
 8001612:	f001 fa49 	bl	8002aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001616:	e042      	b.n	800169e <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM3)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a24      	ldr	r2, [pc, #144]	@ (80016b0 <HAL_TIM_MspPostInit+0xf4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d11c      	bne.n	800165c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	4b21      	ldr	r3, [pc, #132]	@ (80016a8 <HAL_TIM_MspPostInit+0xec>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a20      	ldr	r2, [pc, #128]	@ (80016a8 <HAL_TIM_MspPostInit+0xec>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <HAL_TIM_MspPostInit+0xec>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800163a:	2340      	movs	r3, #64	@ 0x40
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001646:	2302      	movs	r3, #2
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800164a:	2302      	movs	r3, #2
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4817      	ldr	r0, [pc, #92]	@ (80016b4 <HAL_TIM_MspPostInit+0xf8>)
 8001656:	f001 fa27 	bl	8002aa8 <HAL_GPIO_Init>
}
 800165a:	e020      	b.n	800169e <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM9)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a15      	ldr	r2, [pc, #84]	@ (80016b8 <HAL_TIM_MspPostInit+0xfc>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d11b      	bne.n	800169e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001666:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <HAL_TIM_MspPostInit+0xec>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a0f      	ldr	r2, [pc, #60]	@ (80016a8 <HAL_TIM_MspPostInit+0xec>)
 800166c:	f043 0310 	orr.w	r3, r3, #16
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b0d      	ldr	r3, [pc, #52]	@ (80016a8 <HAL_TIM_MspPostInit+0xec>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800167e:	2360      	movs	r3, #96	@ 0x60
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800168e:	2303      	movs	r3, #3
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4808      	ldr	r0, [pc, #32]	@ (80016bc <HAL_TIM_MspPostInit+0x100>)
 800169a:	f001 fa05 	bl	8002aa8 <HAL_GPIO_Init>
}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	@ 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40000400 	.word	0x40000400
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40014000 	.word	0x40014000
 80016bc:	40021000 	.word	0x40021000

080016c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016c4:	f7ff fd1e 	bl	8001104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c8:	480c      	ldr	r0, [pc, #48]	@ (80016fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ca:	490d      	ldr	r1, [pc, #52]	@ (8001700 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001704 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016e0:	4c0a      	ldr	r4, [pc, #40]	@ (800170c <LoopFillZerobss+0x22>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016ee:	f004 f97d 	bl	80059ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f2:	f7ff fa99 	bl	8000c28 <main>
  bx  lr    
 80016f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001700:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001704:	08005a6c 	.word	0x08005a6c
  ldr r2, =_sbss
 8001708:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800170c:	200002a8 	.word	0x200002a8

08001710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001710:	e7fe      	b.n	8001710 <ADC_IRQHandler>

08001712 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001716:	2003      	movs	r0, #3
 8001718:	f001 f984 	bl	8002a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171c:	200f      	movs	r0, #15
 800171e:	f000 f805 	bl	800172c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001722:	f7ff fc7d 	bl	8001020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001734:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <HAL_InitTick+0x54>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_InitTick+0x58>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f001 f99f 	bl	8002a8e <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00e      	b.n	8001778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d80a      	bhi.n	8001776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001760:	2200      	movs	r2, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f001 f967 	bl	8002a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800176c:	4a06      	ldr	r2, [pc, #24]	@ (8001788 <HAL_InitTick+0x5c>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000004 	.word	0x20000004
 8001784:	2000000c 	.word	0x2000000c
 8001788:	20000008 	.word	0x20000008

0800178c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_IncTick+0x20>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <HAL_IncTick+0x24>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <HAL_IncTick+0x24>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	2000000c 	.word	0x2000000c
 80017b0:	200002a4 	.word	0x200002a4

080017b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b03      	ldr	r3, [pc, #12]	@ (80017c8 <HAL_GetTick+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	200002a4 	.word	0x200002a4

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff ffee 	bl	80017b4 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d005      	beq.n	80017f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <HAL_Delay+0x44>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f2:	bf00      	nop
 80017f4:	f7ff ffde 	bl	80017b4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8f7      	bhi.n	80017f4 <HAL_Delay+0x28>
  {
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000000c 	.word	0x2000000c

08001814 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e031      	b.n	800188e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff f862 	bl	80008fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	d116      	bne.n	8001880 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <HAL_ADC_Init+0x84>)
 8001858:	4013      	ands	r3, r2
 800185a:	f043 0202 	orr.w	r2, r3, #2
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f970 	bl	8001b48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f023 0303 	bic.w	r3, r3, #3
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	@ 0x40
 800187e:	e001      	b.n	8001884 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	ffffeefd 	.word	0xffffeefd

0800189c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x1c>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e136      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x28a>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b09      	cmp	r3, #9
 80018c6:	d93a      	bls.n	800193e <HAL_ADC_ConfigChannel+0xa2>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018d0:	d035      	beq.n	800193e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68d9      	ldr	r1, [r3, #12]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	3b1e      	subs	r3, #30
 80018e8:	2207      	movs	r2, #7
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	400a      	ands	r2, r1
 80018f6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a8d      	ldr	r2, [pc, #564]	@ (8001b34 <HAL_ADC_ConfigChannel+0x298>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d10a      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68d9      	ldr	r1, [r3, #12]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	061a      	lsls	r2, r3, #24
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001916:	e035      	b.n	8001984 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68d9      	ldr	r1, [r3, #12]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	b29b      	uxth	r3, r3
 8001928:	4618      	mov	r0, r3
 800192a:	4603      	mov	r3, r0
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4403      	add	r3, r0
 8001930:	3b1e      	subs	r3, #30
 8001932:	409a      	lsls	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800193c:	e022      	b.n	8001984 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6919      	ldr	r1, [r3, #16]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	2207      	movs	r2, #7
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43da      	mvns	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	400a      	ands	r2, r1
 8001960:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6919      	ldr	r1, [r3, #16]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	b29b      	uxth	r3, r3
 8001972:	4618      	mov	r0, r3
 8001974:	4603      	mov	r3, r0
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4403      	add	r3, r0
 800197a:	409a      	lsls	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b06      	cmp	r3, #6
 800198a:	d824      	bhi.n	80019d6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	3b05      	subs	r3, #5
 800199e:	221f      	movs	r2, #31
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43da      	mvns	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	400a      	ands	r2, r1
 80019ac:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	3b05      	subs	r3, #5
 80019c8:	fa00 f203 	lsl.w	r2, r0, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80019d4:	e04c      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	d824      	bhi.n	8001a28 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	3b23      	subs	r3, #35	@ 0x23
 80019f0:	221f      	movs	r2, #31
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	400a      	ands	r2, r1
 80019fe:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	3b23      	subs	r3, #35	@ 0x23
 8001a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a26:	e023      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	3b41      	subs	r3, #65	@ 0x41
 8001a3a:	221f      	movs	r2, #31
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43da      	mvns	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	400a      	ands	r2, r1
 8001a48:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	3b41      	subs	r3, #65	@ 0x41
 8001a64:	fa00 f203 	lsl.w	r2, r0, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a30      	ldr	r2, [pc, #192]	@ (8001b38 <HAL_ADC_ConfigChannel+0x29c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10a      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x1f4>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a82:	d105      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a84:	4b2d      	ldr	r3, [pc, #180]	@ (8001b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	4a2c      	ldr	r2, [pc, #176]	@ (8001b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001a8a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a8e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a28      	ldr	r2, [pc, #160]	@ (8001b38 <HAL_ADC_ConfigChannel+0x29c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10f      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x21e>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b12      	cmp	r3, #18
 8001aa0:	d10b      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001aa2:	4b26      	ldr	r3, [pc, #152]	@ (8001b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4a25      	ldr	r2, [pc, #148]	@ (8001b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001aa8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001aac:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001aae:	4b23      	ldr	r3, [pc, #140]	@ (8001b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4a22      	ldr	r2, [pc, #136]	@ (8001b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ab4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ab8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a1e      	ldr	r2, [pc, #120]	@ (8001b38 <HAL_ADC_ConfigChannel+0x29c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d12b      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x280>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8001b34 <HAL_ADC_ConfigChannel+0x298>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d003      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0x23a>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b11      	cmp	r3, #17
 8001ad4:	d122      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001ad6:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4a18      	ldr	r2, [pc, #96]	@ (8001b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001adc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001ae0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001ae2:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4a15      	ldr	r2, [pc, #84]	@ (8001b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ae8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001aec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a10      	ldr	r2, [pc, #64]	@ (8001b34 <HAL_ADC_ConfigChannel+0x298>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d111      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001af8:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <HAL_ADC_ConfigChannel+0x2a4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a11      	ldr	r2, [pc, #68]	@ (8001b44 <HAL_ADC_ConfigChannel+0x2a8>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0c9a      	lsrs	r2, r3, #18
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b0e:	e002      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f9      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	10000012 	.word	0x10000012
 8001b38:	40012000 	.word	0x40012000
 8001b3c:	40012300 	.word	0x40012300
 8001b40:	20000004 	.word	0x20000004
 8001b44:	431bde83 	.word	0x431bde83

08001b48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001b50:	4b78      	ldr	r3, [pc, #480]	@ (8001d34 <ADC_Init+0x1ec>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a77      	ldr	r2, [pc, #476]	@ (8001d34 <ADC_Init+0x1ec>)
 8001b56:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001b5a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001b5c:	4b75      	ldr	r3, [pc, #468]	@ (8001d34 <ADC_Init+0x1ec>)
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4973      	ldr	r1, [pc, #460]	@ (8001d34 <ADC_Init+0x1ec>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6859      	ldr	r1, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	021a      	lsls	r2, r3, #8
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6899      	ldr	r1, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd6:	4a58      	ldr	r2, [pc, #352]	@ (8001d38 <ADC_Init+0x1f0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d022      	beq.n	8001c22 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6899      	ldr	r1, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6899      	ldr	r1, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	e00f      	b.n	8001c42 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0202 	bic.w	r2, r2, #2
 8001c50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6899      	ldr	r1, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	005a      	lsls	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01b      	beq.n	8001ca8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6859      	ldr	r1, [r3, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	035a      	lsls	r2, r3, #13
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	e007      	b.n	8001cb8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	051a      	lsls	r2, r3, #20
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6899      	ldr	r1, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cfa:	025a      	lsls	r2, r3, #9
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6899      	ldr	r1, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	029a      	lsls	r2, r3, #10
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	609a      	str	r2, [r3, #8]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	40012300 	.word	0x40012300
 8001d38:	0f000001 	.word	0x0f000001

08001d3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e0ed      	b.n	8001f2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7fe fe44 	bl	80009e8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d70:	f7ff fd20 	bl	80017b4 <HAL_GetTick>
 8001d74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d76:	e012      	b.n	8001d9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d78:	f7ff fd1c 	bl	80017b4 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b0a      	cmp	r3, #10
 8001d84:	d90b      	bls.n	8001d9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2205      	movs	r2, #5
 8001d96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0c5      	b.n	8001f2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0e5      	beq.n	8001d78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0202 	bic.w	r2, r2, #2
 8001dba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dbc:	f7ff fcfa 	bl	80017b4 <HAL_GetTick>
 8001dc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dc2:	e012      	b.n	8001dea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dc4:	f7ff fcf6 	bl	80017b4 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b0a      	cmp	r3, #10
 8001dd0:	d90b      	bls.n	8001dea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2205      	movs	r2, #5
 8001de2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e09f      	b.n	8001f2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e5      	bne.n	8001dc4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	7e1b      	ldrb	r3, [r3, #24]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d108      	bne.n	8001e12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	e007      	b.n	8001e22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7e5b      	ldrb	r3, [r3, #25]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d108      	bne.n	8001e3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e007      	b.n	8001e4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7e9b      	ldrb	r3, [r3, #26]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d108      	bne.n	8001e66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0220 	orr.w	r2, r2, #32
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e007      	b.n	8001e76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0220 	bic.w	r2, r2, #32
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7edb      	ldrb	r3, [r3, #27]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d108      	bne.n	8001e90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0210 	bic.w	r2, r2, #16
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	e007      	b.n	8001ea0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0210 	orr.w	r2, r2, #16
 8001e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7f1b      	ldrb	r3, [r3, #28]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d108      	bne.n	8001eba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0208 	orr.w	r2, r2, #8
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e007      	b.n	8001eca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0208 	bic.w	r2, r2, #8
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7f5b      	ldrb	r3, [r3, #29]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d108      	bne.n	8001ee4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0204 	orr.w	r2, r2, #4
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e007      	b.n	8001ef4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0204 	bic.w	r2, r2, #4
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	ea42 0103 	orr.w	r1, r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	1e5a      	subs	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f4a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d003      	beq.n	8001f5a <HAL_CAN_ConfigFilter+0x26>
 8001f52:	7cfb      	ldrb	r3, [r7, #19]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	f040 80c7 	bne.w	80020e8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a69      	ldr	r2, [pc, #420]	@ (8002104 <HAL_CAN_ConfigFilter+0x1d0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d001      	beq.n	8001f68 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001f64:	4b68      	ldr	r3, [pc, #416]	@ (8002108 <HAL_CAN_ConfigFilter+0x1d4>)
 8001f66:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f6e:	f043 0201 	orr.w	r2, r3, #1
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	4a63      	ldr	r2, [pc, #396]	@ (8002108 <HAL_CAN_ConfigFilter+0x1d4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d111      	bne.n	8001fa4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f86:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	2201      	movs	r2, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d123      	bne.n	8002016 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	401a      	ands	r2, r3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ff0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	3248      	adds	r2, #72	@ 0x48
 8001ff6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800200a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800200c:	6979      	ldr	r1, [r7, #20]
 800200e:	3348      	adds	r3, #72	@ 0x48
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d122      	bne.n	8002064 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	431a      	orrs	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800203e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3248      	adds	r2, #72	@ 0x48
 8002044:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002058:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800205a:	6979      	ldr	r1, [r7, #20]
 800205c:	3348      	adds	r3, #72	@ 0x48
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d109      	bne.n	8002080 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43db      	mvns	r3, r3
 8002076:	401a      	ands	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800207e:	e007      	b.n	8002090 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	431a      	orrs	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d109      	bne.n	80020ac <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80020aa:	e007      	b.n	80020bc <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d107      	bne.n	80020d4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	431a      	orrs	r2, r3
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020da:	f023 0201 	bic.w	r2, r3, #1
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e006      	b.n	80020f6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
  }
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40003400 	.word	0x40003400
 8002108:	40006400 	.word	0x40006400

0800210c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b01      	cmp	r3, #1
 800211e:	d12e      	bne.n	800217e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002138:	f7ff fb3c 	bl	80017b4 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800213e:	e012      	b.n	8002166 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002140:	f7ff fb38 	bl	80017b4 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b0a      	cmp	r3, #10
 800214c:	d90b      	bls.n	8002166 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2205      	movs	r2, #5
 800215e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e012      	b.n	800218c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1e5      	bne.n	8002140 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	e006      	b.n	800218c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
  }
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d003      	beq.n	80021b8 <HAL_CAN_GetRxMessage+0x24>
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	f040 8103 	bne.w	80023be <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10e      	bne.n	80021dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d116      	bne.n	80021fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0f7      	b.n	80023cc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d107      	bne.n	80021fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0e8      	b.n	80023cc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	331b      	adds	r3, #27
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	4413      	add	r3, r2
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0204 	and.w	r2, r3, #4
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10c      	bne.n	8002232 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	331b      	adds	r3, #27
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	4413      	add	r3, r2
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	0d5b      	lsrs	r3, r3, #21
 8002228:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	e00b      	b.n	800224a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	331b      	adds	r3, #27
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	4413      	add	r3, r2
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	08db      	lsrs	r3, r3, #3
 8002242:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	331b      	adds	r3, #27
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	4413      	add	r3, r2
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0202 	and.w	r2, r3, #2
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	331b      	adds	r3, #27
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	4413      	add	r3, r2
 800226c:	3304      	adds	r3, #4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2208      	movs	r2, #8
 800227c:	611a      	str	r2, [r3, #16]
 800227e:	e00b      	b.n	8002298 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	331b      	adds	r3, #27
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	4413      	add	r3, r2
 800228c:	3304      	adds	r3, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 020f 	and.w	r2, r3, #15
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	331b      	adds	r3, #27
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	4413      	add	r3, r2
 80022a4:	3304      	adds	r3, #4
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	331b      	adds	r3, #27
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	0c1b      	lsrs	r3, r3, #16
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	0a1a      	lsrs	r2, r3, #8
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	4413      	add	r3, r2
 8002302:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0c1a      	lsrs	r2, r3, #16
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	3302      	adds	r3, #2
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	4413      	add	r3, r2
 800231c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	0e1a      	lsrs	r2, r3, #24
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	3303      	adds	r3, #3
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	4413      	add	r3, r2
 8002336:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	3304      	adds	r3, #4
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	4413      	add	r3, r2
 800234e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0a1a      	lsrs	r2, r3, #8
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	3305      	adds	r3, #5
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	4413      	add	r3, r2
 8002368:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	0c1a      	lsrs	r2, r3, #16
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	3306      	adds	r3, #6
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	4413      	add	r3, r2
 8002382:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0e1a      	lsrs	r2, r3, #24
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	3307      	adds	r3, #7
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d108      	bne.n	80023aa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0220 	orr.w	r2, r2, #32
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	e007      	b.n	80023ba <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0220 	orr.w	r2, r2, #32
 80023b8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e006      	b.n	80023cc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
  }
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	371c      	adds	r7, #28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d002      	beq.n	80023f6 <HAL_CAN_ActivateNotification+0x1e>
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d109      	bne.n	800240a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6959      	ldr	r1, [r3, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e006      	b.n	8002418 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
  }
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	@ 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800242c:	2300      	movs	r3, #0
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d07c      	beq.n	8002564 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d023      	beq.n	80024bc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2201      	movs	r2, #1
 800247a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f983 	bl	8002792 <HAL_CAN_TxMailbox0CompleteCallback>
 800248c:	e016      	b.n	80024bc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a0:	e00c      	b.n	80024bc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b4:	e002      	b.n	80024bc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f989 	bl	80027ce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d024      	beq.n	8002510 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f963 	bl	80027a6 <HAL_CAN_TxMailbox1CompleteCallback>
 80024e0:	e016      	b.n	8002510 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f4:	e00c      	b.n	8002510 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002506:	627b      	str	r3, [r7, #36]	@ 0x24
 8002508:	e002      	b.n	8002510 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f969 	bl	80027e2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d024      	beq.n	8002564 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002522:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f943 	bl	80027ba <HAL_CAN_TxMailbox2CompleteCallback>
 8002534:	e016      	b.n	8002564 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d004      	beq.n	800254a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
 8002548:	e00c      	b.n	8002564 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24
 800255c:	e002      	b.n	8002564 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f949 	bl	80027f6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00c      	beq.n	8002588 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2210      	movs	r2, #16
 8002586:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d006      	beq.n	80025aa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2208      	movs	r2, #8
 80025a2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f930 	bl	800280a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d009      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe fc48 	bl	8000e58 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00c      	beq.n	80025ec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2210      	movs	r2, #16
 80025ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d006      	beq.n	800260e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2208      	movs	r2, #8
 8002606:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f912 	bl	8002832 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	d009      	beq.n	800262c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f8f9 	bl	800281e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00b      	beq.n	800264e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	d006      	beq.n	800264e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2210      	movs	r2, #16
 8002646:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f8fc 	bl	8002846 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00b      	beq.n	8002670 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d006      	beq.n	8002670 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2208      	movs	r2, #8
 8002668:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f8f5 	bl	800285a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d07b      	beq.n	8002772 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d072      	beq.n	800276a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	f043 0302 	orr.w	r3, r3, #2
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d043      	beq.n	800276a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d03e      	beq.n	800276a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026f2:	2b60      	cmp	r3, #96	@ 0x60
 80026f4:	d02b      	beq.n	800274e <HAL_CAN_IRQHandler+0x32a>
 80026f6:	2b60      	cmp	r3, #96	@ 0x60
 80026f8:	d82e      	bhi.n	8002758 <HAL_CAN_IRQHandler+0x334>
 80026fa:	2b50      	cmp	r3, #80	@ 0x50
 80026fc:	d022      	beq.n	8002744 <HAL_CAN_IRQHandler+0x320>
 80026fe:	2b50      	cmp	r3, #80	@ 0x50
 8002700:	d82a      	bhi.n	8002758 <HAL_CAN_IRQHandler+0x334>
 8002702:	2b40      	cmp	r3, #64	@ 0x40
 8002704:	d019      	beq.n	800273a <HAL_CAN_IRQHandler+0x316>
 8002706:	2b40      	cmp	r3, #64	@ 0x40
 8002708:	d826      	bhi.n	8002758 <HAL_CAN_IRQHandler+0x334>
 800270a:	2b30      	cmp	r3, #48	@ 0x30
 800270c:	d010      	beq.n	8002730 <HAL_CAN_IRQHandler+0x30c>
 800270e:	2b30      	cmp	r3, #48	@ 0x30
 8002710:	d822      	bhi.n	8002758 <HAL_CAN_IRQHandler+0x334>
 8002712:	2b10      	cmp	r3, #16
 8002714:	d002      	beq.n	800271c <HAL_CAN_IRQHandler+0x2f8>
 8002716:	2b20      	cmp	r3, #32
 8002718:	d005      	beq.n	8002726 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800271a:	e01d      	b.n	8002758 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	f043 0308 	orr.w	r3, r3, #8
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002724:	e019      	b.n	800275a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	f043 0310 	orr.w	r3, r3, #16
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800272e:	e014      	b.n	800275a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002732:	f043 0320 	orr.w	r3, r3, #32
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002738:	e00f      	b.n	800275a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002742:	e00a      	b.n	800275a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800274c:	e005      	b.n	800275a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002756:	e000      	b.n	800275a <HAL_CAN_IRQHandler+0x336>
            break;
 8002758:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699a      	ldr	r2, [r3, #24]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002768:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2204      	movs	r2, #4
 8002770:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f872 	bl	800286e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800278a:	bf00      	nop
 800278c:	3728      	adds	r7, #40	@ 0x28
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002894:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <__NVIC_SetPriorityGrouping+0x40>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028a0:	4013      	ands	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028ac:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <__NVIC_SetPriorityGrouping+0x44>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b2:	4a04      	ldr	r2, [pc, #16]	@ (80028c4 <__NVIC_SetPriorityGrouping+0x40>)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	60d3      	str	r3, [r2, #12]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00
 80028c8:	05fa0000 	.word	0x05fa0000

080028cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d0:	4b04      	ldr	r3, [pc, #16]	@ (80028e4 <__NVIC_GetPriorityGrouping+0x18>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	0a1b      	lsrs	r3, r3, #8
 80028d6:	f003 0307 	and.w	r3, r3, #7
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	db0b      	blt.n	8002912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	4907      	ldr	r1, [pc, #28]	@ (8002920 <__NVIC_EnableIRQ+0x38>)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	2001      	movs	r0, #1
 800290a:	fa00 f202 	lsl.w	r2, r0, r2
 800290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000e100 	.word	0xe000e100

08002924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	6039      	str	r1, [r7, #0]
 800292e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002934:	2b00      	cmp	r3, #0
 8002936:	db0a      	blt.n	800294e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	490c      	ldr	r1, [pc, #48]	@ (8002970 <__NVIC_SetPriority+0x4c>)
 800293e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002942:	0112      	lsls	r2, r2, #4
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	440b      	add	r3, r1
 8002948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800294c:	e00a      	b.n	8002964 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4908      	ldr	r1, [pc, #32]	@ (8002974 <__NVIC_SetPriority+0x50>)
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	3b04      	subs	r3, #4
 800295c:	0112      	lsls	r2, r2, #4
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	440b      	add	r3, r1
 8002962:	761a      	strb	r2, [r3, #24]
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000e100 	.word	0xe000e100
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002978:	b480      	push	{r7}
 800297a:	b089      	sub	sp, #36	@ 0x24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f1c3 0307 	rsb	r3, r3, #7
 8002992:	2b04      	cmp	r3, #4
 8002994:	bf28      	it	cs
 8002996:	2304      	movcs	r3, #4
 8002998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3304      	adds	r3, #4
 800299e:	2b06      	cmp	r3, #6
 80029a0:	d902      	bls.n	80029a8 <NVIC_EncodePriority+0x30>
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3b03      	subs	r3, #3
 80029a6:	e000      	b.n	80029aa <NVIC_EncodePriority+0x32>
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	f04f 32ff 	mov.w	r2, #4294967295
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43da      	mvns	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	401a      	ands	r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c0:	f04f 31ff 	mov.w	r1, #4294967295
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ca:	43d9      	mvns	r1, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	4313      	orrs	r3, r2
         );
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3724      	adds	r7, #36	@ 0x24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029f0:	d301      	bcc.n	80029f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029f2:	2301      	movs	r3, #1
 80029f4:	e00f      	b.n	8002a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a20 <SysTick_Config+0x40>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029fe:	210f      	movs	r1, #15
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295
 8002a04:	f7ff ff8e 	bl	8002924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a08:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <SysTick_Config+0x40>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a0e:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <SysTick_Config+0x40>)
 8002a10:	2207      	movs	r2, #7
 8002a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	e000e010 	.word	0xe000e010

08002a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff ff29 	bl	8002884 <__NVIC_SetPriorityGrouping>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b086      	sub	sp, #24
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a4c:	f7ff ff3e 	bl	80028cc <__NVIC_GetPriorityGrouping>
 8002a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	6978      	ldr	r0, [r7, #20]
 8002a58:	f7ff ff8e 	bl	8002978 <NVIC_EncodePriority>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a62:	4611      	mov	r1, r2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff5d 	bl	8002924 <__NVIC_SetPriority>
}
 8002a6a:	bf00      	nop
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	4603      	mov	r3, r0
 8002a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff31 	bl	80028e8 <__NVIC_EnableIRQ>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ffa2 	bl	80029e0 <SysTick_Config>
 8002a9c:	4603      	mov	r3, r0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	@ 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	e175      	b.n	8002db4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ac8:	2201      	movs	r2, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	f040 8164 	bne.w	8002dae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d005      	beq.n	8002afe <HAL_GPIO_Init+0x56>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d130      	bne.n	8002b60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	2203      	movs	r2, #3
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b34:	2201      	movs	r2, #1
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 0201 	and.w	r2, r3, #1
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d017      	beq.n	8002b9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d123      	bne.n	8002bf0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	08da      	lsrs	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3208      	adds	r2, #8
 8002bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	220f      	movs	r2, #15
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	08da      	lsrs	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3208      	adds	r2, #8
 8002bea:	69b9      	ldr	r1, [r7, #24]
 8002bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0203 	and.w	r2, r3, #3
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80be 	beq.w	8002dae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c32:	4b66      	ldr	r3, [pc, #408]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	4a65      	ldr	r2, [pc, #404]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c3e:	4b63      	ldr	r3, [pc, #396]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c4a:	4a61      	ldr	r2, [pc, #388]	@ (8002dd0 <HAL_GPIO_Init+0x328>)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	220f      	movs	r2, #15
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a58      	ldr	r2, [pc, #352]	@ (8002dd4 <HAL_GPIO_Init+0x32c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d037      	beq.n	8002ce6 <HAL_GPIO_Init+0x23e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a57      	ldr	r2, [pc, #348]	@ (8002dd8 <HAL_GPIO_Init+0x330>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d031      	beq.n	8002ce2 <HAL_GPIO_Init+0x23a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a56      	ldr	r2, [pc, #344]	@ (8002ddc <HAL_GPIO_Init+0x334>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d02b      	beq.n	8002cde <HAL_GPIO_Init+0x236>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a55      	ldr	r2, [pc, #340]	@ (8002de0 <HAL_GPIO_Init+0x338>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d025      	beq.n	8002cda <HAL_GPIO_Init+0x232>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a54      	ldr	r2, [pc, #336]	@ (8002de4 <HAL_GPIO_Init+0x33c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01f      	beq.n	8002cd6 <HAL_GPIO_Init+0x22e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a53      	ldr	r2, [pc, #332]	@ (8002de8 <HAL_GPIO_Init+0x340>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d019      	beq.n	8002cd2 <HAL_GPIO_Init+0x22a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a52      	ldr	r2, [pc, #328]	@ (8002dec <HAL_GPIO_Init+0x344>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_GPIO_Init+0x226>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a51      	ldr	r2, [pc, #324]	@ (8002df0 <HAL_GPIO_Init+0x348>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00d      	beq.n	8002cca <HAL_GPIO_Init+0x222>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a50      	ldr	r2, [pc, #320]	@ (8002df4 <HAL_GPIO_Init+0x34c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d007      	beq.n	8002cc6 <HAL_GPIO_Init+0x21e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4f      	ldr	r2, [pc, #316]	@ (8002df8 <HAL_GPIO_Init+0x350>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_GPIO_Init+0x21a>
 8002cbe:	2309      	movs	r3, #9
 8002cc0:	e012      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cc2:	230a      	movs	r3, #10
 8002cc4:	e010      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cc6:	2308      	movs	r3, #8
 8002cc8:	e00e      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cca:	2307      	movs	r3, #7
 8002ccc:	e00c      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cce:	2306      	movs	r3, #6
 8002cd0:	e00a      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	e008      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	e006      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e004      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e002      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f002 0203 	and.w	r2, r2, #3
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	4093      	lsls	r3, r2
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cf8:	4935      	ldr	r1, [pc, #212]	@ (8002dd0 <HAL_GPIO_Init+0x328>)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3302      	adds	r3, #2
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d06:	4b3d      	ldr	r3, [pc, #244]	@ (8002dfc <HAL_GPIO_Init+0x354>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2a:	4a34      	ldr	r2, [pc, #208]	@ (8002dfc <HAL_GPIO_Init+0x354>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d30:	4b32      	ldr	r3, [pc, #200]	@ (8002dfc <HAL_GPIO_Init+0x354>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d54:	4a29      	ldr	r2, [pc, #164]	@ (8002dfc <HAL_GPIO_Init+0x354>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d5a:	4b28      	ldr	r3, [pc, #160]	@ (8002dfc <HAL_GPIO_Init+0x354>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dfc <HAL_GPIO_Init+0x354>)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d84:	4b1d      	ldr	r3, [pc, #116]	@ (8002dfc <HAL_GPIO_Init+0x354>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002da8:	4a14      	ldr	r2, [pc, #80]	@ (8002dfc <HAL_GPIO_Init+0x354>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3301      	adds	r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	2b0f      	cmp	r3, #15
 8002db8:	f67f ae86 	bls.w	8002ac8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3724      	adds	r7, #36	@ 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40013800 	.word	0x40013800
 8002dd4:	40020000 	.word	0x40020000
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	40020800 	.word	0x40020800
 8002de0:	40020c00 	.word	0x40020c00
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40021400 	.word	0x40021400
 8002dec:	40021800 	.word	0x40021800
 8002df0:	40021c00 	.word	0x40021c00
 8002df4:	40022000 	.word	0x40022000
 8002df8:	40022400 	.word	0x40022400
 8002dfc:	40013c00 	.word	0x40013c00

08002e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e10:	787b      	ldrb	r3, [r7, #1]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e16:	887a      	ldrh	r2, [r7, #2]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e1c:	e003      	b.n	8002e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	041a      	lsls	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	619a      	str	r2, [r3, #24]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b085      	sub	sp, #20
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e44:	887a      	ldrh	r2, [r7, #2]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	041a      	lsls	r2, r3, #16
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	43d9      	mvns	r1, r3
 8002e50:	887b      	ldrh	r3, [r7, #2]
 8002e52:	400b      	ands	r3, r1
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	619a      	str	r2, [r3, #24]
}
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e70:	2300      	movs	r3, #0
 8002e72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e29b      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8087 	beq.w	8002f9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e8c:	4b96      	ldr	r3, [pc, #600]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d00c      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e98:	4b93      	ldr	r3, [pc, #588]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d112      	bne.n	8002eca <HAL_RCC_OscConfig+0x62>
 8002ea4:	4b90      	ldr	r3, [pc, #576]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eb0:	d10b      	bne.n	8002eca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb2:	4b8d      	ldr	r3, [pc, #564]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d06c      	beq.n	8002f98 <HAL_RCC_OscConfig+0x130>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d168      	bne.n	8002f98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e275      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x7a>
 8002ed4:	4b84      	ldr	r3, [pc, #528]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a83      	ldr	r2, [pc, #524]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	e02e      	b.n	8002f40 <HAL_RCC_OscConfig+0xd8>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x9c>
 8002eea:	4b7f      	ldr	r3, [pc, #508]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a7e      	ldr	r2, [pc, #504]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b7c      	ldr	r3, [pc, #496]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a7b      	ldr	r2, [pc, #492]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002efc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e01d      	b.n	8002f40 <HAL_RCC_OscConfig+0xd8>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCC_OscConfig+0xc0>
 8002f0e:	4b76      	ldr	r3, [pc, #472]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a75      	ldr	r2, [pc, #468]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b73      	ldr	r3, [pc, #460]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a72      	ldr	r2, [pc, #456]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e00b      	b.n	8002f40 <HAL_RCC_OscConfig+0xd8>
 8002f28:	4b6f      	ldr	r3, [pc, #444]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a6e      	ldr	r2, [pc, #440]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4b6c      	ldr	r3, [pc, #432]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a6b      	ldr	r2, [pc, #428]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fc34 	bl	80017b4 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7fe fc30 	bl	80017b4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	@ 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e229      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	4b61      	ldr	r3, [pc, #388]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0xe8>
 8002f6e:	e014      	b.n	8002f9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe fc20 	bl	80017b4 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f78:	f7fe fc1c 	bl	80017b4 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	@ 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e215      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8a:	4b57      	ldr	r3, [pc, #348]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x110>
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d069      	beq.n	800307a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fa6:	4b50      	ldr	r3, [pc, #320]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00b      	beq.n	8002fca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb2:	4b4d      	ldr	r3, [pc, #308]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d11c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x190>
 8002fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d116      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fca:	4b47      	ldr	r3, [pc, #284]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x17a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e1e9      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe2:	4b41      	ldr	r3, [pc, #260]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	493d      	ldr	r1, [pc, #244]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff6:	e040      	b.n	800307a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d023      	beq.n	8003048 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003000:	4b39      	ldr	r3, [pc, #228]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a38      	ldr	r2, [pc, #224]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fe fbd2 	bl	80017b4 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003014:	f7fe fbce 	bl	80017b4 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e1c7      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003026:	4b30      	ldr	r3, [pc, #192]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003032:	4b2d      	ldr	r3, [pc, #180]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4929      	ldr	r1, [pc, #164]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
 8003046:	e018      	b.n	800307a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003048:	4b27      	ldr	r3, [pc, #156]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a26      	ldr	r2, [pc, #152]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe fbae 	bl	80017b4 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305c:	f7fe fbaa 	bl	80017b4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e1a3      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	4b1e      	ldr	r3, [pc, #120]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d038      	beq.n	80030f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d019      	beq.n	80030c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308e:	4b16      	ldr	r3, [pc, #88]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003092:	4a15      	ldr	r2, [pc, #84]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309a:	f7fe fb8b 	bl	80017b4 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a2:	f7fe fb87 	bl	80017b4 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e180      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b4:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 80030b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x23a>
 80030c0:	e01a      	b.n	80030f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c2:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 80030c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c6:	4a08      	ldr	r2, [pc, #32]	@ (80030e8 <HAL_RCC_OscConfig+0x280>)
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ce:	f7fe fb71 	bl	80017b4 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d4:	e00a      	b.n	80030ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d6:	f7fe fb6d 	bl	80017b4 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d903      	bls.n	80030ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e166      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
 80030e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ec:	4b92      	ldr	r3, [pc, #584]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80030ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ee      	bne.n	80030d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80a4 	beq.w	800324e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003106:	4b8c      	ldr	r3, [pc, #560]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10d      	bne.n	800312e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	4b89      	ldr	r3, [pc, #548]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	4a88      	ldr	r2, [pc, #544]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800311c:	6413      	str	r3, [r2, #64]	@ 0x40
 800311e:	4b86      	ldr	r3, [pc, #536]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312a:	2301      	movs	r3, #1
 800312c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312e:	4b83      	ldr	r3, [pc, #524]	@ (800333c <HAL_RCC_OscConfig+0x4d4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d118      	bne.n	800316c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800313a:	4b80      	ldr	r3, [pc, #512]	@ (800333c <HAL_RCC_OscConfig+0x4d4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a7f      	ldr	r2, [pc, #508]	@ (800333c <HAL_RCC_OscConfig+0x4d4>)
 8003140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003146:	f7fe fb35 	bl	80017b4 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7fe fb31 	bl	80017b4 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b64      	cmp	r3, #100	@ 0x64
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e12a      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003160:	4b76      	ldr	r3, [pc, #472]	@ (800333c <HAL_RCC_OscConfig+0x4d4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x31a>
 8003174:	4b70      	ldr	r3, [pc, #448]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003178:	4a6f      	ldr	r2, [pc, #444]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003180:	e02d      	b.n	80031de <HAL_RCC_OscConfig+0x376>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x33c>
 800318a:	4b6b      	ldr	r3, [pc, #428]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318e:	4a6a      	ldr	r2, [pc, #424]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	6713      	str	r3, [r2, #112]	@ 0x70
 8003196:	4b68      	ldr	r3, [pc, #416]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319a:	4a67      	ldr	r2, [pc, #412]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 800319c:	f023 0304 	bic.w	r3, r3, #4
 80031a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a2:	e01c      	b.n	80031de <HAL_RCC_OscConfig+0x376>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	d10c      	bne.n	80031c6 <HAL_RCC_OscConfig+0x35e>
 80031ac:	4b62      	ldr	r3, [pc, #392]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b0:	4a61      	ldr	r2, [pc, #388]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031b2:	f043 0304 	orr.w	r3, r3, #4
 80031b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b8:	4b5f      	ldr	r3, [pc, #380]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c4:	e00b      	b.n	80031de <HAL_RCC_OscConfig+0x376>
 80031c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d2:	4b59      	ldr	r3, [pc, #356]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d6:	4a58      	ldr	r2, [pc, #352]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031d8:	f023 0304 	bic.w	r3, r3, #4
 80031dc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d015      	beq.n	8003212 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fe fae5 	bl	80017b4 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fe fae1 	bl	80017b4 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0d8      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	4b4c      	ldr	r3, [pc, #304]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ee      	beq.n	80031ee <HAL_RCC_OscConfig+0x386>
 8003210:	e014      	b.n	800323c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003212:	f7fe facf 	bl	80017b4 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fe facb 	bl	80017b4 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0c2      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	4b41      	ldr	r3, [pc, #260]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1ee      	bne.n	800321a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d105      	bne.n	800324e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003242:	4b3d      	ldr	r3, [pc, #244]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	4a3c      	ldr	r2, [pc, #240]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003248:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800324c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80ae 	beq.w	80033b4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003258:	4b37      	ldr	r3, [pc, #220]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b08      	cmp	r3, #8
 8003262:	d06d      	beq.n	8003340 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d14b      	bne.n	8003304 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326c:	4b32      	ldr	r3, [pc, #200]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a31      	ldr	r2, [pc, #196]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fe fa9c 	bl	80017b4 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003280:	f7fe fa98 	bl	80017b4 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e091      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003292:	4b29      	ldr	r3, [pc, #164]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69da      	ldr	r2, [r3, #28]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	019b      	lsls	r3, r3, #6
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b4:	085b      	lsrs	r3, r3, #1
 80032b6:	3b01      	subs	r3, #1
 80032b8:	041b      	lsls	r3, r3, #16
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c0:	061b      	lsls	r3, r3, #24
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	071b      	lsls	r3, r3, #28
 80032ca:	491b      	ldr	r1, [pc, #108]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d0:	4b19      	ldr	r3, [pc, #100]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a18      	ldr	r2, [pc, #96]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80032d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe fa6a 	bl	80017b4 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e4:	f7fe fa66 	bl	80017b4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e05f      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f6:	4b10      	ldr	r3, [pc, #64]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x47c>
 8003302:	e057      	b.n	80033b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003304:	4b0c      	ldr	r3, [pc, #48]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0b      	ldr	r2, [pc, #44]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 800330a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800330e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fe fa50 	bl	80017b4 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003318:	f7fe fa4c 	bl	80017b4 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e045      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332a:	4b03      	ldr	r3, [pc, #12]	@ (8003338 <HAL_RCC_OscConfig+0x4d0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x4b0>
 8003336:	e03d      	b.n	80033b4 <HAL_RCC_OscConfig+0x54c>
 8003338:	40023800 	.word	0x40023800
 800333c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003340:	4b1f      	ldr	r3, [pc, #124]	@ (80033c0 <HAL_RCC_OscConfig+0x558>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d030      	beq.n	80033b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d129      	bne.n	80033b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d122      	bne.n	80033b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003370:	4013      	ands	r3, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003376:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003378:	4293      	cmp	r3, r2
 800337a:	d119      	bne.n	80033b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003386:	085b      	lsrs	r3, r3, #1
 8003388:	3b01      	subs	r3, #1
 800338a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d10f      	bne.n	80033b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800339c:	429a      	cmp	r2, r3
 800339e:	d107      	bne.n	80033b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800

080033c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0d0      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d910      	bls.n	800340c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ea:	4b67      	ldr	r3, [pc, #412]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 020f 	bic.w	r2, r3, #15
 80033f2:	4965      	ldr	r1, [pc, #404]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b63      	ldr	r3, [pc, #396]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0b8      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003424:	4b59      	ldr	r3, [pc, #356]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a58      	ldr	r2, [pc, #352]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 800342a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800342e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800343c:	4b53      	ldr	r3, [pc, #332]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a52      	ldr	r2, [pc, #328]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003442:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003446:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003448:	4b50      	ldr	r3, [pc, #320]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	494d      	ldr	r1, [pc, #308]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d040      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b47      	ldr	r3, [pc, #284]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d115      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e07f      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003486:	4b41      	ldr	r3, [pc, #260]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e073      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003496:	4b3d      	ldr	r3, [pc, #244]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e06b      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a6:	4b39      	ldr	r3, [pc, #228]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f023 0203 	bic.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4936      	ldr	r1, [pc, #216]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b8:	f7fe f97c 	bl	80017b4 <HAL_GetTick>
 80034bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c0:	f7fe f978 	bl	80017b4 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e053      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	4b2d      	ldr	r3, [pc, #180]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 020c 	and.w	r2, r3, #12
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d1eb      	bne.n	80034c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e8:	4b27      	ldr	r3, [pc, #156]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d210      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b24      	ldr	r3, [pc, #144]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 020f 	bic.w	r2, r3, #15
 80034fe:	4922      	ldr	r1, [pc, #136]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b20      	ldr	r3, [pc, #128]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e032      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003524:	4b19      	ldr	r3, [pc, #100]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4916      	ldr	r1, [pc, #88]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003542:	4b12      	ldr	r3, [pc, #72]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	490e      	ldr	r1, [pc, #56]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003556:	f000 f821 	bl	800359c <HAL_RCC_GetSysClockFreq>
 800355a:	4602      	mov	r2, r0
 800355c:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	490a      	ldr	r1, [pc, #40]	@ (8003590 <HAL_RCC_ClockConfig+0x1cc>)
 8003568:	5ccb      	ldrb	r3, [r1, r3]
 800356a:	fa22 f303 	lsr.w	r3, r2, r3
 800356e:	4a09      	ldr	r2, [pc, #36]	@ (8003594 <HAL_RCC_ClockConfig+0x1d0>)
 8003570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003572:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <HAL_RCC_ClockConfig+0x1d4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe f8d8 	bl	800172c <HAL_InitTick>

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023c00 	.word	0x40023c00
 800358c:	40023800 	.word	0x40023800
 8003590:	08005a4c 	.word	0x08005a4c
 8003594:	20000004 	.word	0x20000004
 8003598:	20000008 	.word	0x20000008

0800359c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800359c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a0:	b090      	sub	sp, #64	@ 0x40
 80035a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a8:	2300      	movs	r3, #0
 80035aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035ac:	2300      	movs	r3, #0
 80035ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b4:	4b59      	ldr	r3, [pc, #356]	@ (800371c <HAL_RCC_GetSysClockFreq+0x180>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d00d      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0x40>
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	f200 80a1 	bhi.w	8003708 <HAL_RCC_GetSysClockFreq+0x16c>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x34>
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ce:	e09b      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035d0:	4b53      	ldr	r3, [pc, #332]	@ (8003720 <HAL_RCC_GetSysClockFreq+0x184>)
 80035d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035d4:	e09b      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d6:	4b53      	ldr	r3, [pc, #332]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x188>)
 80035d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035da:	e098      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035dc:	4b4f      	ldr	r3, [pc, #316]	@ (800371c <HAL_RCC_GetSysClockFreq+0x180>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035e6:	4b4d      	ldr	r3, [pc, #308]	@ (800371c <HAL_RCC_GetSysClockFreq+0x180>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d028      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f2:	4b4a      	ldr	r3, [pc, #296]	@ (800371c <HAL_RCC_GetSysClockFreq+0x180>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	099b      	lsrs	r3, r3, #6
 80035f8:	2200      	movs	r2, #0
 80035fa:	623b      	str	r3, [r7, #32]
 80035fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003604:	2100      	movs	r1, #0
 8003606:	4b47      	ldr	r3, [pc, #284]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x188>)
 8003608:	fb03 f201 	mul.w	r2, r3, r1
 800360c:	2300      	movs	r3, #0
 800360e:	fb00 f303 	mul.w	r3, r0, r3
 8003612:	4413      	add	r3, r2
 8003614:	4a43      	ldr	r2, [pc, #268]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x188>)
 8003616:	fba0 1202 	umull	r1, r2, r0, r2
 800361a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800361c:	460a      	mov	r2, r1
 800361e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003620:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003622:	4413      	add	r3, r2
 8003624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003628:	2200      	movs	r2, #0
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	61fa      	str	r2, [r7, #28]
 800362e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003632:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003636:	f7fc fdff 	bl	8000238 <__aeabi_uldivmod>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4613      	mov	r3, r2
 8003640:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003642:	e053      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003644:	4b35      	ldr	r3, [pc, #212]	@ (800371c <HAL_RCC_GetSysClockFreq+0x180>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	099b      	lsrs	r3, r3, #6
 800364a:	2200      	movs	r2, #0
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	617a      	str	r2, [r7, #20]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003656:	f04f 0b00 	mov.w	fp, #0
 800365a:	4652      	mov	r2, sl
 800365c:	465b      	mov	r3, fp
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	0159      	lsls	r1, r3, #5
 8003668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800366c:	0150      	lsls	r0, r2, #5
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	ebb2 080a 	subs.w	r8, r2, sl
 8003676:	eb63 090b 	sbc.w	r9, r3, fp
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003686:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800368a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800368e:	ebb2 0408 	subs.w	r4, r2, r8
 8003692:	eb63 0509 	sbc.w	r5, r3, r9
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	00eb      	lsls	r3, r5, #3
 80036a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036a4:	00e2      	lsls	r2, r4, #3
 80036a6:	4614      	mov	r4, r2
 80036a8:	461d      	mov	r5, r3
 80036aa:	eb14 030a 	adds.w	r3, r4, sl
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	eb45 030b 	adc.w	r3, r5, fp
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036c2:	4629      	mov	r1, r5
 80036c4:	028b      	lsls	r3, r1, #10
 80036c6:	4621      	mov	r1, r4
 80036c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036cc:	4621      	mov	r1, r4
 80036ce:	028a      	lsls	r2, r1, #10
 80036d0:	4610      	mov	r0, r2
 80036d2:	4619      	mov	r1, r3
 80036d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d6:	2200      	movs	r2, #0
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	60fa      	str	r2, [r7, #12]
 80036dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036e0:	f7fc fdaa 	bl	8000238 <__aeabi_uldivmod>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4613      	mov	r3, r2
 80036ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80036ec:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <HAL_RCC_GetSysClockFreq+0x180>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	3301      	adds	r3, #1
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80036fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003706:	e002      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003708:	4b05      	ldr	r3, [pc, #20]	@ (8003720 <HAL_RCC_GetSysClockFreq+0x184>)
 800370a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800370c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003710:	4618      	mov	r0, r3
 8003712:	3740      	adds	r7, #64	@ 0x40
 8003714:	46bd      	mov	sp, r7
 8003716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
 8003720:	00f42400 	.word	0x00f42400
 8003724:	017d7840 	.word	0x017d7840

08003728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e09d      	b.n	8003876 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373e:	2b00      	cmp	r3, #0
 8003740:	d108      	bne.n	8003754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800374a:	d009      	beq.n	8003760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	61da      	str	r2, [r3, #28]
 8003752:	e005      	b.n	8003760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd fc0c 	bl	8000f98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003796:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037a0:	d902      	bls.n	80037a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	e002      	b.n	80037ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80037b6:	d007      	beq.n	80037c8 <HAL_SPI_Init+0xa0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037c0:	d002      	beq.n	80037c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380a:	ea42 0103 	orr.w	r1, r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	0c1b      	lsrs	r3, r3, #16
 8003824:	f003 0204 	and.w	r2, r3, #4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003844:	ea42 0103 	orr.w	r1, r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003864:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b088      	sub	sp, #32
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	4613      	mov	r3, r2
 800388c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_SPI_Transmit+0x22>
 800389c:	2302      	movs	r3, #2
 800389e:	e15f      	b.n	8003b60 <HAL_SPI_Transmit+0x2e2>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a8:	f7fd ff84 	bl	80017b4 <HAL_GetTick>
 80038ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d002      	beq.n	80038c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038be:	2302      	movs	r3, #2
 80038c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038c2:	e148      	b.n	8003b56 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_SPI_Transmit+0x52>
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038d4:	e13f      	b.n	8003b56 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2203      	movs	r2, #3
 80038da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	88fa      	ldrh	r2, [r7, #6]
 80038ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	88fa      	ldrh	r2, [r7, #6]
 80038f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003920:	d10f      	bne.n	8003942 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003930:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003940:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394c:	2b40      	cmp	r3, #64	@ 0x40
 800394e:	d007      	beq.n	8003960 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800395e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003968:	d94f      	bls.n	8003a0a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_SPI_Transmit+0xfa>
 8003972:	8afb      	ldrh	r3, [r7, #22]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d142      	bne.n	80039fe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397c:	881a      	ldrh	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003988:	1c9a      	adds	r2, r3, #2
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800399c:	e02f      	b.n	80039fe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d112      	bne.n	80039d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b0:	881a      	ldrh	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039bc:	1c9a      	adds	r2, r3, #2
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039d0:	e015      	b.n	80039fe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d2:	f7fd feef 	bl	80017b4 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d803      	bhi.n	80039ea <HAL_SPI_Transmit+0x16c>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d102      	bne.n	80039f0 <HAL_SPI_Transmit+0x172>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80039fc:	e0ab      	b.n	8003b56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1ca      	bne.n	800399e <HAL_SPI_Transmit+0x120>
 8003a08:	e080      	b.n	8003b0c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_SPI_Transmit+0x19a>
 8003a12:	8afb      	ldrh	r3, [r7, #22]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d174      	bne.n	8003b02 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d912      	bls.n	8003a48 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a32:	1c9a      	adds	r2, r3, #2
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b02      	subs	r3, #2
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a46:	e05c      	b.n	8003b02 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	330c      	adds	r3, #12
 8003a52:	7812      	ldrb	r2, [r2, #0]
 8003a54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a6e:	e048      	b.n	8003b02 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d12b      	bne.n	8003ad6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d912      	bls.n	8003aae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8c:	881a      	ldrh	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a98:	1c9a      	adds	r2, r3, #2
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b02      	subs	r3, #2
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003aac:	e029      	b.n	8003b02 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	330c      	adds	r3, #12
 8003ab8:	7812      	ldrb	r2, [r2, #0]
 8003aba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ad4:	e015      	b.n	8003b02 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad6:	f7fd fe6d 	bl	80017b4 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d803      	bhi.n	8003aee <HAL_SPI_Transmit+0x270>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d102      	bne.n	8003af4 <HAL_SPI_Transmit+0x276>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003b00:	e029      	b.n	8003b56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1b1      	bne.n	8003a70 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	6839      	ldr	r1, [r7, #0]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fd1d 	bl	8004550 <SPI_EndRxTxTransaction>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10a      	bne.n	8003b40 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e003      	b.n	8003b56 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003b5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d002      	beq.n	8003b8e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b8c:	e11a      	b.n	8003dc4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b96:	d112      	bne.n	8003bbe <HAL_SPI_Receive+0x56>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10e      	bne.n	8003bbe <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ba8:	88fa      	ldrh	r2, [r7, #6]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f90e 	bl	8003dd6 <HAL_SPI_TransmitReceive>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	e107      	b.n	8003dce <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_SPI_Receive+0x64>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e100      	b.n	8003dce <HAL_SPI_Receive+0x266>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bd4:	f7fd fdee 	bl	80017b4 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_SPI_Receive+0x7e>
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bea:	e0eb      	b.n	8003dc4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2204      	movs	r2, #4
 8003bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	88fa      	ldrh	r2, [r7, #6]
 8003c04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	88fa      	ldrh	r2, [r7, #6]
 8003c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c36:	d908      	bls.n	8003c4a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	e007      	b.n	8003c5a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c58:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c62:	d10f      	bne.n	8003c84 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c82:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8e:	2b40      	cmp	r3, #64	@ 0x40
 8003c90:	d007      	beq.n	8003ca2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ca0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003caa:	d86f      	bhi.n	8003d8c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003cac:	e034      	b.n	8003d18 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d117      	bne.n	8003cec <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f103 020c 	add.w	r2, r3, #12
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003cea:	e015      	b.n	8003d18 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cec:	f7fd fd62 	bl	80017b4 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d803      	bhi.n	8003d04 <HAL_SPI_Receive+0x19c>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d102      	bne.n	8003d0a <HAL_SPI_Receive+0x1a2>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003d16:	e055      	b.n	8003dc4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1c4      	bne.n	8003cae <HAL_SPI_Receive+0x146>
 8003d24:	e038      	b.n	8003d98 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d115      	bne.n	8003d60 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	b292      	uxth	r2, r2
 8003d40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	1c9a      	adds	r2, r3, #2
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003d5e:	e015      	b.n	8003d8c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d60:	f7fd fd28 	bl	80017b4 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d803      	bhi.n	8003d78 <HAL_SPI_Receive+0x210>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d76:	d102      	bne.n	8003d7e <HAL_SPI_Receive+0x216>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003d8a:	e01b      	b.n	8003dc4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1c6      	bne.n	8003d26 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	6839      	ldr	r1, [r7, #0]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 fb5b 	bl	8004458 <SPI_EndRxTransaction>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
 8003dba:	e003      	b.n	8003dc4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b08a      	sub	sp, #40	@ 0x28
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
 8003de2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003de4:	2301      	movs	r3, #1
 8003de6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_SPI_TransmitReceive+0x26>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e20a      	b.n	8004212 <HAL_SPI_TransmitReceive+0x43c>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e04:	f7fd fcd6 	bl	80017b4 <HAL_GetTick>
 8003e08:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e10:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003e18:	887b      	ldrh	r3, [r7, #2]
 8003e1a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003e1c:	887b      	ldrh	r3, [r7, #2]
 8003e1e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e20:	7efb      	ldrb	r3, [r7, #27]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d00e      	beq.n	8003e44 <HAL_SPI_TransmitReceive+0x6e>
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e2c:	d106      	bne.n	8003e3c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d102      	bne.n	8003e3c <HAL_SPI_TransmitReceive+0x66>
 8003e36:	7efb      	ldrb	r3, [r7, #27]
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d003      	beq.n	8003e44 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003e42:	e1e0      	b.n	8004206 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_SPI_TransmitReceive+0x80>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_SPI_TransmitReceive+0x80>
 8003e50:	887b      	ldrh	r3, [r7, #2]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003e5c:	e1d3      	b.n	8004206 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d003      	beq.n	8003e72 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2205      	movs	r2, #5
 8003e6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	887a      	ldrh	r2, [r7, #2]
 8003e82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	887a      	ldrh	r2, [r7, #2]
 8003e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	887a      	ldrh	r2, [r7, #2]
 8003e98:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	887a      	ldrh	r2, [r7, #2]
 8003e9e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003eb4:	d802      	bhi.n	8003ebc <HAL_SPI_TransmitReceive+0xe6>
 8003eb6:	8a3b      	ldrh	r3, [r7, #16]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d908      	bls.n	8003ece <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	e007      	b.n	8003ede <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003edc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee8:	2b40      	cmp	r3, #64	@ 0x40
 8003eea:	d007      	beq.n	8003efc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003efa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f04:	f240 8081 	bls.w	800400a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_SPI_TransmitReceive+0x140>
 8003f10:	8a7b      	ldrh	r3, [r7, #18]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d16d      	bne.n	8003ff2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1a:	881a      	ldrh	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f26:	1c9a      	adds	r2, r3, #2
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f3a:	e05a      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d11b      	bne.n	8003f82 <HAL_SPI_TransmitReceive+0x1ac>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d016      	beq.n	8003f82 <HAL_SPI_TransmitReceive+0x1ac>
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d113      	bne.n	8003f82 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5e:	881a      	ldrh	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6a:	1c9a      	adds	r2, r3, #2
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d11c      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x1f4>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d016      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	b292      	uxth	r2, r2
 8003fa8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	1c9a      	adds	r2, r3, #2
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fca:	f7fd fbf3 	bl	80017b4 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d80b      	bhi.n	8003ff2 <HAL_SPI_TransmitReceive+0x21c>
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d007      	beq.n	8003ff2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003ff0:	e109      	b.n	8004206 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d19f      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x166>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d199      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x166>
 8004008:	e0e3      	b.n	80041d2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_SPI_TransmitReceive+0x244>
 8004012:	8a7b      	ldrh	r3, [r7, #18]
 8004014:	2b01      	cmp	r3, #1
 8004016:	f040 80cf 	bne.w	80041b8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d912      	bls.n	800404a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004028:	881a      	ldrh	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004034:	1c9a      	adds	r2, r3, #2
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b02      	subs	r3, #2
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004048:	e0b6      	b.n	80041b8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	7812      	ldrb	r2, [r2, #0]
 8004056:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004070:	e0a2      	b.n	80041b8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b02      	cmp	r3, #2
 800407e:	d134      	bne.n	80040ea <HAL_SPI_TransmitReceive+0x314>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d02f      	beq.n	80040ea <HAL_SPI_TransmitReceive+0x314>
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	2b01      	cmp	r3, #1
 800408e:	d12c      	bne.n	80040ea <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b01      	cmp	r3, #1
 8004098:	d912      	bls.n	80040c0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409e:	881a      	ldrh	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040aa:	1c9a      	adds	r2, r3, #2
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b02      	subs	r3, #2
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040be:	e012      	b.n	80040e6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	7812      	ldrb	r2, [r2, #0]
 80040cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d148      	bne.n	800418a <HAL_SPI_TransmitReceive+0x3b4>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d042      	beq.n	800418a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	d923      	bls.n	8004158 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	b292      	uxth	r2, r2
 800411c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	1c9a      	adds	r2, r3, #2
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b02      	subs	r3, #2
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d81f      	bhi.n	8004186 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	e016      	b.n	8004186 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f103 020c 	add.w	r2, r3, #12
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	7812      	ldrb	r2, [r2, #0]
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004186:	2301      	movs	r3, #1
 8004188:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800418a:	f7fd fb13 	bl	80017b4 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004196:	429a      	cmp	r2, r3
 8004198:	d803      	bhi.n	80041a2 <HAL_SPI_TransmitReceive+0x3cc>
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d102      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x3d2>
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d107      	bne.n	80041b8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80041b6:	e026      	b.n	8004206 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f47f af57 	bne.w	8004072 <HAL_SPI_TransmitReceive+0x29c>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f47f af50 	bne.w	8004072 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f9ba 	bl	8004550 <SPI_EndRxTxTransaction>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041fc:	e003      	b.n	8004206 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800420e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004212:	4618      	mov	r0, r3
 8004214:	3728      	adds	r7, #40	@ 0x28
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800422c:	f7fd fac2 	bl	80017b4 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	4413      	add	r3, r2
 800423a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800423c:	f7fd faba 	bl	80017b4 <HAL_GetTick>
 8004240:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004242:	4b39      	ldr	r3, [pc, #228]	@ (8004328 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	015b      	lsls	r3, r3, #5
 8004248:	0d1b      	lsrs	r3, r3, #20
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	fb02 f303 	mul.w	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004252:	e054      	b.n	80042fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d050      	beq.n	80042fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800425c:	f7fd faaa 	bl	80017b4 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	429a      	cmp	r2, r3
 800426a:	d902      	bls.n	8004272 <SPI_WaitFlagStateUntilTimeout+0x56>
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d13d      	bne.n	80042ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004280:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800428a:	d111      	bne.n	80042b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004294:	d004      	beq.n	80042a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429e:	d107      	bne.n	80042b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042b8:	d10f      	bne.n	80042da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e017      	b.n	800431e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4013      	ands	r3, r2
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	429a      	cmp	r2, r3
 800431a:	d19b      	bne.n	8004254 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20000004 	.word	0x20000004

0800432c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	@ 0x28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800433e:	f7fd fa39 	bl	80017b4 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	4413      	add	r3, r2
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800434e:	f7fd fa31 	bl	80017b4 <HAL_GetTick>
 8004352:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800435c:	4b3d      	ldr	r3, [pc, #244]	@ (8004454 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	00da      	lsls	r2, r3, #3
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	0d1b      	lsrs	r3, r3, #20
 800436c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004374:	e060      	b.n	8004438 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800437c:	d107      	bne.n	800438e <SPI_WaitFifoStateUntilTimeout+0x62>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d104      	bne.n	800438e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800438c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d050      	beq.n	8004438 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004396:	f7fd fa0d 	bl	80017b4 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d902      	bls.n	80043ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d13d      	bne.n	8004428 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043c4:	d111      	bne.n	80043ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ce:	d004      	beq.n	80043da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d8:	d107      	bne.n	80043ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043f2:	d10f      	bne.n	8004414 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004412:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e010      	b.n	800444a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	3b01      	subs	r3, #1
 8004436:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4013      	ands	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	429a      	cmp	r2, r3
 8004446:	d196      	bne.n	8004376 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3728      	adds	r7, #40	@ 0x28
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000004 	.word	0x20000004

08004458 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800446c:	d111      	bne.n	8004492 <SPI_EndRxTransaction+0x3a>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004476:	d004      	beq.n	8004482 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004480:	d107      	bne.n	8004492 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004490:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800449a:	d112      	bne.n	80044c2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2200      	movs	r2, #0
 80044a4:	2180      	movs	r1, #128	@ 0x80
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f7ff feb8 	bl	800421c <SPI_WaitFlagStateUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d021      	beq.n	80044f6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b6:	f043 0220 	orr.w	r2, r3, #32
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e03d      	b.n	800453e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044c2:	4b21      	ldr	r3, [pc, #132]	@ (8004548 <SPI_EndRxTransaction+0xf0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a21      	ldr	r2, [pc, #132]	@ (800454c <SPI_EndRxTransaction+0xf4>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	0d5b      	lsrs	r3, r3, #21
 80044ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044d2:	fb02 f303 	mul.w	r3, r2, r3
 80044d6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ee:	2b80      	cmp	r3, #128	@ 0x80
 80044f0:	d0f2      	beq.n	80044d8 <SPI_EndRxTransaction+0x80>
 80044f2:	e000      	b.n	80044f6 <SPI_EndRxTransaction+0x9e>
        break;
 80044f4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044fe:	d11d      	bne.n	800453c <SPI_EndRxTransaction+0xe4>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004508:	d004      	beq.n	8004514 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004512:	d113      	bne.n	800453c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2200      	movs	r2, #0
 800451c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7ff ff03 	bl	800432c <SPI_WaitFifoStateUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004530:	f043 0220 	orr.w	r2, r3, #32
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e000      	b.n	800453e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000004 	.word	0x20000004
 800454c:	165e9f81 	.word	0x165e9f81

08004550 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2200      	movs	r2, #0
 8004564:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f7ff fedf 	bl	800432c <SPI_WaitFifoStateUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e046      	b.n	8004612 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004584:	4b25      	ldr	r3, [pc, #148]	@ (800461c <SPI_EndRxTxTransaction+0xcc>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a25      	ldr	r2, [pc, #148]	@ (8004620 <SPI_EndRxTxTransaction+0xd0>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	0d5b      	lsrs	r3, r3, #21
 8004590:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004594:	fb02 f303 	mul.w	r3, r2, r3
 8004598:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045a2:	d112      	bne.n	80045ca <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2200      	movs	r2, #0
 80045ac:	2180      	movs	r1, #128	@ 0x80
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff fe34 	bl	800421c <SPI_WaitFlagStateUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d016      	beq.n	80045e8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045be:	f043 0220 	orr.w	r2, r3, #32
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e023      	b.n	8004612 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e0:	2b80      	cmp	r3, #128	@ 0x80
 80045e2:	d0f2      	beq.n	80045ca <SPI_EndRxTxTransaction+0x7a>
 80045e4:	e000      	b.n	80045e8 <SPI_EndRxTxTransaction+0x98>
        break;
 80045e6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff fe99 	bl	800432c <SPI_WaitFifoStateUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e000      	b.n	8004612 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000004 	.word	0x20000004
 8004620:	165e9f81 	.word	0x165e9f81

08004624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e049      	b.n	80046ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fc ff1e 	bl	800148c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	4619      	mov	r1, r3
 8004662:	4610      	mov	r0, r2
 8004664:	f000 fd44 	bl	80050f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e049      	b.n	8004778 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d106      	bne.n	80046fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f841 	bl	8004780 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3304      	adds	r3, #4
 800470e:	4619      	mov	r1, r3
 8004710:	4610      	mov	r0, r2
 8004712:	f000 fced 	bl	80050f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_TIM_PWM_Start+0x24>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e03c      	b.n	8004832 <HAL_TIM_PWM_Start+0x9e>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d109      	bne.n	80047d2 <HAL_TIM_PWM_Start+0x3e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	bf14      	ite	ne
 80047ca:	2301      	movne	r3, #1
 80047cc:	2300      	moveq	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	e02f      	b.n	8004832 <HAL_TIM_PWM_Start+0x9e>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d109      	bne.n	80047ec <HAL_TIM_PWM_Start+0x58>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e022      	b.n	8004832 <HAL_TIM_PWM_Start+0x9e>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b0c      	cmp	r3, #12
 80047f0:	d109      	bne.n	8004806 <HAL_TIM_PWM_Start+0x72>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	bf14      	ite	ne
 80047fe:	2301      	movne	r3, #1
 8004800:	2300      	moveq	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	e015      	b.n	8004832 <HAL_TIM_PWM_Start+0x9e>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b10      	cmp	r3, #16
 800480a:	d109      	bne.n	8004820 <HAL_TIM_PWM_Start+0x8c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	e008      	b.n	8004832 <HAL_TIM_PWM_Start+0x9e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	bf14      	ite	ne
 800482c:	2301      	movne	r3, #1
 800482e:	2300      	moveq	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e092      	b.n	8004960 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d104      	bne.n	800484a <HAL_TIM_PWM_Start+0xb6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004848:	e023      	b.n	8004892 <HAL_TIM_PWM_Start+0xfe>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b04      	cmp	r3, #4
 800484e:	d104      	bne.n	800485a <HAL_TIM_PWM_Start+0xc6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004858:	e01b      	b.n	8004892 <HAL_TIM_PWM_Start+0xfe>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b08      	cmp	r3, #8
 800485e:	d104      	bne.n	800486a <HAL_TIM_PWM_Start+0xd6>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004868:	e013      	b.n	8004892 <HAL_TIM_PWM_Start+0xfe>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b0c      	cmp	r3, #12
 800486e:	d104      	bne.n	800487a <HAL_TIM_PWM_Start+0xe6>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004878:	e00b      	b.n	8004892 <HAL_TIM_PWM_Start+0xfe>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b10      	cmp	r3, #16
 800487e:	d104      	bne.n	800488a <HAL_TIM_PWM_Start+0xf6>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004888:	e003      	b.n	8004892 <HAL_TIM_PWM_Start+0xfe>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2202      	movs	r2, #2
 800488e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2201      	movs	r2, #1
 8004898:	6839      	ldr	r1, [r7, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 ffcc 	bl	8005838 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a30      	ldr	r2, [pc, #192]	@ (8004968 <HAL_TIM_PWM_Start+0x1d4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d004      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x120>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2f      	ldr	r2, [pc, #188]	@ (800496c <HAL_TIM_PWM_Start+0x1d8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d101      	bne.n	80048b8 <HAL_TIM_PWM_Start+0x124>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <HAL_TIM_PWM_Start+0x126>
 80048b8:	2300      	movs	r3, #0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a25      	ldr	r2, [pc, #148]	@ (8004968 <HAL_TIM_PWM_Start+0x1d4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d022      	beq.n	800491e <HAL_TIM_PWM_Start+0x18a>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e0:	d01d      	beq.n	800491e <HAL_TIM_PWM_Start+0x18a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a22      	ldr	r2, [pc, #136]	@ (8004970 <HAL_TIM_PWM_Start+0x1dc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d018      	beq.n	800491e <HAL_TIM_PWM_Start+0x18a>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a20      	ldr	r2, [pc, #128]	@ (8004974 <HAL_TIM_PWM_Start+0x1e0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <HAL_TIM_PWM_Start+0x18a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004978 <HAL_TIM_PWM_Start+0x1e4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00e      	beq.n	800491e <HAL_TIM_PWM_Start+0x18a>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a19      	ldr	r2, [pc, #100]	@ (800496c <HAL_TIM_PWM_Start+0x1d8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d009      	beq.n	800491e <HAL_TIM_PWM_Start+0x18a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1b      	ldr	r2, [pc, #108]	@ (800497c <HAL_TIM_PWM_Start+0x1e8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <HAL_TIM_PWM_Start+0x18a>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a19      	ldr	r2, [pc, #100]	@ (8004980 <HAL_TIM_PWM_Start+0x1ec>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d115      	bne.n	800494a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	4b17      	ldr	r3, [pc, #92]	@ (8004984 <HAL_TIM_PWM_Start+0x1f0>)
 8004926:	4013      	ands	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b06      	cmp	r3, #6
 800492e:	d015      	beq.n	800495c <HAL_TIM_PWM_Start+0x1c8>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004936:	d011      	beq.n	800495c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004948:	e008      	b.n	800495c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0201 	orr.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	e000      	b.n	800495e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40010000 	.word	0x40010000
 800496c:	40010400 	.word	0x40010400
 8004970:	40000400 	.word	0x40000400
 8004974:	40000800 	.word	0x40000800
 8004978:	40000c00 	.word	0x40000c00
 800497c:	40014000 	.word	0x40014000
 8004980:	40001800 	.word	0x40001800
 8004984:	00010007 	.word	0x00010007

08004988 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e08f      	b.n	8004abc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d106      	bne.n	80049b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7fc fdb7 	bl	8001524 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2202      	movs	r2, #2
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6899      	ldr	r1, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ac4 <HAL_TIM_Encoder_Init+0x13c>)
 80049ca:	400b      	ands	r3, r1
 80049cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f000 fb89 	bl	80050f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4b31      	ldr	r3, [pc, #196]	@ (8004ac8 <HAL_TIM_Encoder_Init+0x140>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	021b      	lsls	r3, r3, #8
 8004a12:	4313      	orrs	r3, r2
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004acc <HAL_TIM_Encoder_Init+0x144>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad0 <HAL_TIM_Encoder_Init+0x148>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	4313      	orrs	r3, r2
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	011a      	lsls	r2, r3, #4
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	031b      	lsls	r3, r3, #12
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004a5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	fffebff8 	.word	0xfffebff8
 8004ac8:	fffffcfc 	.word	0xfffffcfc
 8004acc:	fffff3f3 	.word	0xfffff3f3
 8004ad0:	ffff0f0f 	.word	0xffff0f0f

08004ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d020      	beq.n	8004b38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01b      	beq.n	8004b38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0202 	mvn.w	r2, #2
 8004b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fc f82a 	bl	8000b78 <HAL_TIM_IC_CaptureCallback>
 8004b24:	e005      	b.n	8004b32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fac4 	bl	80050b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 facb 	bl	80050c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d020      	beq.n	8004b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01b      	beq.n	8004b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0204 	mvn.w	r2, #4
 8004b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fc f804 	bl	8000b78 <HAL_TIM_IC_CaptureCallback>
 8004b70:	e005      	b.n	8004b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fa9e 	bl	80050b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 faa5 	bl	80050c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d020      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01b      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0208 	mvn.w	r2, #8
 8004ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fb ffde 	bl	8000b78 <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fa78 	bl	80050b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fa7f 	bl	80050c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d020      	beq.n	8004c1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01b      	beq.n	8004c1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0210 	mvn.w	r2, #16
 8004bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fb ffb8 	bl	8000b78 <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fa52 	bl	80050b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fa59 	bl	80050c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00c      	beq.n	8004c40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d007      	beq.n	8004c40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0201 	mvn.w	r2, #1
 8004c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa30 	bl	80050a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d104      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00c      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fea3 	bl	80059b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00c      	beq.n	8004c92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fe9b 	bl	80059c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00c      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fa13 	bl	80050dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00c      	beq.n	8004cda <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f06f 0220 	mvn.w	r2, #32
 8004cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fe63 	bl	80059a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e0ff      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b14      	cmp	r3, #20
 8004d0e:	f200 80f0 	bhi.w	8004ef2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d12:	a201      	add	r2, pc, #4	@ (adr r2, 8004d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d18:	08004d6d 	.word	0x08004d6d
 8004d1c:	08004ef3 	.word	0x08004ef3
 8004d20:	08004ef3 	.word	0x08004ef3
 8004d24:	08004ef3 	.word	0x08004ef3
 8004d28:	08004dad 	.word	0x08004dad
 8004d2c:	08004ef3 	.word	0x08004ef3
 8004d30:	08004ef3 	.word	0x08004ef3
 8004d34:	08004ef3 	.word	0x08004ef3
 8004d38:	08004def 	.word	0x08004def
 8004d3c:	08004ef3 	.word	0x08004ef3
 8004d40:	08004ef3 	.word	0x08004ef3
 8004d44:	08004ef3 	.word	0x08004ef3
 8004d48:	08004e2f 	.word	0x08004e2f
 8004d4c:	08004ef3 	.word	0x08004ef3
 8004d50:	08004ef3 	.word	0x08004ef3
 8004d54:	08004ef3 	.word	0x08004ef3
 8004d58:	08004e71 	.word	0x08004e71
 8004d5c:	08004ef3 	.word	0x08004ef3
 8004d60:	08004ef3 	.word	0x08004ef3
 8004d64:	08004ef3 	.word	0x08004ef3
 8004d68:	08004eb1 	.word	0x08004eb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fa68 	bl	8005248 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0208 	orr.w	r2, r2, #8
 8004d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0204 	bic.w	r2, r2, #4
 8004d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6999      	ldr	r1, [r3, #24]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	619a      	str	r2, [r3, #24]
      break;
 8004daa:	e0a5      	b.n	8004ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 faba 	bl	800532c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699a      	ldr	r2, [r3, #24]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6999      	ldr	r1, [r3, #24]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	021a      	lsls	r2, r3, #8
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	619a      	str	r2, [r3, #24]
      break;
 8004dec:	e084      	b.n	8004ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fb11 	bl	800541c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69da      	ldr	r2, [r3, #28]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0208 	orr.w	r2, r2, #8
 8004e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0204 	bic.w	r2, r2, #4
 8004e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69d9      	ldr	r1, [r3, #28]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	61da      	str	r2, [r3, #28]
      break;
 8004e2c:	e064      	b.n	8004ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fb67 	bl	8005508 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69da      	ldr	r2, [r3, #28]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69d9      	ldr	r1, [r3, #28]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	021a      	lsls	r2, r3, #8
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	61da      	str	r2, [r3, #28]
      break;
 8004e6e:	e043      	b.n	8004ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fb9e 	bl	80055b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0208 	orr.w	r2, r2, #8
 8004e8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0204 	bic.w	r2, r2, #4
 8004e9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004eae:	e023      	b.n	8004ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fbd0 	bl	800565c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	021a      	lsls	r2, r3, #8
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ef0:	e002      	b.n	8004ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ef6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop

08004f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_TIM_ConfigClockSource+0x1c>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e0b4      	b.n	8005092 <HAL_TIM_ConfigClockSource+0x186>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	4b56      	ldr	r3, [pc, #344]	@ (800509c <HAL_TIM_ConfigClockSource+0x190>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f60:	d03e      	beq.n	8004fe0 <HAL_TIM_ConfigClockSource+0xd4>
 8004f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f66:	f200 8087 	bhi.w	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f6e:	f000 8086 	beq.w	800507e <HAL_TIM_ConfigClockSource+0x172>
 8004f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f76:	d87f      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f78:	2b70      	cmp	r3, #112	@ 0x70
 8004f7a:	d01a      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0xa6>
 8004f7c:	2b70      	cmp	r3, #112	@ 0x70
 8004f7e:	d87b      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f80:	2b60      	cmp	r3, #96	@ 0x60
 8004f82:	d050      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x11a>
 8004f84:	2b60      	cmp	r3, #96	@ 0x60
 8004f86:	d877      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b50      	cmp	r3, #80	@ 0x50
 8004f8a:	d03c      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0xfa>
 8004f8c:	2b50      	cmp	r3, #80	@ 0x50
 8004f8e:	d873      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b40      	cmp	r3, #64	@ 0x40
 8004f92:	d058      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0x13a>
 8004f94:	2b40      	cmp	r3, #64	@ 0x40
 8004f96:	d86f      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f98:	2b30      	cmp	r3, #48	@ 0x30
 8004f9a:	d064      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
 8004f9c:	2b30      	cmp	r3, #48	@ 0x30
 8004f9e:	d86b      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d060      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d867      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d05c      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d05a      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
 8004fb0:	e062      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fc2:	f000 fc19 	bl	80057f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	609a      	str	r2, [r3, #8]
      break;
 8004fde:	e04f      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ff0:	f000 fc02 	bl	80057f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005002:	609a      	str	r2, [r3, #8]
      break;
 8005004:	e03c      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005012:	461a      	mov	r2, r3
 8005014:	f000 fb76 	bl	8005704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2150      	movs	r1, #80	@ 0x50
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fbcf 	bl	80057c2 <TIM_ITRx_SetConfig>
      break;
 8005024:	e02c      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005032:	461a      	mov	r2, r3
 8005034:	f000 fb95 	bl	8005762 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2160      	movs	r1, #96	@ 0x60
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fbbf 	bl	80057c2 <TIM_ITRx_SetConfig>
      break;
 8005044:	e01c      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005052:	461a      	mov	r2, r3
 8005054:	f000 fb56 	bl	8005704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2140      	movs	r1, #64	@ 0x40
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fbaf 	bl	80057c2 <TIM_ITRx_SetConfig>
      break;
 8005064:	e00c      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f000 fba6 	bl	80057c2 <TIM_ITRx_SetConfig>
      break;
 8005076:	e003      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
      break;
 800507c:	e000      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800507e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005090:	7bfb      	ldrb	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	fffeff88 	.word	0xfffeff88

080050a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a46      	ldr	r2, [pc, #280]	@ (800521c <TIM_Base_SetConfig+0x12c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d013      	beq.n	8005130 <TIM_Base_SetConfig+0x40>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510e:	d00f      	beq.n	8005130 <TIM_Base_SetConfig+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a43      	ldr	r2, [pc, #268]	@ (8005220 <TIM_Base_SetConfig+0x130>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00b      	beq.n	8005130 <TIM_Base_SetConfig+0x40>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a42      	ldr	r2, [pc, #264]	@ (8005224 <TIM_Base_SetConfig+0x134>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d007      	beq.n	8005130 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a41      	ldr	r2, [pc, #260]	@ (8005228 <TIM_Base_SetConfig+0x138>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_Base_SetConfig+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a40      	ldr	r2, [pc, #256]	@ (800522c <TIM_Base_SetConfig+0x13c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d108      	bne.n	8005142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a35      	ldr	r2, [pc, #212]	@ (800521c <TIM_Base_SetConfig+0x12c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d02b      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005150:	d027      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a32      	ldr	r2, [pc, #200]	@ (8005220 <TIM_Base_SetConfig+0x130>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d023      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a31      	ldr	r2, [pc, #196]	@ (8005224 <TIM_Base_SetConfig+0x134>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01f      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a30      	ldr	r2, [pc, #192]	@ (8005228 <TIM_Base_SetConfig+0x138>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d01b      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2f      	ldr	r2, [pc, #188]	@ (800522c <TIM_Base_SetConfig+0x13c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d017      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a2e      	ldr	r2, [pc, #184]	@ (8005230 <TIM_Base_SetConfig+0x140>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d013      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2d      	ldr	r2, [pc, #180]	@ (8005234 <TIM_Base_SetConfig+0x144>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00f      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a2c      	ldr	r2, [pc, #176]	@ (8005238 <TIM_Base_SetConfig+0x148>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00b      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a2b      	ldr	r2, [pc, #172]	@ (800523c <TIM_Base_SetConfig+0x14c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d007      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a2a      	ldr	r2, [pc, #168]	@ (8005240 <TIM_Base_SetConfig+0x150>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d003      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a29      	ldr	r2, [pc, #164]	@ (8005244 <TIM_Base_SetConfig+0x154>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d108      	bne.n	80051b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a10      	ldr	r2, [pc, #64]	@ (800521c <TIM_Base_SetConfig+0x12c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d003      	beq.n	80051e8 <TIM_Base_SetConfig+0xf8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a12      	ldr	r2, [pc, #72]	@ (800522c <TIM_Base_SetConfig+0x13c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d103      	bne.n	80051f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d105      	bne.n	800520e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f023 0201 	bic.w	r2, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	611a      	str	r2, [r3, #16]
  }
}
 800520e:	bf00      	nop
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40010000 	.word	0x40010000
 8005220:	40000400 	.word	0x40000400
 8005224:	40000800 	.word	0x40000800
 8005228:	40000c00 	.word	0x40000c00
 800522c:	40010400 	.word	0x40010400
 8005230:	40014000 	.word	0x40014000
 8005234:	40014400 	.word	0x40014400
 8005238:	40014800 	.word	0x40014800
 800523c:	40001800 	.word	0x40001800
 8005240:	40001c00 	.word	0x40001c00
 8005244:	40002000 	.word	0x40002000

08005248 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	f023 0201 	bic.w	r2, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4b2b      	ldr	r3, [pc, #172]	@ (8005320 <TIM_OC1_SetConfig+0xd8>)
 8005274:	4013      	ands	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0303 	bic.w	r3, r3, #3
 800527e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f023 0302 	bic.w	r3, r3, #2
 8005290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a21      	ldr	r2, [pc, #132]	@ (8005324 <TIM_OC1_SetConfig+0xdc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_OC1_SetConfig+0x64>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a20      	ldr	r2, [pc, #128]	@ (8005328 <TIM_OC1_SetConfig+0xe0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d10c      	bne.n	80052c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f023 0308 	bic.w	r3, r3, #8
 80052b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f023 0304 	bic.w	r3, r3, #4
 80052c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a16      	ldr	r2, [pc, #88]	@ (8005324 <TIM_OC1_SetConfig+0xdc>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d003      	beq.n	80052d6 <TIM_OC1_SetConfig+0x8e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a15      	ldr	r2, [pc, #84]	@ (8005328 <TIM_OC1_SetConfig+0xe0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d111      	bne.n	80052fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	621a      	str	r2, [r3, #32]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	fffeff8f 	.word	0xfffeff8f
 8005324:	40010000 	.word	0x40010000
 8005328:	40010400 	.word	0x40010400

0800532c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f023 0210 	bic.w	r2, r3, #16
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4b2e      	ldr	r3, [pc, #184]	@ (8005410 <TIM_OC2_SetConfig+0xe4>)
 8005358:	4013      	ands	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 0320 	bic.w	r3, r3, #32
 8005376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a23      	ldr	r2, [pc, #140]	@ (8005414 <TIM_OC2_SetConfig+0xe8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d003      	beq.n	8005394 <TIM_OC2_SetConfig+0x68>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a22      	ldr	r2, [pc, #136]	@ (8005418 <TIM_OC2_SetConfig+0xec>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d10d      	bne.n	80053b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800539a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a18      	ldr	r2, [pc, #96]	@ (8005414 <TIM_OC2_SetConfig+0xe8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_OC2_SetConfig+0x94>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a17      	ldr	r2, [pc, #92]	@ (8005418 <TIM_OC2_SetConfig+0xec>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d113      	bne.n	80053e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	feff8fff 	.word	0xfeff8fff
 8005414:	40010000 	.word	0x40010000
 8005418:	40010400 	.word	0x40010400

0800541c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4b2d      	ldr	r3, [pc, #180]	@ (80054fc <TIM_OC3_SetConfig+0xe0>)
 8005448:	4013      	ands	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 0303 	bic.w	r3, r3, #3
 8005452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	021b      	lsls	r3, r3, #8
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a22      	ldr	r2, [pc, #136]	@ (8005500 <TIM_OC3_SetConfig+0xe4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d003      	beq.n	8005482 <TIM_OC3_SetConfig+0x66>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a21      	ldr	r2, [pc, #132]	@ (8005504 <TIM_OC3_SetConfig+0xe8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d10d      	bne.n	800549e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005488:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	021b      	lsls	r3, r3, #8
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800549c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a17      	ldr	r2, [pc, #92]	@ (8005500 <TIM_OC3_SetConfig+0xe4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d003      	beq.n	80054ae <TIM_OC3_SetConfig+0x92>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a16      	ldr	r2, [pc, #88]	@ (8005504 <TIM_OC3_SetConfig+0xe8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d113      	bne.n	80054d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	621a      	str	r2, [r3, #32]
}
 80054f0:	bf00      	nop
 80054f2:	371c      	adds	r7, #28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	fffeff8f 	.word	0xfffeff8f
 8005500:	40010000 	.word	0x40010000
 8005504:	40010400 	.word	0x40010400

08005508 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4b1e      	ldr	r3, [pc, #120]	@ (80055ac <TIM_OC4_SetConfig+0xa4>)
 8005534:	4013      	ands	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800553e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	021b      	lsls	r3, r3, #8
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	031b      	lsls	r3, r3, #12
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a13      	ldr	r2, [pc, #76]	@ (80055b0 <TIM_OC4_SetConfig+0xa8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d003      	beq.n	8005570 <TIM_OC4_SetConfig+0x68>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a12      	ldr	r2, [pc, #72]	@ (80055b4 <TIM_OC4_SetConfig+0xac>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d109      	bne.n	8005584 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005576:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	019b      	lsls	r3, r3, #6
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	feff8fff 	.word	0xfeff8fff
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40010400 	.word	0x40010400

080055b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005650 <TIM_OC5_SetConfig+0x98>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80055f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	041b      	lsls	r3, r3, #16
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a12      	ldr	r2, [pc, #72]	@ (8005654 <TIM_OC5_SetConfig+0x9c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <TIM_OC5_SetConfig+0x5e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a11      	ldr	r2, [pc, #68]	@ (8005658 <TIM_OC5_SetConfig+0xa0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d109      	bne.n	800562a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800561c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	021b      	lsls	r3, r3, #8
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	621a      	str	r2, [r3, #32]
}
 8005644:	bf00      	nop
 8005646:	371c      	adds	r7, #28
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	fffeff8f 	.word	0xfffeff8f
 8005654:	40010000 	.word	0x40010000
 8005658:	40010400 	.word	0x40010400

0800565c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4b1c      	ldr	r3, [pc, #112]	@ (80056f8 <TIM_OC6_SetConfig+0x9c>)
 8005688:	4013      	ands	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	021b      	lsls	r3, r3, #8
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800569e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	051b      	lsls	r3, r3, #20
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a13      	ldr	r2, [pc, #76]	@ (80056fc <TIM_OC6_SetConfig+0xa0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_OC6_SetConfig+0x60>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a12      	ldr	r2, [pc, #72]	@ (8005700 <TIM_OC6_SetConfig+0xa4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d109      	bne.n	80056d0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	029b      	lsls	r3, r3, #10
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	feff8fff 	.word	0xfeff8fff
 80056fc:	40010000 	.word	0x40010000
 8005700:	40010400 	.word	0x40010400

08005704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f023 0201 	bic.w	r2, r3, #1
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800572e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f023 030a 	bic.w	r3, r3, #10
 8005740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	621a      	str	r2, [r3, #32]
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005762:	b480      	push	{r7}
 8005764:	b087      	sub	sp, #28
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	f023 0210 	bic.w	r2, r3, #16
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800578c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	031b      	lsls	r3, r3, #12
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800579e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b085      	sub	sp, #20
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	f043 0307 	orr.w	r3, r3, #7
 80057e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	609a      	str	r2, [r3, #8]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005812:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	021a      	lsls	r2, r3, #8
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	431a      	orrs	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4313      	orrs	r3, r2
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	609a      	str	r2, [r3, #8]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f003 031f 	and.w	r3, r3, #31
 800584a:	2201      	movs	r2, #1
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a1a      	ldr	r2, [r3, #32]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	43db      	mvns	r3, r3
 800585a:	401a      	ands	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a1a      	ldr	r2, [r3, #32]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	fa01 f303 	lsl.w	r3, r1, r3
 8005870:	431a      	orrs	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	621a      	str	r2, [r3, #32]
}
 8005876:	bf00      	nop
 8005878:	371c      	adds	r7, #28
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
	...

08005884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005898:	2302      	movs	r3, #2
 800589a:	e06d      	b.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a30      	ldr	r2, [pc, #192]	@ (8005984 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d004      	beq.n	80058d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2f      	ldr	r2, [pc, #188]	@ (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d108      	bne.n	80058e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a20      	ldr	r2, [pc, #128]	@ (8005984 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d022      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800590e:	d01d      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a1d      	ldr	r2, [pc, #116]	@ (800598c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d018      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1c      	ldr	r2, [pc, #112]	@ (8005990 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d013      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1a      	ldr	r2, [pc, #104]	@ (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00e      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a15      	ldr	r2, [pc, #84]	@ (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d009      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a16      	ldr	r2, [pc, #88]	@ (8005998 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d004      	beq.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a15      	ldr	r2, [pc, #84]	@ (800599c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d10c      	bne.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005952:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	4313      	orrs	r3, r2
 800595c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	40010000 	.word	0x40010000
 8005988:	40010400 	.word	0x40010400
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40014000 	.word	0x40014000
 800599c:	40001800 	.word	0x40001800

080059a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <memset>:
 80059dc:	4402      	add	r2, r0
 80059de:	4603      	mov	r3, r0
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d100      	bne.n	80059e6 <memset+0xa>
 80059e4:	4770      	bx	lr
 80059e6:	f803 1b01 	strb.w	r1, [r3], #1
 80059ea:	e7f9      	b.n	80059e0 <memset+0x4>

080059ec <__libc_init_array>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005a24 <__libc_init_array+0x38>)
 80059f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005a28 <__libc_init_array+0x3c>)
 80059f2:	1b64      	subs	r4, r4, r5
 80059f4:	10a4      	asrs	r4, r4, #2
 80059f6:	2600      	movs	r6, #0
 80059f8:	42a6      	cmp	r6, r4
 80059fa:	d109      	bne.n	8005a10 <__libc_init_array+0x24>
 80059fc:	4d0b      	ldr	r5, [pc, #44]	@ (8005a2c <__libc_init_array+0x40>)
 80059fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005a30 <__libc_init_array+0x44>)
 8005a00:	f000 f818 	bl	8005a34 <_init>
 8005a04:	1b64      	subs	r4, r4, r5
 8005a06:	10a4      	asrs	r4, r4, #2
 8005a08:	2600      	movs	r6, #0
 8005a0a:	42a6      	cmp	r6, r4
 8005a0c:	d105      	bne.n	8005a1a <__libc_init_array+0x2e>
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
 8005a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a14:	4798      	blx	r3
 8005a16:	3601      	adds	r6, #1
 8005a18:	e7ee      	b.n	80059f8 <__libc_init_array+0xc>
 8005a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1e:	4798      	blx	r3
 8005a20:	3601      	adds	r6, #1
 8005a22:	e7f2      	b.n	8005a0a <__libc_init_array+0x1e>
 8005a24:	08005a64 	.word	0x08005a64
 8005a28:	08005a64 	.word	0x08005a64
 8005a2c:	08005a64 	.word	0x08005a64
 8005a30:	08005a68 	.word	0x08005a68

08005a34 <_init>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	bf00      	nop
 8005a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3a:	bc08      	pop	{r3}
 8005a3c:	469e      	mov	lr, r3
 8005a3e:	4770      	bx	lr

08005a40 <_fini>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	bf00      	nop
 8005a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a46:	bc08      	pop	{r3}
 8005a48:	469e      	mov	lr, r3
 8005a4a:	4770      	bx	lr

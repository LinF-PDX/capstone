
profileograph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005978  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005b70  08005b70  00006b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b80  08005b80  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b80  08005b80  00006b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b88  08005b88  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b88  08005b88  00006b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b8c  08005b8c  00006b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005b90  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000000c  08005b9c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005b9c  00007264  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b72  00000000  00000000  0000703a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002916  00000000  00000000  00017bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  0001a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb6  00000000  00000000  0001b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028702  00000000  00000000  0001bfa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d48  00000000  00000000  000446a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcb62  00000000  00000000  000573f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153f52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f08  00000000  00000000  00153f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00157ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005b58 	.word	0x08005b58

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08005b58 	.word	0x08005b58

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <writeRegister>:
 * @param num Number of bytes to be written
 * @retval none
 * @note Since the register values to be written are 8-bit, there is no need to multiple writing
 */
static void writeRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	6039      	str	r1, [r7, #0]
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b3f      	cmp	r3, #63	@ 0x3f
 800053c:	d901      	bls.n	8000542 <writeRegister+0x1a>
		address = 63;
 800053e:	233f      	movs	r3, #63	@ 0x3f
 8000540:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
		address = (address << 1 & ~0x01);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	480c      	ldr	r0, [pc, #48]	@ (8000580 <writeRegister+0x58>)
 8000550:	f002 fc3a 	bl	8002dc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000554:	1df9      	adds	r1, r7, #7
 8000556:	230a      	movs	r3, #10
 8000558:	2201      	movs	r2, #1
 800055a:	480a      	ldr	r0, [pc, #40]	@ (8000584 <writeRegister+0x5c>)
 800055c:	f003 f973 	bl	8003846 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,value,num,10);
 8000560:	79bb      	ldrb	r3, [r7, #6]
 8000562:	b29a      	uxth	r2, r3
 8000564:	230a      	movs	r3, #10
 8000566:	6839      	ldr	r1, [r7, #0]
 8000568:	4806      	ldr	r0, [pc, #24]	@ (8000584 <writeRegister+0x5c>)
 800056a:	f003 f96c 	bl	8003846 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2120      	movs	r1, #32
 8000572:	4803      	ldr	r0, [pc, #12]	@ (8000580 <writeRegister+0x58>)
 8000574:	f002 fc28 	bl	8002dc8 <HAL_GPIO_WritePin>
	

}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40020400 	.word	0x40020400
 8000584:	20000118 	.word	0x20000118

08000588 <readRegister>:
 *	@param value Pointer to buffer that stores the read value
 *	@param num Number of bytes to be written
 * 	@retval none
 */
static void readRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b3f      	cmp	r3, #63	@ 0x3f
 800059c:	d901      	bls.n	80005a2 <readRegister+0x1a>
		address = 63;
 800059e:	233f      	movs	r3, #63	@ 0x3f
 80005a0:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
		address = (address << 1 | 0x01);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <readRegister+0x60>)
 80005b8:	f002 fc06 	bl	8002dc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 80005bc:	1df9      	adds	r1, r7, #7
 80005be:	230a      	movs	r3, #10
 80005c0:	2201      	movs	r2, #1
 80005c2:	480a      	ldr	r0, [pc, #40]	@ (80005ec <readRegister+0x64>)
 80005c4:	f003 f93f 	bl	8003846 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 80005c8:	79bb      	ldrb	r3, [r7, #6]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	230a      	movs	r3, #10
 80005ce:	6839      	ldr	r1, [r7, #0]
 80005d0:	4806      	ldr	r0, [pc, #24]	@ (80005ec <readRegister+0x64>)
 80005d2:	f003 faad 	bl	8003b30 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2120      	movs	r1, #32
 80005da:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <readRegister+0x60>)
 80005dc:	f002 fbf4 	bl	8002dc8 <HAL_GPIO_WritePin>
	
	
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40020400 	.word	0x40020400
 80005ec:	20000118 	.word	0x20000118

080005f0 <adxlFormat>:
						2 		|  				+-8g		
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	uint8_t formatreg=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1); //Set register to 0
 80005fc:	f107 030f 	add.w	r3, r7, #15
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	202c      	movs	r0, #44	@ 0x2c
 8000606:	f7ff ff8f 	bl	8000528 <writeRegister>
	formatreg = (adxl->IntMode << 6 | adxl->Range) & RANGE_REG_MASK;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	78db      	ldrb	r3, [r3, #3]
 800060e:	019b      	lsls	r3, r3, #6
 8000610:	b25a      	sxtb	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	b25b      	sxtb	r3, r3
 8000618:	4313      	orrs	r3, r2
 800061a:	b25b      	sxtb	r3, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 0343 	and.w	r3, r3, #67	@ 0x43
 8000622:	b2db      	uxtb	r3, r3
 8000624:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1);
 8000626:	f107 030f 	add.w	r3, r7, #15
 800062a:	2201      	movs	r2, #1
 800062c:	4619      	mov	r1, r3
 800062e:	202c      	movs	r0, #44	@ 0x2c
 8000630:	f7ff ff7a 	bl	8000528 <writeRegister>

	formatreg = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg,1);
 8000638:	f107 030f 	add.w	r3, r7, #15
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	202d      	movs	r0, #45	@ 0x2d
 8000642:	f7ff ff71 	bl	8000528 <writeRegister>
	formatreg = (adxl->DataReadyMode << 2 | adxl->TempMode << 1 | adxl->StandbyMode) & POWER_CTL_REG_MASK;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	b25a      	sxtb	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	b25b      	sxtb	r3, r3
 8000656:	4313      	orrs	r3, r2
 8000658:	b25a      	sxtb	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b25b      	sxtb	r3, r3
 8000660:	4313      	orrs	r3, r2
 8000662:	b25b      	sxtb	r3, r3
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	b2db      	uxtb	r3, r3
 800066c:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg, 1);
 800066e:	f107 030f 	add.w	r3, r7, #15
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	202d      	movs	r0, #45	@ 0x2d
 8000678:	f7ff ff56 	bl	8000528 <writeRegister>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <adxlReset>:

/**
 * @brief Call to reset ADXL355
 */
static void adxlReset(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
    uint8_t shadow_reg_store[5] = {};
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	2300      	movs	r3, #0
 8000690:	753b      	strb	r3, [r7, #20]
    uint8_t shadow_reg_read[5] = {};
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	2300      	movs	r3, #0
 8000698:	733b      	strb	r3, [r7, #12]
    uint8_t reset_write = ADXL_RESET_WRITE;
 800069a:	2352      	movs	r3, #82	@ 0x52
 800069c:	71fb      	strb	r3, [r7, #7]
    //Store values from shadow registers
    readRegister(SHADOW_REG1, shadow_reg_store, 5);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	2205      	movs	r2, #5
 80006a4:	4619      	mov	r1, r3
 80006a6:	2050      	movs	r0, #80	@ 0x50
 80006a8:	f7ff ff6e 	bl	8000588 <readRegister>
    while (1) {
        //Perform a software reset
        writeRegister(ADXL_RESET, &reset_write, 1);
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	2201      	movs	r2, #1
 80006b0:	4619      	mov	r1, r3
 80006b2:	202f      	movs	r0, #47	@ 0x2f
 80006b4:	f7ff ff38 	bl	8000528 <writeRegister>
        //Read shadow registers after reset
        readRegister(SHADOW_REG1, shadow_reg_read, 5);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2205      	movs	r2, #5
 80006be:	4619      	mov	r1, r3
 80006c0:	2050      	movs	r0, #80	@ 0x50
 80006c2:	f7ff ff61 	bl	8000588 <readRegister>
        // Check if shadow registers match the stored values
        uint8_t match = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	77fb      	strb	r3, [r7, #31]
        for (int i = 0; i < 5; i++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	e011      	b.n	80006f4 <adxlReset+0x70>
            if (shadow_reg_read[i] != shadow_reg_store[i]) {
 80006d0:	f107 0208 	add.w	r2, r7, #8
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	4413      	add	r3, r2
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	f107 0110 	add.w	r1, r7, #16
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	440b      	add	r3, r1
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d002      	beq.n	80006ee <adxlReset+0x6a>
                match = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	77fb      	strb	r3, [r7, #31]
                break;
 80006ec:	e005      	b.n	80006fa <adxlReset+0x76>
        for (int i = 0; i < 5; i++) {
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	3301      	adds	r3, #1
 80006f2:	61bb      	str	r3, [r7, #24]
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	ddea      	ble.n	80006d0 <adxlReset+0x4c>
            }
        }
        // If all shadow registers match, exit the loop
        if (match) break;
 80006fa:	7ffb      	ldrb	r3, [r7, #31]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d100      	bne.n	8000702 <adxlReset+0x7e>
    while (1) {
 8000700:	e7d4      	b.n	80006ac <adxlReset+0x28>
        if (match) break;
 8000702:	bf00      	nop
    }
}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2120      	movs	r1, #32
 8000718:	482d      	ldr	r0, [pc, #180]	@ (80007d0 <ADXL_Init+0xc4>)
 800071a:	f002 fb55 	bl	8002dc8 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 800071e:	2005      	movs	r0, #5
 8000720:	f001 f838 	bl	8001794 <HAL_Delay>
	//Reset device
	adxlReset();
 8000724:	f7ff ffae 	bl	8000684 <adxlReset>
	uint8_t testval[2] = {};
 8000728:	2300      	movs	r3, #0
 800072a:	81bb      	strh	r3, [r7, #12]
	// The Device Address register is constant, i.e. = 0xAD
	readRegister(DEVID_AD, testval, 2);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2202      	movs	r2, #2
 8000732:	4619      	mov	r1, r3
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff ff27 	bl	8000588 <readRegister>
	if (testval[0] != DEVID_AD_DEFAULT_VAL || testval[1] != DEVID_MST_DEFAULT_VAL) return ADXL_ERR;
 800073a:	7b3b      	ldrb	r3, [r7, #12]
 800073c:	2bad      	cmp	r3, #173	@ 0xad
 800073e:	d102      	bne.n	8000746 <ADXL_Init+0x3a>
 8000740:	7b7b      	ldrb	r3, [r7, #13]
 8000742:	2b1d      	cmp	r3, #29
 8000744:	d001      	beq.n	800074a <ADXL_Init+0x3e>
 8000746:	2301      	movs	r3, #1
 8000748:	e03d      	b.n	80007c6 <ADXL_Init+0xba>

	//Init of BW_RATE and DATAFORMAT registers
	adxlFormat(adxl);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff50 	bl	80005f0 <adxlFormat>
	
	// Settings gains 
	switch (adxl->Range) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d01e      	beq.n	8000796 <ADXL_Init+0x8a>
 8000758:	2b03      	cmp	r3, #3
 800075a:	dc28      	bgt.n	80007ae <ADXL_Init+0xa2>
 800075c:	2b01      	cmp	r3, #1
 800075e:	d002      	beq.n	8000766 <ADXL_Init+0x5a>
 8000760:	2b02      	cmp	r3, #2
 8000762:	d00c      	beq.n	800077e <ADXL_Init+0x72>
 8000764:	e023      	b.n	80007ae <ADXL_Init+0xa2>
		case ADXL_RANGE_2G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 8000766:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <ADXL_Init+0xc8>)
 8000768:	4a1b      	ldr	r2, [pc, #108]	@ (80007d8 <ADXL_Init+0xcc>)
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <ADXL_Init+0xc8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1a      	ldr	r2, [pc, #104]	@ (80007dc <ADXL_Init+0xd0>)
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <ADXL_Init+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a19      	ldr	r2, [pc, #100]	@ (80007e0 <ADXL_Init+0xd4>)
 800077a:	6013      	str	r3, [r2, #0]
			break;
 800077c:	e022      	b.n	80007c4 <ADXL_Init+0xb8>
		case ADXL_RANGE_4G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_4G;
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <ADXL_Init+0xc8>)
 8000780:	4a18      	ldr	r2, [pc, #96]	@ (80007e4 <ADXL_Init+0xd8>)
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <ADXL_Init+0xc8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a14      	ldr	r2, [pc, #80]	@ (80007dc <ADXL_Init+0xd0>)
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <ADXL_Init+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a13      	ldr	r2, [pc, #76]	@ (80007e0 <ADXL_Init+0xd4>)
 8000792:	6013      	str	r3, [r2, #0]
			break;
 8000794:	e016      	b.n	80007c4 <ADXL_Init+0xb8>
		case ADXL_RANGE_8G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_8G;
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <ADXL_Init+0xc8>)
 8000798:	4a13      	ldr	r2, [pc, #76]	@ (80007e8 <ADXL_Init+0xdc>)
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <ADXL_Init+0xc8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <ADXL_Init+0xd0>)
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <ADXL_Init+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <ADXL_Init+0xd4>)
 80007aa:	6013      	str	r3, [r2, #0]
			break;
 80007ac:	e00a      	b.n	80007c4 <ADXL_Init+0xb8>
		default:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <ADXL_Init+0xc8>)
 80007b0:	4a09      	ldr	r2, [pc, #36]	@ (80007d8 <ADXL_Init+0xcc>)
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <ADXL_Init+0xc8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <ADXL_Init+0xd0>)
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <ADXL_Init+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <ADXL_Init+0xd4>)
 80007c2:	6013      	str	r3, [r2, #0]
}
			
	return ADXL_OK;
 80007c4:	2300      	movs	r3, #0
	
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40020400 	.word	0x40020400
 80007d4:	20000030 	.word	0x20000030
 80007d8:	36831049 	.word	0x36831049
 80007dc:	2000002c 	.word	0x2000002c
 80007e0:	20000028 	.word	0x20000028
 80007e4:	37031494 	.word	0x37031494
 80007e8:	3783126f 	.word	0x3783126f

080007ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000800:	4a21      	ldr	r2, [pc, #132]	@ (8000888 <MX_ADC1_Init+0x9c>)
 8000802:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000804:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800080a:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <MX_ADC1_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000810:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <MX_ADC1_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_ADC1_Init+0x98>)
 800082c:	4a17      	ldr	r2, [pc, #92]	@ (800088c <MX_ADC1_Init+0xa0>)
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000838:	2201      	movs	r2, #1
 800083a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_ADC1_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000846:	2201      	movs	r2, #1
 8000848:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800084a:	480e      	ldr	r0, [pc, #56]	@ (8000884 <MX_ADC1_Init+0x98>)
 800084c:	f000 ffc6 	bl	80017dc <HAL_ADC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 fbe7 	bl	8001028 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800085a:	230a      	movs	r3, #10
 800085c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085e:	2301      	movs	r3, #1
 8000860:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_ADC1_Init+0x98>)
 800086c:	f000 fffa 	bl	8001864 <HAL_ADC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000876:	f000 fbd7 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000034 	.word	0x20000034
 8000888:	40012000 	.word	0x40012000
 800088c:	0f000001 	.word	0x0f000001

08000890 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	@ 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a15      	ldr	r2, [pc, #84]	@ (8000904 <HAL_ADC_MspInit+0x74>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d123      	bne.n	80008fa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	4a14      	ldr	r2, [pc, #80]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008be:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e2:	2301      	movs	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e6:	2303      	movs	r3, #3
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	@ (800090c <HAL_ADC_MspInit+0x7c>)
 80008f6:	f002 f8bb 	bl	8002a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	@ 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40012000 	.word	0x40012000
 8000908:	40023800 	.word	0x40023800
 800090c:	40020800 	.word	0x40020800

08000910 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000916:	4a18      	ldr	r2, [pc, #96]	@ (8000978 <MX_CAN1_Init+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <MX_CAN1_Init+0x64>)
 800091c:	2202      	movs	r2, #2
 800091e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_CAN1_Init+0x64>)
 800092e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000932:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000936:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800093a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800093c:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <MX_CAN1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000942:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000944:	2201      	movs	r2, #1
 8000946:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <MX_CAN1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_CAN1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000962:	f001 f9cf 	bl	8001d04 <HAL_CAN_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800096c:	f000 fb5c 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000007c 	.word	0x2000007c
 8000978:	40006400 	.word	0x40006400

0800097c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a1b      	ldr	r2, [pc, #108]	@ (8000a08 <HAL_CAN_MspInit+0x8c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12f      	bne.n	80009fe <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ce:	2303      	movs	r3, #3
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009de:	2309      	movs	r3, #9
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4809      	ldr	r0, [pc, #36]	@ (8000a10 <HAL_CAN_MspInit+0x94>)
 80009ea:	f002 f841 	bl	8002a70 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2014      	movs	r0, #20
 80009f4:	f002 f805 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009f8:	2014      	movs	r0, #20
 80009fa:	f002 f81e 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	@ 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40006400 	.word	0x40006400
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020c00 	.word	0x40020c00

08000a14 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a1d      	ldr	r2, [pc, #116]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a17      	ldr	r2, [pc, #92]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a11      	ldr	r2, [pc, #68]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f244 01a1 	movw	r1, #16545	@ 0x40a1
 8000a90:	480b      	ldr	r0, [pc, #44]	@ (8000ac0 <MX_GPIO_Init+0xac>)
 8000a92:	f002 f999 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin;
 8000a96:	f244 03a1 	movw	r3, #16545	@ 0x40a1
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <MX_GPIO_Init+0xac>)
 8000ab0:	f001 ffde 	bl	8002a70 <HAL_GPIO_Init>

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	@ 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	00000000 	.word	0x00000000

08000ac8 <HAL_TIM_IC_CaptureCallback>:
	ADC_VAL = HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);
	return (float)ADC_VAL/4095; //returns ADC percentage ranges from 0-1
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	encoder_counter = __HAL_TIM_GET_COUNTER(htim);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad6:	4a22      	ldr	r2, [pc, #136]	@ (8000b60 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ad8:	6013      	str	r3, [r2, #0]
	if (encoder_counter == 65535) {
 8000ada:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d10b      	bne.n	8000afe <HAL_TIM_IC_CaptureCallback+0x36>
		encoder_temp += 65536;
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000aee:	4a1d      	ldr	r2, [pc, #116]	@ (8000b64 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000af0:	6013      	str	r3, [r2, #0]
		overflow_counter = encoder_temp - 1;
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b68 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	e006      	b.n	8000b0c <HAL_TIM_IC_CaptureCallback+0x44>
	} else {
		overflow_counter = encoder_temp + encoder_counter;
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a17      	ldr	r2, [pc, #92]	@ (8000b68 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000b0a:	6013      	str	r3, [r2, #0]
	}
	encoder_position = overflow_counter/4;
 8000b0c:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	089b      	lsrs	r3, r3, #2
 8000b12:	4a16      	ldr	r2, [pc, #88]	@ (8000b6c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000b14:	6013      	str	r3, [r2, #0]
	C_drivenDistance = (float) (encoder_position/ENCODER_PULSES_PER_WHEEL_TURN_26RPM) * DRIVE_WHEEL_CIRCUMFERENCE_METER;
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	ee07 3a90 	vmov	s15, r3
 8000b1e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000b22:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000b50 <HAL_TIM_IC_CaptureCallback+0x88>
 8000b26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b32:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000b58 <HAL_TIM_IC_CaptureCallback+0x90>
 8000b36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000b40:	edc3 7a00 	vstr	s15, [r3]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	00000000 	.word	0x00000000
 8000b54:	40a2a600 	.word	0x40a2a600
 8000b58:	c0ebedfa 	.word	0xc0ebedfa
 8000b5c:	3fca2339 	.word	0x3fca2339
 8000b60:	200000fc 	.word	0x200000fc
 8000b64:	20000108 	.word	0x20000108
 8000b68:	20000104 	.word	0x20000104
 8000b6c:	20000100 	.word	0x20000100
 8000b70:	2000010c 	.word	0x2000010c

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b78:	f000 fdaf 	bl	80016da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7c:	f000 f886 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b80:	f7ff ff48 	bl	8000a14 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b84:	f000 fa56 	bl	8001034 <MX_SPI1_Init>
  MX_CAN1_Init();
 8000b88:	f7ff fec2 	bl	8000910 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000b8c:	f000 fb58 	bl	8001240 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b90:	f7ff fe2c 	bl	80007ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8000b94:	f000 fbca 	bl	800132c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b98:	f000 fc40 	bl	800141c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_MspInit(&hcan1);
 8000b9c:	4833      	ldr	r0, [pc, #204]	@ (8000c6c <main+0xf8>)
 8000b9e:	f7ff feed 	bl	800097c <HAL_CAN_MspInit>
  CAN_Config();
 8000ba2:	f000 f8cf 	bl	8000d44 <CAN_Config>

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	4830      	ldr	r0, [pc, #192]	@ (8000c6c <main+0xf8>)
 8000baa:	f001 fbf9 	bl	80023a0 <HAL_CAN_ActivateNotification>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <main+0x44>
	  Error_Handler();
 8000bb4:	f000 fa38 	bl	8001028 <Error_Handler>
  }

  ADXL.StandbyMode = ADXL_MODE_MEASUREMENT;
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c70 <main+0xfc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
  ADXL.TempMode = ADXL_TEMP_OFF;
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000c70 <main+0xfc>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	705a      	strb	r2, [r3, #1]
  ADXL.DataReadyMode = ADXL_DRDY_ON;
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <main+0xfc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	709a      	strb	r2, [r3, #2]
  ADXL.IntMode = ADXL_INT_ACTIVELOW;
 8000bca:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <main+0xfc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	70da      	strb	r2, [r3, #3]
  ADXL.Range = ADXL_RANGE_2G;
 8000bd0:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <main+0xfc>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	711a      	strb	r2, [r3, #4]

  TxHeader.StdId = 0x123;
 8000bd6:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <main+0x100>)
 8000bd8:	f240 1223 	movw	r2, #291	@ 0x123
 8000bdc:	601a      	str	r2, [r3, #0]
  TxHeader.DLC = 8;
 8000bde:	4b25      	ldr	r3, [pc, #148]	@ (8000c74 <main+0x100>)
 8000be0:	2208      	movs	r2, #8
 8000be2:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000be4:	4b23      	ldr	r3, [pc, #140]	@ (8000c74 <main+0x100>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000bea:	4b22      	ldr	r3, [pc, #136]	@ (8000c74 <main+0x100>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000bf0:	4b20      	ldr	r3, [pc, #128]	@ (8000c74 <main+0x100>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0x01;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <main+0x104>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x02;
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <main+0x104>)
 8000bfe:	2202      	movs	r2, #2
 8000c00:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x03;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <main+0x104>)
 8000c04:	2203      	movs	r2, #3
 8000c06:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x04;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <main+0x104>)
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0x05;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <main+0x104>)
 8000c10:	2205      	movs	r2, #5
 8000c12:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x06;
 8000c14:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <main+0x104>)
 8000c16:	2206      	movs	r2, #6
 8000c18:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0x07;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <main+0x104>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0x08;
 8000c20:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <main+0x104>)
 8000c22:	2208      	movs	r2, #8
 8000c24:	71da      	strb	r2, [r3, #7]


  ADXL_Init(&ADXL);
 8000c26:	4812      	ldr	r0, [pc, #72]	@ (8000c70 <main+0xfc>)
 8000c28:	f7ff fd70 	bl	800070c <ADXL_Init>
//  ADXL_Measure(ON);

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4813      	ldr	r0, [pc, #76]	@ (8000c7c <main+0x108>)
 8000c30:	f003 fd94 	bl	800475c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c34:	2100      	movs	r1, #0
 8000c36:	4812      	ldr	r0, [pc, #72]	@ (8000c80 <main+0x10c>)
 8000c38:	f003 fd90 	bl	800475c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000c3c:	213c      	movs	r1, #60	@ 0x3c
 8000c3e:	4811      	ldr	r0, [pc, #68]	@ (8000c84 <main+0x110>)
 8000c40:	f003 ff2c 	bl	8004a9c <HAL_TIM_Encoder_Start_IT>

  htim2.Instance->CCR1 = SERVO_CCR_AT_CENTER;
 8000c44:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <main+0x108>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f240 22fd 	movw	r2, #765	@ 0x2fd
 8000c4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Drive_Motor_Start(2);
 8000c4e:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000c52:	f000 f9a5 	bl	8000fa0 <Drive_Motor_Start>
	  Steering_Servo_Control(dis_off);
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <main+0x114>)
 8000c58:	f993 3000 	ldrsb.w	r3, [r3]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f8d3 	bl	8000e08 <Steering_Servo_Control>
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  ADXL_getAccelRaw(accelData);
//	  ADXL_getAccelFloat(accelData_g);

//	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  HAL_Delay(10);
 8000c62:	200a      	movs	r0, #10
 8000c64:	f000 fd96 	bl	8001794 <HAL_Delay>
	  Drive_Motor_Start(2);
 8000c68:	bf00      	nop
 8000c6a:	e7f0      	b.n	8000c4e <main+0xda>
 8000c6c:	2000007c 	.word	0x2000007c
 8000c70:	200000e8 	.word	0x200000e8
 8000c74:	200000a4 	.word	0x200000a4
 8000c78:	200000d8 	.word	0x200000d8
 8000c7c:	2000017c 	.word	0x2000017c
 8000c80:	200001c8 	.word	0x200001c8
 8000c84:	20000214 	.word	0x20000214
 8000c88:	200000ed 	.word	0x200000ed

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b094      	sub	sp, #80	@ 0x50
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	2234      	movs	r2, #52	@ 0x34
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f004 ff30 	bl	8005b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb0:	4b22      	ldr	r3, [pc, #136]	@ (8000d3c <SystemClock_Config+0xb0>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb4:	4a21      	ldr	r2, [pc, #132]	@ (8000d3c <SystemClock_Config+0xb0>)
 8000cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <SystemClock_Config+0xb0>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <SystemClock_Config+0xb4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d40 <SystemClock_Config+0xb4>)
 8000cd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b19      	ldr	r3, [pc, #100]	@ (8000d40 <SystemClock_Config+0xb4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cec:	2310      	movs	r3, #16
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f002 f899 	bl	8002e30 <HAL_RCC_OscConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000d04:	f000 f990 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d08:	230f      	movs	r3, #15
 8000d0a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 fb32 	bl	800338c <HAL_RCC_ClockConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d2e:	f000 f97b 	bl	8001028 <Error_Handler>
  }
}
 8000d32:	bf00      	nop
 8000d34:	3750      	adds	r7, #80	@ 0x50
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40007000 	.word	0x40007000

08000d44 <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 8000d4a:	230d      	movs	r3, #13
 8000d4c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d52:	2301      	movs	r3, #1
 8000d54:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000; //Only ID 0x284 and 0x285 can pass through
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	4619      	mov	r1, r3
 8000d76:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <CAN_Config+0x5c>)
 8000d78:	f001 f8c0 	bl	8001efc <HAL_CAN_ConfigFilter>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <CAN_Config+0x42>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000d82:	f000 f951 	bl	8001028 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000d86:	4806      	ldr	r0, [pc, #24]	@ (8000da0 <CAN_Config+0x5c>)
 8000d88:	f001 f9a4 	bl	80020d4 <HAL_CAN_Start>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <CAN_Config+0x52>
	{
		/* Start Error */
		Error_Handler();
 8000d92:	f000 f949 	bl	8001028 <Error_Handler>
	}
}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	@ 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000007c 	.word	0x2000007c

08000da4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	@ (8000df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000db0:	2100      	movs	r1, #0
 8000db2:	4812      	ldr	r0, [pc, #72]	@ (8000dfc <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000db4:	f001 f9d2 	bl	800215c <HAL_CAN_GetRxMessage>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000dbe:	2180      	movs	r1, #128	@ 0x80
 8000dc0:	480f      	ldr	r0, [pc, #60]	@ (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000dc2:	f002 f81a 	bl	8002dfa <HAL_GPIO_TogglePin>
		Error_Handler();
 8000dc6:	f000 f92f 	bl	8001028 <Error_Handler>
	}

	if (RxHeader.StdId == 0x123) {
 8000dca:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f240 1223 	movw	r2, #291	@ 0x123
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10a      	bne.n	8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	4809      	ldr	r0, [pc, #36]	@ (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000dda:	f002 f80e 	bl	8002dfa <HAL_GPIO_TogglePin>
		dis_off = RxData[0]*(-1);
 8000dde:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	425b      	negs	r3, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	b25a      	sxtb	r2, r3
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000dea:	701a      	strb	r2, [r3, #0]
	}

}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200000e0 	.word	0x200000e0
 8000df8:	200000bc 	.word	0x200000bc
 8000dfc:	2000007c 	.word	0x2000007c
 8000e00:	40020400 	.word	0x40020400
 8000e04:	200000ed 	.word	0x200000ed

08000e08 <Steering_Servo_Control>:

void Steering_Servo_Control(int8_t offsetVal){
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
	//Clamp dis_off to valid range
	static float integral = 0.0f;     // integral term (accumulated error)

	if (offsetVal != -100){
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000e1a:	f000 8086 	beq.w	8000f2a <Steering_Servo_Control+0x122>
		if (offsetVal < DIS_OFF_MAX_LEFT) {
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	f113 0f43 	cmn.w	r3, #67	@ 0x43
 8000e26:	da02      	bge.n	8000e2e <Steering_Servo_Control+0x26>
			offsetVal = DIS_OFF_MAX_LEFT;
 8000e28:	23bd      	movs	r3, #189	@ 0xbd
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	e005      	b.n	8000e3a <Steering_Servo_Control+0x32>
		} else if (offsetVal >= DIS_OFF_MAX_RIGHT) {
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	2b42      	cmp	r3, #66	@ 0x42
 8000e34:	dd01      	ble.n	8000e3a <Steering_Servo_Control+0x32>
			offsetVal = DIS_OFF_MAX_RIGHT;
 8000e36:	2343      	movs	r3, #67	@ 0x43
 8000e38:	71fb      	strb	r3, [r7, #7]
		}

		float error = offsetVal;   // setpoint is zero offset
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	ee07 3a90 	vmov	s15, r3
 8000e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e46:	edc7 7a04 	vstr	s15, [r7, #16]
		integral += error * DT;           // integrate
 8000e4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e4e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8000f38 <Steering_Servo_Control+0x130>
 8000e52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e56:	4b39      	ldr	r3, [pc, #228]	@ (8000f3c <Steering_Servo_Control+0x134>)
 8000e58:	edd3 7a00 	vldr	s15, [r3]
 8000e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e60:	4b36      	ldr	r3, [pc, #216]	@ (8000f3c <Steering_Servo_Control+0x134>)
 8000e62:	edc3 7a00 	vstr	s15, [r3]

		// PID output = KP*error + KI*integral + KD*derivative
		float pidOutput = (KP * error) + (KI * integral);
 8000e66:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e6a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000e6e:	4b33      	ldr	r3, [pc, #204]	@ (8000f3c <Steering_Servo_Control+0x134>)
 8000e70:	edd3 7a00 	vldr	s15, [r3]
 8000e74:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8000e78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e80:	edc7 7a03 	vstr	s15, [r7, #12]

		//Linear interpolation from dis_off to steering angle
		float steerAngle = STEERING_ANGLE_MAX_LEFT
			+ ( (float)(pidOutput - DIS_OFF_MAX_LEFT)
 8000e84:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e88:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000f40 <Steering_Servo_Control+0x138>
 8000e8c:	ee37 7a87 	vadd.f32	s14, s15, s14
				/ (float)(DIS_OFF_MAX_RIGHT - DIS_OFF_MAX_LEFT) )
 8000e90:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8000f44 <Steering_Servo_Control+0x13c>
 8000e94:	eec7 7a26 	vdiv.f32	s15, s14, s13
			  * ( STEERING_ANGLE_MAX_RIGHT - STEERING_ANGLE_MAX_LEFT );
 8000e98:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8000f48 <Steering_Servo_Control+0x140>
 8000e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
		float steerAngle = STEERING_ANGLE_MAX_LEFT
 8000ea0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000ea4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ea8:	edc7 7a05 	vstr	s15, [r7, #20]

//		float steerAngle = pidOutput;
		    if (steerAngle < STEERING_ANGLE_MAX_LEFT) {
 8000eac:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eb0:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8000eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	d502      	bpl.n	8000ec4 <Steering_Servo_Control+0xbc>
		        steerAngle = STEERING_ANGLE_MAX_LEFT;   // clamp to -20°
 8000ebe:	4b23      	ldr	r3, [pc, #140]	@ (8000f4c <Steering_Servo_Control+0x144>)
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	e00a      	b.n	8000eda <Steering_Servo_Control+0xd2>
		    }
		    else if (steerAngle > STEERING_ANGLE_MAX_RIGHT) {
 8000ec4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ec8:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed4:	dd01      	ble.n	8000eda <Steering_Servo_Control+0xd2>
		        steerAngle = STEERING_ANGLE_MAX_RIGHT;  // clamp to +20°
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <Steering_Servo_Control+0x148>)
 8000ed8:	617b      	str	r3, [r7, #20]
		    }
		//Linear interpolation from steering angle to ccr value
		float ccrValue = SERVO_CCR_AT_NEG20
			+ ( (steerAngle - STEERING_ANGLE_MAX_LEFT)
 8000eda:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ede:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000ee2:	ee37 7a87 	vadd.f32	s14, s15, s14
				/ (STEERING_ANGLE_MAX_RIGHT - STEERING_ANGLE_MAX_LEFT) )
 8000ee6:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000f48 <Steering_Servo_Control+0x140>
 8000eea:	eec7 7a26 	vdiv.f32	s15, s14, s13
			  * (SERVO_CCR_AT_POS20 - SERVO_CCR_AT_NEG20);
 8000eee:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000f54 <Steering_Servo_Control+0x14c>
 8000ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
		float ccrValue = SERVO_CCR_AT_NEG20
 8000ef6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000f58 <Steering_Servo_Control+0x150>
 8000efa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000efe:	edc7 7a02 	vstr	s15, [r7, #8]

		//Write to the timer’s CCR register (cast to uint16_t)
		htim2.Instance->CCR1 = (uint16_t) ccrValue;
 8000f02:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f0a:	ee17 3a90 	vmov	r3, s15
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <Steering_Servo_Control+0x154>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	635a      	str	r2, [r3, #52]	@ 0x34
		integral_global = integral;
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <Steering_Servo_Control+0x134>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a11      	ldr	r2, [pc, #68]	@ (8000f60 <Steering_Servo_Control+0x158>)
 8000f1c:	6013      	str	r3, [r2, #0]
		pidOutput_global = pidOutput;
 8000f1e:	4a11      	ldr	r2, [pc, #68]	@ (8000f64 <Steering_Servo_Control+0x15c>)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6013      	str	r3, [r2, #0]
		steerAngle_global = steerAngle;
 8000f24:	4a10      	ldr	r2, [pc, #64]	@ (8000f68 <Steering_Servo_Control+0x160>)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	6013      	str	r3, [r2, #0]
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	371c      	adds	r7, #28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	3c23d70a 	.word	0x3c23d70a
 8000f3c:	20000110 	.word	0x20000110
 8000f40:	42860000 	.word	0x42860000
 8000f44:	43060000 	.word	0x43060000
 8000f48:	42200000 	.word	0x42200000
 8000f4c:	c1a00000 	.word	0xc1a00000
 8000f50:	41a00000 	.word	0x41a00000
 8000f54:	43160000 	.word	0x43160000
 8000f58:	442c8000 	.word	0x442c8000
 8000f5c:	2000017c 	.word	0x2000017c
 8000f60:	200000f0 	.word	0x200000f0
 8000f64:	200000f4 	.word	0x200000f4
 8000f68:	200000f8 	.word	0x200000f8

08000f6c <Drive_Motor_Control>:

void Drive_Motor_Control(uint16_t speed){
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	80fb      	strh	r3, [r7, #6]
	//Clamp input speed
	if (speed >= DRIVE_MOTOR_MIN_SPEED && speed <= DRIVE_MOTOR_MAX_SPEED){
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f7c:	d804      	bhi.n	8000f88 <Drive_Motor_Control+0x1c>
		  htim3.Instance->CCR1 = speed;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <Drive_Motor_Control+0x30>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	88fa      	ldrh	r2, [r7, #6]
 8000f84:	635a      	str	r2, [r3, #52]	@ 0x34
	} else {
		  htim3.Instance->CCR1 = DRIVE_MOTOR_MIN_SPEED;
	}
}
 8000f86:	e003      	b.n	8000f90 <Drive_Motor_Control+0x24>
		  htim3.Instance->CCR1 = DRIVE_MOTOR_MIN_SPEED;
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <Drive_Motor_Control+0x30>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	200001c8 	.word	0x200001c8

08000fa0 <Drive_Motor_Start>:

void Drive_Motor_Start(float drivenDistance){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint8_t fullSpeed = 0;
	//Speed ramp up
	if (!fullSpeed) {
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <Drive_Motor_Start+0x80>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d115      	bne.n	8000fde <Drive_Motor_Start+0x3e>
		for (int speed = 100; speed < DRIVE_MOTOR_MAX_SPEED; speed += 2){
 8000fb2:	2364      	movs	r3, #100	@ 0x64
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	e00a      	b.n	8000fce <Drive_Motor_Start+0x2e>
			Drive_Motor_Control(speed);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ffd5 	bl	8000f6c <Drive_Motor_Control>
			HAL_Delay(1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f000 fbe6 	bl	8001794 <HAL_Delay>
		for (int speed = 100; speed < DRIVE_MOTOR_MAX_SPEED; speed += 2){
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3302      	adds	r3, #2
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fd4:	dbf0      	blt.n	8000fb8 <Drive_Motor_Start+0x18>
		}
		fullSpeed = 1;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <Drive_Motor_Start+0x80>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
	} else if (C_drivenDistance >= drivenDistance){
		Drive_Motor_Control(DRIVE_MOTOR_MIN_SPEED);
	} else if (C_drivenDistance < drivenDistance){
		Drive_Motor_Control(DRIVE_MOTOR_MAX_SPEED);
	}
}
 8000fdc:	e01c      	b.n	8001018 <Drive_Motor_Start+0x78>
	} else if (C_drivenDistance >= drivenDistance){
 8000fde:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <Drive_Motor_Start+0x84>)
 8000fe0:	edd3 7a00 	vldr	s15, [r3]
 8000fe4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fe8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff0:	d803      	bhi.n	8000ffa <Drive_Motor_Start+0x5a>
		Drive_Motor_Control(DRIVE_MOTOR_MIN_SPEED);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff ffba 	bl	8000f6c <Drive_Motor_Control>
}
 8000ff8:	e00e      	b.n	8001018 <Drive_Motor_Start+0x78>
	} else if (C_drivenDistance < drivenDistance){
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <Drive_Motor_Start+0x84>)
 8000ffc:	edd3 7a00 	vldr	s15, [r3]
 8001000:	ed97 7a01 	vldr	s14, [r7, #4]
 8001004:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100c:	dc00      	bgt.n	8001010 <Drive_Motor_Start+0x70>
}
 800100e:	e003      	b.n	8001018 <Drive_Motor_Start+0x78>
		Drive_Motor_Control(DRIVE_MOTOR_MAX_SPEED);
 8001010:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001014:	f7ff ffaa 	bl	8000f6c <Drive_Motor_Control>
}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000114 	.word	0x20000114
 8001024:	2000010c 	.word	0x2000010c

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <Error_Handler+0x8>

08001034 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001038:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <MX_SPI1_Init+0x74>)
 800103a:	4a1c      	ldr	r2, [pc, #112]	@ (80010ac <MX_SPI1_Init+0x78>)
 800103c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800103e:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <MX_SPI1_Init+0x74>)
 8001040:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001044:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001046:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <MX_SPI1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800104c:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <MX_SPI1_Init+0x74>)
 800104e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001052:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001054:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <MX_SPI1_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <MX_SPI1_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <MX_SPI1_Init+0x74>)
 8001062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001066:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001068:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <MX_SPI1_Init+0x74>)
 800106a:	2210      	movs	r2, #16
 800106c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <MX_SPI1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <MX_SPI1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <MX_SPI1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <MX_SPI1_Init+0x74>)
 8001082:	2207      	movs	r2, #7
 8001084:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001086:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <MX_SPI1_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <MX_SPI1_Init+0x74>)
 800108e:	2208      	movs	r2, #8
 8001090:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <MX_SPI1_Init+0x74>)
 8001094:	f002 fb2c 	bl	80036f0 <HAL_SPI_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800109e:	f7ff ffc3 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000118 	.word	0x20000118
 80010ac:	40013000 	.word	0x40013000

080010b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	@ 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a17      	ldr	r2, [pc, #92]	@ (800112c <HAL_SPI_MspInit+0x7c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d127      	bne.n	8001122 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010d2:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <HAL_SPI_MspInit+0x80>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	4a16      	ldr	r2, [pc, #88]	@ (8001130 <HAL_SPI_MspInit+0x80>)
 80010d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <HAL_SPI_MspInit+0x80>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <HAL_SPI_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a10      	ldr	r2, [pc, #64]	@ (8001130 <HAL_SPI_MspInit+0x80>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <HAL_SPI_MspInit+0x80>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001102:	23e0      	movs	r3, #224	@ 0xe0
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001112:	2305      	movs	r3, #5
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	@ (8001134 <HAL_SPI_MspInit+0x84>)
 800111e:	f001 fca7 	bl	8002a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	@ 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40013000 	.word	0x40013000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000

08001138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <HAL_MspInit+0x44>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <HAL_MspInit+0x44>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001148:	6413      	str	r3, [r2, #64]	@ 0x40
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <HAL_MspInit+0x44>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <HAL_MspInit+0x44>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	4a08      	ldr	r2, [pc, #32]	@ (800117c <HAL_MspInit+0x44>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001160:	6453      	str	r3, [r2, #68]	@ 0x44
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_MspInit+0x44>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <NMI_Handler+0x4>

08001188 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <MemManage_Handler+0x4>

08001198 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d6:	f000 fabd 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80011e4:	4802      	ldr	r0, [pc, #8]	@ (80011f0 <CAN1_RX0_IRQHandler+0x10>)
 80011e6:	f001 f901 	bl	80023ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000007c 	.word	0x2000007c

080011f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011f8:	4802      	ldr	r0, [pc, #8]	@ (8001204 <TIM2_IRQHandler+0x10>)
 80011fa:	f003 fcfd 	bl	8004bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000017c 	.word	0x2000017c

08001208 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <TIM4_IRQHandler+0x10>)
 800120e:	f003 fcf3 	bl	8004bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000214 	.word	0x20000214

0800121c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <SystemInit+0x20>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001226:	4a05      	ldr	r2, [pc, #20]	@ (800123c <SystemInit+0x20>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	@ 0x38
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001260:	463b      	mov	r3, r7
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
 800126e:	615a      	str	r2, [r3, #20]
 8001270:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001272:	4b2d      	ldr	r3, [pc, #180]	@ (8001328 <MX_TIM2_Init+0xe8>)
 8001274:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001278:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 800127a:	4b2b      	ldr	r3, [pc, #172]	@ (8001328 <MX_TIM2_Init+0xe8>)
 800127c:	221f      	movs	r2, #31
 800127e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b29      	ldr	r3, [pc, #164]	@ (8001328 <MX_TIM2_Init+0xe8>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001286:	4b28      	ldr	r3, [pc, #160]	@ (8001328 <MX_TIM2_Init+0xe8>)
 8001288:	f242 720f 	movw	r2, #9999	@ 0x270f
 800128c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b26      	ldr	r3, [pc, #152]	@ (8001328 <MX_TIM2_Init+0xe8>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b24      	ldr	r3, [pc, #144]	@ (8001328 <MX_TIM2_Init+0xe8>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800129a:	4823      	ldr	r0, [pc, #140]	@ (8001328 <MX_TIM2_Init+0xe8>)
 800129c:	f003 f9a6 	bl	80045ec <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012a6:	f7ff febf 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012b4:	4619      	mov	r1, r3
 80012b6:	481c      	ldr	r0, [pc, #112]	@ (8001328 <MX_TIM2_Init+0xe8>)
 80012b8:	f003 feba 	bl	8005030 <HAL_TIM_ConfigClockSource>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012c2:	f7ff feb1 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012c6:	4818      	ldr	r0, [pc, #96]	@ (8001328 <MX_TIM2_Init+0xe8>)
 80012c8:	f003 f9e7 	bl	800469a <HAL_TIM_PWM_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80012d2:	f7ff fea9 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	4810      	ldr	r0, [pc, #64]	@ (8001328 <MX_TIM2_Init+0xe8>)
 80012e6:	f004 fb5f 	bl	80059a8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012f0:	f7ff fe9a 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f4:	2360      	movs	r3, #96	@ 0x60
 80012f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	4619      	mov	r1, r3
 800130a:	4807      	ldr	r0, [pc, #28]	@ (8001328 <MX_TIM2_Init+0xe8>)
 800130c:	f003 fd7c 	bl	8004e08 <HAL_TIM_PWM_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001316:	f7ff fe87 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800131a:	4803      	ldr	r0, [pc, #12]	@ (8001328 <MX_TIM2_Init+0xe8>)
 800131c:	f000 f958 	bl	80015d0 <HAL_TIM_MspPostInit>

}
 8001320:	bf00      	nop
 8001322:	3738      	adds	r7, #56	@ 0x38
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2000017c 	.word	0x2000017c

0800132c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	@ 0x38
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800135e:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <MX_TIM3_Init+0xe8>)
 8001360:	4a2d      	ldr	r2, [pc, #180]	@ (8001418 <MX_TIM3_Init+0xec>)
 8001362:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8001364:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <MX_TIM3_Init+0xe8>)
 8001366:	2207      	movs	r2, #7
 8001368:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <MX_TIM3_Init+0xe8>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <MX_TIM3_Init+0xe8>)
 8001372:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001376:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <MX_TIM3_Init+0xe8>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <MX_TIM3_Init+0xe8>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001384:	4823      	ldr	r0, [pc, #140]	@ (8001414 <MX_TIM3_Init+0xe8>)
 8001386:	f003 f931 	bl	80045ec <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001390:	f7ff fe4a 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001394:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800139a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800139e:	4619      	mov	r1, r3
 80013a0:	481c      	ldr	r0, [pc, #112]	@ (8001414 <MX_TIM3_Init+0xe8>)
 80013a2:	f003 fe45 	bl	8005030 <HAL_TIM_ConfigClockSource>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013ac:	f7ff fe3c 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013b0:	4818      	ldr	r0, [pc, #96]	@ (8001414 <MX_TIM3_Init+0xe8>)
 80013b2:	f003 f972 	bl	800469a <HAL_TIM_PWM_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013bc:	f7ff fe34 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4811      	ldr	r0, [pc, #68]	@ (8001414 <MX_TIM3_Init+0xe8>)
 80013d0:	f004 faea 	bl	80059a8 <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013da:	f7ff fe25 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013de:	2360      	movs	r3, #96	@ 0x60
 80013e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	4619      	mov	r1, r3
 80013f4:	4807      	ldr	r0, [pc, #28]	@ (8001414 <MX_TIM3_Init+0xe8>)
 80013f6:	f003 fd07 	bl	8004e08 <HAL_TIM_PWM_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001400:	f7ff fe12 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001404:	4803      	ldr	r0, [pc, #12]	@ (8001414 <MX_TIM3_Init+0xe8>)
 8001406:	f000 f8e3 	bl	80015d0 <HAL_TIM_MspPostInit>

}
 800140a:	bf00      	nop
 800140c:	3738      	adds	r7, #56	@ 0x38
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200001c8 	.word	0x200001c8
 8001418:	40000400 	.word	0x40000400

0800141c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08c      	sub	sp, #48	@ 0x30
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2224      	movs	r2, #36	@ 0x24
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f004 fb68 	bl	8005b00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800143a:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <MX_TIM4_Init+0xa4>)
 800143c:	4a21      	ldr	r2, [pc, #132]	@ (80014c4 <MX_TIM4_Init+0xa8>)
 800143e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001440:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <MX_TIM4_Init+0xa4>)
 8001442:	2200      	movs	r2, #0
 8001444:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <MX_TIM4_Init+0xa4>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800144c:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <MX_TIM4_Init+0xa4>)
 800144e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001452:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001454:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <MX_TIM4_Init+0xa4>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145a:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <MX_TIM4_Init+0xa4>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001460:	2303      	movs	r3, #3
 8001462:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001468:	2301      	movs	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001478:	2301      	movs	r3, #1
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	4619      	mov	r1, r3
 800148a:	480d      	ldr	r0, [pc, #52]	@ (80014c0 <MX_TIM4_Init+0xa4>)
 800148c:	f003 fa60 	bl	8004950 <HAL_TIM_Encoder_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001496:	f7ff fdc7 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014a2:	463b      	mov	r3, r7
 80014a4:	4619      	mov	r1, r3
 80014a6:	4806      	ldr	r0, [pc, #24]	@ (80014c0 <MX_TIM4_Init+0xa4>)
 80014a8:	f004 fa7e 	bl	80059a8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80014b2:	f7ff fdb9 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	3730      	adds	r7, #48	@ 0x30
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000214 	.word	0x20000214
 80014c4:	40000800 	.word	0x40000800

080014c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014d8:	d114      	bne.n	8001504 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <HAL_TIM_Base_MspInit+0x68>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	4a14      	ldr	r2, [pc, #80]	@ (8001530 <HAL_TIM_Base_MspInit+0x68>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e6:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_TIM_Base_MspInit+0x68>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	201c      	movs	r0, #28
 80014f8:	f001 fa83 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014fc:	201c      	movs	r0, #28
 80014fe:	f001 fa9c 	bl	8002a3a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001502:	e010      	b.n	8001526 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <HAL_TIM_Base_MspInit+0x6c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d10b      	bne.n	8001526 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800150e:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <HAL_TIM_Base_MspInit+0x68>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	4a07      	ldr	r2, [pc, #28]	@ (8001530 <HAL_TIM_Base_MspInit+0x68>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
 800151a:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <HAL_TIM_Base_MspInit+0x68>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40000400 	.word	0x40000400

08001538 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1b      	ldr	r2, [pc, #108]	@ (80015c4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d130      	bne.n	80015bc <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800155a:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <HAL_TIM_Encoder_MspInit+0x90>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	4a1a      	ldr	r2, [pc, #104]	@ (80015c8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6413      	str	r3, [r2, #64]	@ 0x40
 8001566:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a14      	ldr	r2, [pc, #80]	@ (80015c8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001578:	f043 0308 	orr.w	r3, r3, #8
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800158a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800159c:	2302      	movs	r3, #2
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4809      	ldr	r0, [pc, #36]	@ (80015cc <HAL_TIM_Encoder_MspInit+0x94>)
 80015a8:	f001 fa62 	bl	8002a70 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	201e      	movs	r0, #30
 80015b2:	f001 fa26 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015b6:	201e      	movs	r0, #30
 80015b8:	f001 fa3f 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	@ 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40000800 	.word	0x40000800
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020c00 	.word	0x40020c00

080015d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	@ 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015f0:	d11c      	bne.n	800162c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <HAL_TIM_MspPostInit+0xa8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a20      	ldr	r2, [pc, #128]	@ (8001678 <HAL_TIM_MspPostInit+0xa8>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001678 <HAL_TIM_MspPostInit+0xa8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800160a:	2301      	movs	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800161a:	2301      	movs	r3, #1
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4815      	ldr	r0, [pc, #84]	@ (800167c <HAL_TIM_MspPostInit+0xac>)
 8001626:	f001 fa23 	bl	8002a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800162a:	e020      	b.n	800166e <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a13      	ldr	r2, [pc, #76]	@ (8001680 <HAL_TIM_MspPostInit+0xb0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d11b      	bne.n	800166e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <HAL_TIM_MspPostInit+0xa8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a0f      	ldr	r2, [pc, #60]	@ (8001678 <HAL_TIM_MspPostInit+0xa8>)
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <HAL_TIM_MspPostInit+0xa8>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800164e:	2340      	movs	r3, #64	@ 0x40
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165a:	2302      	movs	r3, #2
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800165e:	2302      	movs	r3, #2
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4806      	ldr	r0, [pc, #24]	@ (8001684 <HAL_TIM_MspPostInit+0xb4>)
 800166a:	f001 fa01 	bl	8002a70 <HAL_GPIO_Init>
}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	@ 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40020000 	.word	0x40020000
 8001680:	40000400 	.word	0x40000400
 8001684:	40020800 	.word	0x40020800

08001688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800168c:	f7ff fdc6 	bl	800121c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001690:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001692:	490d      	ldr	r1, [pc, #52]	@ (80016c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a8:	4c0a      	ldr	r4, [pc, #40]	@ (80016d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016b6:	f004 fa2b 	bl	8005b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ba:	f7ff fa5b 	bl	8000b74 <main>
  bx  lr    
 80016be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016cc:	08005b90 	.word	0x08005b90
  ldr r2, =_sbss
 80016d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016d4:	20000264 	.word	0x20000264

080016d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC_IRQHandler>

080016da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016de:	2003      	movs	r0, #3
 80016e0:	f001 f984 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e4:	200f      	movs	r0, #15
 80016e6:	f000 f805 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ea:	f7ff fd25 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016fc:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <HAL_InitTick+0x54>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <HAL_InitTick+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f001 f99f 	bl	8002a56 <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f001 f967 	bl	8002a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	@ (8001750 <HAL_InitTick+0x5c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000000 	.word	0x20000000
 800174c:	20000008 	.word	0x20000008
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	@ (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008
 8001778:	20000260 	.word	0x20000260

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	@ (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000260 	.word	0x20000260

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000008 	.word	0x20000008

080017dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e031      	b.n	8001856 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff f848 	bl	8000890 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	d116      	bne.n	8001848 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <HAL_ADC_Init+0x84>)
 8001820:	4013      	ands	r3, r2
 8001822:	f043 0202 	orr.w	r2, r3, #2
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f970 	bl	8001b10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	f023 0303 	bic.w	r3, r3, #3
 800183e:	f043 0201 	orr.w	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	641a      	str	r2, [r3, #64]	@ 0x40
 8001846:	e001      	b.n	800184c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	ffffeefd 	.word	0xffffeefd

08001864 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1c>
 800187c:	2302      	movs	r3, #2
 800187e:	e136      	b.n	8001aee <HAL_ADC_ConfigChannel+0x28a>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b09      	cmp	r3, #9
 800188e:	d93a      	bls.n	8001906 <HAL_ADC_ConfigChannel+0xa2>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001898:	d035      	beq.n	8001906 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68d9      	ldr	r1, [r3, #12]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	3b1e      	subs	r3, #30
 80018b0:	2207      	movs	r2, #7
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	400a      	ands	r2, r1
 80018be:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a8d      	ldr	r2, [pc, #564]	@ (8001afc <HAL_ADC_ConfigChannel+0x298>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10a      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68d9      	ldr	r1, [r3, #12]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	061a      	lsls	r2, r3, #24
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018de:	e035      	b.n	800194c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68d9      	ldr	r1, [r3, #12]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	4618      	mov	r0, r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4403      	add	r3, r0
 80018f8:	3b1e      	subs	r3, #30
 80018fa:	409a      	lsls	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001904:	e022      	b.n	800194c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6919      	ldr	r1, [r3, #16]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	2207      	movs	r2, #7
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43da      	mvns	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	400a      	ands	r2, r1
 8001928:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6919      	ldr	r1, [r3, #16]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	4603      	mov	r3, r0
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4403      	add	r3, r0
 8001942:	409a      	lsls	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b06      	cmp	r3, #6
 8001952:	d824      	bhi.n	800199e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	3b05      	subs	r3, #5
 8001966:	221f      	movs	r2, #31
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43da      	mvns	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	400a      	ands	r2, r1
 8001974:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	b29b      	uxth	r3, r3
 8001982:	4618      	mov	r0, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	3b05      	subs	r3, #5
 8001990:	fa00 f203 	lsl.w	r2, r0, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	635a      	str	r2, [r3, #52]	@ 0x34
 800199c:	e04c      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d824      	bhi.n	80019f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	3b23      	subs	r3, #35	@ 0x23
 80019b8:	221f      	movs	r2, #31
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	400a      	ands	r2, r1
 80019c6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4618      	mov	r0, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	3b23      	subs	r3, #35	@ 0x23
 80019e2:	fa00 f203 	lsl.w	r2, r0, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80019ee:	e023      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	3b41      	subs	r3, #65	@ 0x41
 8001a02:	221f      	movs	r2, #31
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43da      	mvns	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	400a      	ands	r2, r1
 8001a10:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	3b41      	subs	r3, #65	@ 0x41
 8001a2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a30      	ldr	r2, [pc, #192]	@ (8001b00 <HAL_ADC_ConfigChannel+0x29c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10a      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x1f4>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a4a:	d105      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4a2c      	ldr	r2, [pc, #176]	@ (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a52:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a56:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a28      	ldr	r2, [pc, #160]	@ (8001b00 <HAL_ADC_ConfigChannel+0x29c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d10f      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x21e>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b12      	cmp	r3, #18
 8001a68:	d10b      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001a6a:	4b26      	ldr	r3, [pc, #152]	@ (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4a25      	ldr	r2, [pc, #148]	@ (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a70:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001a74:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a76:	4b23      	ldr	r3, [pc, #140]	@ (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4a22      	ldr	r2, [pc, #136]	@ (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a80:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1e      	ldr	r2, [pc, #120]	@ (8001b00 <HAL_ADC_ConfigChannel+0x29c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d12b      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x280>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1a      	ldr	r2, [pc, #104]	@ (8001afc <HAL_ADC_ConfigChannel+0x298>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d003      	beq.n	8001a9e <HAL_ADC_ConfigChannel+0x23a>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b11      	cmp	r3, #17
 8001a9c:	d122      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a9e:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4a18      	ldr	r2, [pc, #96]	@ (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001aa4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001aa8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001aaa:	4b16      	ldr	r3, [pc, #88]	@ (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4a15      	ldr	r2, [pc, #84]	@ (8001b04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ab0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ab4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a10      	ldr	r2, [pc, #64]	@ (8001afc <HAL_ADC_ConfigChannel+0x298>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d111      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <HAL_ADC_ConfigChannel+0x2a4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a11      	ldr	r2, [pc, #68]	@ (8001b0c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0c9a      	lsrs	r2, r3, #18
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ad6:	e002      	b.n	8001ade <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f9      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	10000012 	.word	0x10000012
 8001b00:	40012000 	.word	0x40012000
 8001b04:	40012300 	.word	0x40012300
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	431bde83 	.word	0x431bde83

08001b10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001b18:	4b78      	ldr	r3, [pc, #480]	@ (8001cfc <ADC_Init+0x1ec>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4a77      	ldr	r2, [pc, #476]	@ (8001cfc <ADC_Init+0x1ec>)
 8001b1e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001b22:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001b24:	4b75      	ldr	r3, [pc, #468]	@ (8001cfc <ADC_Init+0x1ec>)
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4973      	ldr	r1, [pc, #460]	@ (8001cfc <ADC_Init+0x1ec>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	021a      	lsls	r2, r3, #8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6899      	ldr	r1, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9e:	4a58      	ldr	r2, [pc, #352]	@ (8001d00 <ADC_Init+0x1f0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d022      	beq.n	8001bea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6899      	ldr	r1, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6899      	ldr	r1, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	e00f      	b.n	8001c0a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0202 	bic.w	r2, r2, #2
 8001c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6899      	ldr	r1, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	005a      	lsls	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01b      	beq.n	8001c70 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6859      	ldr	r1, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c62:	3b01      	subs	r3, #1
 8001c64:	035a      	lsls	r2, r3, #13
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	e007      	b.n	8001c80 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	051a      	lsls	r2, r3, #20
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6899      	ldr	r1, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cc2:	025a      	lsls	r2, r3, #9
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6899      	ldr	r1, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	029a      	lsls	r2, r3, #10
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	609a      	str	r2, [r3, #8]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40012300 	.word	0x40012300
 8001d00:	0f000001 	.word	0x0f000001

08001d04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0ed      	b.n	8001ef2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d102      	bne.n	8001d28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe fe2a 	bl	800097c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d38:	f7ff fd20 	bl	800177c <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d3e:	e012      	b.n	8001d66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d40:	f7ff fd1c 	bl	800177c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b0a      	cmp	r3, #10
 8001d4c:	d90b      	bls.n	8001d66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2205      	movs	r2, #5
 8001d5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0c5      	b.n	8001ef2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0e5      	beq.n	8001d40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0202 	bic.w	r2, r2, #2
 8001d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d84:	f7ff fcfa 	bl	800177c <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d8a:	e012      	b.n	8001db2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d8c:	f7ff fcf6 	bl	800177c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b0a      	cmp	r3, #10
 8001d98:	d90b      	bls.n	8001db2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2205      	movs	r2, #5
 8001daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e09f      	b.n	8001ef2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e5      	bne.n	8001d8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7e1b      	ldrb	r3, [r3, #24]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d108      	bne.n	8001dda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e007      	b.n	8001dea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7e5b      	ldrb	r3, [r3, #25]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d108      	bne.n	8001e04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e007      	b.n	8001e14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7e9b      	ldrb	r3, [r3, #26]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d108      	bne.n	8001e2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0220 	orr.w	r2, r2, #32
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e007      	b.n	8001e3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0220 	bic.w	r2, r2, #32
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7edb      	ldrb	r3, [r3, #27]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d108      	bne.n	8001e58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0210 	bic.w	r2, r2, #16
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e007      	b.n	8001e68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0210 	orr.w	r2, r2, #16
 8001e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7f1b      	ldrb	r3, [r3, #28]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d108      	bne.n	8001e82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0208 	orr.w	r2, r2, #8
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e007      	b.n	8001e92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0208 	bic.w	r2, r2, #8
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	7f5b      	ldrb	r3, [r3, #29]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d108      	bne.n	8001eac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0204 	orr.w	r2, r2, #4
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e007      	b.n	8001ebc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0204 	bic.w	r2, r2, #4
 8001eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	ea42 0103 	orr.w	r1, r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	1e5a      	subs	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f12:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f14:	7cfb      	ldrb	r3, [r7, #19]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d003      	beq.n	8001f22 <HAL_CAN_ConfigFilter+0x26>
 8001f1a:	7cfb      	ldrb	r3, [r7, #19]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	f040 80c7 	bne.w	80020b0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a69      	ldr	r2, [pc, #420]	@ (80020cc <HAL_CAN_ConfigFilter+0x1d0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d001      	beq.n	8001f30 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001f2c:	4b68      	ldr	r3, [pc, #416]	@ (80020d0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001f2e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	4a63      	ldr	r2, [pc, #396]	@ (80020d0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d111      	bne.n	8001f6c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f4e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	2201      	movs	r2, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	401a      	ands	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d123      	bne.n	8001fde <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	401a      	ands	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fb8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3248      	adds	r2, #72	@ 0x48
 8001fbe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fd2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd4:	6979      	ldr	r1, [r7, #20]
 8001fd6:	3348      	adds	r3, #72	@ 0x48
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d122      	bne.n	800202c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002006:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	3248      	adds	r2, #72	@ 0x48
 800200c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002020:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002022:	6979      	ldr	r1, [r7, #20]
 8002024:	3348      	adds	r3, #72	@ 0x48
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	43db      	mvns	r3, r3
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002046:	e007      	b.n	8002058 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	431a      	orrs	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d109      	bne.n	8002074 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002072:	e007      	b.n	8002084 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	431a      	orrs	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	431a      	orrs	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020a2:	f023 0201 	bic.w	r2, r3, #1
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e006      	b.n	80020be <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	371c      	adds	r7, #28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40003400 	.word	0x40003400
 80020d0:	40006400 	.word	0x40006400

080020d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d12e      	bne.n	8002146 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0201 	bic.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002100:	f7ff fb3c 	bl	800177c <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002106:	e012      	b.n	800212e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002108:	f7ff fb38 	bl	800177c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b0a      	cmp	r3, #10
 8002114:	d90b      	bls.n	800212e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2205      	movs	r2, #5
 8002126:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e012      	b.n	8002154 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e5      	bne.n	8002108 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	e006      	b.n	8002154 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
  }
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002170:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002172:	7dfb      	ldrb	r3, [r7, #23]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d003      	beq.n	8002180 <HAL_CAN_GetRxMessage+0x24>
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	2b02      	cmp	r3, #2
 800217c:	f040 8103 	bne.w	8002386 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10e      	bne.n	80021a4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d116      	bne.n	80021c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002198:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0f7      	b.n	8002394 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d107      	bne.n	80021c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0e8      	b.n	8002394 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	331b      	adds	r3, #27
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	4413      	add	r3, r2
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0204 	and.w	r2, r3, #4
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10c      	bne.n	80021fa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	331b      	adds	r3, #27
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	4413      	add	r3, r2
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	0d5b      	lsrs	r3, r3, #21
 80021f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	e00b      	b.n	8002212 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	331b      	adds	r3, #27
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	4413      	add	r3, r2
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	08db      	lsrs	r3, r3, #3
 800220a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	331b      	adds	r3, #27
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	4413      	add	r3, r2
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0202 	and.w	r2, r3, #2
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	331b      	adds	r3, #27
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	4413      	add	r3, r2
 8002234:	3304      	adds	r3, #4
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2208      	movs	r2, #8
 8002244:	611a      	str	r2, [r3, #16]
 8002246:	e00b      	b.n	8002260 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	331b      	adds	r3, #27
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 020f 	and.w	r2, r3, #15
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	331b      	adds	r3, #27
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	4413      	add	r3, r2
 800226c:	3304      	adds	r3, #4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	b2da      	uxtb	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	331b      	adds	r3, #27
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	4413      	add	r3, r2
 8002284:	3304      	adds	r3, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	b29a      	uxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	4413      	add	r3, r2
 800229a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0a1a      	lsrs	r2, r3, #8
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0c1a      	lsrs	r2, r3, #16
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	3302      	adds	r3, #2
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	0e1a      	lsrs	r2, r3, #24
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	3303      	adds	r3, #3
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	3304      	adds	r3, #4
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	4413      	add	r3, r2
 8002316:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	0a1a      	lsrs	r2, r3, #8
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	3305      	adds	r3, #5
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	4413      	add	r3, r2
 8002330:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	0c1a      	lsrs	r2, r3, #16
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	3306      	adds	r3, #6
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	4413      	add	r3, r2
 800234a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0e1a      	lsrs	r2, r3, #24
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	3307      	adds	r3, #7
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d108      	bne.n	8002372 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0220 	orr.w	r2, r2, #32
 800236e:	60da      	str	r2, [r3, #12]
 8002370:	e007      	b.n	8002382 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0220 	orr.w	r2, r2, #32
 8002380:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	e006      	b.n	8002394 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
  }
}
 8002394:	4618      	mov	r0, r3
 8002396:	371c      	adds	r7, #28
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d002      	beq.n	80023be <HAL_CAN_ActivateNotification+0x1e>
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d109      	bne.n	80023d2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6959      	ldr	r1, [r3, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e006      	b.n	80023e0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
  }
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	@ 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d07c      	beq.n	800252c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d023      	beq.n	8002484 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2201      	movs	r2, #1
 8002442:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f983 	bl	800275a <HAL_CAN_TxMailbox0CompleteCallback>
 8002454:	e016      	b.n	8002484 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d004      	beq.n	800246a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24
 8002468:	e00c      	b.n	8002484 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d004      	beq.n	800247e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
 800247c:	e002      	b.n	8002484 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f989 	bl	8002796 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d024      	beq.n	80024d8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002496:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f963 	bl	800276e <HAL_CAN_TxMailbox1CompleteCallback>
 80024a8:	e016      	b.n	80024d8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d004      	beq.n	80024be <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80024bc:	e00c      	b.n	80024d8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d004      	beq.n	80024d2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80024d0:	e002      	b.n	80024d8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f969 	bl	80027aa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d024      	beq.n	800252c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f943 	bl	8002782 <HAL_CAN_TxMailbox2CompleteCallback>
 80024fc:	e016      	b.n	800252c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d004      	beq.n	8002512 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002510:	e00c      	b.n	800252c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
 8002524:	e002      	b.n	800252c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f949 	bl	80027be <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00c      	beq.n	8002550 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2210      	movs	r2, #16
 800254e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2208      	movs	r2, #8
 800256a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f930 	bl	80027d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d009      	beq.n	8002590 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fc0a 	bl	8000da4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2210      	movs	r2, #16
 80025b2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d006      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2208      	movs	r2, #8
 80025ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f912 	bl	80027fa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d009      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f8f9 	bl	80027e6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2210      	movs	r2, #16
 800260e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f8fc 	bl	800280e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00b      	beq.n	8002638 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2208      	movs	r2, #8
 8002630:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f8f5 	bl	8002822 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d07b      	beq.n	800273a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d072      	beq.n	8002732 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d008      	beq.n	8002668 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267e:	f043 0302 	orr.w	r3, r3, #2
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	f043 0304 	orr.w	r3, r3, #4
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d043      	beq.n	8002732 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d03e      	beq.n	8002732 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026ba:	2b60      	cmp	r3, #96	@ 0x60
 80026bc:	d02b      	beq.n	8002716 <HAL_CAN_IRQHandler+0x32a>
 80026be:	2b60      	cmp	r3, #96	@ 0x60
 80026c0:	d82e      	bhi.n	8002720 <HAL_CAN_IRQHandler+0x334>
 80026c2:	2b50      	cmp	r3, #80	@ 0x50
 80026c4:	d022      	beq.n	800270c <HAL_CAN_IRQHandler+0x320>
 80026c6:	2b50      	cmp	r3, #80	@ 0x50
 80026c8:	d82a      	bhi.n	8002720 <HAL_CAN_IRQHandler+0x334>
 80026ca:	2b40      	cmp	r3, #64	@ 0x40
 80026cc:	d019      	beq.n	8002702 <HAL_CAN_IRQHandler+0x316>
 80026ce:	2b40      	cmp	r3, #64	@ 0x40
 80026d0:	d826      	bhi.n	8002720 <HAL_CAN_IRQHandler+0x334>
 80026d2:	2b30      	cmp	r3, #48	@ 0x30
 80026d4:	d010      	beq.n	80026f8 <HAL_CAN_IRQHandler+0x30c>
 80026d6:	2b30      	cmp	r3, #48	@ 0x30
 80026d8:	d822      	bhi.n	8002720 <HAL_CAN_IRQHandler+0x334>
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d002      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x2f8>
 80026de:	2b20      	cmp	r3, #32
 80026e0:	d005      	beq.n	80026ee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80026e2:	e01d      	b.n	8002720 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	f043 0308 	orr.w	r3, r3, #8
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026ec:	e019      	b.n	8002722 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	f043 0310 	orr.w	r3, r3, #16
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026f6:	e014      	b.n	8002722 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	f043 0320 	orr.w	r3, r3, #32
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002700:	e00f      	b.n	8002722 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800270a:	e00a      	b.n	8002722 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002712:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002714:	e005      	b.n	8002722 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800271e:	e000      	b.n	8002722 <HAL_CAN_IRQHandler+0x336>
            break;
 8002720:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002730:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2204      	movs	r2, #4
 8002738:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f872 	bl	8002836 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002752:	bf00      	nop
 8002754:	3728      	adds	r7, #40	@ 0x28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <__NVIC_SetPriorityGrouping+0x40>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002874:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002876:	4313      	orrs	r3, r2
 8002878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287a:	4a04      	ldr	r2, [pc, #16]	@ (800288c <__NVIC_SetPriorityGrouping+0x40>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	60d3      	str	r3, [r2, #12]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00
 8002890:	05fa0000 	.word	0x05fa0000

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	@ (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	@ (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	@ (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	@ 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	@ 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	@ (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f7ff ff8e 	bl	80028ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	@ (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff29 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a14:	f7ff ff3e 	bl	8002894 <__NVIC_GetPriorityGrouping>
 8002a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff8e 	bl	8002940 <NVIC_EncodePriority>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5d 	bl	80028ec <__NVIC_SetPriority>
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff31 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffa2 	bl	80029a8 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	@ 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	e175      	b.n	8002d7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	f040 8164 	bne.w	8002d76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d005      	beq.n	8002ac6 <HAL_GPIO_Init+0x56>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d130      	bne.n	8002b28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002afc:	2201      	movs	r2, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 0201 	and.w	r2, r3, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d017      	beq.n	8002b64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d123      	bne.n	8002bb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	220f      	movs	r2, #15
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	08da      	lsrs	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3208      	adds	r2, #8
 8002bb2:	69b9      	ldr	r1, [r7, #24]
 8002bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0203 	and.w	r2, r3, #3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80be 	beq.w	8002d76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfa:	4b66      	ldr	r3, [pc, #408]	@ (8002d94 <HAL_GPIO_Init+0x324>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfe:	4a65      	ldr	r2, [pc, #404]	@ (8002d94 <HAL_GPIO_Init+0x324>)
 8002c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c06:	4b63      	ldr	r3, [pc, #396]	@ (8002d94 <HAL_GPIO_Init+0x324>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c12:	4a61      	ldr	r2, [pc, #388]	@ (8002d98 <HAL_GPIO_Init+0x328>)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	220f      	movs	r2, #15
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a58      	ldr	r2, [pc, #352]	@ (8002d9c <HAL_GPIO_Init+0x32c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d037      	beq.n	8002cae <HAL_GPIO_Init+0x23e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a57      	ldr	r2, [pc, #348]	@ (8002da0 <HAL_GPIO_Init+0x330>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d031      	beq.n	8002caa <HAL_GPIO_Init+0x23a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a56      	ldr	r2, [pc, #344]	@ (8002da4 <HAL_GPIO_Init+0x334>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d02b      	beq.n	8002ca6 <HAL_GPIO_Init+0x236>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a55      	ldr	r2, [pc, #340]	@ (8002da8 <HAL_GPIO_Init+0x338>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d025      	beq.n	8002ca2 <HAL_GPIO_Init+0x232>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a54      	ldr	r2, [pc, #336]	@ (8002dac <HAL_GPIO_Init+0x33c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d01f      	beq.n	8002c9e <HAL_GPIO_Init+0x22e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a53      	ldr	r2, [pc, #332]	@ (8002db0 <HAL_GPIO_Init+0x340>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d019      	beq.n	8002c9a <HAL_GPIO_Init+0x22a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a52      	ldr	r2, [pc, #328]	@ (8002db4 <HAL_GPIO_Init+0x344>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <HAL_GPIO_Init+0x226>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a51      	ldr	r2, [pc, #324]	@ (8002db8 <HAL_GPIO_Init+0x348>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00d      	beq.n	8002c92 <HAL_GPIO_Init+0x222>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a50      	ldr	r2, [pc, #320]	@ (8002dbc <HAL_GPIO_Init+0x34c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d007      	beq.n	8002c8e <HAL_GPIO_Init+0x21e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4f      	ldr	r2, [pc, #316]	@ (8002dc0 <HAL_GPIO_Init+0x350>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <HAL_GPIO_Init+0x21a>
 8002c86:	2309      	movs	r3, #9
 8002c88:	e012      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002c8a:	230a      	movs	r3, #10
 8002c8c:	e010      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002c8e:	2308      	movs	r3, #8
 8002c90:	e00e      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002c92:	2307      	movs	r3, #7
 8002c94:	e00c      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002c96:	2306      	movs	r3, #6
 8002c98:	e00a      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002c9a:	2305      	movs	r3, #5
 8002c9c:	e008      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	e006      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e004      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e002      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	f002 0203 	and.w	r2, r2, #3
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	4093      	lsls	r3, r2
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cc0:	4935      	ldr	r1, [pc, #212]	@ (8002d98 <HAL_GPIO_Init+0x328>)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	3302      	adds	r3, #2
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cce:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc4 <HAL_GPIO_Init+0x354>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cf2:	4a34      	ldr	r2, [pc, #208]	@ (8002dc4 <HAL_GPIO_Init+0x354>)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf8:	4b32      	ldr	r3, [pc, #200]	@ (8002dc4 <HAL_GPIO_Init+0x354>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d1c:	4a29      	ldr	r2, [pc, #164]	@ (8002dc4 <HAL_GPIO_Init+0x354>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d22:	4b28      	ldr	r3, [pc, #160]	@ (8002dc4 <HAL_GPIO_Init+0x354>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d46:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc4 <HAL_GPIO_Init+0x354>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc4 <HAL_GPIO_Init+0x354>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d70:	4a14      	ldr	r2, [pc, #80]	@ (8002dc4 <HAL_GPIO_Init+0x354>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	2b0f      	cmp	r3, #15
 8002d80:	f67f ae86 	bls.w	8002a90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	3724      	adds	r7, #36	@ 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40013800 	.word	0x40013800
 8002d9c:	40020000 	.word	0x40020000
 8002da0:	40020400 	.word	0x40020400
 8002da4:	40020800 	.word	0x40020800
 8002da8:	40020c00 	.word	0x40020c00
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40021400 	.word	0x40021400
 8002db4:	40021800 	.word	0x40021800
 8002db8:	40021c00 	.word	0x40021c00
 8002dbc:	40022000 	.word	0x40022000
 8002dc0:	40022400 	.word	0x40022400
 8002dc4:	40013c00 	.word	0x40013c00

08002dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dd8:	787b      	ldrb	r3, [r7, #1]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002de4:	e003      	b.n	8002dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002de6:	887b      	ldrh	r3, [r7, #2]
 8002de8:	041a      	lsls	r2, r3, #16
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	619a      	str	r2, [r3, #24]
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b085      	sub	sp, #20
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	460b      	mov	r3, r1
 8002e04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e0c:	887a      	ldrh	r2, [r7, #2]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4013      	ands	r3, r2
 8002e12:	041a      	lsls	r2, r3, #16
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	43d9      	mvns	r1, r3
 8002e18:	887b      	ldrh	r3, [r7, #2]
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	619a      	str	r2, [r3, #24]
}
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e29b      	b.n	800337e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8087 	beq.w	8002f62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e54:	4b96      	ldr	r3, [pc, #600]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d00c      	beq.n	8002e7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e60:	4b93      	ldr	r3, [pc, #588]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d112      	bne.n	8002e92 <HAL_RCC_OscConfig+0x62>
 8002e6c:	4b90      	ldr	r3, [pc, #576]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e78:	d10b      	bne.n	8002e92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7a:	4b8d      	ldr	r3, [pc, #564]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d06c      	beq.n	8002f60 <HAL_RCC_OscConfig+0x130>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d168      	bne.n	8002f60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e275      	b.n	800337e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_OscConfig+0x7a>
 8002e9c:	4b84      	ldr	r3, [pc, #528]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a83      	ldr	r2, [pc, #524]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	e02e      	b.n	8002f08 <HAL_RCC_OscConfig+0xd8>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x9c>
 8002eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a7b      	ldr	r2, [pc, #492]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002ec4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e01d      	b.n	8002f08 <HAL_RCC_OscConfig+0xd8>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0xc0>
 8002ed6:	4b76      	ldr	r3, [pc, #472]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a75      	ldr	r2, [pc, #468]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b73      	ldr	r3, [pc, #460]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a72      	ldr	r2, [pc, #456]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_OscConfig+0xd8>
 8002ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a6e      	ldr	r2, [pc, #440]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	4b6c      	ldr	r3, [pc, #432]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a6b      	ldr	r2, [pc, #428]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d013      	beq.n	8002f38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe fc34 	bl	800177c <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f18:	f7fe fc30 	bl	800177c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	@ 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e229      	b.n	800337e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	4b61      	ldr	r3, [pc, #388]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0xe8>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fe fc20 	bl	800177c <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f40:	f7fe fc1c 	bl	800177c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	@ 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e215      	b.n	800337e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	4b57      	ldr	r3, [pc, #348]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x110>
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d069      	beq.n	8003042 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f6e:	4b50      	ldr	r3, [pc, #320]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d11c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x190>
 8002f86:	4b4a      	ldr	r3, [pc, #296]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d116      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	4b47      	ldr	r3, [pc, #284]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_RCC_OscConfig+0x17a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e1e9      	b.n	800337e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002faa:	4b41      	ldr	r3, [pc, #260]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	493d      	ldr	r1, [pc, #244]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	e040      	b.n	8003042 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d023      	beq.n	8003010 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc8:	4b39      	ldr	r3, [pc, #228]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a38      	ldr	r2, [pc, #224]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fbd2 	bl	800177c <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fdc:	f7fe fbce 	bl	800177c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e1c7      	b.n	800337e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fee:	4b30      	ldr	r3, [pc, #192]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4929      	ldr	r1, [pc, #164]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]
 800300e:	e018      	b.n	8003042 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003010:	4b27      	ldr	r3, [pc, #156]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a26      	ldr	r2, [pc, #152]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe fbae 	bl	800177c <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003024:	f7fe fbaa 	bl	800177c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e1a3      	b.n	800337e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003036:	4b1e      	ldr	r3, [pc, #120]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d038      	beq.n	80030c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d019      	beq.n	800308a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003056:	4b16      	ldr	r3, [pc, #88]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8003058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800305a:	4a15      	ldr	r2, [pc, #84]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003062:	f7fe fb8b 	bl	800177c <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800306a:	f7fe fb87 	bl	800177c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e180      	b.n	800337e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307c:	4b0c      	ldr	r3, [pc, #48]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 800307e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCC_OscConfig+0x23a>
 8003088:	e01a      	b.n	80030c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800308a:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 800308c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800308e:	4a08      	ldr	r2, [pc, #32]	@ (80030b0 <HAL_RCC_OscConfig+0x280>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003096:	f7fe fb71 	bl	800177c <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309e:	f7fe fb6d 	bl	800177c <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d903      	bls.n	80030b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e166      	b.n	800337e <HAL_RCC_OscConfig+0x54e>
 80030b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b4:	4b92      	ldr	r3, [pc, #584]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 80030b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1ee      	bne.n	800309e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80a4 	beq.w	8003216 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ce:	4b8c      	ldr	r3, [pc, #560]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10d      	bne.n	80030f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	4b89      	ldr	r3, [pc, #548]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	4a88      	ldr	r2, [pc, #544]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 80030e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030e6:	4b86      	ldr	r3, [pc, #536]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f2:	2301      	movs	r3, #1
 80030f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f6:	4b83      	ldr	r3, [pc, #524]	@ (8003304 <HAL_RCC_OscConfig+0x4d4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d118      	bne.n	8003134 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003102:	4b80      	ldr	r3, [pc, #512]	@ (8003304 <HAL_RCC_OscConfig+0x4d4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a7f      	ldr	r2, [pc, #508]	@ (8003304 <HAL_RCC_OscConfig+0x4d4>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800310c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310e:	f7fe fb35 	bl	800177c <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003116:	f7fe fb31 	bl	800177c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	@ 0x64
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e12a      	b.n	800337e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003128:	4b76      	ldr	r3, [pc, #472]	@ (8003304 <HAL_RCC_OscConfig+0x4d4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d106      	bne.n	800314a <HAL_RCC_OscConfig+0x31a>
 800313c:	4b70      	ldr	r3, [pc, #448]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003140:	4a6f      	ldr	r2, [pc, #444]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6713      	str	r3, [r2, #112]	@ 0x70
 8003148:	e02d      	b.n	80031a6 <HAL_RCC_OscConfig+0x376>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10c      	bne.n	800316c <HAL_RCC_OscConfig+0x33c>
 8003152:	4b6b      	ldr	r3, [pc, #428]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003156:	4a6a      	ldr	r2, [pc, #424]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	6713      	str	r3, [r2, #112]	@ 0x70
 800315e:	4b68      	ldr	r3, [pc, #416]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003162:	4a67      	ldr	r2, [pc, #412]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 8003164:	f023 0304 	bic.w	r3, r3, #4
 8003168:	6713      	str	r3, [r2, #112]	@ 0x70
 800316a:	e01c      	b.n	80031a6 <HAL_RCC_OscConfig+0x376>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b05      	cmp	r3, #5
 8003172:	d10c      	bne.n	800318e <HAL_RCC_OscConfig+0x35e>
 8003174:	4b62      	ldr	r3, [pc, #392]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003178:	4a61      	ldr	r2, [pc, #388]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 800317a:	f043 0304 	orr.w	r3, r3, #4
 800317e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003180:	4b5f      	ldr	r3, [pc, #380]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 8003182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003184:	4a5e      	ldr	r2, [pc, #376]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	6713      	str	r3, [r2, #112]	@ 0x70
 800318c:	e00b      	b.n	80031a6 <HAL_RCC_OscConfig+0x376>
 800318e:	4b5c      	ldr	r3, [pc, #368]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 8003190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003192:	4a5b      	ldr	r2, [pc, #364]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	6713      	str	r3, [r2, #112]	@ 0x70
 800319a:	4b59      	ldr	r3, [pc, #356]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319e:	4a58      	ldr	r2, [pc, #352]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 80031a0:	f023 0304 	bic.w	r3, r3, #4
 80031a4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d015      	beq.n	80031da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7fe fae5 	bl	800177c <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fe fae1 	bl	800177c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e0d8      	b.n	800337e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ee      	beq.n	80031b6 <HAL_RCC_OscConfig+0x386>
 80031d8:	e014      	b.n	8003204 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031da:	f7fe facf 	bl	800177c <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fe facb 	bl	800177c <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e0c2      	b.n	800337e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f8:	4b41      	ldr	r3, [pc, #260]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1ee      	bne.n	80031e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003204:	7dfb      	ldrb	r3, [r7, #23]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d105      	bne.n	8003216 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320a:	4b3d      	ldr	r3, [pc, #244]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	4a3c      	ldr	r2, [pc, #240]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 8003210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003214:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 80ae 	beq.w	800337c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003220:	4b37      	ldr	r3, [pc, #220]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 030c 	and.w	r3, r3, #12
 8003228:	2b08      	cmp	r3, #8
 800322a:	d06d      	beq.n	8003308 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d14b      	bne.n	80032cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003234:	4b32      	ldr	r3, [pc, #200]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a31      	ldr	r2, [pc, #196]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 800323a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800323e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe fa9c 	bl	800177c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003248:	f7fe fa98 	bl	800177c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e091      	b.n	800337e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325a:	4b29      	ldr	r3, [pc, #164]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	019b      	lsls	r3, r3, #6
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	3b01      	subs	r3, #1
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	061b      	lsls	r3, r3, #24
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003290:	071b      	lsls	r3, r3, #28
 8003292:	491b      	ldr	r1, [pc, #108]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 8003294:	4313      	orrs	r3, r2
 8003296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003298:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a18      	ldr	r2, [pc, #96]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 800329e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe fa6a 	bl	800177c <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ac:	f7fe fa66 	bl	800177c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e05f      	b.n	800337e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032be:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x47c>
 80032ca:	e057      	b.n	800337c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 80032d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe fa50 	bl	800177c <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fe fa4c 	bl	800177c <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e045      	b.n	800337e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f2:	4b03      	ldr	r3, [pc, #12]	@ (8003300 <HAL_RCC_OscConfig+0x4d0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4b0>
 80032fe:	e03d      	b.n	800337c <HAL_RCC_OscConfig+0x54c>
 8003300:	40023800 	.word	0x40023800
 8003304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003308:	4b1f      	ldr	r3, [pc, #124]	@ (8003388 <HAL_RCC_OscConfig+0x558>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d030      	beq.n	8003378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d129      	bne.n	8003378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332e:	429a      	cmp	r2, r3
 8003330:	d122      	bne.n	8003378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003338:	4013      	ands	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800333e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003340:	4293      	cmp	r3, r2
 8003342:	d119      	bne.n	8003378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	3b01      	subs	r3, #1
 8003352:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d10f      	bne.n	8003378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003362:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d107      	bne.n	8003378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800

0800338c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0d0      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d910      	bls.n	80033d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b67      	ldr	r3, [pc, #412]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 020f 	bic.w	r2, r3, #15
 80033ba:	4965      	ldr	r1, [pc, #404]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b63      	ldr	r3, [pc, #396]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0b8      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d020      	beq.n	8003422 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033ec:	4b59      	ldr	r3, [pc, #356]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	4a58      	ldr	r2, [pc, #352]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 80033f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003404:	4b53      	ldr	r3, [pc, #332]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4a52      	ldr	r2, [pc, #328]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 800340a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800340e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003410:	4b50      	ldr	r3, [pc, #320]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	494d      	ldr	r1, [pc, #308]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d040      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d107      	bne.n	8003446 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b47      	ldr	r3, [pc, #284]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d115      	bne.n	800346e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e07f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d107      	bne.n	800345e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344e:	4b41      	ldr	r3, [pc, #260]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e073      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345e:	4b3d      	ldr	r3, [pc, #244]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e06b      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346e:	4b39      	ldr	r3, [pc, #228]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f023 0203 	bic.w	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4936      	ldr	r1, [pc, #216]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 800347c:	4313      	orrs	r3, r2
 800347e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003480:	f7fe f97c 	bl	800177c <HAL_GetTick>
 8003484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	e00a      	b.n	800349e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003488:	f7fe f978 	bl	800177c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e053      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	4b2d      	ldr	r3, [pc, #180]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 020c 	and.w	r2, r3, #12
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d1eb      	bne.n	8003488 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034b0:	4b27      	ldr	r3, [pc, #156]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d210      	bcs.n	80034e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b24      	ldr	r3, [pc, #144]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 020f 	bic.w	r2, r3, #15
 80034c6:	4922      	ldr	r1, [pc, #136]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b20      	ldr	r3, [pc, #128]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e032      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ec:	4b19      	ldr	r3, [pc, #100]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4916      	ldr	r1, [pc, #88]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800350a:	4b12      	ldr	r3, [pc, #72]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	490e      	ldr	r1, [pc, #56]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800351e:	f000 f821 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8003522:	4602      	mov	r2, r0
 8003524:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	490a      	ldr	r1, [pc, #40]	@ (8003558 <HAL_RCC_ClockConfig+0x1cc>)
 8003530:	5ccb      	ldrb	r3, [r1, r3]
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	4a09      	ldr	r2, [pc, #36]	@ (800355c <HAL_RCC_ClockConfig+0x1d0>)
 8003538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800353a:	4b09      	ldr	r3, [pc, #36]	@ (8003560 <HAL_RCC_ClockConfig+0x1d4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe f8d8 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40023c00 	.word	0x40023c00
 8003554:	40023800 	.word	0x40023800
 8003558:	08005b70 	.word	0x08005b70
 800355c:	20000000 	.word	0x20000000
 8003560:	20000004 	.word	0x20000004

08003564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003568:	b090      	sub	sp, #64	@ 0x40
 800356a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003570:	2300      	movs	r3, #0
 8003572:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003574:	2300      	movs	r3, #0
 8003576:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800357c:	4b59      	ldr	r3, [pc, #356]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	2b08      	cmp	r3, #8
 8003586:	d00d      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003588:	2b08      	cmp	r3, #8
 800358a:	f200 80a1 	bhi.w	80036d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0x34>
 8003592:	2b04      	cmp	r3, #4
 8003594:	d003      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0x3a>
 8003596:	e09b      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b53      	ldr	r3, [pc, #332]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800359a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800359c:	e09b      	b.n	80036d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800359e:	4b53      	ldr	r3, [pc, #332]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x188>)
 80035a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035a2:	e098      	b.n	80036d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a4:	4b4f      	ldr	r3, [pc, #316]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035ae:	4b4d      	ldr	r3, [pc, #308]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d028      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ba:	4b4a      	ldr	r3, [pc, #296]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	2200      	movs	r2, #0
 80035c2:	623b      	str	r3, [r7, #32]
 80035c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035cc:	2100      	movs	r1, #0
 80035ce:	4b47      	ldr	r3, [pc, #284]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x188>)
 80035d0:	fb03 f201 	mul.w	r2, r3, r1
 80035d4:	2300      	movs	r3, #0
 80035d6:	fb00 f303 	mul.w	r3, r0, r3
 80035da:	4413      	add	r3, r2
 80035dc:	4a43      	ldr	r2, [pc, #268]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x188>)
 80035de:	fba0 1202 	umull	r1, r2, r0, r2
 80035e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035e4:	460a      	mov	r2, r1
 80035e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80035e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ea:	4413      	add	r3, r2
 80035ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f0:	2200      	movs	r2, #0
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	61fa      	str	r2, [r7, #28]
 80035f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80035fe:	f7fc fe1b 	bl	8000238 <__aeabi_uldivmod>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4613      	mov	r3, r2
 8003608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800360a:	e053      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360c:	4b35      	ldr	r3, [pc, #212]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	099b      	lsrs	r3, r3, #6
 8003612:	2200      	movs	r2, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	617a      	str	r2, [r7, #20]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800361e:	f04f 0b00 	mov.w	fp, #0
 8003622:	4652      	mov	r2, sl
 8003624:	465b      	mov	r3, fp
 8003626:	f04f 0000 	mov.w	r0, #0
 800362a:	f04f 0100 	mov.w	r1, #0
 800362e:	0159      	lsls	r1, r3, #5
 8003630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003634:	0150      	lsls	r0, r2, #5
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	ebb2 080a 	subs.w	r8, r2, sl
 800363e:	eb63 090b 	sbc.w	r9, r3, fp
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800364e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003652:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003656:	ebb2 0408 	subs.w	r4, r2, r8
 800365a:	eb63 0509 	sbc.w	r5, r3, r9
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	00eb      	lsls	r3, r5, #3
 8003668:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800366c:	00e2      	lsls	r2, r4, #3
 800366e:	4614      	mov	r4, r2
 8003670:	461d      	mov	r5, r3
 8003672:	eb14 030a 	adds.w	r3, r4, sl
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	eb45 030b 	adc.w	r3, r5, fp
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	e9d7 4500 	ldrd	r4, r5, [r7]
 800368a:	4629      	mov	r1, r5
 800368c:	028b      	lsls	r3, r1, #10
 800368e:	4621      	mov	r1, r4
 8003690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003694:	4621      	mov	r1, r4
 8003696:	028a      	lsls	r2, r1, #10
 8003698:	4610      	mov	r0, r2
 800369a:	4619      	mov	r1, r3
 800369c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800369e:	2200      	movs	r2, #0
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	60fa      	str	r2, [r7, #12]
 80036a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036a8:	f7fc fdc6 	bl	8000238 <__aeabi_uldivmod>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4613      	mov	r3, r2
 80036b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80036b4:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	0c1b      	lsrs	r3, r3, #16
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	3301      	adds	r3, #1
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80036c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036ce:	e002      	b.n	80036d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036d0:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80036d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3740      	adds	r7, #64	@ 0x40
 80036dc:	46bd      	mov	sp, r7
 80036de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	00f42400 	.word	0x00f42400
 80036ec:	017d7840 	.word	0x017d7840

080036f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e09d      	b.n	800383e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	2b00      	cmp	r3, #0
 8003708:	d108      	bne.n	800371c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003712:	d009      	beq.n	8003728 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	61da      	str	r2, [r3, #28]
 800371a:	e005      	b.n	8003728 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd fcb4 	bl	80010b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800375e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003768:	d902      	bls.n	8003770 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	e002      	b.n	8003776 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003774:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800377e:	d007      	beq.n	8003790 <HAL_SPI_Init+0xa0>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003788:	d002      	beq.n	8003790 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d2:	ea42 0103 	orr.w	r1, r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037da:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	0c1b      	lsrs	r3, r3, #16
 80037ec:	f003 0204 	and.w	r2, r3, #4
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800380c:	ea42 0103 	orr.w	r1, r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69da      	ldr	r2, [r3, #28]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800382c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b088      	sub	sp, #32
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_SPI_Transmit+0x22>
 8003864:	2302      	movs	r3, #2
 8003866:	e15f      	b.n	8003b28 <HAL_SPI_Transmit+0x2e2>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003870:	f7fd ff84 	bl	800177c <HAL_GetTick>
 8003874:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d002      	beq.n	800388c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003886:	2302      	movs	r3, #2
 8003888:	77fb      	strb	r3, [r7, #31]
    goto error;
 800388a:	e148      	b.n	8003b1e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_SPI_Transmit+0x52>
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d102      	bne.n	800389e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800389c:	e13f      	b.n	8003b1e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2203      	movs	r2, #3
 80038a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	88fa      	ldrh	r2, [r7, #6]
 80038b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e8:	d10f      	bne.n	800390a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003908:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003914:	2b40      	cmp	r3, #64	@ 0x40
 8003916:	d007      	beq.n	8003928 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003926:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003930:	d94f      	bls.n	80039d2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_SPI_Transmit+0xfa>
 800393a:	8afb      	ldrh	r3, [r7, #22]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d142      	bne.n	80039c6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003944:	881a      	ldrh	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003950:	1c9a      	adds	r2, r3, #2
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003964:	e02f      	b.n	80039c6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b02      	cmp	r3, #2
 8003972:	d112      	bne.n	800399a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003978:	881a      	ldrh	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003984:	1c9a      	adds	r2, r3, #2
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003998:	e015      	b.n	80039c6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800399a:	f7fd feef 	bl	800177c <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d803      	bhi.n	80039b2 <HAL_SPI_Transmit+0x16c>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d102      	bne.n	80039b8 <HAL_SPI_Transmit+0x172>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80039c4:	e0ab      	b.n	8003b1e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ca      	bne.n	8003966 <HAL_SPI_Transmit+0x120>
 80039d0:	e080      	b.n	8003ad4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_SPI_Transmit+0x19a>
 80039da:	8afb      	ldrh	r3, [r7, #22]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d174      	bne.n	8003aca <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d912      	bls.n	8003a10 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	881a      	ldrh	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fa:	1c9a      	adds	r2, r3, #2
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b02      	subs	r3, #2
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a0e:	e05c      	b.n	8003aca <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	330c      	adds	r3, #12
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a36:	e048      	b.n	8003aca <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d12b      	bne.n	8003a9e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d912      	bls.n	8003a76 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a54:	881a      	ldrh	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a60:	1c9a      	adds	r2, r3, #2
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b02      	subs	r3, #2
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a74:	e029      	b.n	8003aca <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a9c:	e015      	b.n	8003aca <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a9e:	f7fd fe6d 	bl	800177c <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d803      	bhi.n	8003ab6 <HAL_SPI_Transmit+0x270>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d102      	bne.n	8003abc <HAL_SPI_Transmit+0x276>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d106      	bne.n	8003aca <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003ac8:	e029      	b.n	8003b1e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1b1      	bne.n	8003a38 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	6839      	ldr	r1, [r7, #0]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fd1d 	bl	8004518 <SPI_EndRxTxTransaction>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e003      	b.n	8003b1e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003b26:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d002      	beq.n	8003b56 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003b50:	2302      	movs	r3, #2
 8003b52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b54:	e11a      	b.n	8003d8c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b5e:	d112      	bne.n	8003b86 <HAL_SPI_Receive+0x56>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10e      	bne.n	8003b86 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b70:	88fa      	ldrh	r2, [r7, #6]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	4613      	mov	r3, r2
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f90e 	bl	8003d9e <HAL_SPI_TransmitReceive>
 8003b82:	4603      	mov	r3, r0
 8003b84:	e107      	b.n	8003d96 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_SPI_Receive+0x64>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e100      	b.n	8003d96 <HAL_SPI_Receive+0x266>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b9c:	f7fd fdee 	bl	800177c <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <HAL_SPI_Receive+0x7e>
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bb2:	e0eb      	b.n	8003d8c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	88fa      	ldrh	r2, [r7, #6]
 8003bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	88fa      	ldrh	r2, [r7, #6]
 8003bd4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bfe:	d908      	bls.n	8003c12 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c0e:	605a      	str	r2, [r3, #4]
 8003c10:	e007      	b.n	8003c22 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c20:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c2a:	d10f      	bne.n	8003c4c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c4a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c56:	2b40      	cmp	r3, #64	@ 0x40
 8003c58:	d007      	beq.n	8003c6a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c68:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c72:	d86f      	bhi.n	8003d54 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c74:	e034      	b.n	8003ce0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d117      	bne.n	8003cb4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f103 020c 	add.w	r2, r3, #12
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c90:	7812      	ldrb	r2, [r2, #0]
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003cb2:	e015      	b.n	8003ce0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cb4:	f7fd fd62 	bl	800177c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d803      	bhi.n	8003ccc <HAL_SPI_Receive+0x19c>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cca:	d102      	bne.n	8003cd2 <HAL_SPI_Receive+0x1a2>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003cde:	e055      	b.n	8003d8c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1c4      	bne.n	8003c76 <HAL_SPI_Receive+0x146>
 8003cec:	e038      	b.n	8003d60 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d115      	bne.n	8003d28 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	b292      	uxth	r2, r2
 8003d08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	1c9a      	adds	r2, r3, #2
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003d26:	e015      	b.n	8003d54 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d28:	f7fd fd28 	bl	800177c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d803      	bhi.n	8003d40 <HAL_SPI_Receive+0x210>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	d102      	bne.n	8003d46 <HAL_SPI_Receive+0x216>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003d52:	e01b      	b.n	8003d8c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1c6      	bne.n	8003cee <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	6839      	ldr	r1, [r7, #0]
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 fb5b 	bl	8004420 <SPI_EndRxTransaction>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	75fb      	strb	r3, [r7, #23]
 8003d82:	e003      	b.n	8003d8c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b08a      	sub	sp, #40	@ 0x28
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
 8003daa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dac:	2301      	movs	r3, #1
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_SPI_TransmitReceive+0x26>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e20a      	b.n	80041da <HAL_SPI_TransmitReceive+0x43c>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dcc:	f7fd fcd6 	bl	800177c <HAL_GetTick>
 8003dd0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003dd8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003de0:	887b      	ldrh	r3, [r7, #2]
 8003de2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003de4:	887b      	ldrh	r3, [r7, #2]
 8003de6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003de8:	7efb      	ldrb	r3, [r7, #27]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d00e      	beq.n	8003e0c <HAL_SPI_TransmitReceive+0x6e>
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003df4:	d106      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x66>
 8003dfe:	7efb      	ldrb	r3, [r7, #27]
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d003      	beq.n	8003e0c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003e04:	2302      	movs	r3, #2
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003e0a:	e1e0      	b.n	80041ce <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <HAL_SPI_TransmitReceive+0x80>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_SPI_TransmitReceive+0x80>
 8003e18:	887b      	ldrh	r3, [r7, #2]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003e24:	e1d3      	b.n	80041ce <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d003      	beq.n	8003e3a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2205      	movs	r2, #5
 8003e36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	887a      	ldrh	r2, [r7, #2]
 8003e4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	887a      	ldrh	r2, [r7, #2]
 8003e52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	887a      	ldrh	r2, [r7, #2]
 8003e60:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	887a      	ldrh	r2, [r7, #2]
 8003e66:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e7c:	d802      	bhi.n	8003e84 <HAL_SPI_TransmitReceive+0xe6>
 8003e7e:	8a3b      	ldrh	r3, [r7, #16]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d908      	bls.n	8003e96 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e92:	605a      	str	r2, [r3, #4]
 8003e94:	e007      	b.n	8003ea6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ea4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb0:	2b40      	cmp	r3, #64	@ 0x40
 8003eb2:	d007      	beq.n	8003ec4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ec2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ecc:	f240 8081 	bls.w	8003fd2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_SPI_TransmitReceive+0x140>
 8003ed8:	8a7b      	ldrh	r3, [r7, #18]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d16d      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee2:	881a      	ldrh	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eee:	1c9a      	adds	r2, r3, #2
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f02:	e05a      	b.n	8003fba <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d11b      	bne.n	8003f4a <HAL_SPI_TransmitReceive+0x1ac>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d016      	beq.n	8003f4a <HAL_SPI_TransmitReceive+0x1ac>
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d113      	bne.n	8003f4a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f26:	881a      	ldrh	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f32:	1c9a      	adds	r2, r3, #2
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d11c      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x1f4>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d016      	beq.n	8003f92 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	b292      	uxth	r2, r2
 8003f70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	1c9a      	adds	r2, r3, #2
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f92:	f7fd fbf3 	bl	800177c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d80b      	bhi.n	8003fba <HAL_SPI_TransmitReceive+0x21c>
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d007      	beq.n	8003fba <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003fb8:	e109      	b.n	80041ce <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d19f      	bne.n	8003f04 <HAL_SPI_TransmitReceive+0x166>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d199      	bne.n	8003f04 <HAL_SPI_TransmitReceive+0x166>
 8003fd0:	e0e3      	b.n	800419a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_SPI_TransmitReceive+0x244>
 8003fda:	8a7b      	ldrh	r3, [r7, #18]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	f040 80cf 	bne.w	8004180 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d912      	bls.n	8004012 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff0:	881a      	ldrh	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffc:	1c9a      	adds	r2, r3, #2
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b02      	subs	r3, #2
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004010:	e0b6      	b.n	8004180 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	330c      	adds	r3, #12
 800401c:	7812      	ldrb	r2, [r2, #0]
 800401e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004038:	e0a2      	b.n	8004180 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d134      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0x314>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d02f      	beq.n	80040b2 <HAL_SPI_TransmitReceive+0x314>
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	2b01      	cmp	r3, #1
 8004056:	d12c      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	d912      	bls.n	8004088 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004066:	881a      	ldrh	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004072:	1c9a      	adds	r2, r3, #2
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b02      	subs	r3, #2
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004086:	e012      	b.n	80040ae <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	330c      	adds	r3, #12
 8004092:	7812      	ldrb	r2, [r2, #0]
 8004094:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d148      	bne.n	8004152 <HAL_SPI_TransmitReceive+0x3b4>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d042      	beq.n	8004152 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d923      	bls.n	8004120 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	b292      	uxth	r2, r2
 80040e4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	1c9a      	adds	r2, r3, #2
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b02      	subs	r3, #2
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b01      	cmp	r3, #1
 800410c:	d81f      	bhi.n	800414e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	e016      	b.n	800414e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f103 020c 	add.w	r2, r3, #12
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	7812      	ldrb	r2, [r2, #0]
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800414e:	2301      	movs	r3, #1
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004152:	f7fd fb13 	bl	800177c <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800415e:	429a      	cmp	r2, r3
 8004160:	d803      	bhi.n	800416a <HAL_SPI_TransmitReceive+0x3cc>
 8004162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d102      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x3d2>
 800416a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416c:	2b00      	cmp	r3, #0
 800416e:	d107      	bne.n	8004180 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800417e:	e026      	b.n	80041ce <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	f47f af57 	bne.w	800403a <HAL_SPI_TransmitReceive+0x29c>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	f47f af50 	bne.w	800403a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f9ba 	bl	8004518 <SPI_EndRxTxTransaction>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041c4:	e003      	b.n	80041ce <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80041d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3728      	adds	r7, #40	@ 0x28
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	4613      	mov	r3, r2
 80041f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041f4:	f7fd fac2 	bl	800177c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	4413      	add	r3, r2
 8004202:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004204:	f7fd faba 	bl	800177c <HAL_GetTick>
 8004208:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800420a:	4b39      	ldr	r3, [pc, #228]	@ (80042f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	015b      	lsls	r3, r3, #5
 8004210:	0d1b      	lsrs	r3, r3, #20
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	fb02 f303 	mul.w	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800421a:	e054      	b.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004222:	d050      	beq.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004224:	f7fd faaa 	bl	800177c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	429a      	cmp	r2, r3
 8004232:	d902      	bls.n	800423a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d13d      	bne.n	80042b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004248:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004252:	d111      	bne.n	8004278 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800425c:	d004      	beq.n	8004268 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004266:	d107      	bne.n	8004278 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004276:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004280:	d10f      	bne.n	80042a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e017      	b.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4013      	ands	r3, r2
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	bf0c      	ite	eq
 80042d6:	2301      	moveq	r3, #1
 80042d8:	2300      	movne	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d19b      	bne.n	800421c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3720      	adds	r7, #32
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000000 	.word	0x20000000

080042f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	@ 0x28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004306:	f7fd fa39 	bl	800177c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430e:	1a9b      	subs	r3, r3, r2
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	4413      	add	r3, r2
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004316:	f7fd fa31 	bl	800177c <HAL_GetTick>
 800431a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004324:	4b3d      	ldr	r3, [pc, #244]	@ (800441c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	00da      	lsls	r2, r3, #3
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	0d1b      	lsrs	r3, r3, #20
 8004334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800433c:	e060      	b.n	8004400 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004344:	d107      	bne.n	8004356 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d104      	bne.n	8004356 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004354:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d050      	beq.n	8004400 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800435e:	f7fd fa0d 	bl	800177c <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436a:	429a      	cmp	r2, r3
 800436c:	d902      	bls.n	8004374 <SPI_WaitFifoStateUntilTimeout+0x80>
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	2b00      	cmp	r3, #0
 8004372:	d13d      	bne.n	80043f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004382:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800438c:	d111      	bne.n	80043b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004396:	d004      	beq.n	80043a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043a0:	d107      	bne.n	80043b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ba:	d10f      	bne.n	80043dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e010      	b.n	8004412 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4013      	ands	r3, r2
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	429a      	cmp	r2, r3
 800440e:	d196      	bne.n	800433e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3728      	adds	r7, #40	@ 0x28
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000000 	.word	0x20000000

08004420 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af02      	add	r7, sp, #8
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004434:	d111      	bne.n	800445a <SPI_EndRxTransaction+0x3a>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800443e:	d004      	beq.n	800444a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004448:	d107      	bne.n	800445a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004458:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004462:	d112      	bne.n	800448a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2200      	movs	r2, #0
 800446c:	2180      	movs	r1, #128	@ 0x80
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f7ff feb8 	bl	80041e4 <SPI_WaitFlagStateUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d021      	beq.n	80044be <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800447e:	f043 0220 	orr.w	r2, r3, #32
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e03d      	b.n	8004506 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800448a:	4b21      	ldr	r3, [pc, #132]	@ (8004510 <SPI_EndRxTransaction+0xf0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a21      	ldr	r2, [pc, #132]	@ (8004514 <SPI_EndRxTransaction+0xf4>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	0d5b      	lsrs	r3, r3, #21
 8004496:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b6:	2b80      	cmp	r3, #128	@ 0x80
 80044b8:	d0f2      	beq.n	80044a0 <SPI_EndRxTransaction+0x80>
 80044ba:	e000      	b.n	80044be <SPI_EndRxTransaction+0x9e>
        break;
 80044bc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044c6:	d11d      	bne.n	8004504 <SPI_EndRxTransaction+0xe4>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044d0:	d004      	beq.n	80044dc <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044da:	d113      	bne.n	8004504 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f7ff ff03 	bl	80042f4 <SPI_WaitFifoStateUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d007      	beq.n	8004504 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f8:	f043 0220 	orr.w	r2, r3, #32
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e000      	b.n	8004506 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20000000 	.word	0x20000000
 8004514:	165e9f81 	.word	0x165e9f81

08004518 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2200      	movs	r2, #0
 800452c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff fedf 	bl	80042f4 <SPI_WaitFifoStateUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d007      	beq.n	800454c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004540:	f043 0220 	orr.w	r2, r3, #32
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e046      	b.n	80045da <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800454c:	4b25      	ldr	r3, [pc, #148]	@ (80045e4 <SPI_EndRxTxTransaction+0xcc>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a25      	ldr	r2, [pc, #148]	@ (80045e8 <SPI_EndRxTxTransaction+0xd0>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	0d5b      	lsrs	r3, r3, #21
 8004558:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800455c:	fb02 f303 	mul.w	r3, r2, r3
 8004560:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800456a:	d112      	bne.n	8004592 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2200      	movs	r2, #0
 8004574:	2180      	movs	r1, #128	@ 0x80
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff fe34 	bl	80041e4 <SPI_WaitFlagStateUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d016      	beq.n	80045b0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004586:	f043 0220 	orr.w	r2, r3, #32
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e023      	b.n	80045da <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	3b01      	subs	r3, #1
 800459c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a8:	2b80      	cmp	r3, #128	@ 0x80
 80045aa:	d0f2      	beq.n	8004592 <SPI_EndRxTxTransaction+0x7a>
 80045ac:	e000      	b.n	80045b0 <SPI_EndRxTxTransaction+0x98>
        break;
 80045ae:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f7ff fe99 	bl	80042f4 <SPI_WaitFifoStateUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045cc:	f043 0220 	orr.w	r2, r3, #32
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e000      	b.n	80045da <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000000 	.word	0x20000000
 80045e8:	165e9f81 	.word	0x165e9f81

080045ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e049      	b.n	8004692 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc ff58 	bl	80014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3304      	adds	r3, #4
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f000 fdf2 	bl	8005214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e049      	b.n	8004740 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f841 	bl	8004748 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2202      	movs	r2, #2
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f000 fd9b 	bl	8005214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d109      	bne.n	8004780 <HAL_TIM_PWM_Start+0x24>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e03c      	b.n	80047fa <HAL_TIM_PWM_Start+0x9e>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b04      	cmp	r3, #4
 8004784:	d109      	bne.n	800479a <HAL_TIM_PWM_Start+0x3e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b01      	cmp	r3, #1
 8004790:	bf14      	ite	ne
 8004792:	2301      	movne	r3, #1
 8004794:	2300      	moveq	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	e02f      	b.n	80047fa <HAL_TIM_PWM_Start+0x9e>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d109      	bne.n	80047b4 <HAL_TIM_PWM_Start+0x58>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	bf14      	ite	ne
 80047ac:	2301      	movne	r3, #1
 80047ae:	2300      	moveq	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e022      	b.n	80047fa <HAL_TIM_PWM_Start+0x9e>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b0c      	cmp	r3, #12
 80047b8:	d109      	bne.n	80047ce <HAL_TIM_PWM_Start+0x72>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	e015      	b.n	80047fa <HAL_TIM_PWM_Start+0x9e>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d109      	bne.n	80047e8 <HAL_TIM_PWM_Start+0x8c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	bf14      	ite	ne
 80047e0:	2301      	movne	r3, #1
 80047e2:	2300      	moveq	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	e008      	b.n	80047fa <HAL_TIM_PWM_Start+0x9e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	bf14      	ite	ne
 80047f4:	2301      	movne	r3, #1
 80047f6:	2300      	moveq	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e092      	b.n	8004928 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d104      	bne.n	8004812 <HAL_TIM_PWM_Start+0xb6>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004810:	e023      	b.n	800485a <HAL_TIM_PWM_Start+0xfe>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b04      	cmp	r3, #4
 8004816:	d104      	bne.n	8004822 <HAL_TIM_PWM_Start+0xc6>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004820:	e01b      	b.n	800485a <HAL_TIM_PWM_Start+0xfe>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b08      	cmp	r3, #8
 8004826:	d104      	bne.n	8004832 <HAL_TIM_PWM_Start+0xd6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004830:	e013      	b.n	800485a <HAL_TIM_PWM_Start+0xfe>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b0c      	cmp	r3, #12
 8004836:	d104      	bne.n	8004842 <HAL_TIM_PWM_Start+0xe6>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004840:	e00b      	b.n	800485a <HAL_TIM_PWM_Start+0xfe>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b10      	cmp	r3, #16
 8004846:	d104      	bne.n	8004852 <HAL_TIM_PWM_Start+0xf6>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004850:	e003      	b.n	800485a <HAL_TIM_PWM_Start+0xfe>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2201      	movs	r2, #1
 8004860:	6839      	ldr	r1, [r7, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f001 f87a 	bl	800595c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a30      	ldr	r2, [pc, #192]	@ (8004930 <HAL_TIM_PWM_Start+0x1d4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <HAL_TIM_PWM_Start+0x120>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a2f      	ldr	r2, [pc, #188]	@ (8004934 <HAL_TIM_PWM_Start+0x1d8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d101      	bne.n	8004880 <HAL_TIM_PWM_Start+0x124>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <HAL_TIM_PWM_Start+0x126>
 8004880:	2300      	movs	r3, #0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004894:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a25      	ldr	r2, [pc, #148]	@ (8004930 <HAL_TIM_PWM_Start+0x1d4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d022      	beq.n	80048e6 <HAL_TIM_PWM_Start+0x18a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a8:	d01d      	beq.n	80048e6 <HAL_TIM_PWM_Start+0x18a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a22      	ldr	r2, [pc, #136]	@ (8004938 <HAL_TIM_PWM_Start+0x1dc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d018      	beq.n	80048e6 <HAL_TIM_PWM_Start+0x18a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a20      	ldr	r2, [pc, #128]	@ (800493c <HAL_TIM_PWM_Start+0x1e0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <HAL_TIM_PWM_Start+0x18a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004940 <HAL_TIM_PWM_Start+0x1e4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00e      	beq.n	80048e6 <HAL_TIM_PWM_Start+0x18a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a19      	ldr	r2, [pc, #100]	@ (8004934 <HAL_TIM_PWM_Start+0x1d8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d009      	beq.n	80048e6 <HAL_TIM_PWM_Start+0x18a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004944 <HAL_TIM_PWM_Start+0x1e8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d004      	beq.n	80048e6 <HAL_TIM_PWM_Start+0x18a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a19      	ldr	r2, [pc, #100]	@ (8004948 <HAL_TIM_PWM_Start+0x1ec>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d115      	bne.n	8004912 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	4b17      	ldr	r3, [pc, #92]	@ (800494c <HAL_TIM_PWM_Start+0x1f0>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b06      	cmp	r3, #6
 80048f6:	d015      	beq.n	8004924 <HAL_TIM_PWM_Start+0x1c8>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048fe:	d011      	beq.n	8004924 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004910:	e008      	b.n	8004924 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0201 	orr.w	r2, r2, #1
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e000      	b.n	8004926 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004924:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40010000 	.word	0x40010000
 8004934:	40010400 	.word	0x40010400
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800
 8004940:	40000c00 	.word	0x40000c00
 8004944:	40014000 	.word	0x40014000
 8004948:	40001800 	.word	0x40001800
 800494c:	00010007 	.word	0x00010007

08004950 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e08f      	b.n	8004a84 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d106      	bne.n	800497e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7fc fddd 	bl	8001538 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2202      	movs	r2, #2
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6899      	ldr	r1, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4b3e      	ldr	r3, [pc, #248]	@ (8004a8c <HAL_TIM_Encoder_Init+0x13c>)
 8004992:	400b      	ands	r3, r1
 8004994:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3304      	adds	r3, #4
 800499e:	4619      	mov	r1, r3
 80049a0:	4610      	mov	r0, r2
 80049a2:	f000 fc37 	bl	8005214 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4b31      	ldr	r3, [pc, #196]	@ (8004a90 <HAL_TIM_Encoder_Init+0x140>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	021b      	lsls	r3, r3, #8
 80049da:	4313      	orrs	r3, r2
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004a94 <HAL_TIM_Encoder_Init+0x144>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004a98 <HAL_TIM_Encoder_Init+0x148>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	4313      	orrs	r3, r2
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	011a      	lsls	r2, r3, #4
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	031b      	lsls	r3, r3, #12
 8004a10:	4313      	orrs	r3, r2
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004a26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	4313      	orrs	r3, r2
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	fffebff8 	.word	0xfffebff8
 8004a90:	fffffcfc 	.word	0xfffffcfc
 8004a94:	fffff3f3 	.word	0xfffff3f3
 8004a98:	ffff0f0f 	.word	0xffff0f0f

08004a9c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004aac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ab4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004abc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ac4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d110      	bne.n	8004aee <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d102      	bne.n	8004ad8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ad2:	7b7b      	ldrb	r3, [r7, #13]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d001      	beq.n	8004adc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e089      	b.n	8004bf0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aec:	e031      	b.n	8004b52 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d110      	bne.n	8004b16 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004af4:	7bbb      	ldrb	r3, [r7, #14]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d102      	bne.n	8004b00 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004afa:	7b3b      	ldrb	r3, [r7, #12]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d001      	beq.n	8004b04 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e075      	b.n	8004bf0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b14:	e01d      	b.n	8004b52 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d108      	bne.n	8004b2e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b1c:	7bbb      	ldrb	r3, [r7, #14]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d105      	bne.n	8004b2e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b22:	7b7b      	ldrb	r3, [r7, #13]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d102      	bne.n	8004b2e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b28:	7b3b      	ldrb	r3, [r7, #12]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d001      	beq.n	8004b32 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e05e      	b.n	8004bf0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2202      	movs	r2, #2
 8004b46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d010      	beq.n	8004b80 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004b5e:	e01f      	b.n	8004ba0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2201      	movs	r2, #1
 8004b66:	2100      	movs	r1, #0
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fef7 	bl	800595c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0202 	orr.w	r2, r2, #2
 8004b7c:	60da      	str	r2, [r3, #12]
      break;
 8004b7e:	e02e      	b.n	8004bde <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2201      	movs	r2, #1
 8004b86:	2104      	movs	r1, #4
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fee7 	bl	800595c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0204 	orr.w	r2, r2, #4
 8004b9c:	60da      	str	r2, [r3, #12]
      break;
 8004b9e:	e01e      	b.n	8004bde <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fed7 	bl	800595c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	2104      	movs	r1, #4
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fed0 	bl	800595c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0202 	orr.w	r2, r2, #2
 8004bca:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0204 	orr.w	r2, r2, #4
 8004bda:	60da      	str	r2, [r3, #12]
      break;
 8004bdc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0201 	orr.w	r2, r2, #1
 8004bec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d020      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01b      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0202 	mvn.w	r2, #2
 8004c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fb ff40 	bl	8000ac8 <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fac4 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 facb 	bl	80051ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d020      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01b      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0204 	mvn.w	r2, #4
 8004c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fb ff1a 	bl	8000ac8 <HAL_TIM_IC_CaptureCallback>
 8004c94:	e005      	b.n	8004ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fa9e 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 faa5 	bl	80051ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d020      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01b      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0208 	mvn.w	r2, #8
 8004cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2204      	movs	r2, #4
 8004cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fb fef4 	bl	8000ac8 <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fa78 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fa7f 	bl	80051ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d020      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01b      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0210 	mvn.w	r2, #16
 8004d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2208      	movs	r2, #8
 8004d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fb fece 	bl	8000ac8 <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fa52 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fa59 	bl	80051ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00c      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0201 	mvn.w	r2, #1
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fa30 	bl	80051c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d104      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00c      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fea3 	bl	8005ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00c      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d007      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fe9b 	bl	8005aec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00c      	beq.n	8004dda <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fa13 	bl	8005200 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00c      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f06f 0220 	mvn.w	r2, #32
 8004df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fe63 	bl	8005ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dfe:	bf00      	nop
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e0ff      	b.n	8005026 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b14      	cmp	r3, #20
 8004e32:	f200 80f0 	bhi.w	8005016 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e36:	a201      	add	r2, pc, #4	@ (adr r2, 8004e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e91 	.word	0x08004e91
 8004e40:	08005017 	.word	0x08005017
 8004e44:	08005017 	.word	0x08005017
 8004e48:	08005017 	.word	0x08005017
 8004e4c:	08004ed1 	.word	0x08004ed1
 8004e50:	08005017 	.word	0x08005017
 8004e54:	08005017 	.word	0x08005017
 8004e58:	08005017 	.word	0x08005017
 8004e5c:	08004f13 	.word	0x08004f13
 8004e60:	08005017 	.word	0x08005017
 8004e64:	08005017 	.word	0x08005017
 8004e68:	08005017 	.word	0x08005017
 8004e6c:	08004f53 	.word	0x08004f53
 8004e70:	08005017 	.word	0x08005017
 8004e74:	08005017 	.word	0x08005017
 8004e78:	08005017 	.word	0x08005017
 8004e7c:	08004f95 	.word	0x08004f95
 8004e80:	08005017 	.word	0x08005017
 8004e84:	08005017 	.word	0x08005017
 8004e88:	08005017 	.word	0x08005017
 8004e8c:	08004fd5 	.word	0x08004fd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fa68 	bl	800536c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0208 	orr.w	r2, r2, #8
 8004eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0204 	bic.w	r2, r2, #4
 8004eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6999      	ldr	r1, [r3, #24]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	619a      	str	r2, [r3, #24]
      break;
 8004ece:	e0a5      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 faba 	bl	8005450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6999      	ldr	r1, [r3, #24]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	021a      	lsls	r2, r3, #8
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	619a      	str	r2, [r3, #24]
      break;
 8004f10:	e084      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fb11 	bl	8005540 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0208 	orr.w	r2, r2, #8
 8004f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0204 	bic.w	r2, r2, #4
 8004f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69d9      	ldr	r1, [r3, #28]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	61da      	str	r2, [r3, #28]
      break;
 8004f50:	e064      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fb67 	bl	800562c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69da      	ldr	r2, [r3, #28]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69d9      	ldr	r1, [r3, #28]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	021a      	lsls	r2, r3, #8
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	61da      	str	r2, [r3, #28]
      break;
 8004f92:	e043      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68b9      	ldr	r1, [r7, #8]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fb9e 	bl	80056dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0208 	orr.w	r2, r2, #8
 8004fae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0204 	bic.w	r2, r2, #4
 8004fbe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004fd2:	e023      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fbd0 	bl	8005780 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ffe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	021a      	lsls	r2, r3, #8
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005014:	e002      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	75fb      	strb	r3, [r7, #23]
      break;
 800501a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005024:	7dfb      	ldrb	r3, [r7, #23]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop

08005030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_TIM_ConfigClockSource+0x1c>
 8005048:	2302      	movs	r3, #2
 800504a:	e0b4      	b.n	80051b6 <HAL_TIM_ConfigClockSource+0x186>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	4b56      	ldr	r3, [pc, #344]	@ (80051c0 <HAL_TIM_ConfigClockSource+0x190>)
 8005068:	4013      	ands	r3, r2
 800506a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005072:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005084:	d03e      	beq.n	8005104 <HAL_TIM_ConfigClockSource+0xd4>
 8005086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800508a:	f200 8087 	bhi.w	800519c <HAL_TIM_ConfigClockSource+0x16c>
 800508e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005092:	f000 8086 	beq.w	80051a2 <HAL_TIM_ConfigClockSource+0x172>
 8005096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800509a:	d87f      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
 800509c:	2b70      	cmp	r3, #112	@ 0x70
 800509e:	d01a      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0xa6>
 80050a0:	2b70      	cmp	r3, #112	@ 0x70
 80050a2:	d87b      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
 80050a4:	2b60      	cmp	r3, #96	@ 0x60
 80050a6:	d050      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x11a>
 80050a8:	2b60      	cmp	r3, #96	@ 0x60
 80050aa:	d877      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
 80050ac:	2b50      	cmp	r3, #80	@ 0x50
 80050ae:	d03c      	beq.n	800512a <HAL_TIM_ConfigClockSource+0xfa>
 80050b0:	2b50      	cmp	r3, #80	@ 0x50
 80050b2:	d873      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
 80050b4:	2b40      	cmp	r3, #64	@ 0x40
 80050b6:	d058      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x13a>
 80050b8:	2b40      	cmp	r3, #64	@ 0x40
 80050ba:	d86f      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
 80050bc:	2b30      	cmp	r3, #48	@ 0x30
 80050be:	d064      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x15a>
 80050c0:	2b30      	cmp	r3, #48	@ 0x30
 80050c2:	d86b      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d060      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x15a>
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d867      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d05c      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x15a>
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d05a      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x15a>
 80050d4:	e062      	b.n	800519c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050e6:	f000 fc19 	bl	800591c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	609a      	str	r2, [r3, #8]
      break;
 8005102:	e04f      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005114:	f000 fc02 	bl	800591c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005126:	609a      	str	r2, [r3, #8]
      break;
 8005128:	e03c      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005136:	461a      	mov	r2, r3
 8005138:	f000 fb76 	bl	8005828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2150      	movs	r1, #80	@ 0x50
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fbcf 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 8005148:	e02c      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005156:	461a      	mov	r2, r3
 8005158:	f000 fb95 	bl	8005886 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2160      	movs	r1, #96	@ 0x60
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fbbf 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 8005168:	e01c      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005176:	461a      	mov	r2, r3
 8005178:	f000 fb56 	bl	8005828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2140      	movs	r1, #64	@ 0x40
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fbaf 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 8005188:	e00c      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4619      	mov	r1, r3
 8005194:	4610      	mov	r0, r2
 8005196:	f000 fba6 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 800519a:	e003      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
      break;
 80051a0:	e000      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	fffeff88 	.word	0xfffeff88

080051c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a46      	ldr	r2, [pc, #280]	@ (8005340 <TIM_Base_SetConfig+0x12c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d013      	beq.n	8005254 <TIM_Base_SetConfig+0x40>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005232:	d00f      	beq.n	8005254 <TIM_Base_SetConfig+0x40>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a43      	ldr	r2, [pc, #268]	@ (8005344 <TIM_Base_SetConfig+0x130>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00b      	beq.n	8005254 <TIM_Base_SetConfig+0x40>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a42      	ldr	r2, [pc, #264]	@ (8005348 <TIM_Base_SetConfig+0x134>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d007      	beq.n	8005254 <TIM_Base_SetConfig+0x40>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a41      	ldr	r2, [pc, #260]	@ (800534c <TIM_Base_SetConfig+0x138>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d003      	beq.n	8005254 <TIM_Base_SetConfig+0x40>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a40      	ldr	r2, [pc, #256]	@ (8005350 <TIM_Base_SetConfig+0x13c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d108      	bne.n	8005266 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800525a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a35      	ldr	r2, [pc, #212]	@ (8005340 <TIM_Base_SetConfig+0x12c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d02b      	beq.n	80052c6 <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005274:	d027      	beq.n	80052c6 <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a32      	ldr	r2, [pc, #200]	@ (8005344 <TIM_Base_SetConfig+0x130>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d023      	beq.n	80052c6 <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a31      	ldr	r2, [pc, #196]	@ (8005348 <TIM_Base_SetConfig+0x134>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01f      	beq.n	80052c6 <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a30      	ldr	r2, [pc, #192]	@ (800534c <TIM_Base_SetConfig+0x138>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d01b      	beq.n	80052c6 <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a2f      	ldr	r2, [pc, #188]	@ (8005350 <TIM_Base_SetConfig+0x13c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d017      	beq.n	80052c6 <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a2e      	ldr	r2, [pc, #184]	@ (8005354 <TIM_Base_SetConfig+0x140>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d013      	beq.n	80052c6 <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005358 <TIM_Base_SetConfig+0x144>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00f      	beq.n	80052c6 <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a2c      	ldr	r2, [pc, #176]	@ (800535c <TIM_Base_SetConfig+0x148>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00b      	beq.n	80052c6 <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005360 <TIM_Base_SetConfig+0x14c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d007      	beq.n	80052c6 <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005364 <TIM_Base_SetConfig+0x150>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d003      	beq.n	80052c6 <TIM_Base_SetConfig+0xb2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a29      	ldr	r2, [pc, #164]	@ (8005368 <TIM_Base_SetConfig+0x154>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d108      	bne.n	80052d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a10      	ldr	r2, [pc, #64]	@ (8005340 <TIM_Base_SetConfig+0x12c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d003      	beq.n	800530c <TIM_Base_SetConfig+0xf8>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a12      	ldr	r2, [pc, #72]	@ (8005350 <TIM_Base_SetConfig+0x13c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d103      	bne.n	8005314 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d105      	bne.n	8005332 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f023 0201 	bic.w	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	611a      	str	r2, [r3, #16]
  }
}
 8005332:	bf00      	nop
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	40010400 	.word	0x40010400
 8005354:	40014000 	.word	0x40014000
 8005358:	40014400 	.word	0x40014400
 800535c:	40014800 	.word	0x40014800
 8005360:	40001800 	.word	0x40001800
 8005364:	40001c00 	.word	0x40001c00
 8005368:	40002000 	.word	0x40002000

0800536c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f023 0201 	bic.w	r2, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4b2b      	ldr	r3, [pc, #172]	@ (8005444 <TIM_OC1_SetConfig+0xd8>)
 8005398:	4013      	ands	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f023 0302 	bic.w	r3, r3, #2
 80053b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a21      	ldr	r2, [pc, #132]	@ (8005448 <TIM_OC1_SetConfig+0xdc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_OC1_SetConfig+0x64>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a20      	ldr	r2, [pc, #128]	@ (800544c <TIM_OC1_SetConfig+0xe0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10c      	bne.n	80053ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f023 0308 	bic.w	r3, r3, #8
 80053d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f023 0304 	bic.w	r3, r3, #4
 80053e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a16      	ldr	r2, [pc, #88]	@ (8005448 <TIM_OC1_SetConfig+0xdc>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d003      	beq.n	80053fa <TIM_OC1_SetConfig+0x8e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a15      	ldr	r2, [pc, #84]	@ (800544c <TIM_OC1_SetConfig+0xe0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d111      	bne.n	800541e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	621a      	str	r2, [r3, #32]
}
 8005438:	bf00      	nop
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	fffeff8f 	.word	0xfffeff8f
 8005448:	40010000 	.word	0x40010000
 800544c:	40010400 	.word	0x40010400

08005450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f023 0210 	bic.w	r2, r3, #16
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4b2e      	ldr	r3, [pc, #184]	@ (8005534 <TIM_OC2_SetConfig+0xe4>)
 800547c:	4013      	ands	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 0320 	bic.w	r3, r3, #32
 800549a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a23      	ldr	r2, [pc, #140]	@ (8005538 <TIM_OC2_SetConfig+0xe8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d003      	beq.n	80054b8 <TIM_OC2_SetConfig+0x68>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a22      	ldr	r2, [pc, #136]	@ (800553c <TIM_OC2_SetConfig+0xec>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d10d      	bne.n	80054d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a18      	ldr	r2, [pc, #96]	@ (8005538 <TIM_OC2_SetConfig+0xe8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC2_SetConfig+0x94>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a17      	ldr	r2, [pc, #92]	@ (800553c <TIM_OC2_SetConfig+0xec>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d113      	bne.n	800550c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	621a      	str	r2, [r3, #32]
}
 8005526:	bf00      	nop
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	feff8fff 	.word	0xfeff8fff
 8005538:	40010000 	.word	0x40010000
 800553c:	40010400 	.word	0x40010400

08005540 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4b2d      	ldr	r3, [pc, #180]	@ (8005620 <TIM_OC3_SetConfig+0xe0>)
 800556c:	4013      	ands	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0303 	bic.w	r3, r3, #3
 8005576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a22      	ldr	r2, [pc, #136]	@ (8005624 <TIM_OC3_SetConfig+0xe4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d003      	beq.n	80055a6 <TIM_OC3_SetConfig+0x66>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a21      	ldr	r2, [pc, #132]	@ (8005628 <TIM_OC3_SetConfig+0xe8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d10d      	bne.n	80055c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a17      	ldr	r2, [pc, #92]	@ (8005624 <TIM_OC3_SetConfig+0xe4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_OC3_SetConfig+0x92>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a16      	ldr	r2, [pc, #88]	@ (8005628 <TIM_OC3_SetConfig+0xe8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d113      	bne.n	80055fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	621a      	str	r2, [r3, #32]
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	fffeff8f 	.word	0xfffeff8f
 8005624:	40010000 	.word	0x40010000
 8005628:	40010400 	.word	0x40010400

0800562c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4b1e      	ldr	r3, [pc, #120]	@ (80056d0 <TIM_OC4_SetConfig+0xa4>)
 8005658:	4013      	ands	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	031b      	lsls	r3, r3, #12
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a13      	ldr	r2, [pc, #76]	@ (80056d4 <TIM_OC4_SetConfig+0xa8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d003      	beq.n	8005694 <TIM_OC4_SetConfig+0x68>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a12      	ldr	r2, [pc, #72]	@ (80056d8 <TIM_OC4_SetConfig+0xac>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d109      	bne.n	80056a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800569a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	019b      	lsls	r3, r3, #6
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	621a      	str	r2, [r3, #32]
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	feff8fff 	.word	0xfeff8fff
 80056d4:	40010000 	.word	0x40010000
 80056d8:	40010400 	.word	0x40010400

080056dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4b1b      	ldr	r3, [pc, #108]	@ (8005774 <TIM_OC5_SetConfig+0x98>)
 8005708:	4013      	ands	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800571c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	4313      	orrs	r3, r2
 8005728:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a12      	ldr	r2, [pc, #72]	@ (8005778 <TIM_OC5_SetConfig+0x9c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_OC5_SetConfig+0x5e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a11      	ldr	r2, [pc, #68]	@ (800577c <TIM_OC5_SetConfig+0xa0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d109      	bne.n	800574e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005740:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	621a      	str	r2, [r3, #32]
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	fffeff8f 	.word	0xfffeff8f
 8005778:	40010000 	.word	0x40010000
 800577c:	40010400 	.word	0x40010400

08005780 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4b1c      	ldr	r3, [pc, #112]	@ (800581c <TIM_OC6_SetConfig+0x9c>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	021b      	lsls	r3, r3, #8
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	051b      	lsls	r3, r3, #20
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a13      	ldr	r2, [pc, #76]	@ (8005820 <TIM_OC6_SetConfig+0xa0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d003      	beq.n	80057e0 <TIM_OC6_SetConfig+0x60>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a12      	ldr	r2, [pc, #72]	@ (8005824 <TIM_OC6_SetConfig+0xa4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d109      	bne.n	80057f4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	029b      	lsls	r3, r3, #10
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	621a      	str	r2, [r3, #32]
}
 800580e:	bf00      	nop
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	feff8fff 	.word	0xfeff8fff
 8005820:	40010000 	.word	0x40010000
 8005824:	40010400 	.word	0x40010400

08005828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f023 0201 	bic.w	r2, r3, #1
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f023 030a 	bic.w	r3, r3, #10
 8005864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005886:	b480      	push	{r7}
 8005888:	b087      	sub	sp, #28
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f023 0210 	bic.w	r2, r3, #16
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	031b      	lsls	r3, r3, #12
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	621a      	str	r2, [r3, #32]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	f043 0307 	orr.w	r3, r3, #7
 8005908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	609a      	str	r2, [r3, #8]
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	021a      	lsls	r2, r3, #8
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	431a      	orrs	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4313      	orrs	r3, r2
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	609a      	str	r2, [r3, #8]
}
 8005950:	bf00      	nop
 8005952:	371c      	adds	r7, #28
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 031f 	and.w	r3, r3, #31
 800596e:	2201      	movs	r2, #1
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a1a      	ldr	r2, [r3, #32]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	43db      	mvns	r3, r3
 800597e:	401a      	ands	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a1a      	ldr	r2, [r3, #32]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	fa01 f303 	lsl.w	r3, r1, r3
 8005994:	431a      	orrs	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	621a      	str	r2, [r3, #32]
}
 800599a:	bf00      	nop
 800599c:	371c      	adds	r7, #28
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
	...

080059a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059bc:	2302      	movs	r3, #2
 80059be:	e06d      	b.n	8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a30      	ldr	r2, [pc, #192]	@ (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d004      	beq.n	80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a2f      	ldr	r2, [pc, #188]	@ (8005aac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d108      	bne.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80059fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a20      	ldr	r2, [pc, #128]	@ (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d022      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a32:	d01d      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d018      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d013      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00e      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a15      	ldr	r2, [pc, #84]	@ (8005aac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d009      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a16      	ldr	r2, [pc, #88]	@ (8005abc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d004      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a15      	ldr	r2, [pc, #84]	@ (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d10c      	bne.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	40010000 	.word	0x40010000
 8005aac:	40010400 	.word	0x40010400
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800
 8005ab8:	40000c00 	.word	0x40000c00
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40001800 	.word	0x40001800

08005ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <memset>:
 8005b00:	4402      	add	r2, r0
 8005b02:	4603      	mov	r3, r0
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d100      	bne.n	8005b0a <memset+0xa>
 8005b08:	4770      	bx	lr
 8005b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b0e:	e7f9      	b.n	8005b04 <memset+0x4>

08005b10 <__libc_init_array>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	4d0d      	ldr	r5, [pc, #52]	@ (8005b48 <__libc_init_array+0x38>)
 8005b14:	4c0d      	ldr	r4, [pc, #52]	@ (8005b4c <__libc_init_array+0x3c>)
 8005b16:	1b64      	subs	r4, r4, r5
 8005b18:	10a4      	asrs	r4, r4, #2
 8005b1a:	2600      	movs	r6, #0
 8005b1c:	42a6      	cmp	r6, r4
 8005b1e:	d109      	bne.n	8005b34 <__libc_init_array+0x24>
 8005b20:	4d0b      	ldr	r5, [pc, #44]	@ (8005b50 <__libc_init_array+0x40>)
 8005b22:	4c0c      	ldr	r4, [pc, #48]	@ (8005b54 <__libc_init_array+0x44>)
 8005b24:	f000 f818 	bl	8005b58 <_init>
 8005b28:	1b64      	subs	r4, r4, r5
 8005b2a:	10a4      	asrs	r4, r4, #2
 8005b2c:	2600      	movs	r6, #0
 8005b2e:	42a6      	cmp	r6, r4
 8005b30:	d105      	bne.n	8005b3e <__libc_init_array+0x2e>
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b38:	4798      	blx	r3
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	e7ee      	b.n	8005b1c <__libc_init_array+0xc>
 8005b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b42:	4798      	blx	r3
 8005b44:	3601      	adds	r6, #1
 8005b46:	e7f2      	b.n	8005b2e <__libc_init_array+0x1e>
 8005b48:	08005b88 	.word	0x08005b88
 8005b4c:	08005b88 	.word	0x08005b88
 8005b50:	08005b88 	.word	0x08005b88
 8005b54:	08005b8c 	.word	0x08005b8c

08005b58 <_init>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	bf00      	nop
 8005b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5e:	bc08      	pop	{r3}
 8005b60:	469e      	mov	lr, r3
 8005b62:	4770      	bx	lr

08005b64 <_fini>:
 8005b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b66:	bf00      	nop
 8005b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6a:	bc08      	pop	{r3}
 8005b6c:	469e      	mov	lr, r3
 8005b6e:	4770      	bx	lr

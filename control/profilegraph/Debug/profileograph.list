
profileograph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a4c  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006c48  08006c48  00007c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006db8  08006db8  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006db8  08006db8  00007db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dc0  08006dc0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc0  08006dc0  00007dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dc4  08006dc4  00007dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006dc8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  20000060  08006e28  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08006e28  00008478  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c1a  00000000  00000000  0000808e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002942  00000000  00000000  00018ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  0001b5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bcd  00000000  00000000  0001c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290ec  00000000  00000000  0001d0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013059  00000000  00000000  000461e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001005e7  00000000  00000000  00059242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159829  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  0015986c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0015db40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000060 	.word	0x20000060
 8000214:	00000000 	.word	0x00000000
 8000218:	08006c2c 	.word	0x08006c2c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000064 	.word	0x20000064
 8000234:	08006c2c 	.word	0x08006c2c

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_uldivmod>:
 80005b0:	b953      	cbnz	r3, 80005c8 <__aeabi_uldivmod+0x18>
 80005b2:	b94a      	cbnz	r2, 80005c8 <__aeabi_uldivmod+0x18>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	bf08      	it	eq
 80005b8:	2800      	cmpeq	r0, #0
 80005ba:	bf1c      	itt	ne
 80005bc:	f04f 31ff 	movne.w	r1, #4294967295
 80005c0:	f04f 30ff 	movne.w	r0, #4294967295
 80005c4:	f000 b96a 	b.w	800089c <__aeabi_idiv0>
 80005c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d0:	f000 f806 	bl	80005e0 <__udivmoddi4>
 80005d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005dc:	b004      	add	sp, #16
 80005de:	4770      	bx	lr

080005e0 <__udivmoddi4>:
 80005e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e4:	9d08      	ldr	r5, [sp, #32]
 80005e6:	460c      	mov	r4, r1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d14e      	bne.n	800068a <__udivmoddi4+0xaa>
 80005ec:	4694      	mov	ip, r2
 80005ee:	458c      	cmp	ip, r1
 80005f0:	4686      	mov	lr, r0
 80005f2:	fab2 f282 	clz	r2, r2
 80005f6:	d962      	bls.n	80006be <__udivmoddi4+0xde>
 80005f8:	b14a      	cbz	r2, 800060e <__udivmoddi4+0x2e>
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	4091      	lsls	r1, r2
 8000600:	fa20 f303 	lsr.w	r3, r0, r3
 8000604:	fa0c fc02 	lsl.w	ip, ip, r2
 8000608:	4319      	orrs	r1, r3
 800060a:	fa00 fe02 	lsl.w	lr, r0, r2
 800060e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000612:	fa1f f68c 	uxth.w	r6, ip
 8000616:	fbb1 f4f7 	udiv	r4, r1, r7
 800061a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800061e:	fb07 1114 	mls	r1, r7, r4, r1
 8000622:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000626:	fb04 f106 	mul.w	r1, r4, r6
 800062a:	4299      	cmp	r1, r3
 800062c:	d90a      	bls.n	8000644 <__udivmoddi4+0x64>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f104 30ff 	add.w	r0, r4, #4294967295
 8000636:	f080 8112 	bcs.w	800085e <__udivmoddi4+0x27e>
 800063a:	4299      	cmp	r1, r3
 800063c:	f240 810f 	bls.w	800085e <__udivmoddi4+0x27e>
 8000640:	3c02      	subs	r4, #2
 8000642:	4463      	add	r3, ip
 8000644:	1a59      	subs	r1, r3, r1
 8000646:	fa1f f38e 	uxth.w	r3, lr
 800064a:	fbb1 f0f7 	udiv	r0, r1, r7
 800064e:	fb07 1110 	mls	r1, r7, r0, r1
 8000652:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000656:	fb00 f606 	mul.w	r6, r0, r6
 800065a:	429e      	cmp	r6, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x94>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 31ff 	add.w	r1, r0, #4294967295
 8000666:	f080 80fc 	bcs.w	8000862 <__udivmoddi4+0x282>
 800066a:	429e      	cmp	r6, r3
 800066c:	f240 80f9 	bls.w	8000862 <__udivmoddi4+0x282>
 8000670:	4463      	add	r3, ip
 8000672:	3802      	subs	r0, #2
 8000674:	1b9b      	subs	r3, r3, r6
 8000676:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800067a:	2100      	movs	r1, #0
 800067c:	b11d      	cbz	r5, 8000686 <__udivmoddi4+0xa6>
 800067e:	40d3      	lsrs	r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	e9c5 3200 	strd	r3, r2, [r5]
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	428b      	cmp	r3, r1
 800068c:	d905      	bls.n	800069a <__udivmoddi4+0xba>
 800068e:	b10d      	cbz	r5, 8000694 <__udivmoddi4+0xb4>
 8000690:	e9c5 0100 	strd	r0, r1, [r5]
 8000694:	2100      	movs	r1, #0
 8000696:	4608      	mov	r0, r1
 8000698:	e7f5      	b.n	8000686 <__udivmoddi4+0xa6>
 800069a:	fab3 f183 	clz	r1, r3
 800069e:	2900      	cmp	r1, #0
 80006a0:	d146      	bne.n	8000730 <__udivmoddi4+0x150>
 80006a2:	42a3      	cmp	r3, r4
 80006a4:	d302      	bcc.n	80006ac <__udivmoddi4+0xcc>
 80006a6:	4290      	cmp	r0, r2
 80006a8:	f0c0 80f0 	bcc.w	800088c <__udivmoddi4+0x2ac>
 80006ac:	1a86      	subs	r6, r0, r2
 80006ae:	eb64 0303 	sbc.w	r3, r4, r3
 80006b2:	2001      	movs	r0, #1
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d0e6      	beq.n	8000686 <__udivmoddi4+0xa6>
 80006b8:	e9c5 6300 	strd	r6, r3, [r5]
 80006bc:	e7e3      	b.n	8000686 <__udivmoddi4+0xa6>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	f040 8090 	bne.w	80007e4 <__udivmoddi4+0x204>
 80006c4:	eba1 040c 	sub.w	r4, r1, ip
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	fa1f f78c 	uxth.w	r7, ip
 80006d0:	2101      	movs	r1, #1
 80006d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80006d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006da:	fb08 4416 	mls	r4, r8, r6, r4
 80006de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006e2:	fb07 f006 	mul.w	r0, r7, r6
 80006e6:	4298      	cmp	r0, r3
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x11c>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80006f2:	d202      	bcs.n	80006fa <__udivmoddi4+0x11a>
 80006f4:	4298      	cmp	r0, r3
 80006f6:	f200 80cd 	bhi.w	8000894 <__udivmoddi4+0x2b4>
 80006fa:	4626      	mov	r6, r4
 80006fc:	1a1c      	subs	r4, r3, r0
 80006fe:	fa1f f38e 	uxth.w	r3, lr
 8000702:	fbb4 f0f8 	udiv	r0, r4, r8
 8000706:	fb08 4410 	mls	r4, r8, r0, r4
 800070a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800070e:	fb00 f707 	mul.w	r7, r0, r7
 8000712:	429f      	cmp	r7, r3
 8000714:	d908      	bls.n	8000728 <__udivmoddi4+0x148>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 34ff 	add.w	r4, r0, #4294967295
 800071e:	d202      	bcs.n	8000726 <__udivmoddi4+0x146>
 8000720:	429f      	cmp	r7, r3
 8000722:	f200 80b0 	bhi.w	8000886 <__udivmoddi4+0x2a6>
 8000726:	4620      	mov	r0, r4
 8000728:	1bdb      	subs	r3, r3, r7
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	e7a5      	b.n	800067c <__udivmoddi4+0x9c>
 8000730:	f1c1 0620 	rsb	r6, r1, #32
 8000734:	408b      	lsls	r3, r1
 8000736:	fa22 f706 	lsr.w	r7, r2, r6
 800073a:	431f      	orrs	r7, r3
 800073c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000740:	fa04 f301 	lsl.w	r3, r4, r1
 8000744:	ea43 030c 	orr.w	r3, r3, ip
 8000748:	40f4      	lsrs	r4, r6
 800074a:	fa00 f801 	lsl.w	r8, r0, r1
 800074e:	0c38      	lsrs	r0, r7, #16
 8000750:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000754:	fbb4 fef0 	udiv	lr, r4, r0
 8000758:	fa1f fc87 	uxth.w	ip, r7
 800075c:	fb00 441e 	mls	r4, r0, lr, r4
 8000760:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000764:	fb0e f90c 	mul.w	r9, lr, ip
 8000768:	45a1      	cmp	r9, r4
 800076a:	fa02 f201 	lsl.w	r2, r2, r1
 800076e:	d90a      	bls.n	8000786 <__udivmoddi4+0x1a6>
 8000770:	193c      	adds	r4, r7, r4
 8000772:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000776:	f080 8084 	bcs.w	8000882 <__udivmoddi4+0x2a2>
 800077a:	45a1      	cmp	r9, r4
 800077c:	f240 8081 	bls.w	8000882 <__udivmoddi4+0x2a2>
 8000780:	f1ae 0e02 	sub.w	lr, lr, #2
 8000784:	443c      	add	r4, r7
 8000786:	eba4 0409 	sub.w	r4, r4, r9
 800078a:	fa1f f983 	uxth.w	r9, r3
 800078e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000792:	fb00 4413 	mls	r4, r0, r3, r4
 8000796:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079a:	fb03 fc0c 	mul.w	ip, r3, ip
 800079e:	45a4      	cmp	ip, r4
 80007a0:	d907      	bls.n	80007b2 <__udivmoddi4+0x1d2>
 80007a2:	193c      	adds	r4, r7, r4
 80007a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80007a8:	d267      	bcs.n	800087a <__udivmoddi4+0x29a>
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d965      	bls.n	800087a <__udivmoddi4+0x29a>
 80007ae:	3b02      	subs	r3, #2
 80007b0:	443c      	add	r4, r7
 80007b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007b6:	fba0 9302 	umull	r9, r3, r0, r2
 80007ba:	eba4 040c 	sub.w	r4, r4, ip
 80007be:	429c      	cmp	r4, r3
 80007c0:	46ce      	mov	lr, r9
 80007c2:	469c      	mov	ip, r3
 80007c4:	d351      	bcc.n	800086a <__udivmoddi4+0x28a>
 80007c6:	d04e      	beq.n	8000866 <__udivmoddi4+0x286>
 80007c8:	b155      	cbz	r5, 80007e0 <__udivmoddi4+0x200>
 80007ca:	ebb8 030e 	subs.w	r3, r8, lr
 80007ce:	eb64 040c 	sbc.w	r4, r4, ip
 80007d2:	fa04 f606 	lsl.w	r6, r4, r6
 80007d6:	40cb      	lsrs	r3, r1
 80007d8:	431e      	orrs	r6, r3
 80007da:	40cc      	lsrs	r4, r1
 80007dc:	e9c5 6400 	strd	r6, r4, [r5]
 80007e0:	2100      	movs	r1, #0
 80007e2:	e750      	b.n	8000686 <__udivmoddi4+0xa6>
 80007e4:	f1c2 0320 	rsb	r3, r2, #32
 80007e8:	fa20 f103 	lsr.w	r1, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	fa24 f303 	lsr.w	r3, r4, r3
 80007f4:	4094      	lsls	r4, r2
 80007f6:	430c      	orrs	r4, r1
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000800:	fa1f f78c 	uxth.w	r7, ip
 8000804:	fbb3 f0f8 	udiv	r0, r3, r8
 8000808:	fb08 3110 	mls	r1, r8, r0, r3
 800080c:	0c23      	lsrs	r3, r4, #16
 800080e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000812:	fb00 f107 	mul.w	r1, r0, r7
 8000816:	4299      	cmp	r1, r3
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x24c>
 800081a:	eb1c 0303 	adds.w	r3, ip, r3
 800081e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000822:	d22c      	bcs.n	800087e <__udivmoddi4+0x29e>
 8000824:	4299      	cmp	r1, r3
 8000826:	d92a      	bls.n	800087e <__udivmoddi4+0x29e>
 8000828:	3802      	subs	r0, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f1f8 	udiv	r1, r3, r8
 8000834:	fb08 3311 	mls	r3, r8, r1, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb01 f307 	mul.w	r3, r1, r7
 8000840:	42a3      	cmp	r3, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x276>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f101 36ff 	add.w	r6, r1, #4294967295
 800084c:	d213      	bcs.n	8000876 <__udivmoddi4+0x296>
 800084e:	42a3      	cmp	r3, r4
 8000850:	d911      	bls.n	8000876 <__udivmoddi4+0x296>
 8000852:	3902      	subs	r1, #2
 8000854:	4464      	add	r4, ip
 8000856:	1ae4      	subs	r4, r4, r3
 8000858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800085c:	e739      	b.n	80006d2 <__udivmoddi4+0xf2>
 800085e:	4604      	mov	r4, r0
 8000860:	e6f0      	b.n	8000644 <__udivmoddi4+0x64>
 8000862:	4608      	mov	r0, r1
 8000864:	e706      	b.n	8000674 <__udivmoddi4+0x94>
 8000866:	45c8      	cmp	r8, r9
 8000868:	d2ae      	bcs.n	80007c8 <__udivmoddi4+0x1e8>
 800086a:	ebb9 0e02 	subs.w	lr, r9, r2
 800086e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000872:	3801      	subs	r0, #1
 8000874:	e7a8      	b.n	80007c8 <__udivmoddi4+0x1e8>
 8000876:	4631      	mov	r1, r6
 8000878:	e7ed      	b.n	8000856 <__udivmoddi4+0x276>
 800087a:	4603      	mov	r3, r0
 800087c:	e799      	b.n	80007b2 <__udivmoddi4+0x1d2>
 800087e:	4630      	mov	r0, r6
 8000880:	e7d4      	b.n	800082c <__udivmoddi4+0x24c>
 8000882:	46d6      	mov	lr, sl
 8000884:	e77f      	b.n	8000786 <__udivmoddi4+0x1a6>
 8000886:	4463      	add	r3, ip
 8000888:	3802      	subs	r0, #2
 800088a:	e74d      	b.n	8000728 <__udivmoddi4+0x148>
 800088c:	4606      	mov	r6, r0
 800088e:	4623      	mov	r3, r4
 8000890:	4608      	mov	r0, r1
 8000892:	e70f      	b.n	80006b4 <__udivmoddi4+0xd4>
 8000894:	3e02      	subs	r6, #2
 8000896:	4463      	add	r3, ip
 8000898:	e730      	b.n	80006fc <__udivmoddi4+0x11c>
 800089a:	bf00      	nop

0800089c <__aeabi_idiv0>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <writeRegister>:
 * @param num Number of bytes to be written
 * @retval none
 * @note Since the register values to be written are 8-bit, there is no need to multiple writing
 */
static void writeRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	4613      	mov	r3, r2
 80008ae:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80008b4:	d901      	bls.n	80008ba <writeRegister+0x1a>
		address = 63;
 80008b6:	233f      	movs	r3, #63	@ 0x3f
 80008b8:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
		address = (address << 1 & ~0x01);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2104      	movs	r1, #4
 80008c6:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <writeRegister+0x58>)
 80008c8:	f003 f860 	bl	800398c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 80008cc:	1df9      	adds	r1, r7, #7
 80008ce:	230a      	movs	r3, #10
 80008d0:	2201      	movs	r2, #1
 80008d2:	480a      	ldr	r0, [pc, #40]	@ (80008fc <writeRegister+0x5c>)
 80008d4:	f003 fd99 	bl	800440a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,value,num,10);
 80008d8:	79bb      	ldrb	r3, [r7, #6]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	230a      	movs	r3, #10
 80008de:	6839      	ldr	r1, [r7, #0]
 80008e0:	4806      	ldr	r0, [pc, #24]	@ (80008fc <writeRegister+0x5c>)
 80008e2:	f003 fd92 	bl	800440a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2104      	movs	r1, #4
 80008ea:	4803      	ldr	r0, [pc, #12]	@ (80008f8 <writeRegister+0x58>)
 80008ec:	f003 f84e 	bl	800398c <HAL_GPIO_WritePin>
	

}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40020c00 	.word	0x40020c00
 80008fc:	200001a8 	.word	0x200001a8

08000900 <readRegister>:
 *	@param value Pointer to buffer that stores the read value
 *	@param num Number of bytes to be written
 * 	@retval none
 */
static void readRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b3f      	cmp	r3, #63	@ 0x3f
 8000914:	d901      	bls.n	800091a <readRegister+0x1a>
		address = 63;
 8000916:	233f      	movs	r3, #63	@ 0x3f
 8000918:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
		address = (address << 1 | 0x01);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	b25b      	sxtb	r3, r3
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	b25b      	sxtb	r3, r3
 8000926:	b2db      	uxtb	r3, r3
 8000928:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2104      	movs	r1, #4
 800092e:	480c      	ldr	r0, [pc, #48]	@ (8000960 <readRegister+0x60>)
 8000930:	f003 f82c 	bl	800398c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000934:	1df9      	adds	r1, r7, #7
 8000936:	230a      	movs	r3, #10
 8000938:	2201      	movs	r2, #1
 800093a:	480a      	ldr	r0, [pc, #40]	@ (8000964 <readRegister+0x64>)
 800093c:	f003 fd65 	bl	800440a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	b29a      	uxth	r2, r3
 8000944:	230a      	movs	r3, #10
 8000946:	6839      	ldr	r1, [r7, #0]
 8000948:	4806      	ldr	r0, [pc, #24]	@ (8000964 <readRegister+0x64>)
 800094a:	f003 fed3 	bl	80046f4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2104      	movs	r1, #4
 8000952:	4803      	ldr	r0, [pc, #12]	@ (8000960 <readRegister+0x60>)
 8000954:	f003 f81a 	bl	800398c <HAL_GPIO_WritePin>
	
	
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40020c00 	.word	0x40020c00
 8000964:	200001a8 	.word	0x200001a8

08000968 <adxlFormat>:
						2 		|  				+-8g		
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	uint8_t formatreg=0;
 8000970:	2300      	movs	r3, #0
 8000972:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1); //Set register to 0
 8000974:	f107 030f 	add.w	r3, r7, #15
 8000978:	2201      	movs	r2, #1
 800097a:	4619      	mov	r1, r3
 800097c:	202c      	movs	r0, #44	@ 0x2c
 800097e:	f7ff ff8f 	bl	80008a0 <writeRegister>
	formatreg = (adxl->IntMode << 6 | adxl->Range) & RANGE_REG_MASK;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	78db      	ldrb	r3, [r3, #3]
 8000986:	019b      	lsls	r3, r3, #6
 8000988:	b25a      	sxtb	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	791b      	ldrb	r3, [r3, #4]
 800098e:	b25b      	sxtb	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b25b      	sxtb	r3, r3
 8000994:	b2db      	uxtb	r3, r3
 8000996:	f003 0343 	and.w	r3, r3, #67	@ 0x43
 800099a:	b2db      	uxtb	r3, r3
 800099c:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1);
 800099e:	f107 030f 	add.w	r3, r7, #15
 80009a2:	2201      	movs	r2, #1
 80009a4:	4619      	mov	r1, r3
 80009a6:	202c      	movs	r0, #44	@ 0x2c
 80009a8:	f7ff ff7a 	bl	80008a0 <writeRegister>

	formatreg = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg,1);
 80009b0:	f107 030f 	add.w	r3, r7, #15
 80009b4:	2201      	movs	r2, #1
 80009b6:	4619      	mov	r1, r3
 80009b8:	202d      	movs	r0, #45	@ 0x2d
 80009ba:	f7ff ff71 	bl	80008a0 <writeRegister>
	formatreg = (adxl->DataReadyMode << 2 | adxl->TempMode << 1 | adxl->StandbyMode) & POWER_CTL_REG_MASK;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	789b      	ldrb	r3, [r3, #2]
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	b25a      	sxtb	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	785b      	ldrb	r3, [r3, #1]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	4313      	orrs	r3, r2
 80009d0:	b25a      	sxtb	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	4313      	orrs	r3, r2
 80009da:	b25b      	sxtb	r3, r3
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg, 1);
 80009e6:	f107 030f 	add.w	r3, r7, #15
 80009ea:	2201      	movs	r2, #1
 80009ec:	4619      	mov	r1, r3
 80009ee:	202d      	movs	r0, #45	@ 0x2d
 80009f0:	f7ff ff56 	bl	80008a0 <writeRegister>
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <adxlReset>:

/**
 * @brief Call to reset ADXL355
 */
static void adxlReset(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
    uint8_t shadow_reg_store[5] = {};
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	2300      	movs	r3, #0
 8000a08:	753b      	strb	r3, [r7, #20]
    uint8_t shadow_reg_read[5] = {};
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	733b      	strb	r3, [r7, #12]
    uint8_t reset_write = ADXL_RESET_WRITE;
 8000a12:	2352      	movs	r3, #82	@ 0x52
 8000a14:	71fb      	strb	r3, [r7, #7]
    //Store values from shadow registers
    readRegister(SHADOW_REG1, shadow_reg_store, 5);
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	2205      	movs	r2, #5
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	2050      	movs	r0, #80	@ 0x50
 8000a20:	f7ff ff6e 	bl	8000900 <readRegister>
    while (1) {
        //Perform a software reset
        writeRegister(ADXL_RESET, &reset_write, 1);
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	2201      	movs	r2, #1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	202f      	movs	r0, #47	@ 0x2f
 8000a2c:	f7ff ff38 	bl	80008a0 <writeRegister>
        //Read shadow registers after reset
        readRegister(SHADOW_REG1, shadow_reg_read, 5);
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	2205      	movs	r2, #5
 8000a36:	4619      	mov	r1, r3
 8000a38:	2050      	movs	r0, #80	@ 0x50
 8000a3a:	f7ff ff61 	bl	8000900 <readRegister>
        // Check if shadow registers match the stored values
        uint8_t match = 1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	77fb      	strb	r3, [r7, #31]
        for (int i = 0; i < 5; i++) {
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
 8000a46:	e011      	b.n	8000a6c <adxlReset+0x70>
            if (shadow_reg_read[i] != shadow_reg_store[i]) {
 8000a48:	f107 0208 	add.w	r2, r7, #8
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	4413      	add	r3, r2
 8000a50:	781a      	ldrb	r2, [r3, #0]
 8000a52:	f107 0110 	add.w	r1, r7, #16
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	440b      	add	r3, r1
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d002      	beq.n	8000a66 <adxlReset+0x6a>
                match = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	77fb      	strb	r3, [r7, #31]
                break;
 8000a64:	e005      	b.n	8000a72 <adxlReset+0x76>
        for (int i = 0; i < 5; i++) {
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	ddea      	ble.n	8000a48 <adxlReset+0x4c>
            }
        }
        // If all shadow registers match, exit the loop
        if (match) break;
 8000a72:	7ffb      	ldrb	r3, [r7, #31]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d100      	bne.n	8000a7a <adxlReset+0x7e>
    while (1) {
 8000a78:	e7d4      	b.n	8000a24 <adxlReset+0x28>
        if (match) break;
 8000a7a:	bf00      	nop
    }
}
 8000a7c:	bf00      	nop
 8000a7e:	3720      	adds	r7, #32
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2104      	movs	r1, #4
 8000a90:	482d      	ldr	r0, [pc, #180]	@ (8000b48 <ADXL_Init+0xc4>)
 8000a92:	f002 ff7b 	bl	800398c <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f001 fb8e 	bl	80021b8 <HAL_Delay>
	//Reset device
	adxlReset();
 8000a9c:	f7ff ffae 	bl	80009fc <adxlReset>
	uint8_t testval[2] = {};
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	81bb      	strh	r3, [r7, #12]
	// The Device Address register is constant, i.e. = 0xAD
	readRegister(DEVID_AD, testval, 2);
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	4619      	mov	r1, r3
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff ff27 	bl	8000900 <readRegister>
	if (testval[0] != DEVID_AD_DEFAULT_VAL || testval[1] != DEVID_MST_DEFAULT_VAL) return ADXL_ERR;
 8000ab2:	7b3b      	ldrb	r3, [r7, #12]
 8000ab4:	2bad      	cmp	r3, #173	@ 0xad
 8000ab6:	d102      	bne.n	8000abe <ADXL_Init+0x3a>
 8000ab8:	7b7b      	ldrb	r3, [r7, #13]
 8000aba:	2b1d      	cmp	r3, #29
 8000abc:	d001      	beq.n	8000ac2 <ADXL_Init+0x3e>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e03d      	b.n	8000b3e <ADXL_Init+0xba>

	//Init of BW_RATE and DATAFORMAT registers
	adxlFormat(adxl);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ff50 	bl	8000968 <adxlFormat>
	
	// Settings gains 
	switch (adxl->Range) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	791b      	ldrb	r3, [r3, #4]
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d01e      	beq.n	8000b0e <ADXL_Init+0x8a>
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	dc28      	bgt.n	8000b26 <ADXL_Init+0xa2>
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d002      	beq.n	8000ade <ADXL_Init+0x5a>
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d00c      	beq.n	8000af6 <ADXL_Init+0x72>
 8000adc:	e023      	b.n	8000b26 <ADXL_Init+0xa2>
		case ADXL_RANGE_2G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <ADXL_Init+0xc8>)
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b50 <ADXL_Init+0xcc>)
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <ADXL_Init+0xc8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8000b54 <ADXL_Init+0xd0>)
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <ADXL_Init+0xd0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <ADXL_Init+0xd4>)
 8000af2:	6013      	str	r3, [r2, #0]
			break;
 8000af4:	e022      	b.n	8000b3c <ADXL_Init+0xb8>
		case ADXL_RANGE_4G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_4G;
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <ADXL_Init+0xc8>)
 8000af8:	4a18      	ldr	r2, [pc, #96]	@ (8000b5c <ADXL_Init+0xd8>)
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <ADXL_Init+0xc8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a13      	ldr	r2, [pc, #76]	@ (8000b58 <ADXL_Init+0xd4>)
 8000b0a:	6013      	str	r3, [r2, #0]
			break;
 8000b0c:	e016      	b.n	8000b3c <ADXL_Init+0xb8>
		case ADXL_RANGE_8G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_8G;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <ADXL_Init+0xc8>)
 8000b10:	4a13      	ldr	r2, [pc, #76]	@ (8000b60 <ADXL_Init+0xdc>)
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <ADXL_Init+0xc8>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <ADXL_Init+0xd4>)
 8000b22:	6013      	str	r3, [r2, #0]
			break;
 8000b24:	e00a      	b.n	8000b3c <ADXL_Init+0xb8>
		default:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <ADXL_Init+0xc8>)
 8000b28:	4a09      	ldr	r2, [pc, #36]	@ (8000b50 <ADXL_Init+0xcc>)
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <ADXL_Init+0xc8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <ADXL_Init+0xd4>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
			
	return ADXL_OK;
 8000b3c:	2300      	movs	r3, #0
	
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	20000084 	.word	0x20000084
 8000b50:	36831049 	.word	0x36831049
 8000b54:	20000080 	.word	0x20000080
 8000b58:	2000007c 	.word	0x2000007c
 8000b5c:	37031494 	.word	0x37031494
 8000b60:	3783126f 	.word	0x3783126f

08000b64 <ADXL_getAccelRaw>:
 * @brief Read accelerometer data in all 3 axis
 * @param[out] Data	pointer to buffer that stores the 3 axis acceleration value
 * @retval none
 */
void ADXL_getAccelRaw(void *Data)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    uint8_t data[9] = {};
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	711a      	strb	r2, [r3, #4]
    readRegister(XDATA3, data, 9);
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2209      	movs	r2, #9
 8000b80:	4619      	mov	r1, r3
 8000b82:	2008      	movs	r0, #8
 8000b84:	f7ff febc 	bl	8000900 <readRegister>

	int32_t *acc = Data;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	617b      	str	r3, [r7, #20]

	// Two's Complement 20-bit conversion
	acc[0] = (int32_t)((data[0] << 12) | (data[1] << 4) | (data[2] >> 4));
 8000b8c:	7a3b      	ldrb	r3, [r7, #8]
 8000b8e:	031a      	lsls	r2, r3, #12
 8000b90:	7a7b      	ldrb	r3, [r7, #9]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	4313      	orrs	r3, r2
 8000b96:	7aba      	ldrb	r2, [r7, #10]
 8000b98:	0912      	lsrs	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	601a      	str	r2, [r3, #0]
	acc[1] = (int32_t)((data[3] << 12) | (data[4] << 4) | (data[5] >> 4));
 8000ba2:	7afb      	ldrb	r3, [r7, #11]
 8000ba4:	031a      	lsls	r2, r3, #12
 8000ba6:	7b3b      	ldrb	r3, [r7, #12]
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	431a      	orrs	r2, r3
 8000bac:	7b7b      	ldrb	r3, [r7, #13]
 8000bae:	091b      	lsrs	r3, r3, #4
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
	acc[2] = (int32_t)((data[6] << 12) | (data[7] << 4) | (data[8] >> 4));
 8000bbc:	7bbb      	ldrb	r3, [r7, #14]
 8000bbe:	031a      	lsls	r2, r3, #12
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	011b      	lsls	r3, r3, #4
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	7c3b      	ldrb	r3, [r7, #16]
 8000bc8:	091b      	lsrs	r3, r3, #4
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4619      	mov	r1, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]

	// Sign extension for 20-bit values
	if (acc[0] & 0x80000) acc[0] |= 0xFFF00000;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d007      	beq.n	8000bf2 <ADXL_getAccelRaw+0x8e>
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <ADXL_getAccelRaw+0xd8>)
 8000bea:	4313      	orrs	r3, r2
 8000bec:	461a      	mov	r2, r3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	601a      	str	r2, [r3, #0]
	if (acc[1] & 0x80000) acc[1] |= 0xFFF00000;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d008      	beq.n	8000c12 <ADXL_getAccelRaw+0xae>
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	3304      	adds	r3, #4
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <ADXL_getAccelRaw+0xd8>)
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	3204      	adds	r2, #4
 8000c10:	6013      	str	r3, [r2, #0]
	if (acc[2] & 0x80000) acc[2] |= 0xFFF00000;
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3308      	adds	r3, #8
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d008      	beq.n	8000c32 <ADXL_getAccelRaw+0xce>
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	3308      	adds	r3, #8
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <ADXL_getAccelRaw+0xd8>)
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	3208      	adds	r2, #8
 8000c30:	6013      	str	r3, [r2, #0]
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	fff00000 	.word	0xfff00000

08000c40 <ADXL_getAccelFloat>:
/**
 * @brief Read accelerometer data and convert it to float
 * @param pData Pointer to buffer that stores acceleration value
 * @retval none
 */
void ADXL_getAccelFloat(void *pData) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	int32_t rawdata[3] = {};
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
	float *dataout = pData;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	617b      	str	r3, [r7, #20]
	ADXL_getAccelRaw(rawdata);
 8000c58:	f107 0308 	add.w	r3, r7, #8
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff81 	bl	8000b64 <ADXL_getAccelRaw>

	//Convert raw data to float
	dataout[0] = (float)rawdata[0] * GAINX;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	ee07 3a90 	vmov	s15, r3
 8000c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <ADXL_getAccelFloat+0x7c>)
 8000c6e:	edd3 7a00 	vldr	s15, [r3]
 8000c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	edc3 7a00 	vstr	s15, [r3]
	dataout[1] = (float)rawdata[1] * GAINY;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <ADXL_getAccelFloat+0x80>)
 8000c88:	edd3 7a00 	vldr	s15, [r3]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3304      	adds	r3, #4
 8000c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c94:	edc3 7a00 	vstr	s15, [r3]
	dataout[2] = (float)rawdata[2] * GAINZ;
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	ee07 3a90 	vmov	s15, r3
 8000c9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ca2:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <ADXL_getAccelFloat+0x84>)
 8000ca4:	edd3 7a00 	vldr	s15, [r3]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3308      	adds	r3, #8
 8000cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb0:	edc3 7a00 	vstr	s15, [r3]
}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000007c 	.word	0x2000007c
 8000cc0:	20000080 	.word	0x20000080
 8000cc4:	20000084 	.word	0x20000084

08000cc8 <ADXL_Measure>:
/** Starts Measure Mode
* @param: s = ON or OFF				

*/
void ADXL_Measure(Switch s)
		{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 8000cd2:	f107 030f 	add.w	r3, r7, #15
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4619      	mov	r1, r3
 8000cda:	202d      	movs	r0, #45	@ 0x2d
 8000cdc:	f7ff fe10 	bl	8000900 <readRegister>
			switch (s) {
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d002      	beq.n	8000cec <ADXL_Measure+0x24>
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d012      	beq.n	8000d10 <ADXL_Measure+0x48>
				case OFF:
				reg &= ~(1<<3);
				writeRegister(POWER_CTL,&reg,1);
				break;				
				}
		}
 8000cea:	e01e      	b.n	8000d2a <ADXL_Measure+0x62>
				reg &= ~(1<<2);
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	f023 0304 	bic.w	r3, r3, #4
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	73fb      	strb	r3, [r7, #15]
				reg |= (1<<3);
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,&reg,1);
 8000d00:	f107 030f 	add.w	r3, r7, #15
 8000d04:	2201      	movs	r2, #1
 8000d06:	4619      	mov	r1, r3
 8000d08:	202d      	movs	r0, #45	@ 0x2d
 8000d0a:	f7ff fdc9 	bl	80008a0 <writeRegister>
				break;
 8000d0e:	e00c      	b.n	8000d2a <ADXL_Measure+0x62>
				reg &= ~(1<<3);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	f023 0308 	bic.w	r3, r3, #8
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,&reg,1);
 8000d1a:	f107 030f 	add.w	r3, r7, #15
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4619      	mov	r1, r3
 8000d22:	202d      	movs	r0, #45	@ 0x2d
 8000d24:	f7ff fdbc 	bl	80008a0 <writeRegister>
				break;				
 8000d28:	bf00      	nop
		}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <ADXL_setFilter>:

void ADXL_setFilter(void) {
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
	uint8_t reg;
	readRegister(FILTER, &reg, 1);
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	2028      	movs	r0, #40	@ 0x28
 8000d40:	f7ff fdde 	bl	8000900 <readRegister>
	reg = 0b00001010;
 8000d44:	230a      	movs	r3, #10
 8000d46:	71fb      	strb	r3, [r7, #7]
	writeRegister(FILTER, &reg, 1);
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	2028      	movs	r0, #40	@ 0x28
 8000d50:	f7ff fda6 	bl	80008a0 <writeRegister>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d70:	4a21      	ldr	r2, [pc, #132]	@ (8000df8 <MX_ADC1_Init+0x9c>)
 8000d72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d80:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d86:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d8c:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d94:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d9c:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <MX_ADC1_Init+0xa0>)
 8000d9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dba:	480e      	ldr	r0, [pc, #56]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000dbc:	f001 fa20 	bl	8002200 <HAL_ADC_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dc6:	f000 fd99 	bl	80018fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000dca:	230a      	movs	r3, #10
 8000dcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000ddc:	f001 fa54 	bl	8002288 <HAL_ADC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000de6:	f000 fd89 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000088 	.word	0x20000088
 8000df8:	40012000 	.word	0x40012000
 8000dfc:	0f000001 	.word	0x0f000001

08000e00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a15      	ldr	r2, [pc, #84]	@ (8000e74 <HAL_ADC_MspInit+0x74>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d123      	bne.n	8000e6a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <HAL_ADC_MspInit+0x78>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	4a14      	ldr	r2, [pc, #80]	@ (8000e78 <HAL_ADC_MspInit+0x78>)
 8000e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2e:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <HAL_ADC_MspInit+0x78>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <HAL_ADC_MspInit+0x78>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e78 <HAL_ADC_MspInit+0x78>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <HAL_ADC_MspInit+0x78>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e52:	2301      	movs	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e56:	2303      	movs	r3, #3
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <HAL_ADC_MspInit+0x7c>)
 8000e66:	f002 fbe5 	bl	8003634 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	@ 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40012000 	.word	0x40012000
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020800 	.word	0x40020800

08000e80 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e84:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000e86:	4a18      	ldr	r2, [pc, #96]	@ (8000ee8 <MX_CAN1_Init+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e90:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e96:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000e9e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000ea2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000ea6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000eaa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000ed2:	f001 fc29 	bl	8002728 <HAL_CAN_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000edc:	f000 fd0e 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200000d0 	.word	0x200000d0
 8000ee8:	40006400 	.word	0x40006400

08000eec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1b      	ldr	r2, [pc, #108]	@ (8000f78 <HAL_CAN_MspInit+0x8c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12f      	bne.n	8000f6e <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <HAL_CAN_MspInit+0x90>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	4a1a      	ldr	r2, [pc, #104]	@ (8000f7c <HAL_CAN_MspInit+0x90>)
 8000f14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <HAL_CAN_MspInit+0x90>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f26:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <HAL_CAN_MspInit+0x90>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a14      	ldr	r2, [pc, #80]	@ (8000f7c <HAL_CAN_MspInit+0x90>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_CAN_MspInit+0x90>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f4e:	2309      	movs	r3, #9
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4809      	ldr	r0, [pc, #36]	@ (8000f80 <HAL_CAN_MspInit+0x94>)
 8000f5a:	f002 fb6b 	bl	8003634 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2014      	movs	r0, #20
 8000f64:	f002 fb2f 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f68:	2014      	movs	r0, #20
 8000f6a:	f002 fb48 	bl	80035fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	@ 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40006400 	.word	0x40006400
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020c00 	.word	0x40020c00

08000f84 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9a:	4b34      	ldr	r3, [pc, #208]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a33      	ldr	r2, [pc, #204]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b31      	ldr	r3, [pc, #196]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a2d      	ldr	r2, [pc, #180]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b28      	ldr	r3, [pc, #160]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a27      	ldr	r2, [pc, #156]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b25      	ldr	r3, [pc, #148]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b22      	ldr	r3, [pc, #136]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a21      	ldr	r2, [pc, #132]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800106c <MX_GPIO_Init+0xe8>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b19      	ldr	r3, [pc, #100]	@ (800106c <MX_GPIO_Init+0xe8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001018:	4815      	ldr	r0, [pc, #84]	@ (8001070 <MX_GPIO_Init+0xec>)
 800101a:	f002 fcb7 	bl	800398c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2104      	movs	r1, #4
 8001022:	4814      	ldr	r0, [pc, #80]	@ (8001074 <MX_GPIO_Init+0xf0>)
 8001024:	f002 fcb2 	bl	800398c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001028:	f244 0381 	movw	r3, #16513	@ 0x4081
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	480b      	ldr	r0, [pc, #44]	@ (8001070 <MX_GPIO_Init+0xec>)
 8001042:	f002 faf7 	bl	8003634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001046:	2304      	movs	r3, #4
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_GPIO_Init+0xf0>)
 800105e:	f002 fae9 	bl	8003634 <HAL_GPIO_Init>

}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	@ 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40020400 	.word	0x40020400
 8001074:	40020c00 	.word	0x40020c00

08001078 <HAL_TIM_IC_CaptureCallback>:
void C_transverseHeight(uint16_t transverseLength);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
//	static uint32_t encoder_position = 0;
//	static uint32_t overflow_counter = 0;
//	static uint32_t encoder_temp = 0;

    // Read the current value from the timer counter
	current_encoder_value  = __HAL_TIM_GET_COUNTER(htim);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001086:	4a22      	ldr	r2, [pc, #136]	@ (8001110 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001088:	6013      	str	r3, [r2, #0]

    // Detect overflow: if the current value is less than the previous value,
    // it means the counter has wrapped around from 65535 back to 0.
	if (current_encoder_value < prev_encoder_value) {
 800108a:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <HAL_TIM_IC_CaptureCallback+0x98>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	429a      	cmp	r2, r3
 8001094:	d205      	bcs.n	80010a2 <HAL_TIM_IC_CaptureCallback+0x2a>
	        extended_counter += 65536; // add one full count cycle (0x10000)
 8001096:	4b20      	ldr	r3, [pc, #128]	@ (8001118 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800109e:	4a1e      	ldr	r2, [pc, #120]	@ (8001118 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80010a0:	6013      	str	r3, [r2, #0]
	}

    prev_encoder_value = current_encoder_value;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <HAL_TIM_IC_CaptureCallback+0x98>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001114 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80010a8:	6013      	str	r3, [r2, #0]

//	if (current_encoder_value  >= 65531) {
//		extended_counter += 65536;
//		overflow_counter = extended_counter - 1;
//	} else {
		total_count = extended_counter + current_encoder_value;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <HAL_TIM_IC_CaptureCallback+0x98>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a19      	ldr	r2, [pc, #100]	@ (800111c <HAL_TIM_IC_CaptureCallback+0xa4>)
 80010b6:	6013      	str	r3, [r2, #0]
//	}
	encoder_position = total_count/4;
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <HAL_TIM_IC_CaptureCallback+0xa4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	4a18      	ldr	r2, [pc, #96]	@ (8001120 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80010c0:	6013      	str	r3, [r2, #0]
	C_drivenDistance = (float) (encoder_position/ENCODER_PULSES_PER_WHEEL_TURN_26RPM) * DRIVE_WHEEL_CIRCUMFERENCE_METER;
 80010c2:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80010ce:	ed9f 5b0c 	vldr	d5, [pc, #48]	@ 8001100 <HAL_TIM_IC_CaptureCallback+0x88>
 80010d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010de:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8001108 <HAL_TIM_IC_CaptureCallback+0x90>
 80010e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <HAL_TIM_IC_CaptureCallback+0xac>)
 80010ec:	edc3 7a00 	vstr	s15, [r3]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	f3af 8000 	nop.w
 8001100:	00000000 	.word	0x00000000
 8001104:	40a2a600 	.word	0x40a2a600
 8001108:	c0ebedfa 	.word	0xc0ebedfa
 800110c:	3fca2339 	.word	0x3fca2339
 8001110:	20000184 	.word	0x20000184
 8001114:	20000194 	.word	0x20000194
 8001118:	20000190 	.word	0x20000190
 800111c:	2000018c 	.word	0x2000018c
 8001120:	20000188 	.word	0x20000188
 8001124:	20000198 	.word	0x20000198

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112e:	f000 ffe6 	bl	80020fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001132:	f000 f965 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001136:	f7ff ff25 	bl	8000f84 <MX_GPIO_Init>
  MX_CAN1_Init();
 800113a:	f7ff fea1 	bl	8000e80 <MX_CAN1_Init>
  MX_TIM2_Init();
 800113e:	f000 fce9 	bl	8001b14 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001142:	f7ff fe0b 	bl	8000d5c <MX_ADC1_Init>
  MX_TIM3_Init();
 8001146:	f000 fd5b 	bl	8001c00 <MX_TIM3_Init>
  MX_TIM4_Init();
 800114a:	f000 fdd1 	bl	8001cf0 <MX_TIM4_Init>
  MX_TIM9_Init();
 800114e:	f000 fe25 	bl	8001d9c <MX_TIM9_Init>
  MX_SPI3_Init();
 8001152:	f000 fbd9 	bl	8001908 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_MspInit(&hcan1);
 8001156:	4894      	ldr	r0, [pc, #592]	@ (80013a8 <main+0x280>)
 8001158:	f7ff fec8 	bl	8000eec <HAL_CAN_MspInit>
  CAN_Config();
 800115c:	f000 fa16 	bl	800158c <CAN_Config>

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001160:	2102      	movs	r1, #2
 8001162:	4891      	ldr	r0, [pc, #580]	@ (80013a8 <main+0x280>)
 8001164:	f001 fefe 	bl	8002f64 <HAL_CAN_ActivateNotification>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <main+0x4a>
	  Error_Handler();
 800116e:	f000 fbc5 	bl	80018fc <Error_Handler>
  }

  ADXL.StandbyMode = ADXL_MODE_MEASUREMENT;
 8001172:	4b8e      	ldr	r3, [pc, #568]	@ (80013ac <main+0x284>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
  ADXL.TempMode = ADXL_TEMP_OFF;
 8001178:	4b8c      	ldr	r3, [pc, #560]	@ (80013ac <main+0x284>)
 800117a:	2201      	movs	r2, #1
 800117c:	705a      	strb	r2, [r3, #1]
  ADXL.DataReadyMode = ADXL_DRDY_ON;
 800117e:	4b8b      	ldr	r3, [pc, #556]	@ (80013ac <main+0x284>)
 8001180:	2200      	movs	r2, #0
 8001182:	709a      	strb	r2, [r3, #2]
  ADXL.IntMode = ADXL_INT_ACTIVELOW;
 8001184:	4b89      	ldr	r3, [pc, #548]	@ (80013ac <main+0x284>)
 8001186:	2200      	movs	r2, #0
 8001188:	70da      	strb	r2, [r3, #3]
  ADXL.Range = ADXL_RANGE_2G;
 800118a:	4b88      	ldr	r3, [pc, #544]	@ (80013ac <main+0x284>)
 800118c:	2201      	movs	r2, #1
 800118e:	711a      	strb	r2, [r3, #4]

  TxHeader.StdId = 0x101;
 8001190:	4b87      	ldr	r3, [pc, #540]	@ (80013b0 <main+0x288>)
 8001192:	f240 1201 	movw	r2, #257	@ 0x101
 8001196:	601a      	str	r2, [r3, #0]
  TxHeader.DLC = 5;
 8001198:	4b85      	ldr	r3, [pc, #532]	@ (80013b0 <main+0x288>)
 800119a:	2205      	movs	r2, #5
 800119c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800119e:	4b84      	ldr	r3, [pc, #528]	@ (80013b0 <main+0x288>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80011a4:	4b82      	ldr	r3, [pc, #520]	@ (80013b0 <main+0x288>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  TxHeader.TransmitGlobalTime = DISABLE;
 80011aa:	4b81      	ldr	r3, [pc, #516]	@ (80013b0 <main+0x288>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0x00;
 80011b0:	4b80      	ldr	r3, [pc, #512]	@ (80013b4 <main+0x28c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x00;
 80011b6:	4b7f      	ldr	r3, [pc, #508]	@ (80013b4 <main+0x28c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	705a      	strb	r2, [r3, #1]
//  TxData[3] = 0x00;
//  TxData[4] = 0x00;
//  TxData[5] = 0x00;


  ADXL_Init(&ADXL);
 80011bc:	487b      	ldr	r0, [pc, #492]	@ (80013ac <main+0x284>)
 80011be:	f7ff fc61 	bl	8000a84 <ADXL_Init>
  ADXL_Measure(ON);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff fd80 	bl	8000cc8 <ADXL_Measure>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011c8:	2100      	movs	r1, #0
 80011ca:	487b      	ldr	r0, [pc, #492]	@ (80013b8 <main+0x290>)
 80011cc:	f004 f8a8 	bl	8005320 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011d0:	2100      	movs	r1, #0
 80011d2:	487a      	ldr	r0, [pc, #488]	@ (80013bc <main+0x294>)
 80011d4:	f004 f8a4 	bl	8005320 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80011d8:	2100      	movs	r1, #0
 80011da:	4879      	ldr	r0, [pc, #484]	@ (80013c0 <main+0x298>)
 80011dc:	f004 f8a0 	bl	8005320 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 80011e0:	2104      	movs	r1, #4
 80011e2:	4877      	ldr	r0, [pc, #476]	@ (80013c0 <main+0x298>)
 80011e4:	f004 f89c 	bl	8005320 <HAL_TIM_PWM_Start>

  htim2.Instance->CCR1 = SERVO_CCR_AT_CENTER;
 80011e8:	4b73      	ldr	r3, [pc, #460]	@ (80013b8 <main+0x290>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f240 22fd 	movw	r2, #765	@ 0x2fd
 80011f0:	635a      	str	r2, [r3, #52]	@ 0x34
  htim9.Instance->CCR1 = MARKER_SERVO_HIGH_CCR;
 80011f2:	4b73      	ldr	r3, [pc, #460]	@ (80013c0 <main+0x298>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	22fa      	movs	r2, #250	@ 0xfa
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
  htim9.Instance->CCR2 = MARKER_SERVO_HIGH_CCR;
 80011fa:	4b71      	ldr	r3, [pc, #452]	@ (80013c0 <main+0x298>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	22fa      	movs	r2, #250	@ 0xfa
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38

  State nextState = STATE_IDLE;
 8001202:	2300      	movs	r3, #0
 8001204:	71fb      	strb	r3, [r7, #7]

  Steering_Servo_Position(STEERING_ANGLE_CENTER);
 8001206:	2000      	movs	r0, #0
 8001208:	f000 fa58 	bl	80016bc <Steering_Servo_Position>
  ADXL_setFilter();
 800120c:	f7ff fd91 	bl	8000d32 <ADXL_setFilter>
  {
#if (DEMO)

#else

	  switch (nextState){
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b04      	cmp	r3, #4
 8001214:	f200 80bc 	bhi.w	8001390 <main+0x268>
 8001218:	a201      	add	r2, pc, #4	@ (adr r2, 8001220 <main+0xf8>)
 800121a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121e:	bf00      	nop
 8001220:	08001235 	.word	0x08001235
 8001224:	0800127b 	.word	0x0800127b
 8001228:	080012ad 	.word	0x080012ad
 800122c:	08001341 	.word	0x08001341
 8001230:	08001389 	.word	0x08001389
	  	  case STATE_IDLE:
	  		  currentState = STATE_IDLE;
 8001234:	4b63      	ldr	r3, [pc, #396]	@ (80013c4 <main+0x29c>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
	  		  dis_off = DIS_OFF_DEFAULT;
 800123a:	4b63      	ldr	r3, [pc, #396]	@ (80013c8 <main+0x2a0>)
 800123c:	229c      	movs	r2, #156	@ 0x9c
 800123e:	701a      	strb	r2, [r3, #0]
	  		  Drive_Motor_Control(DRIVE_MOTOR_MIN_SPEED);
 8001240:	2000      	movs	r0, #0
 8001242:	f000 fafd 	bl	8001840 <Drive_Motor_Control>
//	  		  Drive_Motor_Control(DRIVE_MOTOR_MAX_SPEED);
	  		  current_encoder_value = __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001246:	4b61      	ldr	r3, [pc, #388]	@ (80013cc <main+0x2a4>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2300      	movs	r3, #0
 800124c:	6253      	str	r3, [r2, #36]	@ 0x24
 800124e:	4a60      	ldr	r2, [pc, #384]	@ (80013d0 <main+0x2a8>)
 8001250:	6013      	str	r3, [r2, #0]
	  		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001258:	485e      	ldr	r0, [pc, #376]	@ (80013d4 <main+0x2ac>)
 800125a:	f002 fb97 	bl	800398c <HAL_GPIO_WritePin>
	  		  if (S_startSurvey){
 800125e:	4b5e      	ldr	r3, [pc, #376]	@ (80013d8 <main+0x2b0>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8097 	beq.w	8001396 <main+0x26e>
	  			  nextState = STATE_STARTUP;
 8001268:	2301      	movs	r3, #1
 800126a:	71fb      	strb	r3, [r7, #7]
		  		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001272:	4858      	ldr	r0, [pc, #352]	@ (80013d4 <main+0x2ac>)
 8001274:	f002 fb8a 	bl	800398c <HAL_GPIO_WritePin>
	  		  }
	  		  break;
 8001278:	e08d      	b.n	8001396 <main+0x26e>

	  	  case STATE_STARTUP:
	  		  currentState = STATE_STARTUP;
 800127a:	4b52      	ldr	r3, [pc, #328]	@ (80013c4 <main+0x29c>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
	  		  Steering_Servo_Position(STEERING_ANGLE_CENTER);
 8001280:	2000      	movs	r0, #0
 8001282:	f000 fa1b 	bl	80016bc <Steering_Servo_Position>
	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8001286:	2201      	movs	r2, #1
 8001288:	2180      	movs	r1, #128	@ 0x80
 800128a:	4852      	ldr	r0, [pc, #328]	@ (80013d4 <main+0x2ac>)
 800128c:	f002 fb7e 	bl	800398c <HAL_GPIO_WritePin>
	  		  if (dis_off != (DIS_OFF_DEFAULT)){
 8001290:	4b4d      	ldr	r3, [pc, #308]	@ (80013c8 <main+0x2a0>)
 8001292:	f993 3000 	ldrsb.w	r3, [r3]
 8001296:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800129a:	d07e      	beq.n	800139a <main+0x272>
	  			  nextState = STATE_RUNNING;
 800129c:	2302      	movs	r3, #2
 800129e:	71fb      	strb	r3, [r7, #7]
		  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2180      	movs	r1, #128	@ 0x80
 80012a4:	484b      	ldr	r0, [pc, #300]	@ (80013d4 <main+0x2ac>)
 80012a6:	f002 fb71 	bl	800398c <HAL_GPIO_WritePin>
	  		  }
	  		  break;
 80012aa:	e076      	b.n	800139a <main+0x272>

	  	  case STATE_RUNNING:
	  		  currentState = STATE_RUNNING;
 80012ac:	4b45      	ldr	r3, [pc, #276]	@ (80013c4 <main+0x29c>)
 80012ae:	2202      	movs	r2, #2
 80012b0:	701a      	strb	r2, [r3, #0]
	  		  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80012b2:	213c      	movs	r1, #60	@ 0x3c
 80012b4:	4845      	ldr	r0, [pc, #276]	@ (80013cc <main+0x2a4>)
 80012b6:	f004 f9d3 	bl	8005660 <HAL_TIM_Encoder_Start_IT>
	  		  Steering_Servo_Control(dis_off);
 80012ba:	4b43      	ldr	r3, [pc, #268]	@ (80013c8 <main+0x2a0>)
 80012bc:	f993 3000 	ldrsb.w	r3, [r3]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fa3f 	bl	8001744 <Steering_Servo_Control>
			  Drive_Motor_Start(S_surveyDistanceSet);
 80012c6:	4b45      	ldr	r3, [pc, #276]	@ (80013dc <main+0x2b4>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	f000 facd 	bl	8001874 <Drive_Motor_Start>
			  C_drivenDistanceSend = C_drivenDistance * 100;
 80012da:	4b41      	ldr	r3, [pc, #260]	@ (80013e0 <main+0x2b8>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80013e4 <main+0x2bc>
 80012e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ec:	ee17 3a90 	vmov	r3, s15
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b3d      	ldr	r3, [pc, #244]	@ (80013e8 <main+0x2c0>)
 80012f4:	801a      	strh	r2, [r3, #0]
			  TxData[0] = C_drivenDistanceSend & 0xFF;
 80012f6:	4b3c      	ldr	r3, [pc, #240]	@ (80013e8 <main+0x2c0>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <main+0x28c>)
 80012fe:	701a      	strb	r2, [r3, #0]
			  TxData[1] = (C_drivenDistanceSend >> 8) & 0xFF;
 8001300:	4b39      	ldr	r3, [pc, #228]	@ (80013e8 <main+0x2c0>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	b29b      	uxth	r3, r3
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <main+0x28c>)
 800130c:	705a      	strb	r2, [r3, #1]
			  //Add can message broadcast
			  ADXL_getAccelRaw(accelData);
 800130e:	4837      	ldr	r0, [pc, #220]	@ (80013ec <main+0x2c4>)
 8001310:	f7ff fc28 	bl	8000b64 <ADXL_getAccelRaw>
			  C_transverseHeight(S_WHEELBASE);
 8001314:	f240 40f1 	movw	r0, #1265	@ 0x4f1
 8001318:	f000 f8ce 	bl	80014b8 <C_transverseHeight>
//			  if (C_drivenDistance >= 2 && C_drivenDistance < 2.2) {
//				  htim9.Instance->CCR1 = 400;
//			  } else {
//				  htim9.Instance->CCR1 = MARKER_SERVO_HIGH_CCR;
//			  }
			  if (C_drivenDistance >= S_surveyDistanceSet){
 800131c:	4b2f      	ldr	r3, [pc, #188]	@ (80013dc <main+0x2b4>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001328:	4b2d      	ldr	r3, [pc, #180]	@ (80013e0 <main+0x2b8>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001336:	d900      	bls.n	800133a <main+0x212>
				  nextState = STATE_STOPPING;
			  }
	  		  break;
 8001338:	e032      	b.n	80013a0 <main+0x278>
				  nextState = STATE_STOPPING;
 800133a:	2303      	movs	r3, #3
 800133c:	71fb      	strb	r3, [r7, #7]
	  		  break;
 800133e:	e02f      	b.n	80013a0 <main+0x278>

	  	  case STATE_STOPPING:
	  		  currentState = STATE_STOPPING;
 8001340:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <main+0x29c>)
 8001342:	2203      	movs	r2, #3
 8001344:	701a      	strb	r2, [r3, #0]
	  		  Drive_Motor_Control(DRIVE_MOTOR_MIN_SPEED);
 8001346:	2000      	movs	r0, #0
 8001348:	f000 fa7a 	bl	8001840 <Drive_Motor_Control>
	  		  HAL_TIM_Encoder_Stop_IT(&htim4, TIM_CHANNEL_ALL);
 800134c:	213c      	movs	r1, #60	@ 0x3c
 800134e:	481f      	ldr	r0, [pc, #124]	@ (80013cc <main+0x2a4>)
 8001350:	f004 fa34 	bl	80057bc <HAL_TIM_Encoder_Stop_IT>
	  		  C_drivenDistance = 0;
 8001354:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <main+0x2b8>)
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
	  		  current_encoder_value  = 0;
 800135c:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <main+0x2a8>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
	  		  encoder_position = 0;
 8001362:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <main+0x2c8>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
	  		  total_count = 0;
 8001368:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <main+0x2cc>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
	  		  extended_counter = 0;
 800136e:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <main+0x2d0>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
	  		  prev_encoder_value = 0;
 8001374:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <main+0x2d4>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
	  		  if (!S_startSurvey){
 800137a:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <main+0x2b0>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10d      	bne.n	800139e <main+0x276>
	  			  nextState = STATE_IDLE;
 8001382:	2300      	movs	r3, #0
 8001384:	71fb      	strb	r3, [r7, #7]
	  		  }
	  		  break;
 8001386:	e00a      	b.n	800139e <main+0x276>

	  	  case STATE_ERROR:
	  		  currentState = STATE_ERROR;
 8001388:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <main+0x29c>)
 800138a:	2204      	movs	r2, #4
 800138c:	701a      	strb	r2, [r3, #0]
	  		  break;
 800138e:	e007      	b.n	80013a0 <main+0x278>

	  	  default:
	  		  nextState = STATE_ERROR;
 8001390:	2304      	movs	r3, #4
 8001392:	71fb      	strb	r3, [r7, #7]
	  		  break;
 8001394:	e004      	b.n	80013a0 <main+0x278>
	  		  break;
 8001396:	bf00      	nop
 8001398:	e002      	b.n	80013a0 <main+0x278>
	  		  break;
 800139a:	bf00      	nop
 800139c:	e000      	b.n	80013a0 <main+0x278>
	  		  break;
 800139e:	bf00      	nop
//	 	  }

//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

//	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  HAL_Delay(10);
 80013a0:	200a      	movs	r0, #10
 80013a2:	f000 ff09 	bl	80021b8 <HAL_Delay>
	  switch (nextState){
 80013a6:	e733      	b.n	8001210 <main+0xe8>
 80013a8:	200000d0 	.word	0x200000d0
 80013ac:	20000144 	.word	0x20000144
 80013b0:	200000fc 	.word	0x200000fc
 80013b4:	20000130 	.word	0x20000130
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	20000258 	.word	0x20000258
 80013c0:	200002f0 	.word	0x200002f0
 80013c4:	200000f8 	.word	0x200000f8
 80013c8:	20000164 	.word	0x20000164
 80013cc:	200002a4 	.word	0x200002a4
 80013d0:	20000184 	.word	0x20000184
 80013d4:	40020400 	.word	0x40020400
 80013d8:	20000168 	.word	0x20000168
 80013dc:	20000165 	.word	0x20000165
 80013e0:	20000198 	.word	0x20000198
 80013e4:	42c80000 	.word	0x42c80000
 80013e8:	2000019c 	.word	0x2000019c
 80013ec:	2000014c 	.word	0x2000014c
 80013f0:	20000188 	.word	0x20000188
 80013f4:	2000018c 	.word	0x2000018c
 80013f8:	20000190 	.word	0x20000190
 80013fc:	20000194 	.word	0x20000194

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b094      	sub	sp, #80	@ 0x50
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	2234      	movs	r2, #52	@ 0x34
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f005 fa1c 	bl	800684c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001424:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <SystemClock_Config+0xb0>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	4a21      	ldr	r2, [pc, #132]	@ (80014b0 <SystemClock_Config+0xb0>)
 800142a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800142e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001430:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <SystemClock_Config+0xb0>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800143c:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <SystemClock_Config+0xb4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001444:	4a1b      	ldr	r2, [pc, #108]	@ (80014b4 <SystemClock_Config+0xb4>)
 8001446:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <SystemClock_Config+0xb4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001458:	2302      	movs	r3, #2
 800145a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145c:	2301      	movs	r3, #1
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001460:	2310      	movs	r3, #16
 8001462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fac1 	bl	80039f4 <HAL_RCC_OscConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001478:	f000 fa40 	bl	80018fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147c:	230f      	movs	r3, #15
 800147e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f002 fd5a 	bl	8003f50 <HAL_RCC_ClockConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014a2:	f000 fa2b 	bl	80018fc <Error_Handler>
  }
}
 80014a6:	bf00      	nop
 80014a8:	3750      	adds	r7, #80	@ 0x50
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40007000 	.word	0x40007000

080014b8 <C_transverseHeight>:

/* USER CODE BEGIN 4 */
void C_transverseHeight(uint16_t transverseLength) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	ed2d 8b02 	vpush	{d8}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
//    float accelData_g[3];
    ADXL_getAccelFloat(accelData_g);
 80014c6:	4829      	ldr	r0, [pc, #164]	@ (800156c <C_transverseHeight+0xb4>)
 80014c8:	f7ff fbba 	bl	8000c40 <ADXL_getAccelFloat>
    float accel_x = accelData_g[0];
 80014cc:	4b27      	ldr	r3, [pc, #156]	@ (800156c <C_transverseHeight+0xb4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
    float accel_z = accelData_g[2];
 80014d2:	4b26      	ldr	r3, [pc, #152]	@ (800156c <C_transverseHeight+0xb4>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	60bb      	str	r3, [r7, #8]
    //static float theta = 0;

    theta = atanf(accel_x / accel_z);
 80014d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80014dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80014e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014e4:	eeb0 0a66 	vmov.f32	s0, s13
 80014e8:	f005 f9e2 	bl	80068b0 <atanf>
 80014ec:	eef0 7a40 	vmov.f32	s15, s0
 80014f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <C_transverseHeight+0xb8>)
 80014f2:	edc3 7a00 	vstr	s15, [r3]
    //theta_deg =  theta * (180.0f / 3.14)
    height_diff = transverseLength * sinf(theta);
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001500:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <C_transverseHeight+0xb8>)
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	eeb0 0a67 	vmov.f32	s0, s15
 800150a:	f005 fad9 	bl	8006ac0 <sinf>
 800150e:	eef0 7a40 	vmov.f32	s15, s0
 8001512:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001516:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <C_transverseHeight+0xbc>)
 8001518:	edc3 7a00 	vstr	s15, [r3]
    height_diff_send = height_diff * 10;
 800151c:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <C_transverseHeight+0xbc>)
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800152e:	ee17 3a90 	vmov	r3, s15
 8001532:	b21a      	sxth	r2, r3
 8001534:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <C_transverseHeight+0xc0>)
 8001536:	801a      	strh	r2, [r3, #0]

    TxData[2] = (height_diff_send) & 0xFF;
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <C_transverseHeight+0xc0>)
 800153a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <C_transverseHeight+0xc4>)
 8001542:	709a      	strb	r2, [r3, #2]
    TxData[3] = ((height_diff_send) >> 8) & 0xFF;
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <C_transverseHeight+0xc0>)
 8001546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154a:	121b      	asrs	r3, r3, #8
 800154c:	b21b      	sxth	r3, r3
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <C_transverseHeight+0xc4>)
 8001552:	70da      	strb	r2, [r3, #3]
    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001554:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <C_transverseHeight+0xc8>)
 8001556:	4a09      	ldr	r2, [pc, #36]	@ (800157c <C_transverseHeight+0xc4>)
 8001558:	490a      	ldr	r1, [pc, #40]	@ (8001584 <C_transverseHeight+0xcc>)
 800155a:	480b      	ldr	r0, [pc, #44]	@ (8001588 <C_transverseHeight+0xd0>)
 800155c:	f001 fb10 	bl	8002b80 <HAL_CAN_AddTxMessage>
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	ecbd 8b02 	vpop	{d8}
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000158 	.word	0x20000158
 8001570:	20000178 	.word	0x20000178
 8001574:	2000017c 	.word	0x2000017c
 8001578:	20000180 	.word	0x20000180
 800157c:	20000130 	.word	0x20000130
 8001580:	20000140 	.word	0x20000140
 8001584:	200000fc 	.word	0x200000fc
 8001588:	200000d0 	.word	0x200000d0

0800158c <CAN_Config>:

static void CAN_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	@ 0x28
 8001590:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 8001592:	230d      	movs	r3, #13
 8001594:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800159a:	2301      	movs	r3, #1
 800159c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000; //Only ID 0x284 and 0x285 can pass through
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80015b2:	2301      	movs	r3, #1
 80015b4:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80015ba:	463b      	mov	r3, r7
 80015bc:	4619      	mov	r1, r3
 80015be:	480a      	ldr	r0, [pc, #40]	@ (80015e8 <CAN_Config+0x5c>)
 80015c0:	f001 f9ae 	bl	8002920 <HAL_CAN_ConfigFilter>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <CAN_Config+0x42>
	{
		/* Filter configuration Error */
		Error_Handler();
 80015ca:	f000 f997 	bl	80018fc <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80015ce:	4806      	ldr	r0, [pc, #24]	@ (80015e8 <CAN_Config+0x5c>)
 80015d0:	f001 fa92 	bl	8002af8 <HAL_CAN_Start>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <CAN_Config+0x52>
	{
		/* Start Error */
		Error_Handler();
 80015da:	f000 f98f 	bl	80018fc <Error_Handler>
	}
}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	@ 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200000d0 	.word	0x200000d0

080015ec <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80015f4:	4b28      	ldr	r3, [pc, #160]	@ (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80015f6:	4a29      	ldr	r2, [pc, #164]	@ (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80015f8:	2100      	movs	r1, #0
 80015fa:	4829      	ldr	r0, [pc, #164]	@ (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80015fc:	f001 fb90 	bl	8002d20 <HAL_CAN_GetRxMessage>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001606:	2180      	movs	r1, #128	@ 0x80
 8001608:	4826      	ldr	r0, [pc, #152]	@ (80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800160a:	f002 f9d8 	bl	80039be <HAL_GPIO_TogglePin>
		Error_Handler();
 800160e:	f000 f975 	bl	80018fc <Error_Handler>
	}

	if (RxHeader.StdId == 0x123) {
 8001612:	4b22      	ldr	r3, [pc, #136]	@ (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f240 1223 	movw	r2, #291	@ 0x123
 800161a:	4293      	cmp	r3, r2
 800161c:	d10b      	bne.n	8001636 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800161e:	2101      	movs	r1, #1
 8001620:	4820      	ldr	r0, [pc, #128]	@ (80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8001622:	f002 f9cc 	bl	80039be <HAL_GPIO_TogglePin>
		dis_off = RxData[0]*(-1);
 8001626:	4b1c      	ldr	r3, [pc, #112]	@ (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	425b      	negs	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	b25a      	sxtb	r2, r3
 8001630:	4b1d      	ldr	r3, [pc, #116]	@ (80016a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	e01f      	b.n	8001676 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
	} else if (RxHeader.StdId == 0x102) {
 8001636:	4b19      	ldr	r3, [pc, #100]	@ (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800163e:	d11a      	bne.n	8001676 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
		S_surveyDistanceSet = RxData[0];
 8001640:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001642:	781a      	ldrb	r2, [r3, #0]
 8001644:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001646:	701a      	strb	r2, [r3, #0]
		S_heightThreashold = RxData[1];
 8001648:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800164a:	785a      	ldrb	r2, [r3, #1]
 800164c:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800164e:	701a      	strb	r2, [r3, #0]
		S_wheelBase = RxData[2] | (RxData[3] << 8);
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001652:	789b      	ldrb	r3, [r3, #2]
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001658:	78db      	ldrb	r3, [r3, #3]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21b      	sxth	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b21b      	sxth	r3, r3
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8001666:	801a      	strh	r2, [r3, #0]
		S_startSurvey = RxData[4] & 0x01;
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800166a:	791b      	ldrb	r3, [r3, #4]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8001674:	701a      	strb	r2, [r3, #0]
	}

	if (RxHeader.StdId == 0x103) {
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f240 1203 	movw	r2, #259	@ 0x103
 800167e:	4293      	cmp	r3, r2
 8001680:	d106      	bne.n	8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
		S_startSurvey = RxData[0] & 0x01;
 8001682:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	b2da      	uxtb	r2, r3
 800168c:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800168e:	701a      	strb	r2, [r3, #0]
	}

}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000138 	.word	0x20000138
 800169c:	20000114 	.word	0x20000114
 80016a0:	200000d0 	.word	0x200000d0
 80016a4:	40020400 	.word	0x40020400
 80016a8:	20000164 	.word	0x20000164
 80016ac:	20000165 	.word	0x20000165
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000166 	.word	0x20000166
 80016b8:	20000168 	.word	0x20000168

080016bc <Steering_Servo_Position>:

void Steering_Servo_Position(int8_t steeringAngle){
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
	if (steeringAngle < STEERING_ANGLE_MAX_LEFT) {
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	f113 0f14 	cmn.w	r3, #20
 80016ce:	da02      	bge.n	80016d6 <Steering_Servo_Position+0x1a>
		steeringAngle = STEERING_ANGLE_MAX_LEFT;   // clamp to -20°
 80016d0:	23ec      	movs	r3, #236	@ 0xec
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	e005      	b.n	80016e2 <Steering_Servo_Position+0x26>
	}
	else if (steeringAngle > STEERING_ANGLE_MAX_RIGHT) {
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b14      	cmp	r3, #20
 80016dc:	dd01      	ble.n	80016e2 <Steering_Servo_Position+0x26>
		steeringAngle = STEERING_ANGLE_MAX_RIGHT;  // clamp to +20°
 80016de:	2314      	movs	r3, #20
 80016e0:	71fb      	strb	r3, [r7, #7]
	}
	//Linear interpolation from steering angle to ccr value
	float ccrValue = SERVO_CCR_AT_NEG20
		+ ( (steeringAngle - STEERING_ANGLE_MAX_LEFT)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ee:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80016f2:	ee37 7a87 	vadd.f32	s14, s15, s14
			/ (STEERING_ANGLE_MAX_RIGHT - STEERING_ANGLE_MAX_LEFT) )
 80016f6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001734 <Steering_Servo_Position+0x78>
 80016fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
		  * (SERVO_CCR_AT_POS20 - SERVO_CCR_AT_NEG20);
 80016fe:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001738 <Steering_Servo_Position+0x7c>
 8001702:	ee67 7a87 	vmul.f32	s15, s15, s14
	float ccrValue = SERVO_CCR_AT_NEG20
 8001706:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800173c <Steering_Servo_Position+0x80>
 800170a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800170e:	edc7 7a03 	vstr	s15, [r7, #12]

	//Write to the timer’s CCR register (cast to uint16_t)
	htim2.Instance->CCR1 = (uint16_t) ccrValue;
 8001712:	edd7 7a03 	vldr	s15, [r7, #12]
 8001716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800171a:	ee17 3a90 	vmov	r3, s15
 800171e:	b29a      	uxth	r2, r3
 8001720:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <Steering_Servo_Position+0x84>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	42200000 	.word	0x42200000
 8001738:	43160000 	.word	0x43160000
 800173c:	442c8000 	.word	0x442c8000
 8001740:	2000020c 	.word	0x2000020c

08001744 <Steering_Servo_Control>:

void Steering_Servo_Control(int8_t offsetVal){
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
	//Clamp dis_off to valid range
	static float integral = 0.0f;     // integral term (accumulated error)

	if (offsetVal != -100){
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001756:	d05d      	beq.n	8001814 <Steering_Servo_Control+0xd0>
		if (offsetVal < DIS_OFF_MAX_LEFT) {
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	f113 0f43 	cmn.w	r3, #67	@ 0x43
 8001760:	da02      	bge.n	8001768 <Steering_Servo_Control+0x24>
			offsetVal = DIS_OFF_MAX_LEFT;
 8001762:	23bd      	movs	r3, #189	@ 0xbd
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	e005      	b.n	8001774 <Steering_Servo_Control+0x30>
		} else if (offsetVal >= DIS_OFF_MAX_RIGHT) {
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	2b42      	cmp	r3, #66	@ 0x42
 800176e:	dd01      	ble.n	8001774 <Steering_Servo_Control+0x30>
			offsetVal = DIS_OFF_MAX_RIGHT;
 8001770:	2343      	movs	r3, #67	@ 0x43
 8001772:	71fb      	strb	r3, [r7, #7]
		}

		float error = (float)offsetVal;   // setpoint is zero offset
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001780:	edc7 7a05 	vstr	s15, [r7, #20]
		integral += error * DT;           // integrate
 8001784:	edd7 7a05 	vldr	s15, [r7, #20]
 8001788:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800181c <Steering_Servo_Control+0xd8>
 800178c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001790:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <Steering_Servo_Control+0xdc>)
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179a:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <Steering_Servo_Control+0xdc>)
 800179c:	edc3 7a00 	vstr	s15, [r3]

		// PID output = KP*error + KI*integral + KD*derivative
		float pidOutput = (KP * error) + (KI * integral);
 80017a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017a4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80017a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <Steering_Servo_Control+0xdc>)
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001824 <Steering_Servo_Control+0xe0>
 80017b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017be:	edc7 7a04 	vstr	s15, [r7, #16]

		//Linear interpolation from dis_off to steering angle
		float steerAngle = STEERING_ANGLE_MAX_LEFT
			+ ( (float)(pidOutput - DIS_OFF_MAX_LEFT)
 80017c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017c6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001828 <Steering_Servo_Control+0xe4>
 80017ca:	ee37 7a87 	vadd.f32	s14, s15, s14
				/ (float)(DIS_OFF_MAX_RIGHT - DIS_OFF_MAX_LEFT) )
 80017ce:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800182c <Steering_Servo_Control+0xe8>
 80017d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
			  * ( STEERING_ANGLE_MAX_RIGHT - STEERING_ANGLE_MAX_LEFT );
 80017d6:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001830 <Steering_Servo_Control+0xec>
 80017da:	ee67 7a87 	vmul.f32	s15, s15, s14
		float steerAngle = STEERING_ANGLE_MAX_LEFT
 80017de:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80017e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017e6:	edc7 7a03 	vstr	s15, [r7, #12]

		Steering_Servo_Position(steerAngle);
 80017ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f2:	edc7 7a00 	vstr	s15, [r7]
 80017f6:	783b      	ldrb	r3, [r7, #0]
 80017f8:	b25b      	sxtb	r3, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ff5e 	bl	80016bc <Steering_Servo_Position>
		integral_global = integral;
 8001800:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <Steering_Servo_Control+0xdc>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0b      	ldr	r2, [pc, #44]	@ (8001834 <Steering_Servo_Control+0xf0>)
 8001806:	6013      	str	r3, [r2, #0]
		pidOutput_global = pidOutput;
 8001808:	4a0b      	ldr	r2, [pc, #44]	@ (8001838 <Steering_Servo_Control+0xf4>)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	6013      	str	r3, [r2, #0]
		steerAngle_global = steerAngle;
 800180e:	4a0b      	ldr	r2, [pc, #44]	@ (800183c <Steering_Servo_Control+0xf8>)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6013      	str	r3, [r2, #0]
	}
}
 8001814:	bf00      	nop
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	3c23d70a 	.word	0x3c23d70a
 8001820:	200001a0 	.word	0x200001a0
 8001824:	00000000 	.word	0x00000000
 8001828:	42860000 	.word	0x42860000
 800182c:	43060000 	.word	0x43060000
 8001830:	42200000 	.word	0x42200000
 8001834:	2000016c 	.word	0x2000016c
 8001838:	20000170 	.word	0x20000170
 800183c:	20000174 	.word	0x20000174

08001840 <Drive_Motor_Control>:

void Drive_Motor_Control(uint16_t speed){
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
	//Clamp input speed
	if (speed >= DRIVE_MOTOR_MIN_SPEED && speed <= DRIVE_MOTOR_MAX_SPEED){
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001850:	d804      	bhi.n	800185c <Drive_Motor_Control+0x1c>
		  htim3.Instance->CCR1 = speed;
 8001852:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <Drive_Motor_Control+0x30>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	88fa      	ldrh	r2, [r7, #6]
 8001858:	635a      	str	r2, [r3, #52]	@ 0x34
	} else {
		  htim3.Instance->CCR1 = DRIVE_MOTOR_MIN_SPEED;
	}
}
 800185a:	e003      	b.n	8001864 <Drive_Motor_Control+0x24>
		  htim3.Instance->CCR1 = DRIVE_MOTOR_MIN_SPEED;
 800185c:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <Drive_Motor_Control+0x30>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2200      	movs	r2, #0
 8001862:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	20000258 	.word	0x20000258

08001874 <Drive_Motor_Start>:

void Drive_Motor_Start(float drivenDistance){
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint8_t fullSpeed = 0;
	//Speed ramp up
	if (!fullSpeed) {
 800187e:	4b1d      	ldr	r3, [pc, #116]	@ (80018f4 <Drive_Motor_Start+0x80>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d115      	bne.n	80018b2 <Drive_Motor_Start+0x3e>
		for (int speed = 100; speed < DRIVE_MOTOR_MAX_SPEED; speed += 2){
 8001886:	2364      	movs	r3, #100	@ 0x64
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	e00a      	b.n	80018a2 <Drive_Motor_Start+0x2e>
			Drive_Motor_Control(speed);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	b29b      	uxth	r3, r3
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ffd5 	bl	8001840 <Drive_Motor_Control>
			HAL_Delay(1);
 8001896:	2001      	movs	r0, #1
 8001898:	f000 fc8e 	bl	80021b8 <HAL_Delay>
		for (int speed = 100; speed < DRIVE_MOTOR_MAX_SPEED; speed += 2){
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3302      	adds	r3, #2
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018a8:	dbf0      	blt.n	800188c <Drive_Motor_Start+0x18>
		}
		fullSpeed = 1;
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <Drive_Motor_Start+0x80>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
	} else if (C_drivenDistance >= drivenDistance){
		Drive_Motor_Control(DRIVE_MOTOR_MIN_SPEED);
	} else if (C_drivenDistance < drivenDistance){
		Drive_Motor_Control(DRIVE_MOTOR_MAX_SPEED);
	}
}
 80018b0:	e01c      	b.n	80018ec <Drive_Motor_Start+0x78>
	} else if (C_drivenDistance >= drivenDistance){
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <Drive_Motor_Start+0x84>)
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80018bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c4:	d803      	bhi.n	80018ce <Drive_Motor_Start+0x5a>
		Drive_Motor_Control(DRIVE_MOTOR_MIN_SPEED);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7ff ffba 	bl	8001840 <Drive_Motor_Control>
}
 80018cc:	e00e      	b.n	80018ec <Drive_Motor_Start+0x78>
	} else if (C_drivenDistance < drivenDistance){
 80018ce:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <Drive_Motor_Start+0x84>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80018d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	dc00      	bgt.n	80018e4 <Drive_Motor_Start+0x70>
}
 80018e2:	e003      	b.n	80018ec <Drive_Motor_Start+0x78>
		Drive_Motor_Control(DRIVE_MOTOR_MAX_SPEED);
 80018e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018e8:	f7ff ffaa 	bl	8001840 <Drive_Motor_Control>
}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200001a4 	.word	0x200001a4
 80018f8:	20000198 	.word	0x20000198

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <Error_Handler+0x8>

08001908 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <MX_SPI3_Init+0x74>)
 800190e:	4a1c      	ldr	r2, [pc, #112]	@ (8001980 <MX_SPI3_Init+0x78>)
 8001910:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001912:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <MX_SPI3_Init+0x74>)
 8001914:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001918:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <MX_SPI3_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001920:	4b16      	ldr	r3, [pc, #88]	@ (800197c <MX_SPI3_Init+0x74>)
 8001922:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001926:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001928:	4b14      	ldr	r3, [pc, #80]	@ (800197c <MX_SPI3_Init+0x74>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800192e:	4b13      	ldr	r3, [pc, #76]	@ (800197c <MX_SPI3_Init+0x74>)
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <MX_SPI3_Init+0x74>)
 8001936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800193a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800193c:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <MX_SPI3_Init+0x74>)
 800193e:	2210      	movs	r2, #16
 8001940:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <MX_SPI3_Init+0x74>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <MX_SPI3_Init+0x74>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800194e:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <MX_SPI3_Init+0x74>)
 8001950:	2200      	movs	r2, #0
 8001952:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001954:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MX_SPI3_Init+0x74>)
 8001956:	2207      	movs	r2, #7
 8001958:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800195a:	4b08      	ldr	r3, [pc, #32]	@ (800197c <MX_SPI3_Init+0x74>)
 800195c:	2200      	movs	r2, #0
 800195e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <MX_SPI3_Init+0x74>)
 8001962:	2208      	movs	r2, #8
 8001964:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001966:	4805      	ldr	r0, [pc, #20]	@ (800197c <MX_SPI3_Init+0x74>)
 8001968:	f002 fca4 	bl	80042b4 <HAL_SPI_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001972:	f7ff ffc3 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200001a8 	.word	0x200001a8
 8001980:	40003c00 	.word	0x40003c00

08001984 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a17      	ldr	r2, [pc, #92]	@ (8001a00 <HAL_SPI_MspInit+0x7c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d128      	bne.n	80019f8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019a6:	4b17      	ldr	r3, [pc, #92]	@ (8001a04 <HAL_SPI_MspInit+0x80>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	4a16      	ldr	r2, [pc, #88]	@ (8001a04 <HAL_SPI_MspInit+0x80>)
 80019ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b2:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <HAL_SPI_MspInit+0x80>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019be:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <HAL_SPI_MspInit+0x80>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a10      	ldr	r2, [pc, #64]	@ (8001a04 <HAL_SPI_MspInit+0x80>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <HAL_SPI_MspInit+0x80>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80019d6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80019da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019e8:	2306      	movs	r3, #6
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <HAL_SPI_MspInit+0x84>)
 80019f4:	f001 fe1e 	bl	8003634 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80019f8:	bf00      	nop
 80019fa:	3728      	adds	r7, #40	@ 0x28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40003c00 	.word	0x40003c00
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020800 	.word	0x40020800

08001a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <HAL_MspInit+0x44>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	4a0e      	ldr	r2, [pc, #56]	@ (8001a50 <HAL_MspInit+0x44>)
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <HAL_MspInit+0x44>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_MspInit+0x44>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	4a08      	ldr	r2, [pc, #32]	@ (8001a50 <HAL_MspInit+0x44>)
 8001a30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_MspInit+0x44>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <NMI_Handler+0x4>

08001a5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <BusFault_Handler+0x4>

08001a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <UsageFault_Handler+0x4>

08001a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aaa:	f000 fb65 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ab8:	4802      	ldr	r0, [pc, #8]	@ (8001ac4 <CAN1_RX0_IRQHandler+0x10>)
 8001aba:	f001 fa79 	bl	8002fb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200000d0 	.word	0x200000d0

08001ac8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001acc:	4802      	ldr	r0, [pc, #8]	@ (8001ad8 <TIM2_IRQHandler+0x10>)
 8001ace:	f003 ff3a 	bl	8005946 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000020c 	.word	0x2000020c

08001adc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ae0:	4802      	ldr	r0, [pc, #8]	@ (8001aec <TIM4_IRQHandler+0x10>)
 8001ae2:	f003 ff30 	bl	8005946 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200002a4 	.word	0x200002a4

08001af0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <SystemInit+0x20>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <SystemInit+0x20>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08e      	sub	sp, #56	@ 0x38
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b34:	463b      	mov	r3, r7
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	615a      	str	r2, [r3, #20]
 8001b44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b46:	4b2d      	ldr	r3, [pc, #180]	@ (8001bfc <MX_TIM2_Init+0xe8>)
 8001b48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bfc <MX_TIM2_Init+0xe8>)
 8001b50:	221f      	movs	r2, #31
 8001b52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <MX_TIM2_Init+0xe8>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <MX_TIM2_Init+0xe8>)
 8001b5c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b62:	4b26      	ldr	r3, [pc, #152]	@ (8001bfc <MX_TIM2_Init+0xe8>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b68:	4b24      	ldr	r3, [pc, #144]	@ (8001bfc <MX_TIM2_Init+0xe8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b6e:	4823      	ldr	r0, [pc, #140]	@ (8001bfc <MX_TIM2_Init+0xe8>)
 8001b70:	f003 fb1e 	bl	80051b0 <HAL_TIM_Base_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b7a:	f7ff febf 	bl	80018fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	481c      	ldr	r0, [pc, #112]	@ (8001bfc <MX_TIM2_Init+0xe8>)
 8001b8c:	f004 f8f6 	bl	8005d7c <HAL_TIM_ConfigClockSource>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b96:	f7ff feb1 	bl	80018fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b9a:	4818      	ldr	r0, [pc, #96]	@ (8001bfc <MX_TIM2_Init+0xe8>)
 8001b9c:	f003 fb5f 	bl	800525e <HAL_TIM_PWM_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ba6:	f7ff fea9 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4810      	ldr	r0, [pc, #64]	@ (8001bfc <MX_TIM2_Init+0xe8>)
 8001bba:	f004 fd9b 	bl	80066f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001bc4:	f7ff fe9a 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc8:	2360      	movs	r3, #96	@ 0x60
 8001bca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd8:	463b      	mov	r3, r7
 8001bda:	2200      	movs	r2, #0
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <MX_TIM2_Init+0xe8>)
 8001be0:	f003 ffb8 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001bea:	f7ff fe87 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bee:	4803      	ldr	r0, [pc, #12]	@ (8001bfc <MX_TIM2_Init+0xe8>)
 8001bf0:	f000 f9da 	bl	8001fa8 <HAL_TIM_MspPostInit>

}
 8001bf4:	bf00      	nop
 8001bf6:	3738      	adds	r7, #56	@ 0x38
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	2000020c 	.word	0x2000020c

08001c00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08e      	sub	sp, #56	@ 0x38
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c20:	463b      	mov	r3, r7
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]
 8001c2e:	615a      	str	r2, [r3, #20]
 8001c30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce8 <MX_TIM3_Init+0xe8>)
 8001c34:	4a2d      	ldr	r2, [pc, #180]	@ (8001cec <MX_TIM3_Init+0xec>)
 8001c36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8001c38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce8 <MX_TIM3_Init+0xe8>)
 8001c3a:	2207      	movs	r2, #7
 8001c3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce8 <MX_TIM3_Init+0xe8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001c44:	4b28      	ldr	r3, [pc, #160]	@ (8001ce8 <MX_TIM3_Init+0xe8>)
 8001c46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4c:	4b26      	ldr	r3, [pc, #152]	@ (8001ce8 <MX_TIM3_Init+0xe8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c52:	4b25      	ldr	r3, [pc, #148]	@ (8001ce8 <MX_TIM3_Init+0xe8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c58:	4823      	ldr	r0, [pc, #140]	@ (8001ce8 <MX_TIM3_Init+0xe8>)
 8001c5a:	f003 faa9 	bl	80051b0 <HAL_TIM_Base_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c64:	f7ff fe4a 	bl	80018fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c72:	4619      	mov	r1, r3
 8001c74:	481c      	ldr	r0, [pc, #112]	@ (8001ce8 <MX_TIM3_Init+0xe8>)
 8001c76:	f004 f881 	bl	8005d7c <HAL_TIM_ConfigClockSource>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c80:	f7ff fe3c 	bl	80018fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c84:	4818      	ldr	r0, [pc, #96]	@ (8001ce8 <MX_TIM3_Init+0xe8>)
 8001c86:	f003 faea 	bl	800525e <HAL_TIM_PWM_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c90:	f7ff fe34 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4811      	ldr	r0, [pc, #68]	@ (8001ce8 <MX_TIM3_Init+0xe8>)
 8001ca4:	f004 fd26 	bl	80066f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001cae:	f7ff fe25 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb2:	2360      	movs	r3, #96	@ 0x60
 8001cb4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4807      	ldr	r0, [pc, #28]	@ (8001ce8 <MX_TIM3_Init+0xe8>)
 8001cca:	f003 ff43 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001cd4:	f7ff fe12 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cd8:	4803      	ldr	r0, [pc, #12]	@ (8001ce8 <MX_TIM3_Init+0xe8>)
 8001cda:	f000 f965 	bl	8001fa8 <HAL_TIM_MspPostInit>

}
 8001cde:	bf00      	nop
 8001ce0:	3738      	adds	r7, #56	@ 0x38
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000258 	.word	0x20000258
 8001cec:	40000400 	.word	0x40000400

08001cf0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	@ 0x30
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	2224      	movs	r2, #36	@ 0x24
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f004 fda4 	bl	800684c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d04:	463b      	mov	r3, r7
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d0e:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <MX_TIM4_Init+0xa4>)
 8001d10:	4a21      	ldr	r2, [pc, #132]	@ (8001d98 <MX_TIM4_Init+0xa8>)
 8001d12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d14:	4b1f      	ldr	r3, [pc, #124]	@ (8001d94 <MX_TIM4_Init+0xa4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d94 <MX_TIM4_Init+0xa4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d20:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <MX_TIM4_Init+0xa4>)
 8001d22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <MX_TIM4_Init+0xa4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2e:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <MX_TIM4_Init+0xa4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d34:	2303      	movs	r3, #3
 8001d36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480d      	ldr	r0, [pc, #52]	@ (8001d94 <MX_TIM4_Init+0xa4>)
 8001d60:	f003 fbd8 	bl	8005514 <HAL_TIM_Encoder_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001d6a:	f7ff fdc7 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d76:	463b      	mov	r3, r7
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4806      	ldr	r0, [pc, #24]	@ (8001d94 <MX_TIM4_Init+0xa4>)
 8001d7c:	f004 fcba 	bl	80066f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001d86:	f7ff fdb9 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	3730      	adds	r7, #48	@ 0x30
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200002a4 	.word	0x200002a4
 8001d98:	40000800 	.word	0x40000800

08001d9c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	@ 0x30
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da2:	f107 0320 	add.w	r3, r7, #32
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
 8001dbe:	615a      	str	r2, [r3, #20]
 8001dc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e70 <MX_TIM9_Init+0xd4>)
 8001dc4:	4a2b      	ldr	r2, [pc, #172]	@ (8001e74 <MX_TIM9_Init+0xd8>)
 8001dc6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 32-1;
 8001dc8:	4b29      	ldr	r3, [pc, #164]	@ (8001e70 <MX_TIM9_Init+0xd4>)
 8001dca:	221f      	movs	r2, #31
 8001dcc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dce:	4b28      	ldr	r3, [pc, #160]	@ (8001e70 <MX_TIM9_Init+0xd4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 8001dd4:	4b26      	ldr	r3, [pc, #152]	@ (8001e70 <MX_TIM9_Init+0xd4>)
 8001dd6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001dda:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ddc:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <MX_TIM9_Init+0xd4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de2:	4b23      	ldr	r3, [pc, #140]	@ (8001e70 <MX_TIM9_Init+0xd4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001de8:	4821      	ldr	r0, [pc, #132]	@ (8001e70 <MX_TIM9_Init+0xd4>)
 8001dea:	f003 f9e1 	bl	80051b0 <HAL_TIM_Base_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001df4:	f7ff fd82 	bl	80018fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dfc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001dfe:	f107 0320 	add.w	r3, r7, #32
 8001e02:	4619      	mov	r1, r3
 8001e04:	481a      	ldr	r0, [pc, #104]	@ (8001e70 <MX_TIM9_Init+0xd4>)
 8001e06:	f003 ffb9 	bl	8005d7c <HAL_TIM_ConfigClockSource>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001e10:	f7ff fd74 	bl	80018fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001e14:	4816      	ldr	r0, [pc, #88]	@ (8001e70 <MX_TIM9_Init+0xd4>)
 8001e16:	f003 fa22 	bl	800525e <HAL_TIM_PWM_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001e20:	f7ff fd6c 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e24:	2360      	movs	r3, #96	@ 0x60
 8001e26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	2200      	movs	r2, #0
 8001e38:	4619      	mov	r1, r3
 8001e3a:	480d      	ldr	r0, [pc, #52]	@ (8001e70 <MX_TIM9_Init+0xd4>)
 8001e3c:	f003 fe8a 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001e46:	f7ff fd59 	bl	80018fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4807      	ldr	r0, [pc, #28]	@ (8001e70 <MX_TIM9_Init+0xd4>)
 8001e52:	f003 fe7f 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8001e5c:	f7ff fd4e 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001e60:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <MX_TIM9_Init+0xd4>)
 8001e62:	f000 f8a1 	bl	8001fa8 <HAL_TIM_MspPostInit>

}
 8001e66:	bf00      	nop
 8001e68:	3730      	adds	r7, #48	@ 0x30
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200002f0 	.word	0x200002f0
 8001e74:	40014000 	.word	0x40014000

08001e78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e88:	d114      	bne.n	8001eb4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f04 <HAL_TIM_Base_MspInit+0x8c>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f04 <HAL_TIM_Base_MspInit+0x8c>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e96:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <HAL_TIM_Base_MspInit+0x8c>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	201c      	movs	r0, #28
 8001ea8:	f001 fb8d 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001eac:	201c      	movs	r0, #28
 8001eae:	f001 fba6 	bl	80035fe <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001eb2:	e022      	b.n	8001efa <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a13      	ldr	r2, [pc, #76]	@ (8001f08 <HAL_TIM_Base_MspInit+0x90>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <HAL_TIM_Base_MspInit+0x8c>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	4a10      	ldr	r2, [pc, #64]	@ (8001f04 <HAL_TIM_Base_MspInit+0x8c>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <HAL_TIM_Base_MspInit+0x8c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
}
 8001ed6:	e010      	b.n	8001efa <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM9)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0b      	ldr	r2, [pc, #44]	@ (8001f0c <HAL_TIM_Base_MspInit+0x94>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10b      	bne.n	8001efa <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001ee2:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <HAL_TIM_Base_MspInit+0x8c>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <HAL_TIM_Base_MspInit+0x8c>)
 8001ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eee:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_TIM_Base_MspInit+0x8c>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40014000 	.word	0x40014000

08001f10 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	@ 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f9c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d130      	bne.n	8001f94 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f32:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3e:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4a:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a14      	ldr	r2, [pc, #80]	@ (8001fa0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f50:	f043 0308 	orr.w	r3, r3, #8
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f62:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f74:	2302      	movs	r3, #2
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4809      	ldr	r0, [pc, #36]	@ (8001fa4 <HAL_TIM_Encoder_MspInit+0x94>)
 8001f80:	f001 fb58 	bl	8003634 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	201e      	movs	r0, #30
 8001f8a:	f001 fb1c 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f8e:	201e      	movs	r0, #30
 8001f90:	f001 fb35 	bl	80035fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001f94:	bf00      	nop
 8001f96:	3728      	adds	r7, #40	@ 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40000800 	.word	0x40000800
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020c00 	.word	0x40020c00

08001fa8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc8:	d11c      	bne.n	8002004 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	4b32      	ldr	r3, [pc, #200]	@ (8002094 <HAL_TIM_MspPostInit+0xec>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	4a31      	ldr	r2, [pc, #196]	@ (8002094 <HAL_TIM_MspPostInit+0xec>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8002094 <HAL_TIM_MspPostInit+0xec>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4826      	ldr	r0, [pc, #152]	@ (8002098 <HAL_TIM_MspPostInit+0xf0>)
 8001ffe:	f001 fb19 	bl	8003634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002002:	e042      	b.n	800208a <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM3)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a24      	ldr	r2, [pc, #144]	@ (800209c <HAL_TIM_MspPostInit+0xf4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d11c      	bne.n	8002048 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200e:	4b21      	ldr	r3, [pc, #132]	@ (8002094 <HAL_TIM_MspPostInit+0xec>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	4a20      	ldr	r2, [pc, #128]	@ (8002094 <HAL_TIM_MspPostInit+0xec>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	6313      	str	r3, [r2, #48]	@ 0x30
 800201a:	4b1e      	ldr	r3, [pc, #120]	@ (8002094 <HAL_TIM_MspPostInit+0xec>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002026:	2340      	movs	r3, #64	@ 0x40
 8002028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002032:	2302      	movs	r3, #2
 8002034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002036:	2302      	movs	r3, #2
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	4817      	ldr	r0, [pc, #92]	@ (80020a0 <HAL_TIM_MspPostInit+0xf8>)
 8002042:	f001 faf7 	bl	8003634 <HAL_GPIO_Init>
}
 8002046:	e020      	b.n	800208a <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM9)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a15      	ldr	r2, [pc, #84]	@ (80020a4 <HAL_TIM_MspPostInit+0xfc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d11b      	bne.n	800208a <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002052:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <HAL_TIM_MspPostInit+0xec>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	4a0f      	ldr	r2, [pc, #60]	@ (8002094 <HAL_TIM_MspPostInit+0xec>)
 8002058:	f043 0310 	orr.w	r3, r3, #16
 800205c:	6313      	str	r3, [r2, #48]	@ 0x30
 800205e:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <HAL_TIM_MspPostInit+0xec>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800206a:	2360      	movs	r3, #96	@ 0x60
 800206c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800207a:	2303      	movs	r3, #3
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	4808      	ldr	r0, [pc, #32]	@ (80020a8 <HAL_TIM_MspPostInit+0x100>)
 8002086:	f001 fad5 	bl	8003634 <HAL_GPIO_Init>
}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	@ 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	40020000 	.word	0x40020000
 800209c:	40000400 	.word	0x40000400
 80020a0:	40020800 	.word	0x40020800
 80020a4:	40014000 	.word	0x40014000
 80020a8:	40021000 	.word	0x40021000

080020ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020b0:	f7ff fd1e 	bl	8001af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b4:	480c      	ldr	r0, [pc, #48]	@ (80020e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020b6:	490d      	ldr	r1, [pc, #52]	@ (80020ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020b8:	4a0d      	ldr	r2, [pc, #52]	@ (80020f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020bc:	e002      	b.n	80020c4 <LoopCopyDataInit>

080020be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c2:	3304      	adds	r3, #4

080020c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c8:	d3f9      	bcc.n	80020be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ca:	4a0a      	ldr	r2, [pc, #40]	@ (80020f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020cc:	4c0a      	ldr	r4, [pc, #40]	@ (80020f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d0:	e001      	b.n	80020d6 <LoopFillZerobss>

080020d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d4:	3204      	adds	r2, #4

080020d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d8:	d3fb      	bcc.n	80020d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020da:	f004 fbc5 	bl	8006868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020de:	f7ff f823 	bl	8001128 <main>
  bx  lr    
 80020e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80020e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020ec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80020f0:	08006dc8 	.word	0x08006dc8
  ldr r2, =_sbss
 80020f4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80020f8:	20000478 	.word	0x20000478

080020fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020fc:	e7fe      	b.n	80020fc <ADC_IRQHandler>

080020fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002102:	2003      	movs	r0, #3
 8002104:	f001 fa54 	bl	80035b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002108:	200f      	movs	r0, #15
 800210a:	f000 f805 	bl	8002118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800210e:	f7ff fc7d 	bl	8001a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_InitTick+0x54>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <HAL_InitTick+0x58>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f001 fa6f 	bl	800361a <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e00e      	b.n	8002164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0f      	cmp	r3, #15
 800214a:	d80a      	bhi.n	8002162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f001 fa37 	bl	80035c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002158:	4a06      	ldr	r2, [pc, #24]	@ (8002174 <HAL_InitTick+0x5c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000004 	.word	0x20000004
 8002170:	2000000c 	.word	0x2000000c
 8002174:	20000008 	.word	0x20000008

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	@ (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	2000000c 	.word	0x2000000c
 800219c:	2000033c 	.word	0x2000033c

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	@ (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	2000033c 	.word	0x2000033c

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff ffee 	bl	80021a0 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d005      	beq.n	80021de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_Delay+0x44>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021de:	bf00      	nop
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8f7      	bhi.n	80021e0 <HAL_Delay+0x28>
  {
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000000c 	.word	0x2000000c

08002200 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e031      	b.n	800227a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe fdee 	bl	8000e00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d116      	bne.n	800226c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <HAL_ADC_Init+0x84>)
 8002244:	4013      	ands	r3, r2
 8002246:	f043 0202 	orr.w	r2, r3, #2
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f970 	bl	8002534 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f023 0303 	bic.w	r3, r3, #3
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	@ 0x40
 800226a:	e001      	b.n	8002270 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	ffffeefd 	.word	0xffffeefd

08002288 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1c>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e136      	b.n	8002512 <HAL_ADC_ConfigChannel+0x28a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b09      	cmp	r3, #9
 80022b2:	d93a      	bls.n	800232a <HAL_ADC_ConfigChannel+0xa2>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022bc:	d035      	beq.n	800232a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68d9      	ldr	r1, [r3, #12]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	3b1e      	subs	r3, #30
 80022d4:	2207      	movs	r2, #7
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	400a      	ands	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a8d      	ldr	r2, [pc, #564]	@ (8002520 <HAL_ADC_ConfigChannel+0x298>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d10a      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68d9      	ldr	r1, [r3, #12]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	061a      	lsls	r2, r3, #24
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002302:	e035      	b.n	8002370 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68d9      	ldr	r1, [r3, #12]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	4618      	mov	r0, r3
 8002316:	4603      	mov	r3, r0
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4403      	add	r3, r0
 800231c:	3b1e      	subs	r3, #30
 800231e:	409a      	lsls	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002328:	e022      	b.n	8002370 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6919      	ldr	r1, [r3, #16]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	b29b      	uxth	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	2207      	movs	r2, #7
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43da      	mvns	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	400a      	ands	r2, r1
 800234c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6919      	ldr	r1, [r3, #16]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	4603      	mov	r3, r0
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4403      	add	r3, r0
 8002366:	409a      	lsls	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b06      	cmp	r3, #6
 8002376:	d824      	bhi.n	80023c2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	3b05      	subs	r3, #5
 800238a:	221f      	movs	r2, #31
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43da      	mvns	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	400a      	ands	r2, r1
 8002398:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	4618      	mov	r0, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	3b05      	subs	r3, #5
 80023b4:	fa00 f203 	lsl.w	r2, r0, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	635a      	str	r2, [r3, #52]	@ 0x34
 80023c0:	e04c      	b.n	800245c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d824      	bhi.n	8002414 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	3b23      	subs	r3, #35	@ 0x23
 80023dc:	221f      	movs	r2, #31
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	400a      	ands	r2, r1
 80023ea:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	4618      	mov	r0, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	3b23      	subs	r3, #35	@ 0x23
 8002406:	fa00 f203 	lsl.w	r2, r0, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	631a      	str	r2, [r3, #48]	@ 0x30
 8002412:	e023      	b.n	800245c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	3b41      	subs	r3, #65	@ 0x41
 8002426:	221f      	movs	r2, #31
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43da      	mvns	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	400a      	ands	r2, r1
 8002434:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	b29b      	uxth	r3, r3
 8002442:	4618      	mov	r0, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	3b41      	subs	r3, #65	@ 0x41
 8002450:	fa00 f203 	lsl.w	r2, r0, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a30      	ldr	r2, [pc, #192]	@ (8002524 <HAL_ADC_ConfigChannel+0x29c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d10a      	bne.n	800247c <HAL_ADC_ConfigChannel+0x1f4>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800246e:	d105      	bne.n	800247c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002470:	4b2d      	ldr	r3, [pc, #180]	@ (8002528 <HAL_ADC_ConfigChannel+0x2a0>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a2c      	ldr	r2, [pc, #176]	@ (8002528 <HAL_ADC_ConfigChannel+0x2a0>)
 8002476:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800247a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a28      	ldr	r2, [pc, #160]	@ (8002524 <HAL_ADC_ConfigChannel+0x29c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d10f      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x21e>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b12      	cmp	r3, #18
 800248c:	d10b      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800248e:	4b26      	ldr	r3, [pc, #152]	@ (8002528 <HAL_ADC_ConfigChannel+0x2a0>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4a25      	ldr	r2, [pc, #148]	@ (8002528 <HAL_ADC_ConfigChannel+0x2a0>)
 8002494:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002498:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800249a:	4b23      	ldr	r3, [pc, #140]	@ (8002528 <HAL_ADC_ConfigChannel+0x2a0>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4a22      	ldr	r2, [pc, #136]	@ (8002528 <HAL_ADC_ConfigChannel+0x2a0>)
 80024a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024a4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002524 <HAL_ADC_ConfigChannel+0x29c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d12b      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x280>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002520 <HAL_ADC_ConfigChannel+0x298>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d003      	beq.n	80024c2 <HAL_ADC_ConfigChannel+0x23a>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b11      	cmp	r3, #17
 80024c0:	d122      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80024c2:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <HAL_ADC_ConfigChannel+0x2a0>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4a18      	ldr	r2, [pc, #96]	@ (8002528 <HAL_ADC_ConfigChannel+0x2a0>)
 80024c8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80024cc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80024ce:	4b16      	ldr	r3, [pc, #88]	@ (8002528 <HAL_ADC_ConfigChannel+0x2a0>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4a15      	ldr	r2, [pc, #84]	@ (8002528 <HAL_ADC_ConfigChannel+0x2a0>)
 80024d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024d8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a10      	ldr	r2, [pc, #64]	@ (8002520 <HAL_ADC_ConfigChannel+0x298>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d111      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80024e4:	4b11      	ldr	r3, [pc, #68]	@ (800252c <HAL_ADC_ConfigChannel+0x2a4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a11      	ldr	r2, [pc, #68]	@ (8002530 <HAL_ADC_ConfigChannel+0x2a8>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0c9a      	lsrs	r2, r3, #18
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024fa:	e002      	b.n	8002502 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	3b01      	subs	r3, #1
 8002500:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f9      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	10000012 	.word	0x10000012
 8002524:	40012000 	.word	0x40012000
 8002528:	40012300 	.word	0x40012300
 800252c:	20000004 	.word	0x20000004
 8002530:	431bde83 	.word	0x431bde83

08002534 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800253c:	4b78      	ldr	r3, [pc, #480]	@ (8002720 <ADC_Init+0x1ec>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a77      	ldr	r2, [pc, #476]	@ (8002720 <ADC_Init+0x1ec>)
 8002542:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002546:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002548:	4b75      	ldr	r3, [pc, #468]	@ (8002720 <ADC_Init+0x1ec>)
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4973      	ldr	r1, [pc, #460]	@ (8002720 <ADC_Init+0x1ec>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002564:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	021a      	lsls	r2, r3, #8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002588:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6899      	ldr	r1, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c2:	4a58      	ldr	r2, [pc, #352]	@ (8002724 <ADC_Init+0x1f0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d022      	beq.n	800260e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6899      	ldr	r1, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6899      	ldr	r1, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	e00f      	b.n	800262e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800261c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800262c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0202 	bic.w	r2, r2, #2
 800263c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6899      	ldr	r1, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	005a      	lsls	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01b      	beq.n	8002694 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800266a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800267a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6859      	ldr	r1, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	3b01      	subs	r3, #1
 8002688:	035a      	lsls	r2, r3, #13
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	e007      	b.n	80026a4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	3b01      	subs	r3, #1
 80026c0:	051a      	lsls	r2, r3, #20
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026e6:	025a      	lsls	r2, r3, #9
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	029a      	lsls	r2, r3, #10
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	609a      	str	r2, [r3, #8]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40012300 	.word	0x40012300
 8002724:	0f000001 	.word	0x0f000001

08002728 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e0ed      	b.n	8002916 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d102      	bne.n	800274c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe fbd0 	bl	8000eec <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800275c:	f7ff fd20 	bl	80021a0 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002762:	e012      	b.n	800278a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002764:	f7ff fd1c 	bl	80021a0 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b0a      	cmp	r3, #10
 8002770:	d90b      	bls.n	800278a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2205      	movs	r2, #5
 8002782:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e0c5      	b.n	8002916 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0e5      	beq.n	8002764 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0202 	bic.w	r2, r2, #2
 80027a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027a8:	f7ff fcfa 	bl	80021a0 <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027ae:	e012      	b.n	80027d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027b0:	f7ff fcf6 	bl	80021a0 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b0a      	cmp	r3, #10
 80027bc:	d90b      	bls.n	80027d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2205      	movs	r2, #5
 80027ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e09f      	b.n	8002916 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e5      	bne.n	80027b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7e1b      	ldrb	r3, [r3, #24]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d108      	bne.n	80027fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e007      	b.n	800280e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800280c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	7e5b      	ldrb	r3, [r3, #25]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d108      	bne.n	8002828 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e007      	b.n	8002838 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002836:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7e9b      	ldrb	r3, [r3, #26]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d108      	bne.n	8002852 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0220 	orr.w	r2, r2, #32
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	e007      	b.n	8002862 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0220 	bic.w	r2, r2, #32
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	7edb      	ldrb	r3, [r3, #27]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d108      	bne.n	800287c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0210 	bic.w	r2, r2, #16
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e007      	b.n	800288c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0210 	orr.w	r2, r2, #16
 800288a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7f1b      	ldrb	r3, [r3, #28]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d108      	bne.n	80028a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0208 	orr.w	r2, r2, #8
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	e007      	b.n	80028b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0208 	bic.w	r2, r2, #8
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7f5b      	ldrb	r3, [r3, #29]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d108      	bne.n	80028d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0204 	orr.w	r2, r2, #4
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e007      	b.n	80028e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0204 	bic.w	r2, r2, #4
 80028de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	ea42 0103 	orr.w	r1, r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002936:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d003      	beq.n	8002946 <HAL_CAN_ConfigFilter+0x26>
 800293e:	7cfb      	ldrb	r3, [r7, #19]
 8002940:	2b02      	cmp	r3, #2
 8002942:	f040 80c7 	bne.w	8002ad4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a69      	ldr	r2, [pc, #420]	@ (8002af0 <HAL_CAN_ConfigFilter+0x1d0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d001      	beq.n	8002954 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002950:	4b68      	ldr	r3, [pc, #416]	@ (8002af4 <HAL_CAN_ConfigFilter+0x1d4>)
 8002952:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800295a:	f043 0201 	orr.w	r2, r3, #1
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	4a63      	ldr	r2, [pc, #396]	@ (8002af4 <HAL_CAN_ConfigFilter+0x1d4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d111      	bne.n	8002990 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002972:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	431a      	orrs	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2201      	movs	r2, #1
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	401a      	ands	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d123      	bne.n	8002a02 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	401a      	ands	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	3248      	adds	r2, #72	@ 0x48
 80029e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029f8:	6979      	ldr	r1, [r7, #20]
 80029fa:	3348      	adds	r3, #72	@ 0x48
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	440b      	add	r3, r1
 8002a00:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d122      	bne.n	8002a50 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a2a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	3248      	adds	r2, #72	@ 0x48
 8002a30:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a44:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a46:	6979      	ldr	r1, [r7, #20]
 8002a48:	3348      	adds	r3, #72	@ 0x48
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d109      	bne.n	8002a6c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002a6a:	e007      	b.n	8002a7c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	401a      	ands	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002a96:	e007      	b.n	8002aa8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d107      	bne.n	8002ac0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002ac6:	f023 0201 	bic.w	r2, r3, #1
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e006      	b.n	8002ae2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
  }
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	371c      	adds	r7, #28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40003400 	.word	0x40003400
 8002af4:	40006400 	.word	0x40006400

08002af8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d12e      	bne.n	8002b6a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b24:	f7ff fb3c 	bl	80021a0 <HAL_GetTick>
 8002b28:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b2a:	e012      	b.n	8002b52 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b2c:	f7ff fb38 	bl	80021a0 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b0a      	cmp	r3, #10
 8002b38:	d90b      	bls.n	8002b52 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2205      	movs	r2, #5
 8002b4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e012      	b.n	8002b78 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e5      	bne.n	8002b2c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e006      	b.n	8002b78 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
  }
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	@ 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b94:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d003      	beq.n	8002bac <HAL_CAN_AddTxMessage+0x2c>
 8002ba4:	7ffb      	ldrb	r3, [r7, #31]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	f040 80ad 	bne.w	8002d06 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10a      	bne.n	8002bcc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d105      	bne.n	8002bcc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8095 	beq.w	8002cf6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	0e1b      	lsrs	r3, r3, #24
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10d      	bne.n	8002c04 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bf2:	68f9      	ldr	r1, [r7, #12]
 8002bf4:	6809      	ldr	r1, [r1, #0]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	3318      	adds	r3, #24
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	440b      	add	r3, r1
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e00f      	b.n	8002c24 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c0e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c14:	68f9      	ldr	r1, [r7, #12]
 8002c16:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c18:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	3318      	adds	r3, #24
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	440b      	add	r3, r1
 8002c22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6819      	ldr	r1, [r3, #0]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	3318      	adds	r3, #24
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	440b      	add	r3, r1
 8002c34:	3304      	adds	r3, #4
 8002c36:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	7d1b      	ldrb	r3, [r3, #20]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d111      	bne.n	8002c64 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	3318      	adds	r3, #24
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	6811      	ldr	r1, [r2, #0]
 8002c54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	3318      	adds	r3, #24
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	440b      	add	r3, r1
 8002c60:	3304      	adds	r3, #4
 8002c62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3307      	adds	r3, #7
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	061a      	lsls	r2, r3, #24
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3306      	adds	r3, #6
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	041b      	lsls	r3, r3, #16
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3305      	adds	r3, #5
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	3204      	adds	r2, #4
 8002c84:	7812      	ldrb	r2, [r2, #0]
 8002c86:	4610      	mov	r0, r2
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	6811      	ldr	r1, [r2, #0]
 8002c8c:	ea43 0200 	orr.w	r2, r3, r0
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	440b      	add	r3, r1
 8002c96:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002c9a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3303      	adds	r3, #3
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	061a      	lsls	r2, r3, #24
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	041b      	lsls	r3, r3, #16
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	7812      	ldrb	r2, [r2, #0]
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	6811      	ldr	r1, [r2, #0]
 8002cc2:	ea43 0200 	orr.w	r2, r3, r0
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	440b      	add	r3, r1
 8002ccc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002cd0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	3318      	adds	r3, #24
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	4413      	add	r3, r2
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	6811      	ldr	r1, [r2, #0]
 8002ce4:	f043 0201 	orr.w	r2, r3, #1
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	3318      	adds	r3, #24
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	440b      	add	r3, r1
 8002cf0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e00e      	b.n	8002d14 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e006      	b.n	8002d14 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
  }
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3724      	adds	r7, #36	@ 0x24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d34:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d003      	beq.n	8002d44 <HAL_CAN_GetRxMessage+0x24>
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	f040 8103 	bne.w	8002f4a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10e      	bne.n	8002d68 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d116      	bne.n	8002d86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0f7      	b.n	8002f58 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d107      	bne.n	8002d86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0e8      	b.n	8002f58 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	331b      	adds	r3, #27
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	4413      	add	r3, r2
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0204 	and.w	r2, r3, #4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10c      	bne.n	8002dbe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	331b      	adds	r3, #27
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	4413      	add	r3, r2
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	0d5b      	lsrs	r3, r3, #21
 8002db4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e00b      	b.n	8002dd6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	331b      	adds	r3, #27
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	4413      	add	r3, r2
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	08db      	lsrs	r3, r3, #3
 8002dce:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	331b      	adds	r3, #27
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	4413      	add	r3, r2
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0202 	and.w	r2, r3, #2
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	331b      	adds	r3, #27
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	3304      	adds	r3, #4
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2208      	movs	r2, #8
 8002e08:	611a      	str	r2, [r3, #16]
 8002e0a:	e00b      	b.n	8002e24 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	331b      	adds	r3, #27
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	4413      	add	r3, r2
 8002e18:	3304      	adds	r3, #4
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 020f 	and.w	r2, r3, #15
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	331b      	adds	r3, #27
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	4413      	add	r3, r2
 8002e30:	3304      	adds	r3, #4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	331b      	adds	r3, #27
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	4413      	add	r3, r2
 8002e48:	3304      	adds	r3, #4
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	0a1a      	lsrs	r2, r3, #8
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	0c1a      	lsrs	r2, r3, #16
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	3302      	adds	r3, #2
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	0e1a      	lsrs	r2, r3, #24
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	3303      	adds	r3, #3
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0a1a      	lsrs	r2, r3, #8
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	3305      	adds	r3, #5
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	0c1a      	lsrs	r2, r3, #16
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	3306      	adds	r3, #6
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0e1a      	lsrs	r2, r3, #24
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	3307      	adds	r3, #7
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d108      	bne.n	8002f36 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0220 	orr.w	r2, r2, #32
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	e007      	b.n	8002f46 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0220 	orr.w	r2, r2, #32
 8002f44:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e006      	b.n	8002f58 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
  }
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f74:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d002      	beq.n	8002f82 <HAL_CAN_ActivateNotification+0x1e>
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d109      	bne.n	8002f96 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6959      	ldr	r1, [r3, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e006      	b.n	8002fa4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
  }
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	@ 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d07c      	beq.n	80030f0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d023      	beq.n	8003048 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2201      	movs	r2, #1
 8003006:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f983 	bl	800331e <HAL_CAN_TxMailbox0CompleteCallback>
 8003018:	e016      	b.n	8003048 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
 800302c:	e00c      	b.n	8003048 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d004      	beq.n	8003042 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800303e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003040:	e002      	b.n	8003048 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f989 	bl	800335a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d024      	beq.n	800309c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800305a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f963 	bl	8003332 <HAL_CAN_TxMailbox1CompleteCallback>
 800306c:	e016      	b.n	800309c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003074:	2b00      	cmp	r3, #0
 8003076:	d004      	beq.n	8003082 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003080:	e00c      	b.n	800309c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003088:	2b00      	cmp	r3, #0
 800308a:	d004      	beq.n	8003096 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800308c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
 8003094:	e002      	b.n	800309c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f969 	bl	800336e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d024      	beq.n	80030f0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80030ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f943 	bl	8003346 <HAL_CAN_TxMailbox2CompleteCallback>
 80030c0:	e016      	b.n	80030f0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d004      	beq.n	80030d6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d4:	e00c      	b.n	80030f0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d004      	beq.n	80030ea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80030e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e8:	e002      	b.n	80030f0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f949 	bl	8003382 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00c      	beq.n	8003114 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b00      	cmp	r3, #0
 8003102:	d007      	beq.n	8003114 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003106:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2210      	movs	r2, #16
 8003112:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00b      	beq.n	8003136 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b00      	cmp	r3, #0
 8003126:	d006      	beq.n	8003136 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2208      	movs	r2, #8
 800312e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f930 	bl	8003396 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d009      	beq.n	8003154 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fe fa4c 	bl	80015ec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00c      	beq.n	8003178 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2210      	movs	r2, #16
 8003176:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b00      	cmp	r3, #0
 800318a:	d006      	beq.n	800319a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2208      	movs	r2, #8
 8003192:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f912 	bl	80033be <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d009      	beq.n	80031b8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f8f9 	bl	80033aa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d006      	beq.n	80031da <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2210      	movs	r2, #16
 80031d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f8fc 	bl	80033d2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00b      	beq.n	80031fc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d006      	beq.n	80031fc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2208      	movs	r2, #8
 80031f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f8f5 	bl	80033e6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d07b      	beq.n	80032fe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d072      	beq.n	80032f6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	f043 0302 	orr.w	r3, r3, #2
 8003246:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800326a:	2b00      	cmp	r3, #0
 800326c:	d043      	beq.n	80032f6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003274:	2b00      	cmp	r3, #0
 8003276:	d03e      	beq.n	80032f6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800327e:	2b60      	cmp	r3, #96	@ 0x60
 8003280:	d02b      	beq.n	80032da <HAL_CAN_IRQHandler+0x32a>
 8003282:	2b60      	cmp	r3, #96	@ 0x60
 8003284:	d82e      	bhi.n	80032e4 <HAL_CAN_IRQHandler+0x334>
 8003286:	2b50      	cmp	r3, #80	@ 0x50
 8003288:	d022      	beq.n	80032d0 <HAL_CAN_IRQHandler+0x320>
 800328a:	2b50      	cmp	r3, #80	@ 0x50
 800328c:	d82a      	bhi.n	80032e4 <HAL_CAN_IRQHandler+0x334>
 800328e:	2b40      	cmp	r3, #64	@ 0x40
 8003290:	d019      	beq.n	80032c6 <HAL_CAN_IRQHandler+0x316>
 8003292:	2b40      	cmp	r3, #64	@ 0x40
 8003294:	d826      	bhi.n	80032e4 <HAL_CAN_IRQHandler+0x334>
 8003296:	2b30      	cmp	r3, #48	@ 0x30
 8003298:	d010      	beq.n	80032bc <HAL_CAN_IRQHandler+0x30c>
 800329a:	2b30      	cmp	r3, #48	@ 0x30
 800329c:	d822      	bhi.n	80032e4 <HAL_CAN_IRQHandler+0x334>
 800329e:	2b10      	cmp	r3, #16
 80032a0:	d002      	beq.n	80032a8 <HAL_CAN_IRQHandler+0x2f8>
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d005      	beq.n	80032b2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80032a6:	e01d      	b.n	80032e4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	f043 0308 	orr.w	r3, r3, #8
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032b0:	e019      	b.n	80032e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	f043 0310 	orr.w	r3, r3, #16
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032ba:	e014      	b.n	80032e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032be:	f043 0320 	orr.w	r3, r3, #32
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032c4:	e00f      	b.n	80032e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032ce:	e00a      	b.n	80032e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032d8:	e005      	b.n	80032e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032e2:	e000      	b.n	80032e6 <HAL_CAN_IRQHandler+0x336>
            break;
 80032e4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699a      	ldr	r2, [r3, #24]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80032f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2204      	movs	r2, #4
 80032fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f872 	bl	80033fa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003316:	bf00      	nop
 8003318:	3728      	adds	r7, #40	@ 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003420:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <__NVIC_SetPriorityGrouping+0x40>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800342c:	4013      	ands	r3, r2
 800342e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003438:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <__NVIC_SetPriorityGrouping+0x44>)
 800343a:	4313      	orrs	r3, r2
 800343c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800343e:	4a04      	ldr	r2, [pc, #16]	@ (8003450 <__NVIC_SetPriorityGrouping+0x40>)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	60d3      	str	r3, [r2, #12]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000ed00 	.word	0xe000ed00
 8003454:	05fa0000 	.word	0x05fa0000

08003458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800345c:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <__NVIC_GetPriorityGrouping+0x18>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	0a1b      	lsrs	r3, r3, #8
 8003462:	f003 0307 	and.w	r3, r3, #7
}
 8003466:	4618      	mov	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	2b00      	cmp	r3, #0
 8003484:	db0b      	blt.n	800349e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	f003 021f 	and.w	r2, r3, #31
 800348c:	4907      	ldr	r1, [pc, #28]	@ (80034ac <__NVIC_EnableIRQ+0x38>)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2001      	movs	r0, #1
 8003496:	fa00 f202 	lsl.w	r2, r0, r2
 800349a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	e000e100 	.word	0xe000e100

080034b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	6039      	str	r1, [r7, #0]
 80034ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	db0a      	blt.n	80034da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	490c      	ldr	r1, [pc, #48]	@ (80034fc <__NVIC_SetPriority+0x4c>)
 80034ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ce:	0112      	lsls	r2, r2, #4
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	440b      	add	r3, r1
 80034d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034d8:	e00a      	b.n	80034f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	4908      	ldr	r1, [pc, #32]	@ (8003500 <__NVIC_SetPriority+0x50>)
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	3b04      	subs	r3, #4
 80034e8:	0112      	lsls	r2, r2, #4
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	440b      	add	r3, r1
 80034ee:	761a      	strb	r2, [r3, #24]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000e100 	.word	0xe000e100
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	@ 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f1c3 0307 	rsb	r3, r3, #7
 800351e:	2b04      	cmp	r3, #4
 8003520:	bf28      	it	cs
 8003522:	2304      	movcs	r3, #4
 8003524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3304      	adds	r3, #4
 800352a:	2b06      	cmp	r3, #6
 800352c:	d902      	bls.n	8003534 <NVIC_EncodePriority+0x30>
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3b03      	subs	r3, #3
 8003532:	e000      	b.n	8003536 <NVIC_EncodePriority+0x32>
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	f04f 32ff 	mov.w	r2, #4294967295
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43da      	mvns	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	401a      	ands	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800354c:	f04f 31ff 	mov.w	r1, #4294967295
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	fa01 f303 	lsl.w	r3, r1, r3
 8003556:	43d9      	mvns	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	4313      	orrs	r3, r2
         );
}
 800355e:	4618      	mov	r0, r3
 8003560:	3724      	adds	r7, #36	@ 0x24
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800357c:	d301      	bcc.n	8003582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800357e:	2301      	movs	r3, #1
 8003580:	e00f      	b.n	80035a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003582:	4a0a      	ldr	r2, [pc, #40]	@ (80035ac <SysTick_Config+0x40>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800358a:	210f      	movs	r1, #15
 800358c:	f04f 30ff 	mov.w	r0, #4294967295
 8003590:	f7ff ff8e 	bl	80034b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003594:	4b05      	ldr	r3, [pc, #20]	@ (80035ac <SysTick_Config+0x40>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800359a:	4b04      	ldr	r3, [pc, #16]	@ (80035ac <SysTick_Config+0x40>)
 800359c:	2207      	movs	r2, #7
 800359e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	e000e010 	.word	0xe000e010

080035b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ff29 	bl	8003410 <__NVIC_SetPriorityGrouping>
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	4603      	mov	r3, r0
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035d8:	f7ff ff3e 	bl	8003458 <__NVIC_GetPriorityGrouping>
 80035dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	6978      	ldr	r0, [r7, #20]
 80035e4:	f7ff ff8e 	bl	8003504 <NVIC_EncodePriority>
 80035e8:	4602      	mov	r2, r0
 80035ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff5d 	bl	80034b0 <__NVIC_SetPriority>
}
 80035f6:	bf00      	nop
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	4603      	mov	r3, r0
 8003606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff31 	bl	8003474 <__NVIC_EnableIRQ>
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff ffa2 	bl	800356c <SysTick_Config>
 8003628:	4603      	mov	r3, r0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	@ 0x24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003646:	2300      	movs	r3, #0
 8003648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
 8003652:	e175      	b.n	8003940 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003654:	2201      	movs	r2, #1
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	429a      	cmp	r2, r3
 800366e:	f040 8164 	bne.w	800393a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b01      	cmp	r3, #1
 800367c:	d005      	beq.n	800368a <HAL_GPIO_Init+0x56>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d130      	bne.n	80036ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	2203      	movs	r2, #3
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036c0:	2201      	movs	r2, #1
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	f003 0201 	and.w	r2, r3, #1
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d017      	beq.n	8003728 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	2203      	movs	r2, #3
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d123      	bne.n	800377c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	08da      	lsrs	r2, r3, #3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3208      	adds	r2, #8
 800373c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	220f      	movs	r2, #15
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	08da      	lsrs	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3208      	adds	r2, #8
 8003776:	69b9      	ldr	r1, [r7, #24]
 8003778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	2203      	movs	r2, #3
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0203 	and.w	r2, r3, #3
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80be 	beq.w	800393a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037be:	4b66      	ldr	r3, [pc, #408]	@ (8003958 <HAL_GPIO_Init+0x324>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	4a65      	ldr	r2, [pc, #404]	@ (8003958 <HAL_GPIO_Init+0x324>)
 80037c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ca:	4b63      	ldr	r3, [pc, #396]	@ (8003958 <HAL_GPIO_Init+0x324>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037d6:	4a61      	ldr	r2, [pc, #388]	@ (800395c <HAL_GPIO_Init+0x328>)
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	3302      	adds	r3, #2
 80037de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	220f      	movs	r2, #15
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a58      	ldr	r2, [pc, #352]	@ (8003960 <HAL_GPIO_Init+0x32c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d037      	beq.n	8003872 <HAL_GPIO_Init+0x23e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a57      	ldr	r2, [pc, #348]	@ (8003964 <HAL_GPIO_Init+0x330>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d031      	beq.n	800386e <HAL_GPIO_Init+0x23a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a56      	ldr	r2, [pc, #344]	@ (8003968 <HAL_GPIO_Init+0x334>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d02b      	beq.n	800386a <HAL_GPIO_Init+0x236>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a55      	ldr	r2, [pc, #340]	@ (800396c <HAL_GPIO_Init+0x338>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d025      	beq.n	8003866 <HAL_GPIO_Init+0x232>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a54      	ldr	r2, [pc, #336]	@ (8003970 <HAL_GPIO_Init+0x33c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01f      	beq.n	8003862 <HAL_GPIO_Init+0x22e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a53      	ldr	r2, [pc, #332]	@ (8003974 <HAL_GPIO_Init+0x340>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d019      	beq.n	800385e <HAL_GPIO_Init+0x22a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a52      	ldr	r2, [pc, #328]	@ (8003978 <HAL_GPIO_Init+0x344>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d013      	beq.n	800385a <HAL_GPIO_Init+0x226>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a51      	ldr	r2, [pc, #324]	@ (800397c <HAL_GPIO_Init+0x348>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00d      	beq.n	8003856 <HAL_GPIO_Init+0x222>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a50      	ldr	r2, [pc, #320]	@ (8003980 <HAL_GPIO_Init+0x34c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d007      	beq.n	8003852 <HAL_GPIO_Init+0x21e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a4f      	ldr	r2, [pc, #316]	@ (8003984 <HAL_GPIO_Init+0x350>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_GPIO_Init+0x21a>
 800384a:	2309      	movs	r3, #9
 800384c:	e012      	b.n	8003874 <HAL_GPIO_Init+0x240>
 800384e:	230a      	movs	r3, #10
 8003850:	e010      	b.n	8003874 <HAL_GPIO_Init+0x240>
 8003852:	2308      	movs	r3, #8
 8003854:	e00e      	b.n	8003874 <HAL_GPIO_Init+0x240>
 8003856:	2307      	movs	r3, #7
 8003858:	e00c      	b.n	8003874 <HAL_GPIO_Init+0x240>
 800385a:	2306      	movs	r3, #6
 800385c:	e00a      	b.n	8003874 <HAL_GPIO_Init+0x240>
 800385e:	2305      	movs	r3, #5
 8003860:	e008      	b.n	8003874 <HAL_GPIO_Init+0x240>
 8003862:	2304      	movs	r3, #4
 8003864:	e006      	b.n	8003874 <HAL_GPIO_Init+0x240>
 8003866:	2303      	movs	r3, #3
 8003868:	e004      	b.n	8003874 <HAL_GPIO_Init+0x240>
 800386a:	2302      	movs	r3, #2
 800386c:	e002      	b.n	8003874 <HAL_GPIO_Init+0x240>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <HAL_GPIO_Init+0x240>
 8003872:	2300      	movs	r3, #0
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	f002 0203 	and.w	r2, r2, #3
 800387a:	0092      	lsls	r2, r2, #2
 800387c:	4093      	lsls	r3, r2
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003884:	4935      	ldr	r1, [pc, #212]	@ (800395c <HAL_GPIO_Init+0x328>)
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	089b      	lsrs	r3, r3, #2
 800388a:	3302      	adds	r3, #2
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003892:	4b3d      	ldr	r3, [pc, #244]	@ (8003988 <HAL_GPIO_Init+0x354>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	43db      	mvns	r3, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4013      	ands	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038b6:	4a34      	ldr	r2, [pc, #208]	@ (8003988 <HAL_GPIO_Init+0x354>)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038bc:	4b32      	ldr	r3, [pc, #200]	@ (8003988 <HAL_GPIO_Init+0x354>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	43db      	mvns	r3, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4013      	ands	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038e0:	4a29      	ldr	r2, [pc, #164]	@ (8003988 <HAL_GPIO_Init+0x354>)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038e6:	4b28      	ldr	r3, [pc, #160]	@ (8003988 <HAL_GPIO_Init+0x354>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800390a:	4a1f      	ldr	r2, [pc, #124]	@ (8003988 <HAL_GPIO_Init+0x354>)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003910:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <HAL_GPIO_Init+0x354>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003934:	4a14      	ldr	r2, [pc, #80]	@ (8003988 <HAL_GPIO_Init+0x354>)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3301      	adds	r3, #1
 800393e:	61fb      	str	r3, [r7, #28]
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2b0f      	cmp	r3, #15
 8003944:	f67f ae86 	bls.w	8003654 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003948:	bf00      	nop
 800394a:	bf00      	nop
 800394c:	3724      	adds	r7, #36	@ 0x24
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800
 800395c:	40013800 	.word	0x40013800
 8003960:	40020000 	.word	0x40020000
 8003964:	40020400 	.word	0x40020400
 8003968:	40020800 	.word	0x40020800
 800396c:	40020c00 	.word	0x40020c00
 8003970:	40021000 	.word	0x40021000
 8003974:	40021400 	.word	0x40021400
 8003978:	40021800 	.word	0x40021800
 800397c:	40021c00 	.word	0x40021c00
 8003980:	40022000 	.word	0x40022000
 8003984:	40022400 	.word	0x40022400
 8003988:	40013c00 	.word	0x40013c00

0800398c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	807b      	strh	r3, [r7, #2]
 8003998:	4613      	mov	r3, r2
 800399a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800399c:	787b      	ldrb	r3, [r7, #1]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a2:	887a      	ldrh	r2, [r7, #2]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039a8:	e003      	b.n	80039b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039aa:	887b      	ldrh	r3, [r7, #2]
 80039ac:	041a      	lsls	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	619a      	str	r2, [r3, #24]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039d0:	887a      	ldrh	r2, [r7, #2]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4013      	ands	r3, r2
 80039d6:	041a      	lsls	r2, r3, #16
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	43d9      	mvns	r1, r3
 80039dc:	887b      	ldrh	r3, [r7, #2]
 80039de:	400b      	ands	r3, r1
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	619a      	str	r2, [r3, #24]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039fc:	2300      	movs	r3, #0
 80039fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e29b      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8087 	beq.w	8003b26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a18:	4b96      	ldr	r3, [pc, #600]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d00c      	beq.n	8003a3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a24:	4b93      	ldr	r3, [pc, #588]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d112      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62>
 8003a30:	4b90      	ldr	r3, [pc, #576]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a3c:	d10b      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d06c      	beq.n	8003b24 <HAL_RCC_OscConfig+0x130>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d168      	bne.n	8003b24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e275      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCC_OscConfig+0x7a>
 8003a60:	4b84      	ldr	r3, [pc, #528]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a83      	ldr	r2, [pc, #524]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	e02e      	b.n	8003acc <HAL_RCC_OscConfig+0xd8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x9c>
 8003a76:	4b7f      	ldr	r3, [pc, #508]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b7c      	ldr	r3, [pc, #496]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a7b      	ldr	r2, [pc, #492]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e01d      	b.n	8003acc <HAL_RCC_OscConfig+0xd8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xc0>
 8003a9a:	4b76      	ldr	r3, [pc, #472]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a75      	ldr	r2, [pc, #468]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4b73      	ldr	r3, [pc, #460]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a72      	ldr	r2, [pc, #456]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0xd8>
 8003ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a6e      	ldr	r2, [pc, #440]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a6b      	ldr	r2, [pc, #428]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003ac6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d013      	beq.n	8003afc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fb64 	bl	80021a0 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003adc:	f7fe fb60 	bl	80021a0 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	@ 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e229      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aee:	4b61      	ldr	r3, [pc, #388]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0xe8>
 8003afa:	e014      	b.n	8003b26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fe fb50 	bl	80021a0 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fe fb4c 	bl	80021a0 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	@ 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e215      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b16:	4b57      	ldr	r3, [pc, #348]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x110>
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d069      	beq.n	8003c06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b32:	4b50      	ldr	r3, [pc, #320]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3e:	4b4d      	ldr	r3, [pc, #308]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d11c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x190>
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d116      	bne.n	8003b84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b56:	4b47      	ldr	r3, [pc, #284]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_RCC_OscConfig+0x17a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d001      	beq.n	8003b6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e1e9      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6e:	4b41      	ldr	r3, [pc, #260]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	493d      	ldr	r1, [pc, #244]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b82:	e040      	b.n	8003c06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d023      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b8c:	4b39      	ldr	r3, [pc, #228]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a38      	ldr	r2, [pc, #224]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fe fb02 	bl	80021a0 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba0:	f7fe fafe 	bl	80021a0 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e1c7      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb2:	4b30      	ldr	r3, [pc, #192]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4929      	ldr	r1, [pc, #164]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]
 8003bd2:	e018      	b.n	8003c06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd4:	4b27      	ldr	r3, [pc, #156]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a26      	ldr	r2, [pc, #152]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fe fade 	bl	80021a0 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be8:	f7fe fada 	bl	80021a0 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e1a3      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d038      	beq.n	8003c84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d019      	beq.n	8003c4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1a:	4b16      	ldr	r3, [pc, #88]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c1e:	4a15      	ldr	r2, [pc, #84]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c26:	f7fe fabb 	bl	80021a0 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c2e:	f7fe fab7 	bl	80021a0 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e180      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c40:	4b0c      	ldr	r3, [pc, #48]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x23a>
 8003c4c:	e01a      	b.n	8003c84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4e:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c52:	4a08      	ldr	r2, [pc, #32]	@ (8003c74 <HAL_RCC_OscConfig+0x280>)
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5a:	f7fe faa1 	bl	80021a0 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c60:	e00a      	b.n	8003c78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c62:	f7fe fa9d 	bl	80021a0 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d903      	bls.n	8003c78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e166      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>
 8003c74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c78:	4b92      	ldr	r3, [pc, #584]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ee      	bne.n	8003c62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80a4 	beq.w	8003dda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c92:	4b8c      	ldr	r3, [pc, #560]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10d      	bne.n	8003cba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9e:	4b89      	ldr	r3, [pc, #548]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	4a88      	ldr	r2, [pc, #544]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003caa:	4b86      	ldr	r3, [pc, #536]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cba:	4b83      	ldr	r3, [pc, #524]	@ (8003ec8 <HAL_RCC_OscConfig+0x4d4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d118      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cc6:	4b80      	ldr	r3, [pc, #512]	@ (8003ec8 <HAL_RCC_OscConfig+0x4d4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a7f      	ldr	r2, [pc, #508]	@ (8003ec8 <HAL_RCC_OscConfig+0x4d4>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd2:	f7fe fa65 	bl	80021a0 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cda:	f7fe fa61 	bl	80021a0 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b64      	cmp	r3, #100	@ 0x64
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e12a      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cec:	4b76      	ldr	r3, [pc, #472]	@ (8003ec8 <HAL_RCC_OscConfig+0x4d4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d106      	bne.n	8003d0e <HAL_RCC_OscConfig+0x31a>
 8003d00:	4b70      	ldr	r3, [pc, #448]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d04:	4a6f      	ldr	r2, [pc, #444]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d0c:	e02d      	b.n	8003d6a <HAL_RCC_OscConfig+0x376>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x33c>
 8003d16:	4b6b      	ldr	r3, [pc, #428]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1a:	4a6a      	ldr	r2, [pc, #424]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d22:	4b68      	ldr	r3, [pc, #416]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d26:	4a67      	ldr	r2, [pc, #412]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003d28:	f023 0304 	bic.w	r3, r3, #4
 8003d2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d2e:	e01c      	b.n	8003d6a <HAL_RCC_OscConfig+0x376>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b05      	cmp	r3, #5
 8003d36:	d10c      	bne.n	8003d52 <HAL_RCC_OscConfig+0x35e>
 8003d38:	4b62      	ldr	r3, [pc, #392]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3c:	4a61      	ldr	r2, [pc, #388]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003d3e:	f043 0304 	orr.w	r3, r3, #4
 8003d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d44:	4b5f      	ldr	r3, [pc, #380]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d48:	4a5e      	ldr	r2, [pc, #376]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d50:	e00b      	b.n	8003d6a <HAL_RCC_OscConfig+0x376>
 8003d52:	4b5c      	ldr	r3, [pc, #368]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d56:	4a5b      	ldr	r2, [pc, #364]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d5e:	4b59      	ldr	r3, [pc, #356]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d62:	4a58      	ldr	r2, [pc, #352]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003d64:	f023 0304 	bic.w	r3, r3, #4
 8003d68:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d015      	beq.n	8003d9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d72:	f7fe fa15 	bl	80021a0 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d78:	e00a      	b.n	8003d90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7a:	f7fe fa11 	bl	80021a0 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e0d8      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d90:	4b4c      	ldr	r3, [pc, #304]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0ee      	beq.n	8003d7a <HAL_RCC_OscConfig+0x386>
 8003d9c:	e014      	b.n	8003dc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9e:	f7fe f9ff 	bl	80021a0 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da4:	e00a      	b.n	8003dbc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f7fe f9fb 	bl	80021a0 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e0c2      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dbc:	4b41      	ldr	r3, [pc, #260]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1ee      	bne.n	8003da6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d105      	bne.n	8003dda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dce:	4b3d      	ldr	r3, [pc, #244]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	4a3c      	ldr	r2, [pc, #240]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003dd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80ae 	beq.w	8003f40 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de4:	4b37      	ldr	r3, [pc, #220]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 030c 	and.w	r3, r3, #12
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d06d      	beq.n	8003ecc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d14b      	bne.n	8003e90 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df8:	4b32      	ldr	r3, [pc, #200]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a31      	ldr	r2, [pc, #196]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003dfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe f9cc 	bl	80021a0 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fe f9c8 	bl	80021a0 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e091      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1e:	4b29      	ldr	r3, [pc, #164]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69da      	ldr	r2, [r3, #28]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	019b      	lsls	r3, r3, #6
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e40:	085b      	lsrs	r3, r3, #1
 8003e42:	3b01      	subs	r3, #1
 8003e44:	041b      	lsls	r3, r3, #16
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4c:	061b      	lsls	r3, r3, #24
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e54:	071b      	lsls	r3, r3, #28
 8003e56:	491b      	ldr	r1, [pc, #108]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e5c:	4b19      	ldr	r3, [pc, #100]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a18      	ldr	r2, [pc, #96]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fe f99a 	bl	80021a0 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fe f996 	bl	80021a0 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e05f      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e82:	4b10      	ldr	r3, [pc, #64]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0x47c>
 8003e8e:	e057      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0b      	ldr	r2, [pc, #44]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7fe f980 	bl	80021a0 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fe f97c 	bl	80021a0 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e045      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb6:	4b03      	ldr	r3, [pc, #12]	@ (8003ec4 <HAL_RCC_OscConfig+0x4d0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x4b0>
 8003ec2:	e03d      	b.n	8003f40 <HAL_RCC_OscConfig+0x54c>
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8003f4c <HAL_RCC_OscConfig+0x558>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d030      	beq.n	8003f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d129      	bne.n	8003f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d122      	bne.n	8003f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003efc:	4013      	ands	r3, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d119      	bne.n	8003f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	3b01      	subs	r3, #1
 8003f16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d10f      	bne.n	8003f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d107      	bne.n	8003f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f36:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40023800 	.word	0x40023800

08003f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0d0      	b.n	800410a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f68:	4b6a      	ldr	r3, [pc, #424]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d910      	bls.n	8003f98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b67      	ldr	r3, [pc, #412]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 020f 	bic.w	r2, r3, #15
 8003f7e:	4965      	ldr	r1, [pc, #404]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b63      	ldr	r3, [pc, #396]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0b8      	b.n	800410a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d020      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fb0:	4b59      	ldr	r3, [pc, #356]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	4a58      	ldr	r2, [pc, #352]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc8:	4b53      	ldr	r3, [pc, #332]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4a52      	ldr	r2, [pc, #328]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 8003fce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd4:	4b50      	ldr	r3, [pc, #320]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	494d      	ldr	r1, [pc, #308]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d040      	beq.n	8004074 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d107      	bne.n	800400a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffa:	4b47      	ldr	r3, [pc, #284]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d115      	bne.n	8004032 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e07f      	b.n	800410a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d107      	bne.n	8004022 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004012:	4b41      	ldr	r3, [pc, #260]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e073      	b.n	800410a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004022:	4b3d      	ldr	r3, [pc, #244]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e06b      	b.n	800410a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004032:	4b39      	ldr	r3, [pc, #228]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f023 0203 	bic.w	r2, r3, #3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4936      	ldr	r1, [pc, #216]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 8004040:	4313      	orrs	r3, r2
 8004042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004044:	f7fe f8ac 	bl	80021a0 <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404a:	e00a      	b.n	8004062 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404c:	f7fe f8a8 	bl	80021a0 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e053      	b.n	800410a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004062:	4b2d      	ldr	r3, [pc, #180]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 020c 	and.w	r2, r3, #12
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	429a      	cmp	r2, r3
 8004072:	d1eb      	bne.n	800404c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004074:	4b27      	ldr	r3, [pc, #156]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d210      	bcs.n	80040a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b24      	ldr	r3, [pc, #144]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 020f 	bic.w	r2, r3, #15
 800408a:	4922      	ldr	r1, [pc, #136]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b20      	ldr	r3, [pc, #128]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e032      	b.n	800410a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b0:	4b19      	ldr	r3, [pc, #100]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4916      	ldr	r1, [pc, #88]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040ce:	4b12      	ldr	r3, [pc, #72]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	490e      	ldr	r1, [pc, #56]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040e2:	f000 f821 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 80040e6:	4602      	mov	r2, r0
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	490a      	ldr	r1, [pc, #40]	@ (800411c <HAL_RCC_ClockConfig+0x1cc>)
 80040f4:	5ccb      	ldrb	r3, [r1, r3]
 80040f6:	fa22 f303 	lsr.w	r3, r2, r3
 80040fa:	4a09      	ldr	r2, [pc, #36]	@ (8004120 <HAL_RCC_ClockConfig+0x1d0>)
 80040fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040fe:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <HAL_RCC_ClockConfig+0x1d4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe f808 	bl	8002118 <HAL_InitTick>

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40023c00 	.word	0x40023c00
 8004118:	40023800 	.word	0x40023800
 800411c:	08006c48 	.word	0x08006c48
 8004120:	20000004 	.word	0x20000004
 8004124:	20000008 	.word	0x20000008

08004128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800412c:	b090      	sub	sp, #64	@ 0x40
 800412e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	637b      	str	r3, [r7, #52]	@ 0x34
 8004134:	2300      	movs	r3, #0
 8004136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004138:	2300      	movs	r3, #0
 800413a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004140:	4b59      	ldr	r3, [pc, #356]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 030c 	and.w	r3, r3, #12
 8004148:	2b08      	cmp	r3, #8
 800414a:	d00d      	beq.n	8004168 <HAL_RCC_GetSysClockFreq+0x40>
 800414c:	2b08      	cmp	r3, #8
 800414e:	f200 80a1 	bhi.w	8004294 <HAL_RCC_GetSysClockFreq+0x16c>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_RCC_GetSysClockFreq+0x34>
 8004156:	2b04      	cmp	r3, #4
 8004158:	d003      	beq.n	8004162 <HAL_RCC_GetSysClockFreq+0x3a>
 800415a:	e09b      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800415c:	4b53      	ldr	r3, [pc, #332]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x184>)
 800415e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004160:	e09b      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004162:	4b53      	ldr	r3, [pc, #332]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004164:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004166:	e098      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004168:	4b4f      	ldr	r3, [pc, #316]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004170:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004172:	4b4d      	ldr	r3, [pc, #308]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d028      	beq.n	80041d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417e:	4b4a      	ldr	r3, [pc, #296]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	099b      	lsrs	r3, r3, #6
 8004184:	2200      	movs	r2, #0
 8004186:	623b      	str	r3, [r7, #32]
 8004188:	627a      	str	r2, [r7, #36]	@ 0x24
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004190:	2100      	movs	r1, #0
 8004192:	4b47      	ldr	r3, [pc, #284]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004194:	fb03 f201 	mul.w	r2, r3, r1
 8004198:	2300      	movs	r3, #0
 800419a:	fb00 f303 	mul.w	r3, r0, r3
 800419e:	4413      	add	r3, r2
 80041a0:	4a43      	ldr	r2, [pc, #268]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80041a2:	fba0 1202 	umull	r1, r2, r0, r2
 80041a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041a8:	460a      	mov	r2, r1
 80041aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ae:	4413      	add	r3, r2
 80041b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b4:	2200      	movs	r2, #0
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	61fa      	str	r2, [r7, #28]
 80041ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80041c2:	f7fc f9f5 	bl	80005b0 <__aeabi_uldivmod>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4613      	mov	r3, r2
 80041cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041ce:	e053      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d0:	4b35      	ldr	r3, [pc, #212]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	099b      	lsrs	r3, r3, #6
 80041d6:	2200      	movs	r2, #0
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	617a      	str	r2, [r7, #20]
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041e2:	f04f 0b00 	mov.w	fp, #0
 80041e6:	4652      	mov	r2, sl
 80041e8:	465b      	mov	r3, fp
 80041ea:	f04f 0000 	mov.w	r0, #0
 80041ee:	f04f 0100 	mov.w	r1, #0
 80041f2:	0159      	lsls	r1, r3, #5
 80041f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f8:	0150      	lsls	r0, r2, #5
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	ebb2 080a 	subs.w	r8, r2, sl
 8004202:	eb63 090b 	sbc.w	r9, r3, fp
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004212:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004216:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800421a:	ebb2 0408 	subs.w	r4, r2, r8
 800421e:	eb63 0509 	sbc.w	r5, r3, r9
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	00eb      	lsls	r3, r5, #3
 800422c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004230:	00e2      	lsls	r2, r4, #3
 8004232:	4614      	mov	r4, r2
 8004234:	461d      	mov	r5, r3
 8004236:	eb14 030a 	adds.w	r3, r4, sl
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	eb45 030b 	adc.w	r3, r5, fp
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800424e:	4629      	mov	r1, r5
 8004250:	028b      	lsls	r3, r1, #10
 8004252:	4621      	mov	r1, r4
 8004254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004258:	4621      	mov	r1, r4
 800425a:	028a      	lsls	r2, r1, #10
 800425c:	4610      	mov	r0, r2
 800425e:	4619      	mov	r1, r3
 8004260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004262:	2200      	movs	r2, #0
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	60fa      	str	r2, [r7, #12]
 8004268:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800426c:	f7fc f9a0 	bl	80005b0 <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4613      	mov	r3, r2
 8004276:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004278:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	3301      	adds	r3, #1
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004288:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800428a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004292:	e002      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004294:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x184>)
 8004296:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800429a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800429c:	4618      	mov	r0, r3
 800429e:	3740      	adds	r7, #64	@ 0x40
 80042a0:	46bd      	mov	sp, r7
 80042a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800
 80042ac:	00f42400 	.word	0x00f42400
 80042b0:	017d7840 	.word	0x017d7840

080042b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e09d      	b.n	8004402 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d108      	bne.n	80042e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042d6:	d009      	beq.n	80042ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	61da      	str	r2, [r3, #28]
 80042de:	e005      	b.n	80042ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fd fb3c 	bl	8001984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004322:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800432c:	d902      	bls.n	8004334 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	e002      	b.n	800433a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004338:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004342:	d007      	beq.n	8004354 <HAL_SPI_Init+0xa0>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800434c:	d002      	beq.n	8004354 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004396:	ea42 0103 	orr.w	r1, r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	0c1b      	lsrs	r3, r3, #16
 80043b0:	f003 0204 	and.w	r2, r3, #4
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80043d0:	ea42 0103 	orr.w	r1, r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69da      	ldr	r2, [r3, #28]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b088      	sub	sp, #32
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	4613      	mov	r3, r2
 8004418:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_SPI_Transmit+0x22>
 8004428:	2302      	movs	r3, #2
 800442a:	e15f      	b.n	80046ec <HAL_SPI_Transmit+0x2e2>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004434:	f7fd feb4 	bl	80021a0 <HAL_GetTick>
 8004438:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800443a:	88fb      	ldrh	r3, [r7, #6]
 800443c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b01      	cmp	r3, #1
 8004448:	d002      	beq.n	8004450 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800444a:	2302      	movs	r3, #2
 800444c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800444e:	e148      	b.n	80046e2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_SPI_Transmit+0x52>
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d102      	bne.n	8004462 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004460:	e13f      	b.n	80046e2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2203      	movs	r2, #3
 8004466:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	88fa      	ldrh	r2, [r7, #6]
 800447a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044ac:	d10f      	bne.n	80044ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d8:	2b40      	cmp	r3, #64	@ 0x40
 80044da:	d007      	beq.n	80044ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044f4:	d94f      	bls.n	8004596 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_SPI_Transmit+0xfa>
 80044fe:	8afb      	ldrh	r3, [r7, #22]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d142      	bne.n	800458a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004508:	881a      	ldrh	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004514:	1c9a      	adds	r2, r3, #2
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004528:	e02f      	b.n	800458a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b02      	cmp	r3, #2
 8004536:	d112      	bne.n	800455e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453c:	881a      	ldrh	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004548:	1c9a      	adds	r2, r3, #2
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800455c:	e015      	b.n	800458a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800455e:	f7fd fe1f 	bl	80021a0 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d803      	bhi.n	8004576 <HAL_SPI_Transmit+0x16c>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004574:	d102      	bne.n	800457c <HAL_SPI_Transmit+0x172>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004588:	e0ab      	b.n	80046e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1ca      	bne.n	800452a <HAL_SPI_Transmit+0x120>
 8004594:	e080      	b.n	8004698 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <HAL_SPI_Transmit+0x19a>
 800459e:	8afb      	ldrh	r3, [r7, #22]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d174      	bne.n	800468e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d912      	bls.n	80045d4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b2:	881a      	ldrh	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045be:	1c9a      	adds	r2, r3, #2
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b02      	subs	r3, #2
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045d2:	e05c      	b.n	800468e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	330c      	adds	r3, #12
 80045de:	7812      	ldrb	r2, [r2, #0]
 80045e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80045fa:	e048      	b.n	800468e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b02      	cmp	r3, #2
 8004608:	d12b      	bne.n	8004662 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	d912      	bls.n	800463a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	881a      	ldrh	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004624:	1c9a      	adds	r2, r3, #2
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b02      	subs	r3, #2
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004638:	e029      	b.n	800468e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	330c      	adds	r3, #12
 8004644:	7812      	ldrb	r2, [r2, #0]
 8004646:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004660:	e015      	b.n	800468e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004662:	f7fd fd9d 	bl	80021a0 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d803      	bhi.n	800467a <HAL_SPI_Transmit+0x270>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004678:	d102      	bne.n	8004680 <HAL_SPI_Transmit+0x276>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d106      	bne.n	800468e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800468c:	e029      	b.n	80046e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1b1      	bne.n	80045fc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	6839      	ldr	r1, [r7, #0]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fd1d 	bl	80050dc <SPI_EndRxTxTransaction>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e003      	b.n	80046e2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80046ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3720      	adds	r7, #32
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b01      	cmp	r3, #1
 8004712:	d002      	beq.n	800471a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004714:	2302      	movs	r3, #2
 8004716:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004718:	e11a      	b.n	8004950 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004722:	d112      	bne.n	800474a <HAL_SPI_Receive+0x56>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10e      	bne.n	800474a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2204      	movs	r2, #4
 8004730:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004734:	88fa      	ldrh	r2, [r7, #6]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	4613      	mov	r3, r2
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f90e 	bl	8004962 <HAL_SPI_TransmitReceive>
 8004746:	4603      	mov	r3, r0
 8004748:	e107      	b.n	800495a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_SPI_Receive+0x64>
 8004754:	2302      	movs	r3, #2
 8004756:	e100      	b.n	800495a <HAL_SPI_Receive+0x266>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004760:	f7fd fd1e 	bl	80021a0 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_SPI_Receive+0x7e>
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d102      	bne.n	8004778 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004776:	e0eb      	b.n	8004950 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2204      	movs	r2, #4
 800477c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	88fa      	ldrh	r2, [r7, #6]
 8004790:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	88fa      	ldrh	r2, [r7, #6]
 8004798:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80047c2:	d908      	bls.n	80047d6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047d2:	605a      	str	r2, [r3, #4]
 80047d4:	e007      	b.n	80047e6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047e4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ee:	d10f      	bne.n	8004810 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800480e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481a:	2b40      	cmp	r3, #64	@ 0x40
 800481c:	d007      	beq.n	800482e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800482c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004836:	d86f      	bhi.n	8004918 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004838:	e034      	b.n	80048a4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b01      	cmp	r3, #1
 8004846:	d117      	bne.n	8004878 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f103 020c 	add.w	r2, r3, #12
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004854:	7812      	ldrb	r2, [r2, #0]
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004876:	e015      	b.n	80048a4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004878:	f7fd fc92 	bl	80021a0 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d803      	bhi.n	8004890 <HAL_SPI_Receive+0x19c>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d102      	bne.n	8004896 <HAL_SPI_Receive+0x1a2>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80048a2:	e055      	b.n	8004950 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1c4      	bne.n	800483a <HAL_SPI_Receive+0x146>
 80048b0:	e038      	b.n	8004924 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d115      	bne.n	80048ec <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	b292      	uxth	r2, r2
 80048cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d2:	1c9a      	adds	r2, r3, #2
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80048ea:	e015      	b.n	8004918 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ec:	f7fd fc58 	bl	80021a0 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d803      	bhi.n	8004904 <HAL_SPI_Receive+0x210>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d102      	bne.n	800490a <HAL_SPI_Receive+0x216>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004916:	e01b      	b.n	8004950 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1c6      	bne.n	80048b2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	6839      	ldr	r1, [r7, #0]
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 fb5b 	bl	8004fe4 <SPI_EndRxTransaction>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	75fb      	strb	r3, [r7, #23]
 8004946:	e003      	b.n	8004950 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004958:	7dfb      	ldrb	r3, [r7, #23]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b08a      	sub	sp, #40	@ 0x28
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
 800496e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004970:	2301      	movs	r3, #1
 8004972:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_SPI_TransmitReceive+0x26>
 8004984:	2302      	movs	r3, #2
 8004986:	e20a      	b.n	8004d9e <HAL_SPI_TransmitReceive+0x43c>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004990:	f7fd fc06 	bl	80021a0 <HAL_GetTick>
 8004994:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800499c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80049a4:	887b      	ldrh	r3, [r7, #2]
 80049a6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80049a8:	887b      	ldrh	r3, [r7, #2]
 80049aa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049ac:	7efb      	ldrb	r3, [r7, #27]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d00e      	beq.n	80049d0 <HAL_SPI_TransmitReceive+0x6e>
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049b8:	d106      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d102      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x66>
 80049c2:	7efb      	ldrb	r3, [r7, #27]
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d003      	beq.n	80049d0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80049c8:	2302      	movs	r3, #2
 80049ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80049ce:	e1e0      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <HAL_SPI_TransmitReceive+0x80>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_SPI_TransmitReceive+0x80>
 80049dc:	887b      	ldrh	r3, [r7, #2]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80049e8:	e1d3      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d003      	beq.n	80049fe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2205      	movs	r2, #5
 80049fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	887a      	ldrh	r2, [r7, #2]
 8004a0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	887a      	ldrh	r2, [r7, #2]
 8004a16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	887a      	ldrh	r2, [r7, #2]
 8004a24:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	887a      	ldrh	r2, [r7, #2]
 8004a2a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a40:	d802      	bhi.n	8004a48 <HAL_SPI_TransmitReceive+0xe6>
 8004a42:	8a3b      	ldrh	r3, [r7, #16]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d908      	bls.n	8004a5a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a56:	605a      	str	r2, [r3, #4]
 8004a58:	e007      	b.n	8004a6a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a68:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a74:	2b40      	cmp	r3, #64	@ 0x40
 8004a76:	d007      	beq.n	8004a88 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a90:	f240 8081 	bls.w	8004b96 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <HAL_SPI_TransmitReceive+0x140>
 8004a9c:	8a7b      	ldrh	r3, [r7, #18]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d16d      	bne.n	8004b7e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa6:	881a      	ldrh	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab2:	1c9a      	adds	r2, r3, #2
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ac6:	e05a      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d11b      	bne.n	8004b0e <HAL_SPI_TransmitReceive+0x1ac>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d016      	beq.n	8004b0e <HAL_SPI_TransmitReceive+0x1ac>
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d113      	bne.n	8004b0e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aea:	881a      	ldrh	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af6:	1c9a      	adds	r2, r3, #2
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d11c      	bne.n	8004b56 <HAL_SPI_TransmitReceive+0x1f4>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d016      	beq.n	8004b56 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	b292      	uxth	r2, r2
 8004b34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	1c9a      	adds	r2, r3, #2
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b52:	2301      	movs	r3, #1
 8004b54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b56:	f7fd fb23 	bl	80021a0 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d80b      	bhi.n	8004b7e <HAL_SPI_TransmitReceive+0x21c>
 8004b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d007      	beq.n	8004b7e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004b7c:	e109      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d19f      	bne.n	8004ac8 <HAL_SPI_TransmitReceive+0x166>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d199      	bne.n	8004ac8 <HAL_SPI_TransmitReceive+0x166>
 8004b94:	e0e3      	b.n	8004d5e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_SPI_TransmitReceive+0x244>
 8004b9e:	8a7b      	ldrh	r3, [r7, #18]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	f040 80cf 	bne.w	8004d44 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d912      	bls.n	8004bd6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb4:	881a      	ldrh	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc0:	1c9a      	adds	r2, r3, #2
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b02      	subs	r3, #2
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bd4:	e0b6      	b.n	8004d44 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	330c      	adds	r3, #12
 8004be0:	7812      	ldrb	r2, [r2, #0]
 8004be2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bfc:	e0a2      	b.n	8004d44 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d134      	bne.n	8004c76 <HAL_SPI_TransmitReceive+0x314>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d02f      	beq.n	8004c76 <HAL_SPI_TransmitReceive+0x314>
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d12c      	bne.n	8004c76 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d912      	bls.n	8004c4c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2a:	881a      	ldrh	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c36:	1c9a      	adds	r2, r3, #2
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	3b02      	subs	r3, #2
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c4a:	e012      	b.n	8004c72 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	330c      	adds	r3, #12
 8004c56:	7812      	ldrb	r2, [r2, #0]
 8004c58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d148      	bne.n	8004d16 <HAL_SPI_TransmitReceive+0x3b4>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d042      	beq.n	8004d16 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d923      	bls.n	8004ce4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	b292      	uxth	r2, r2
 8004ca8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	1c9a      	adds	r2, r3, #2
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b02      	subs	r3, #2
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d81f      	bhi.n	8004d12 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	e016      	b.n	8004d12 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f103 020c 	add.w	r2, r3, #12
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf0:	7812      	ldrb	r2, [r2, #0]
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d12:	2301      	movs	r3, #1
 8004d14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d16:	f7fd fa43 	bl	80021a0 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d803      	bhi.n	8004d2e <HAL_SPI_TransmitReceive+0x3cc>
 8004d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d102      	bne.n	8004d34 <HAL_SPI_TransmitReceive+0x3d2>
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d107      	bne.n	8004d44 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004d42:	e026      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f47f af57 	bne.w	8004bfe <HAL_SPI_TransmitReceive+0x29c>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f47f af50 	bne.w	8004bfe <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f9ba 	bl	80050dc <SPI_EndRxTxTransaction>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d88:	e003      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3728      	adds	r7, #40	@ 0x28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004db8:	f7fd f9f2 	bl	80021a0 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dc8:	f7fd f9ea 	bl	80021a0 <HAL_GetTick>
 8004dcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dce:	4b39      	ldr	r3, [pc, #228]	@ (8004eb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	015b      	lsls	r3, r3, #5
 8004dd4:	0d1b      	lsrs	r3, r3, #20
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	fb02 f303 	mul.w	r3, r2, r3
 8004ddc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dde:	e054      	b.n	8004e8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d050      	beq.n	8004e8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004de8:	f7fd f9da 	bl	80021a0 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d902      	bls.n	8004dfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d13d      	bne.n	8004e7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e16:	d111      	bne.n	8004e3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e20:	d004      	beq.n	8004e2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e2a:	d107      	bne.n	8004e3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e44:	d10f      	bne.n	8004e66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e017      	b.n	8004eaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4013      	ands	r3, r2
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	bf0c      	ite	eq
 8004e9a:	2301      	moveq	r3, #1
 8004e9c:	2300      	movne	r3, #0
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d19b      	bne.n	8004de0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000004 	.word	0x20000004

08004eb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08a      	sub	sp, #40	@ 0x28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004eca:	f7fd f969 	bl	80021a0 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004eda:	f7fd f961 	bl	80021a0 <HAL_GetTick>
 8004ede:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ee8:	4b3d      	ldr	r3, [pc, #244]	@ (8004fe0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	00da      	lsls	r2, r3, #3
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	0d1b      	lsrs	r3, r3, #20
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004efa:	fb02 f303 	mul.w	r3, r2, r3
 8004efe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f00:	e060      	b.n	8004fc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f08:	d107      	bne.n	8004f1a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d104      	bne.n	8004f1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d050      	beq.n	8004fc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f22:	f7fd f93d 	bl	80021a0 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d902      	bls.n	8004f38 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d13d      	bne.n	8004fb4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f50:	d111      	bne.n	8004f76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f5a:	d004      	beq.n	8004f66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f64:	d107      	bne.n	8004f76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f7e:	d10f      	bne.n	8004fa0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e010      	b.n	8004fd6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d196      	bne.n	8004f02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3728      	adds	r7, #40	@ 0x28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000004 	.word	0x20000004

08004fe4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ff8:	d111      	bne.n	800501e <SPI_EndRxTransaction+0x3a>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005002:	d004      	beq.n	800500e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500c:	d107      	bne.n	800501e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800501c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005026:	d112      	bne.n	800504e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2200      	movs	r2, #0
 8005030:	2180      	movs	r1, #128	@ 0x80
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f7ff feb8 	bl	8004da8 <SPI_WaitFlagStateUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d021      	beq.n	8005082 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005042:	f043 0220 	orr.w	r2, r3, #32
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e03d      	b.n	80050ca <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800504e:	4b21      	ldr	r3, [pc, #132]	@ (80050d4 <SPI_EndRxTransaction+0xf0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a21      	ldr	r2, [pc, #132]	@ (80050d8 <SPI_EndRxTransaction+0xf4>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	0d5b      	lsrs	r3, r3, #21
 800505a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	3b01      	subs	r3, #1
 800506e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507a:	2b80      	cmp	r3, #128	@ 0x80
 800507c:	d0f2      	beq.n	8005064 <SPI_EndRxTransaction+0x80>
 800507e:	e000      	b.n	8005082 <SPI_EndRxTransaction+0x9e>
        break;
 8005080:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800508a:	d11d      	bne.n	80050c8 <SPI_EndRxTransaction+0xe4>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005094:	d004      	beq.n	80050a0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800509e:	d113      	bne.n	80050c8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f7ff ff03 	bl	8004eb8 <SPI_WaitFifoStateUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d007      	beq.n	80050c8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050bc:	f043 0220 	orr.w	r2, r3, #32
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e000      	b.n	80050ca <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000004 	.word	0x20000004
 80050d8:	165e9f81 	.word	0x165e9f81

080050dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff fedf 	bl	8004eb8 <SPI_WaitFifoStateUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d007      	beq.n	8005110 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005104:	f043 0220 	orr.w	r2, r3, #32
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e046      	b.n	800519e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005110:	4b25      	ldr	r3, [pc, #148]	@ (80051a8 <SPI_EndRxTxTransaction+0xcc>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a25      	ldr	r2, [pc, #148]	@ (80051ac <SPI_EndRxTxTransaction+0xd0>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	0d5b      	lsrs	r3, r3, #21
 800511c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005120:	fb02 f303 	mul.w	r3, r2, r3
 8005124:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800512e:	d112      	bne.n	8005156 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2200      	movs	r2, #0
 8005138:	2180      	movs	r1, #128	@ 0x80
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff fe34 	bl	8004da8 <SPI_WaitFlagStateUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d016      	beq.n	8005174 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800514a:	f043 0220 	orr.w	r2, r3, #32
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e023      	b.n	800519e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	3b01      	subs	r3, #1
 8005160:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800516c:	2b80      	cmp	r3, #128	@ 0x80
 800516e:	d0f2      	beq.n	8005156 <SPI_EndRxTxTransaction+0x7a>
 8005170:	e000      	b.n	8005174 <SPI_EndRxTxTransaction+0x98>
        break;
 8005172:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2200      	movs	r2, #0
 800517c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff fe99 	bl	8004eb8 <SPI_WaitFifoStateUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005190:	f043 0220 	orr.w	r2, r3, #32
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e000      	b.n	800519e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	20000004 	.word	0x20000004
 80051ac:	165e9f81 	.word	0x165e9f81

080051b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e049      	b.n	8005256 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fc fe4e 	bl	8001e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3304      	adds	r3, #4
 80051ec:	4619      	mov	r1, r3
 80051ee:	4610      	mov	r0, r2
 80051f0:	f000 feb6 	bl	8005f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b082      	sub	sp, #8
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e049      	b.n	8005304 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d106      	bne.n	800528a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f841 	bl	800530c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2202      	movs	r2, #2
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3304      	adds	r3, #4
 800529a:	4619      	mov	r1, r3
 800529c:	4610      	mov	r0, r2
 800529e:	f000 fe5f 	bl	8005f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d109      	bne.n	8005344 <HAL_TIM_PWM_Start+0x24>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	bf14      	ite	ne
 800533c:	2301      	movne	r3, #1
 800533e:	2300      	moveq	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	e03c      	b.n	80053be <HAL_TIM_PWM_Start+0x9e>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b04      	cmp	r3, #4
 8005348:	d109      	bne.n	800535e <HAL_TIM_PWM_Start+0x3e>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b01      	cmp	r3, #1
 8005354:	bf14      	ite	ne
 8005356:	2301      	movne	r3, #1
 8005358:	2300      	moveq	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	e02f      	b.n	80053be <HAL_TIM_PWM_Start+0x9e>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b08      	cmp	r3, #8
 8005362:	d109      	bne.n	8005378 <HAL_TIM_PWM_Start+0x58>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	bf14      	ite	ne
 8005370:	2301      	movne	r3, #1
 8005372:	2300      	moveq	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	e022      	b.n	80053be <HAL_TIM_PWM_Start+0x9e>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b0c      	cmp	r3, #12
 800537c:	d109      	bne.n	8005392 <HAL_TIM_PWM_Start+0x72>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b01      	cmp	r3, #1
 8005388:	bf14      	ite	ne
 800538a:	2301      	movne	r3, #1
 800538c:	2300      	moveq	r3, #0
 800538e:	b2db      	uxtb	r3, r3
 8005390:	e015      	b.n	80053be <HAL_TIM_PWM_Start+0x9e>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b10      	cmp	r3, #16
 8005396:	d109      	bne.n	80053ac <HAL_TIM_PWM_Start+0x8c>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	bf14      	ite	ne
 80053a4:	2301      	movne	r3, #1
 80053a6:	2300      	moveq	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	e008      	b.n	80053be <HAL_TIM_PWM_Start+0x9e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	bf14      	ite	ne
 80053b8:	2301      	movne	r3, #1
 80053ba:	2300      	moveq	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e092      	b.n	80054ec <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_PWM_Start+0xb6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053d4:	e023      	b.n	800541e <HAL_TIM_PWM_Start+0xfe>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d104      	bne.n	80053e6 <HAL_TIM_PWM_Start+0xc6>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053e4:	e01b      	b.n	800541e <HAL_TIM_PWM_Start+0xfe>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_PWM_Start+0xd6>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053f4:	e013      	b.n	800541e <HAL_TIM_PWM_Start+0xfe>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b0c      	cmp	r3, #12
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_PWM_Start+0xe6>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005404:	e00b      	b.n	800541e <HAL_TIM_PWM_Start+0xfe>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b10      	cmp	r3, #16
 800540a:	d104      	bne.n	8005416 <HAL_TIM_PWM_Start+0xf6>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005414:	e003      	b.n	800541e <HAL_TIM_PWM_Start+0xfe>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2202      	movs	r2, #2
 800541a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2201      	movs	r2, #1
 8005424:	6839      	ldr	r1, [r7, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f001 f93e 	bl	80066a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a30      	ldr	r2, [pc, #192]	@ (80054f4 <HAL_TIM_PWM_Start+0x1d4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <HAL_TIM_PWM_Start+0x120>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a2f      	ldr	r2, [pc, #188]	@ (80054f8 <HAL_TIM_PWM_Start+0x1d8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d101      	bne.n	8005444 <HAL_TIM_PWM_Start+0x124>
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <HAL_TIM_PWM_Start+0x126>
 8005444:	2300      	movs	r3, #0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005458:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a25      	ldr	r2, [pc, #148]	@ (80054f4 <HAL_TIM_PWM_Start+0x1d4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d022      	beq.n	80054aa <HAL_TIM_PWM_Start+0x18a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800546c:	d01d      	beq.n	80054aa <HAL_TIM_PWM_Start+0x18a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a22      	ldr	r2, [pc, #136]	@ (80054fc <HAL_TIM_PWM_Start+0x1dc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d018      	beq.n	80054aa <HAL_TIM_PWM_Start+0x18a>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a20      	ldr	r2, [pc, #128]	@ (8005500 <HAL_TIM_PWM_Start+0x1e0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d013      	beq.n	80054aa <HAL_TIM_PWM_Start+0x18a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a1f      	ldr	r2, [pc, #124]	@ (8005504 <HAL_TIM_PWM_Start+0x1e4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00e      	beq.n	80054aa <HAL_TIM_PWM_Start+0x18a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a19      	ldr	r2, [pc, #100]	@ (80054f8 <HAL_TIM_PWM_Start+0x1d8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d009      	beq.n	80054aa <HAL_TIM_PWM_Start+0x18a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a1b      	ldr	r2, [pc, #108]	@ (8005508 <HAL_TIM_PWM_Start+0x1e8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d004      	beq.n	80054aa <HAL_TIM_PWM_Start+0x18a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a19      	ldr	r2, [pc, #100]	@ (800550c <HAL_TIM_PWM_Start+0x1ec>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d115      	bne.n	80054d6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	4b17      	ldr	r3, [pc, #92]	@ (8005510 <HAL_TIM_PWM_Start+0x1f0>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b06      	cmp	r3, #6
 80054ba:	d015      	beq.n	80054e8 <HAL_TIM_PWM_Start+0x1c8>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054c2:	d011      	beq.n	80054e8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d4:	e008      	b.n	80054e8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0201 	orr.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	e000      	b.n	80054ea <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40010400 	.word	0x40010400
 80054fc:	40000400 	.word	0x40000400
 8005500:	40000800 	.word	0x40000800
 8005504:	40000c00 	.word	0x40000c00
 8005508:	40014000 	.word	0x40014000
 800550c:	40001800 	.word	0x40001800
 8005510:	00010007 	.word	0x00010007

08005514 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e08f      	b.n	8005648 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d106      	bne.n	8005542 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7fc fce7 	bl	8001f10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2202      	movs	r2, #2
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6899      	ldr	r1, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	4b3e      	ldr	r3, [pc, #248]	@ (8005650 <HAL_TIM_Encoder_Init+0x13c>)
 8005556:	400b      	ands	r3, r1
 8005558:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3304      	adds	r3, #4
 8005562:	4619      	mov	r1, r3
 8005564:	4610      	mov	r0, r2
 8005566:	f000 fcfb 	bl	8005f60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4b31      	ldr	r3, [pc, #196]	@ (8005654 <HAL_TIM_Encoder_Init+0x140>)
 8005590:	4013      	ands	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	4313      	orrs	r3, r2
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005658 <HAL_TIM_Encoder_Init+0x144>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4b2a      	ldr	r3, [pc, #168]	@ (800565c <HAL_TIM_Encoder_Init+0x148>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	4313      	orrs	r3, r2
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	011a      	lsls	r2, r3, #4
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	031b      	lsls	r3, r3, #12
 80055d4:	4313      	orrs	r3, r2
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80055e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	4313      	orrs	r3, r2
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	fffebff8 	.word	0xfffebff8
 8005654:	fffffcfc 	.word	0xfffffcfc
 8005658:	fffff3f3 	.word	0xfffff3f3
 800565c:	ffff0f0f 	.word	0xffff0f0f

08005660 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005670:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005678:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005680:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005688:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d110      	bne.n	80056b2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d102      	bne.n	800569c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005696:	7b7b      	ldrb	r3, [r7, #13]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d001      	beq.n	80056a0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e089      	b.n	80057b4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056b0:	e031      	b.n	8005716 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d110      	bne.n	80056da <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056b8:	7bbb      	ldrb	r3, [r7, #14]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d102      	bne.n	80056c4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056be:	7b3b      	ldrb	r3, [r7, #12]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d001      	beq.n	80056c8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e075      	b.n	80057b4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056d8:	e01d      	b.n	8005716 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056da:	7bfb      	ldrb	r3, [r7, #15]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d108      	bne.n	80056f2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056e0:	7bbb      	ldrb	r3, [r7, #14]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d105      	bne.n	80056f2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056e6:	7b7b      	ldrb	r3, [r7, #13]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d102      	bne.n	80056f2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056ec:	7b3b      	ldrb	r3, [r7, #12]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d001      	beq.n	80056f6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e05e      	b.n	80057b4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2202      	movs	r2, #2
 8005702:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2202      	movs	r2, #2
 800570a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2202      	movs	r2, #2
 8005712:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_TIM_Encoder_Start_IT+0xc4>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b04      	cmp	r3, #4
 8005720:	d010      	beq.n	8005744 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005722:	e01f      	b.n	8005764 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2201      	movs	r2, #1
 800572a:	2100      	movs	r1, #0
 800572c:	4618      	mov	r0, r3
 800572e:	f000 ffbb 	bl	80066a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0202 	orr.w	r2, r2, #2
 8005740:	60da      	str	r2, [r3, #12]
      break;
 8005742:	e02e      	b.n	80057a2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2201      	movs	r2, #1
 800574a:	2104      	movs	r1, #4
 800574c:	4618      	mov	r0, r3
 800574e:	f000 ffab 	bl	80066a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0204 	orr.w	r2, r2, #4
 8005760:	60da      	str	r2, [r3, #12]
      break;
 8005762:	e01e      	b.n	80057a2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2201      	movs	r2, #1
 800576a:	2100      	movs	r1, #0
 800576c:	4618      	mov	r0, r3
 800576e:	f000 ff9b 	bl	80066a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2201      	movs	r2, #1
 8005778:	2104      	movs	r1, #4
 800577a:	4618      	mov	r0, r3
 800577c:	f000 ff94 	bl	80066a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0202 	orr.w	r2, r2, #2
 800578e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0204 	orr.w	r2, r2, #4
 800579e:	60da      	str	r2, [r3, #12]
      break;
 80057a0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0201 	orr.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10f      	bne.n	80057ec <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2200      	movs	r2, #0
 80057d2:	2100      	movs	r1, #0
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 ff67 	bl	80066a8 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0202 	bic.w	r2, r2, #2
 80057e8:	60da      	str	r2, [r3, #12]
 80057ea:	e030      	b.n	800584e <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d10f      	bne.n	8005812 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2200      	movs	r2, #0
 80057f8:	2104      	movs	r1, #4
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 ff54 	bl	80066a8 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0204 	bic.w	r2, r2, #4
 800580e:	60da      	str	r2, [r3, #12]
 8005810:	e01d      	b.n	800584e <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2200      	movs	r2, #0
 8005818:	2100      	movs	r1, #0
 800581a:	4618      	mov	r0, r3
 800581c:	f000 ff44 	bl	80066a8 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2200      	movs	r2, #0
 8005826:	2104      	movs	r1, #4
 8005828:	4618      	mov	r0, r3
 800582a:	f000 ff3d 	bl	80066a8 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0202 	bic.w	r2, r2, #2
 800583c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0204 	bic.w	r2, r2, #4
 800584c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a1a      	ldr	r2, [r3, #32]
 8005854:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005858:	4013      	ands	r3, r2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10f      	bne.n	800587e <HAL_TIM_Encoder_Stop_IT+0xc2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6a1a      	ldr	r2, [r3, #32]
 8005864:	f240 4344 	movw	r3, #1092	@ 0x444
 8005868:	4013      	ands	r3, r2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d107      	bne.n	800587e <HAL_TIM_Encoder_Stop_IT+0xc2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0201 	bic.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <HAL_TIM_Encoder_Stop_IT+0xce>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b04      	cmp	r3, #4
 8005888:	d148      	bne.n	800591c <HAL_TIM_Encoder_Stop_IT+0x160>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d104      	bne.n	800589a <HAL_TIM_Encoder_Stop_IT+0xde>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005898:	e023      	b.n	80058e2 <HAL_TIM_Encoder_Stop_IT+0x126>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b04      	cmp	r3, #4
 800589e:	d104      	bne.n	80058aa <HAL_TIM_Encoder_Stop_IT+0xee>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058a8:	e01b      	b.n	80058e2 <HAL_TIM_Encoder_Stop_IT+0x126>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d104      	bne.n	80058ba <HAL_TIM_Encoder_Stop_IT+0xfe>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058b8:	e013      	b.n	80058e2 <HAL_TIM_Encoder_Stop_IT+0x126>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b0c      	cmp	r3, #12
 80058be:	d104      	bne.n	80058ca <HAL_TIM_Encoder_Stop_IT+0x10e>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058c8:	e00b      	b.n	80058e2 <HAL_TIM_Encoder_Stop_IT+0x126>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d104      	bne.n	80058da <HAL_TIM_Encoder_Stop_IT+0x11e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058d8:	e003      	b.n	80058e2 <HAL_TIM_Encoder_Stop_IT+0x126>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d104      	bne.n	80058f2 <HAL_TIM_Encoder_Stop_IT+0x136>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058f0:	e024      	b.n	800593c <HAL_TIM_Encoder_Stop_IT+0x180>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d104      	bne.n	8005902 <HAL_TIM_Encoder_Stop_IT+0x146>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005900:	e01c      	b.n	800593c <HAL_TIM_Encoder_Stop_IT+0x180>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b08      	cmp	r3, #8
 8005906:	d104      	bne.n	8005912 <HAL_TIM_Encoder_Stop_IT+0x156>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005910:	e014      	b.n	800593c <HAL_TIM_Encoder_Stop_IT+0x180>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 800591a:	e00f      	b.n	800593c <HAL_TIM_Encoder_Stop_IT+0x180>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d020      	beq.n	80059aa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01b      	beq.n	80059aa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f06f 0202 	mvn.w	r2, #2
 800597a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fb fb71 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 8005996:	e005      	b.n	80059a4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fac3 	bl	8005f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 faca 	bl	8005f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d020      	beq.n	80059f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d01b      	beq.n	80059f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f06f 0204 	mvn.w	r2, #4
 80059c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7fb fb4b 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 80059e2:	e005      	b.n	80059f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa9d 	bl	8005f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 faa4 	bl	8005f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d020      	beq.n	8005a42 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d01b      	beq.n	8005a42 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f06f 0208 	mvn.w	r2, #8
 8005a12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2204      	movs	r2, #4
 8005a18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7fb fb25 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 8005a2e:	e005      	b.n	8005a3c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fa77 	bl	8005f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fa7e 	bl	8005f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d020      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f003 0310 	and.w	r3, r3, #16
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01b      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f06f 0210 	mvn.w	r2, #16
 8005a5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2208      	movs	r2, #8
 8005a64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fb faff 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 8005a7a:	e005      	b.n	8005a88 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fa51 	bl	8005f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fa58 	bl	8005f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00c      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f06f 0201 	mvn.w	r2, #1
 8005aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fa2f 	bl	8005f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d104      	bne.n	8005ac6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00c      	beq.n	8005ae0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d007      	beq.n	8005ae0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fea2 	bl	8006824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00c      	beq.n	8005b04 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fe9a 	bl	8006838 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00c      	beq.n	8005b28 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d007      	beq.n	8005b28 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fa12 	bl	8005f4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00c      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0220 	mvn.w	r2, #32
 8005b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fe62 	bl	8006810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d101      	bne.n	8005b72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e0ff      	b.n	8005d72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b14      	cmp	r3, #20
 8005b7e:	f200 80f0 	bhi.w	8005d62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b82:	a201      	add	r2, pc, #4	@ (adr r2, 8005b88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005bdd 	.word	0x08005bdd
 8005b8c:	08005d63 	.word	0x08005d63
 8005b90:	08005d63 	.word	0x08005d63
 8005b94:	08005d63 	.word	0x08005d63
 8005b98:	08005c1d 	.word	0x08005c1d
 8005b9c:	08005d63 	.word	0x08005d63
 8005ba0:	08005d63 	.word	0x08005d63
 8005ba4:	08005d63 	.word	0x08005d63
 8005ba8:	08005c5f 	.word	0x08005c5f
 8005bac:	08005d63 	.word	0x08005d63
 8005bb0:	08005d63 	.word	0x08005d63
 8005bb4:	08005d63 	.word	0x08005d63
 8005bb8:	08005c9f 	.word	0x08005c9f
 8005bbc:	08005d63 	.word	0x08005d63
 8005bc0:	08005d63 	.word	0x08005d63
 8005bc4:	08005d63 	.word	0x08005d63
 8005bc8:	08005ce1 	.word	0x08005ce1
 8005bcc:	08005d63 	.word	0x08005d63
 8005bd0:	08005d63 	.word	0x08005d63
 8005bd4:	08005d63 	.word	0x08005d63
 8005bd8:	08005d21 	.word	0x08005d21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fa68 	bl	80060b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0208 	orr.w	r2, r2, #8
 8005bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0204 	bic.w	r2, r2, #4
 8005c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6999      	ldr	r1, [r3, #24]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	619a      	str	r2, [r3, #24]
      break;
 8005c1a:	e0a5      	b.n	8005d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 faba 	bl	800619c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6999      	ldr	r1, [r3, #24]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	021a      	lsls	r2, r3, #8
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	619a      	str	r2, [r3, #24]
      break;
 8005c5c:	e084      	b.n	8005d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fb11 	bl	800628c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0208 	orr.w	r2, r2, #8
 8005c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69da      	ldr	r2, [r3, #28]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0204 	bic.w	r2, r2, #4
 8005c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69d9      	ldr	r1, [r3, #28]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	61da      	str	r2, [r3, #28]
      break;
 8005c9c:	e064      	b.n	8005d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fb67 	bl	8006378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69d9      	ldr	r1, [r3, #28]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	021a      	lsls	r2, r3, #8
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	61da      	str	r2, [r3, #28]
      break;
 8005cde:	e043      	b.n	8005d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fb9e 	bl	8006428 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0208 	orr.w	r2, r2, #8
 8005cfa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0204 	bic.w	r2, r2, #4
 8005d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d1e:	e023      	b.n	8005d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fbd0 	bl	80064cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	021a      	lsls	r2, r3, #8
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d60:	e002      	b.n	8005d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	75fb      	strb	r3, [r7, #23]
      break;
 8005d66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop

08005d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_TIM_ConfigClockSource+0x1c>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e0b4      	b.n	8005f02 <HAL_TIM_ConfigClockSource+0x186>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	4b56      	ldr	r3, [pc, #344]	@ (8005f0c <HAL_TIM_ConfigClockSource+0x190>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dd0:	d03e      	beq.n	8005e50 <HAL_TIM_ConfigClockSource+0xd4>
 8005dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dd6:	f200 8087 	bhi.w	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dde:	f000 8086 	beq.w	8005eee <HAL_TIM_ConfigClockSource+0x172>
 8005de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005de6:	d87f      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005de8:	2b70      	cmp	r3, #112	@ 0x70
 8005dea:	d01a      	beq.n	8005e22 <HAL_TIM_ConfigClockSource+0xa6>
 8005dec:	2b70      	cmp	r3, #112	@ 0x70
 8005dee:	d87b      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005df0:	2b60      	cmp	r3, #96	@ 0x60
 8005df2:	d050      	beq.n	8005e96 <HAL_TIM_ConfigClockSource+0x11a>
 8005df4:	2b60      	cmp	r3, #96	@ 0x60
 8005df6:	d877      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005df8:	2b50      	cmp	r3, #80	@ 0x50
 8005dfa:	d03c      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0xfa>
 8005dfc:	2b50      	cmp	r3, #80	@ 0x50
 8005dfe:	d873      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e00:	2b40      	cmp	r3, #64	@ 0x40
 8005e02:	d058      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0x13a>
 8005e04:	2b40      	cmp	r3, #64	@ 0x40
 8005e06:	d86f      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e08:	2b30      	cmp	r3, #48	@ 0x30
 8005e0a:	d064      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e0c:	2b30      	cmp	r3, #48	@ 0x30
 8005e0e:	d86b      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	d060      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d867      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d05c      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e1c:	2b10      	cmp	r3, #16
 8005e1e:	d05a      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e20:	e062      	b.n	8005ee8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e32:	f000 fc19 	bl	8006668 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	609a      	str	r2, [r3, #8]
      break;
 8005e4e:	e04f      	b.n	8005ef0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e60:	f000 fc02 	bl	8006668 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e72:	609a      	str	r2, [r3, #8]
      break;
 8005e74:	e03c      	b.n	8005ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e82:	461a      	mov	r2, r3
 8005e84:	f000 fb76 	bl	8006574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2150      	movs	r1, #80	@ 0x50
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fbcf 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 8005e94:	e02c      	b.n	8005ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f000 fb95 	bl	80065d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2160      	movs	r1, #96	@ 0x60
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 fbbf 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 8005eb4:	e01c      	b.n	8005ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f000 fb56 	bl	8006574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2140      	movs	r1, #64	@ 0x40
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fbaf 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 8005ed4:	e00c      	b.n	8005ef0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	f000 fba6 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 8005ee6:	e003      	b.n	8005ef0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
      break;
 8005eec:	e000      	b.n	8005ef0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005eee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	fffeff88 	.word	0xfffeff88

08005f10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a46      	ldr	r2, [pc, #280]	@ (800608c <TIM_Base_SetConfig+0x12c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d013      	beq.n	8005fa0 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f7e:	d00f      	beq.n	8005fa0 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a43      	ldr	r2, [pc, #268]	@ (8006090 <TIM_Base_SetConfig+0x130>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00b      	beq.n	8005fa0 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a42      	ldr	r2, [pc, #264]	@ (8006094 <TIM_Base_SetConfig+0x134>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d007      	beq.n	8005fa0 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a41      	ldr	r2, [pc, #260]	@ (8006098 <TIM_Base_SetConfig+0x138>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <TIM_Base_SetConfig+0x40>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a40      	ldr	r2, [pc, #256]	@ (800609c <TIM_Base_SetConfig+0x13c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d108      	bne.n	8005fb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a35      	ldr	r2, [pc, #212]	@ (800608c <TIM_Base_SetConfig+0x12c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d02b      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc0:	d027      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a32      	ldr	r2, [pc, #200]	@ (8006090 <TIM_Base_SetConfig+0x130>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d023      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a31      	ldr	r2, [pc, #196]	@ (8006094 <TIM_Base_SetConfig+0x134>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d01f      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a30      	ldr	r2, [pc, #192]	@ (8006098 <TIM_Base_SetConfig+0x138>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d01b      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a2f      	ldr	r2, [pc, #188]	@ (800609c <TIM_Base_SetConfig+0x13c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d017      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a2e      	ldr	r2, [pc, #184]	@ (80060a0 <TIM_Base_SetConfig+0x140>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d013      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a2d      	ldr	r2, [pc, #180]	@ (80060a4 <TIM_Base_SetConfig+0x144>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00f      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80060a8 <TIM_Base_SetConfig+0x148>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00b      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a2b      	ldr	r2, [pc, #172]	@ (80060ac <TIM_Base_SetConfig+0x14c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d007      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2a      	ldr	r2, [pc, #168]	@ (80060b0 <TIM_Base_SetConfig+0x150>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d003      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a29      	ldr	r2, [pc, #164]	@ (80060b4 <TIM_Base_SetConfig+0x154>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d108      	bne.n	8006024 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a10      	ldr	r2, [pc, #64]	@ (800608c <TIM_Base_SetConfig+0x12c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_Base_SetConfig+0xf8>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a12      	ldr	r2, [pc, #72]	@ (800609c <TIM_Base_SetConfig+0x13c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d103      	bne.n	8006060 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	691a      	ldr	r2, [r3, #16]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b01      	cmp	r3, #1
 8006070:	d105      	bne.n	800607e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f023 0201 	bic.w	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	611a      	str	r2, [r3, #16]
  }
}
 800607e:	bf00      	nop
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	40010000 	.word	0x40010000
 8006090:	40000400 	.word	0x40000400
 8006094:	40000800 	.word	0x40000800
 8006098:	40000c00 	.word	0x40000c00
 800609c:	40010400 	.word	0x40010400
 80060a0:	40014000 	.word	0x40014000
 80060a4:	40014400 	.word	0x40014400
 80060a8:	40014800 	.word	0x40014800
 80060ac:	40001800 	.word	0x40001800
 80060b0:	40001c00 	.word	0x40001c00
 80060b4:	40002000 	.word	0x40002000

080060b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	f023 0201 	bic.w	r2, r3, #1
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4b2b      	ldr	r3, [pc, #172]	@ (8006190 <TIM_OC1_SetConfig+0xd8>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0303 	bic.w	r3, r3, #3
 80060ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f023 0302 	bic.w	r3, r3, #2
 8006100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a21      	ldr	r2, [pc, #132]	@ (8006194 <TIM_OC1_SetConfig+0xdc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_OC1_SetConfig+0x64>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a20      	ldr	r2, [pc, #128]	@ (8006198 <TIM_OC1_SetConfig+0xe0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d10c      	bne.n	8006136 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f023 0308 	bic.w	r3, r3, #8
 8006122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f023 0304 	bic.w	r3, r3, #4
 8006134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a16      	ldr	r2, [pc, #88]	@ (8006194 <TIM_OC1_SetConfig+0xdc>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d003      	beq.n	8006146 <TIM_OC1_SetConfig+0x8e>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a15      	ldr	r2, [pc, #84]	@ (8006198 <TIM_OC1_SetConfig+0xe0>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d111      	bne.n	800616a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800614c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	621a      	str	r2, [r3, #32]
}
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	fffeff8f 	.word	0xfffeff8f
 8006194:	40010000 	.word	0x40010000
 8006198:	40010400 	.word	0x40010400

0800619c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	f023 0210 	bic.w	r2, r3, #16
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4b2e      	ldr	r3, [pc, #184]	@ (8006280 <TIM_OC2_SetConfig+0xe4>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	021b      	lsls	r3, r3, #8
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f023 0320 	bic.w	r3, r3, #32
 80061e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a23      	ldr	r2, [pc, #140]	@ (8006284 <TIM_OC2_SetConfig+0xe8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d003      	beq.n	8006204 <TIM_OC2_SetConfig+0x68>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a22      	ldr	r2, [pc, #136]	@ (8006288 <TIM_OC2_SetConfig+0xec>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d10d      	bne.n	8006220 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800620a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800621e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a18      	ldr	r2, [pc, #96]	@ (8006284 <TIM_OC2_SetConfig+0xe8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d003      	beq.n	8006230 <TIM_OC2_SetConfig+0x94>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a17      	ldr	r2, [pc, #92]	@ (8006288 <TIM_OC2_SetConfig+0xec>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d113      	bne.n	8006258 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006236:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800623e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4313      	orrs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	621a      	str	r2, [r3, #32]
}
 8006272:	bf00      	nop
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	feff8fff 	.word	0xfeff8fff
 8006284:	40010000 	.word	0x40010000
 8006288:	40010400 	.word	0x40010400

0800628c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4b2d      	ldr	r3, [pc, #180]	@ (800636c <TIM_OC3_SetConfig+0xe0>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a22      	ldr	r2, [pc, #136]	@ (8006370 <TIM_OC3_SetConfig+0xe4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d003      	beq.n	80062f2 <TIM_OC3_SetConfig+0x66>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a21      	ldr	r2, [pc, #132]	@ (8006374 <TIM_OC3_SetConfig+0xe8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d10d      	bne.n	800630e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800630c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a17      	ldr	r2, [pc, #92]	@ (8006370 <TIM_OC3_SetConfig+0xe4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d003      	beq.n	800631e <TIM_OC3_SetConfig+0x92>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a16      	ldr	r2, [pc, #88]	@ (8006374 <TIM_OC3_SetConfig+0xe8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d113      	bne.n	8006346 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800632c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	4313      	orrs	r3, r2
 8006344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	621a      	str	r2, [r3, #32]
}
 8006360:	bf00      	nop
 8006362:	371c      	adds	r7, #28
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	fffeff8f 	.word	0xfffeff8f
 8006370:	40010000 	.word	0x40010000
 8006374:	40010400 	.word	0x40010400

08006378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4b1e      	ldr	r3, [pc, #120]	@ (800641c <TIM_OC4_SetConfig+0xa4>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	031b      	lsls	r3, r3, #12
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a13      	ldr	r2, [pc, #76]	@ (8006420 <TIM_OC4_SetConfig+0xa8>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d003      	beq.n	80063e0 <TIM_OC4_SetConfig+0x68>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a12      	ldr	r2, [pc, #72]	@ (8006424 <TIM_OC4_SetConfig+0xac>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d109      	bne.n	80063f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	019b      	lsls	r3, r3, #6
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	621a      	str	r2, [r3, #32]
}
 800640e:	bf00      	nop
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	feff8fff 	.word	0xfeff8fff
 8006420:	40010000 	.word	0x40010000
 8006424:	40010400 	.word	0x40010400

08006428 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800644e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4b1b      	ldr	r3, [pc, #108]	@ (80064c0 <TIM_OC5_SetConfig+0x98>)
 8006454:	4013      	ands	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006468:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	041b      	lsls	r3, r3, #16
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a12      	ldr	r2, [pc, #72]	@ (80064c4 <TIM_OC5_SetConfig+0x9c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d003      	beq.n	8006486 <TIM_OC5_SetConfig+0x5e>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a11      	ldr	r2, [pc, #68]	@ (80064c8 <TIM_OC5_SetConfig+0xa0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d109      	bne.n	800649a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800648c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	021b      	lsls	r3, r3, #8
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	621a      	str	r2, [r3, #32]
}
 80064b4:	bf00      	nop
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	fffeff8f 	.word	0xfffeff8f
 80064c4:	40010000 	.word	0x40010000
 80064c8:	40010400 	.word	0x40010400

080064cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4b1c      	ldr	r3, [pc, #112]	@ (8006568 <TIM_OC6_SetConfig+0x9c>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	021b      	lsls	r3, r3, #8
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4313      	orrs	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800650e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	051b      	lsls	r3, r3, #20
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a13      	ldr	r2, [pc, #76]	@ (800656c <TIM_OC6_SetConfig+0xa0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d003      	beq.n	800652c <TIM_OC6_SetConfig+0x60>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a12      	ldr	r2, [pc, #72]	@ (8006570 <TIM_OC6_SetConfig+0xa4>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d109      	bne.n	8006540 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006532:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	029b      	lsls	r3, r3, #10
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	621a      	str	r2, [r3, #32]
}
 800655a:	bf00      	nop
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	feff8fff 	.word	0xfeff8fff
 800656c:	40010000 	.word	0x40010000
 8006570:	40010400 	.word	0x40010400

08006574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	f023 0201 	bic.w	r2, r3, #1
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800659e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f023 030a 	bic.w	r3, r3, #10
 80065b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	621a      	str	r2, [r3, #32]
}
 80065c6:	bf00      	nop
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b087      	sub	sp, #28
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	60f8      	str	r0, [r7, #12]
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	f023 0210 	bic.w	r2, r3, #16
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	031b      	lsls	r3, r3, #12
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800660e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	621a      	str	r2, [r3, #32]
}
 8006626:	bf00      	nop
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006648:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	f043 0307 	orr.w	r3, r3, #7
 8006654:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	609a      	str	r2, [r3, #8]
}
 800665c:	bf00      	nop
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006682:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	021a      	lsls	r2, r3, #8
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	431a      	orrs	r2, r3
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	4313      	orrs	r3, r2
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	609a      	str	r2, [r3, #8]
}
 800669c:	bf00      	nop
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	2201      	movs	r2, #1
 80066bc:	fa02 f303 	lsl.w	r3, r2, r3
 80066c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6a1a      	ldr	r2, [r3, #32]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	43db      	mvns	r3, r3
 80066ca:	401a      	ands	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a1a      	ldr	r2, [r3, #32]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f003 031f 	and.w	r3, r3, #31
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	fa01 f303 	lsl.w	r3, r1, r3
 80066e0:	431a      	orrs	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
	...

080066f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006708:	2302      	movs	r3, #2
 800670a:	e06d      	b.n	80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a30      	ldr	r2, [pc, #192]	@ (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d004      	beq.n	8006740 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a2f      	ldr	r2, [pc, #188]	@ (80067f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d108      	bne.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006746:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006758:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a20      	ldr	r2, [pc, #128]	@ (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d022      	beq.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800677e:	d01d      	beq.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1d      	ldr	r2, [pc, #116]	@ (80067fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d018      	beq.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1c      	ldr	r2, [pc, #112]	@ (8006800 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d013      	beq.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a1a      	ldr	r2, [pc, #104]	@ (8006804 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00e      	beq.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a15      	ldr	r2, [pc, #84]	@ (80067f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d009      	beq.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a16      	ldr	r2, [pc, #88]	@ (8006808 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d004      	beq.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a15      	ldr	r2, [pc, #84]	@ (800680c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d10c      	bne.n	80067d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	40010000 	.word	0x40010000
 80067f8:	40010400 	.word	0x40010400
 80067fc:	40000400 	.word	0x40000400
 8006800:	40000800 	.word	0x40000800
 8006804:	40000c00 	.word	0x40000c00
 8006808:	40014000 	.word	0x40014000
 800680c:	40001800 	.word	0x40001800

08006810 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <memset>:
 800684c:	4402      	add	r2, r0
 800684e:	4603      	mov	r3, r0
 8006850:	4293      	cmp	r3, r2
 8006852:	d100      	bne.n	8006856 <memset+0xa>
 8006854:	4770      	bx	lr
 8006856:	f803 1b01 	strb.w	r1, [r3], #1
 800685a:	e7f9      	b.n	8006850 <memset+0x4>

0800685c <__errno>:
 800685c:	4b01      	ldr	r3, [pc, #4]	@ (8006864 <__errno+0x8>)
 800685e:	6818      	ldr	r0, [r3, #0]
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	20000010 	.word	0x20000010

08006868 <__libc_init_array>:
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	4d0d      	ldr	r5, [pc, #52]	@ (80068a0 <__libc_init_array+0x38>)
 800686c:	4c0d      	ldr	r4, [pc, #52]	@ (80068a4 <__libc_init_array+0x3c>)
 800686e:	1b64      	subs	r4, r4, r5
 8006870:	10a4      	asrs	r4, r4, #2
 8006872:	2600      	movs	r6, #0
 8006874:	42a6      	cmp	r6, r4
 8006876:	d109      	bne.n	800688c <__libc_init_array+0x24>
 8006878:	4d0b      	ldr	r5, [pc, #44]	@ (80068a8 <__libc_init_array+0x40>)
 800687a:	4c0c      	ldr	r4, [pc, #48]	@ (80068ac <__libc_init_array+0x44>)
 800687c:	f000 f9d6 	bl	8006c2c <_init>
 8006880:	1b64      	subs	r4, r4, r5
 8006882:	10a4      	asrs	r4, r4, #2
 8006884:	2600      	movs	r6, #0
 8006886:	42a6      	cmp	r6, r4
 8006888:	d105      	bne.n	8006896 <__libc_init_array+0x2e>
 800688a:	bd70      	pop	{r4, r5, r6, pc}
 800688c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006890:	4798      	blx	r3
 8006892:	3601      	adds	r6, #1
 8006894:	e7ee      	b.n	8006874 <__libc_init_array+0xc>
 8006896:	f855 3b04 	ldr.w	r3, [r5], #4
 800689a:	4798      	blx	r3
 800689c:	3601      	adds	r6, #1
 800689e:	e7f2      	b.n	8006886 <__libc_init_array+0x1e>
 80068a0:	08006dc0 	.word	0x08006dc0
 80068a4:	08006dc0 	.word	0x08006dc0
 80068a8:	08006dc0 	.word	0x08006dc0
 80068ac:	08006dc4 	.word	0x08006dc4

080068b0 <atanf>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	ee10 5a10 	vmov	r5, s0
 80068b6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80068ba:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80068be:	eef0 7a40 	vmov.f32	s15, s0
 80068c2:	d30f      	bcc.n	80068e4 <atanf+0x34>
 80068c4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80068c8:	d904      	bls.n	80068d4 <atanf+0x24>
 80068ca:	ee70 7a00 	vadd.f32	s15, s0, s0
 80068ce:	eeb0 0a67 	vmov.f32	s0, s15
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8006a0c <atanf+0x15c>
 80068d8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8006a10 <atanf+0x160>
 80068dc:	2d00      	cmp	r5, #0
 80068de:	fe77 7a27 	vselgt.f32	s15, s14, s15
 80068e2:	e7f4      	b.n	80068ce <atanf+0x1e>
 80068e4:	4b4b      	ldr	r3, [pc, #300]	@ (8006a14 <atanf+0x164>)
 80068e6:	429c      	cmp	r4, r3
 80068e8:	d810      	bhi.n	800690c <atanf+0x5c>
 80068ea:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80068ee:	d20a      	bcs.n	8006906 <atanf+0x56>
 80068f0:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8006a18 <atanf+0x168>
 80068f4:	ee30 7a07 	vadd.f32	s14, s0, s14
 80068f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068fc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006904:	dce3      	bgt.n	80068ce <atanf+0x1e>
 8006906:	f04f 33ff 	mov.w	r3, #4294967295
 800690a:	e013      	b.n	8006934 <atanf+0x84>
 800690c:	f000 f8a4 	bl	8006a58 <fabsf>
 8006910:	4b42      	ldr	r3, [pc, #264]	@ (8006a1c <atanf+0x16c>)
 8006912:	429c      	cmp	r4, r3
 8006914:	d84f      	bhi.n	80069b6 <atanf+0x106>
 8006916:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800691a:	429c      	cmp	r4, r3
 800691c:	d841      	bhi.n	80069a2 <atanf+0xf2>
 800691e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8006922:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006926:	eea0 7a27 	vfma.f32	s14, s0, s15
 800692a:	2300      	movs	r3, #0
 800692c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006930:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800693a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8006a20 <atanf+0x170>
 800693e:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8006a24 <atanf+0x174>
 8006942:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8006a28 <atanf+0x178>
 8006946:	ee66 6a06 	vmul.f32	s13, s12, s12
 800694a:	eee6 5a87 	vfma.f32	s11, s13, s14
 800694e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8006a2c <atanf+0x17c>
 8006952:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006956:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8006a30 <atanf+0x180>
 800695a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800695e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8006a34 <atanf+0x184>
 8006962:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006966:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006a38 <atanf+0x188>
 800696a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800696e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8006a3c <atanf+0x18c>
 8006972:	eea6 5a87 	vfma.f32	s10, s13, s14
 8006976:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8006a40 <atanf+0x190>
 800697a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800697e:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8006a44 <atanf+0x194>
 8006982:	eea7 5a26 	vfma.f32	s10, s14, s13
 8006986:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006a48 <atanf+0x198>
 800698a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800698e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006992:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006996:	ee27 7a87 	vmul.f32	s14, s15, s14
 800699a:	d121      	bne.n	80069e0 <atanf+0x130>
 800699c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069a0:	e795      	b.n	80068ce <atanf+0x1e>
 80069a2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80069a6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80069aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80069ae:	2301      	movs	r3, #1
 80069b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80069b4:	e7be      	b.n	8006934 <atanf+0x84>
 80069b6:	4b25      	ldr	r3, [pc, #148]	@ (8006a4c <atanf+0x19c>)
 80069b8:	429c      	cmp	r4, r3
 80069ba:	d80b      	bhi.n	80069d4 <atanf+0x124>
 80069bc:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80069c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069c4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80069c8:	2302      	movs	r3, #2
 80069ca:	ee70 6a67 	vsub.f32	s13, s0, s15
 80069ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069d2:	e7af      	b.n	8006934 <atanf+0x84>
 80069d4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80069d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80069dc:	2303      	movs	r3, #3
 80069de:	e7a9      	b.n	8006934 <atanf+0x84>
 80069e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a50 <atanf+0x1a0>)
 80069e2:	491c      	ldr	r1, [pc, #112]	@ (8006a54 <atanf+0x1a4>)
 80069e4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80069e8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80069ec:	edd3 6a00 	vldr	s13, [r3]
 80069f0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80069f4:	2d00      	cmp	r5, #0
 80069f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069fa:	edd2 7a00 	vldr	s15, [r2]
 80069fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a02:	bfb8      	it	lt
 8006a04:	eef1 7a67 	vneglt.f32	s15, s15
 8006a08:	e761      	b.n	80068ce <atanf+0x1e>
 8006a0a:	bf00      	nop
 8006a0c:	bfc90fdb 	.word	0xbfc90fdb
 8006a10:	3fc90fdb 	.word	0x3fc90fdb
 8006a14:	3edfffff 	.word	0x3edfffff
 8006a18:	7149f2ca 	.word	0x7149f2ca
 8006a1c:	3f97ffff 	.word	0x3f97ffff
 8006a20:	3c8569d7 	.word	0x3c8569d7
 8006a24:	3d4bda59 	.word	0x3d4bda59
 8006a28:	bd6ef16b 	.word	0xbd6ef16b
 8006a2c:	3d886b35 	.word	0x3d886b35
 8006a30:	3dba2e6e 	.word	0x3dba2e6e
 8006a34:	3e124925 	.word	0x3e124925
 8006a38:	3eaaaaab 	.word	0x3eaaaaab
 8006a3c:	bd15a221 	.word	0xbd15a221
 8006a40:	bd9d8795 	.word	0xbd9d8795
 8006a44:	bde38e38 	.word	0xbde38e38
 8006a48:	be4ccccd 	.word	0xbe4ccccd
 8006a4c:	401bffff 	.word	0x401bffff
 8006a50:	08006c68 	.word	0x08006c68
 8006a54:	08006c58 	.word	0x08006c58

08006a58 <fabsf>:
 8006a58:	ee10 3a10 	vmov	r3, s0
 8006a5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a60:	ee00 3a10 	vmov	s0, r3
 8006a64:	4770      	bx	lr

08006a66 <sinf_poly>:
 8006a66:	07cb      	lsls	r3, r1, #31
 8006a68:	d412      	bmi.n	8006a90 <sinf_poly+0x2a>
 8006a6a:	ee21 5b00 	vmul.f64	d5, d1, d0
 8006a6e:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8006a72:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8006a76:	eea6 7b01 	vfma.f64	d7, d6, d1
 8006a7a:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8006a7e:	ee21 1b05 	vmul.f64	d1, d1, d5
 8006a82:	eea6 0b05 	vfma.f64	d0, d6, d5
 8006a86:	eea7 0b01 	vfma.f64	d0, d7, d1
 8006a8a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006a8e:	4770      	bx	lr
 8006a90:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8006a94:	ee21 5b01 	vmul.f64	d5, d1, d1
 8006a98:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8006a9c:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8006aa0:	eea1 7b06 	vfma.f64	d7, d1, d6
 8006aa4:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8006aa8:	eea1 0b06 	vfma.f64	d0, d1, d6
 8006aac:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8006ab0:	ee21 1b05 	vmul.f64	d1, d1, d5
 8006ab4:	eea5 0b06 	vfma.f64	d0, d5, d6
 8006ab8:	e7e5      	b.n	8006a86 <sinf_poly+0x20>
 8006aba:	0000      	movs	r0, r0
 8006abc:	0000      	movs	r0, r0
	...

08006ac0 <sinf>:
 8006ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ac2:	ee10 4a10 	vmov	r4, s0
 8006ac6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006aca:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8006ace:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8006ad2:	eef0 7a40 	vmov.f32	s15, s0
 8006ad6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8006ada:	d218      	bcs.n	8006b0e <sinf+0x4e>
 8006adc:	ee26 1b06 	vmul.f64	d1, d6, d6
 8006ae0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8006ae4:	d20a      	bcs.n	8006afc <sinf+0x3c>
 8006ae6:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8006aea:	d103      	bne.n	8006af4 <sinf+0x34>
 8006aec:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8006af0:	ed8d 1a01 	vstr	s2, [sp, #4]
 8006af4:	eeb0 0a67 	vmov.f32	s0, s15
 8006af8:	b003      	add	sp, #12
 8006afa:	bd30      	pop	{r4, r5, pc}
 8006afc:	483a      	ldr	r0, [pc, #232]	@ (8006be8 <sinf+0x128>)
 8006afe:	eeb0 0b46 	vmov.f64	d0, d6
 8006b02:	2100      	movs	r1, #0
 8006b04:	b003      	add	sp, #12
 8006b06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b0a:	f7ff bfac 	b.w	8006a66 <sinf_poly>
 8006b0e:	f240 422e 	movw	r2, #1070	@ 0x42e
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d824      	bhi.n	8006b60 <sinf+0xa0>
 8006b16:	4b34      	ldr	r3, [pc, #208]	@ (8006be8 <sinf+0x128>)
 8006b18:	ed93 7b08 	vldr	d7, [r3, #32]
 8006b1c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006b20:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006b24:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8006b28:	ee17 1a90 	vmov	r1, s15
 8006b2c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8006b30:	1609      	asrs	r1, r1, #24
 8006b32:	ee07 1a90 	vmov	s15, r1
 8006b36:	f001 0203 	and.w	r2, r1, #3
 8006b3a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006b3e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006b42:	ed92 0b00 	vldr	d0, [r2]
 8006b46:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8006b4a:	f011 0f02 	tst.w	r1, #2
 8006b4e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8006b52:	bf08      	it	eq
 8006b54:	4618      	moveq	r0, r3
 8006b56:	ee26 1b06 	vmul.f64	d1, d6, d6
 8006b5a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8006b5e:	e7d1      	b.n	8006b04 <sinf+0x44>
 8006b60:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8006b64:	d237      	bcs.n	8006bd6 <sinf+0x116>
 8006b66:	4921      	ldr	r1, [pc, #132]	@ (8006bec <sinf+0x12c>)
 8006b68:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8006b6c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8006b70:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8006b74:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8006b78:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006b7c:	6a10      	ldr	r0, [r2, #32]
 8006b7e:	6912      	ldr	r2, [r2, #16]
 8006b80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006b84:	40ab      	lsls	r3, r5
 8006b86:	fba0 5003 	umull	r5, r0, r0, r3
 8006b8a:	4359      	muls	r1, r3
 8006b8c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8006b90:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8006b94:	0f9d      	lsrs	r5, r3, #30
 8006b96:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006b9a:	1ac9      	subs	r1, r1, r3
 8006b9c:	f7f9 fcda 	bl	8000554 <__aeabi_l2d>
 8006ba0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8006ba4:	4b10      	ldr	r3, [pc, #64]	@ (8006be8 <sinf+0x128>)
 8006ba6:	f004 0203 	and.w	r2, r4, #3
 8006baa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006bae:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8006be0 <sinf+0x120>
 8006bb2:	ed92 0b00 	vldr	d0, [r2]
 8006bb6:	ec41 0b17 	vmov	d7, r0, r1
 8006bba:	f014 0f02 	tst.w	r4, #2
 8006bbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006bc2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	bf08      	it	eq
 8006bca:	4618      	moveq	r0, r3
 8006bcc:	ee27 1b07 	vmul.f64	d1, d7, d7
 8006bd0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006bd4:	e796      	b.n	8006b04 <sinf+0x44>
 8006bd6:	b003      	add	sp, #12
 8006bd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bdc:	f000 b816 	b.w	8006c0c <__math_invalidf>
 8006be0:	54442d18 	.word	0x54442d18
 8006be4:	3c1921fb 	.word	0x3c1921fb
 8006be8:	08006cd8 	.word	0x08006cd8
 8006bec:	08006c78 	.word	0x08006c78

08006bf0 <with_errnof>:
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	ed2d 8b02 	vpush	{d8}
 8006bf6:	eeb0 8a40 	vmov.f32	s16, s0
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	f7ff fe2e 	bl	800685c <__errno>
 8006c00:	eeb0 0a48 	vmov.f32	s0, s16
 8006c04:	ecbd 8b02 	vpop	{d8}
 8006c08:	6004      	str	r4, [r0, #0]
 8006c0a:	bd10      	pop	{r4, pc}

08006c0c <__math_invalidf>:
 8006c0c:	eef0 7a40 	vmov.f32	s15, s0
 8006c10:	ee30 7a40 	vsub.f32	s14, s0, s0
 8006c14:	eef4 7a67 	vcmp.f32	s15, s15
 8006c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c1c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8006c20:	d602      	bvs.n	8006c28 <__math_invalidf+0x1c>
 8006c22:	2021      	movs	r0, #33	@ 0x21
 8006c24:	f7ff bfe4 	b.w	8006bf0 <with_errnof>
 8006c28:	4770      	bx	lr
	...

08006c2c <_init>:
 8006c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2e:	bf00      	nop
 8006c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c32:	bc08      	pop	{r3}
 8006c34:	469e      	mov	lr, r3
 8006c36:	4770      	bx	lr

08006c38 <_fini>:
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	bf00      	nop
 8006c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3e:	bc08      	pop	{r3}
 8006c40:	469e      	mov	lr, r3
 8006c42:	4770      	bx	lr

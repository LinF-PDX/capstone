
profileograph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006374  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006570  08006570  00007570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066e0  080066e0  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  080066e0  080066e0  000076e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066e8  080066e8  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066e8  080066e8  000076e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066ec  080066ec  000076ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080066f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000060  08006750  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08006750  00008450  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b43  00000000  00000000  0000808e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002903  00000000  00000000  00018bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001b4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc7  00000000  00000000  0001c410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290e0  00000000  00000000  0001cfd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fb5  00000000  00000000  000460b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001005ab  00000000  00000000  0005906c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159617  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b0  00000000  00000000  0015965c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0015d90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000060 	.word	0x20000060
 8000214:	00000000 	.word	0x00000000
 8000218:	08006554 	.word	0x08006554

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000064 	.word	0x20000064
 8000234:	08006554 	.word	0x08006554

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_uldivmod>:
 80005b0:	b953      	cbnz	r3, 80005c8 <__aeabi_uldivmod+0x18>
 80005b2:	b94a      	cbnz	r2, 80005c8 <__aeabi_uldivmod+0x18>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	bf08      	it	eq
 80005b8:	2800      	cmpeq	r0, #0
 80005ba:	bf1c      	itt	ne
 80005bc:	f04f 31ff 	movne.w	r1, #4294967295
 80005c0:	f04f 30ff 	movne.w	r0, #4294967295
 80005c4:	f000 b96a 	b.w	800089c <__aeabi_idiv0>
 80005c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d0:	f000 f806 	bl	80005e0 <__udivmoddi4>
 80005d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005dc:	b004      	add	sp, #16
 80005de:	4770      	bx	lr

080005e0 <__udivmoddi4>:
 80005e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e4:	9d08      	ldr	r5, [sp, #32]
 80005e6:	460c      	mov	r4, r1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d14e      	bne.n	800068a <__udivmoddi4+0xaa>
 80005ec:	4694      	mov	ip, r2
 80005ee:	458c      	cmp	ip, r1
 80005f0:	4686      	mov	lr, r0
 80005f2:	fab2 f282 	clz	r2, r2
 80005f6:	d962      	bls.n	80006be <__udivmoddi4+0xde>
 80005f8:	b14a      	cbz	r2, 800060e <__udivmoddi4+0x2e>
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	4091      	lsls	r1, r2
 8000600:	fa20 f303 	lsr.w	r3, r0, r3
 8000604:	fa0c fc02 	lsl.w	ip, ip, r2
 8000608:	4319      	orrs	r1, r3
 800060a:	fa00 fe02 	lsl.w	lr, r0, r2
 800060e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000612:	fa1f f68c 	uxth.w	r6, ip
 8000616:	fbb1 f4f7 	udiv	r4, r1, r7
 800061a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800061e:	fb07 1114 	mls	r1, r7, r4, r1
 8000622:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000626:	fb04 f106 	mul.w	r1, r4, r6
 800062a:	4299      	cmp	r1, r3
 800062c:	d90a      	bls.n	8000644 <__udivmoddi4+0x64>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f104 30ff 	add.w	r0, r4, #4294967295
 8000636:	f080 8112 	bcs.w	800085e <__udivmoddi4+0x27e>
 800063a:	4299      	cmp	r1, r3
 800063c:	f240 810f 	bls.w	800085e <__udivmoddi4+0x27e>
 8000640:	3c02      	subs	r4, #2
 8000642:	4463      	add	r3, ip
 8000644:	1a59      	subs	r1, r3, r1
 8000646:	fa1f f38e 	uxth.w	r3, lr
 800064a:	fbb1 f0f7 	udiv	r0, r1, r7
 800064e:	fb07 1110 	mls	r1, r7, r0, r1
 8000652:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000656:	fb00 f606 	mul.w	r6, r0, r6
 800065a:	429e      	cmp	r6, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x94>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 31ff 	add.w	r1, r0, #4294967295
 8000666:	f080 80fc 	bcs.w	8000862 <__udivmoddi4+0x282>
 800066a:	429e      	cmp	r6, r3
 800066c:	f240 80f9 	bls.w	8000862 <__udivmoddi4+0x282>
 8000670:	4463      	add	r3, ip
 8000672:	3802      	subs	r0, #2
 8000674:	1b9b      	subs	r3, r3, r6
 8000676:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800067a:	2100      	movs	r1, #0
 800067c:	b11d      	cbz	r5, 8000686 <__udivmoddi4+0xa6>
 800067e:	40d3      	lsrs	r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	e9c5 3200 	strd	r3, r2, [r5]
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	428b      	cmp	r3, r1
 800068c:	d905      	bls.n	800069a <__udivmoddi4+0xba>
 800068e:	b10d      	cbz	r5, 8000694 <__udivmoddi4+0xb4>
 8000690:	e9c5 0100 	strd	r0, r1, [r5]
 8000694:	2100      	movs	r1, #0
 8000696:	4608      	mov	r0, r1
 8000698:	e7f5      	b.n	8000686 <__udivmoddi4+0xa6>
 800069a:	fab3 f183 	clz	r1, r3
 800069e:	2900      	cmp	r1, #0
 80006a0:	d146      	bne.n	8000730 <__udivmoddi4+0x150>
 80006a2:	42a3      	cmp	r3, r4
 80006a4:	d302      	bcc.n	80006ac <__udivmoddi4+0xcc>
 80006a6:	4290      	cmp	r0, r2
 80006a8:	f0c0 80f0 	bcc.w	800088c <__udivmoddi4+0x2ac>
 80006ac:	1a86      	subs	r6, r0, r2
 80006ae:	eb64 0303 	sbc.w	r3, r4, r3
 80006b2:	2001      	movs	r0, #1
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d0e6      	beq.n	8000686 <__udivmoddi4+0xa6>
 80006b8:	e9c5 6300 	strd	r6, r3, [r5]
 80006bc:	e7e3      	b.n	8000686 <__udivmoddi4+0xa6>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	f040 8090 	bne.w	80007e4 <__udivmoddi4+0x204>
 80006c4:	eba1 040c 	sub.w	r4, r1, ip
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	fa1f f78c 	uxth.w	r7, ip
 80006d0:	2101      	movs	r1, #1
 80006d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80006d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006da:	fb08 4416 	mls	r4, r8, r6, r4
 80006de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006e2:	fb07 f006 	mul.w	r0, r7, r6
 80006e6:	4298      	cmp	r0, r3
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x11c>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80006f2:	d202      	bcs.n	80006fa <__udivmoddi4+0x11a>
 80006f4:	4298      	cmp	r0, r3
 80006f6:	f200 80cd 	bhi.w	8000894 <__udivmoddi4+0x2b4>
 80006fa:	4626      	mov	r6, r4
 80006fc:	1a1c      	subs	r4, r3, r0
 80006fe:	fa1f f38e 	uxth.w	r3, lr
 8000702:	fbb4 f0f8 	udiv	r0, r4, r8
 8000706:	fb08 4410 	mls	r4, r8, r0, r4
 800070a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800070e:	fb00 f707 	mul.w	r7, r0, r7
 8000712:	429f      	cmp	r7, r3
 8000714:	d908      	bls.n	8000728 <__udivmoddi4+0x148>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 34ff 	add.w	r4, r0, #4294967295
 800071e:	d202      	bcs.n	8000726 <__udivmoddi4+0x146>
 8000720:	429f      	cmp	r7, r3
 8000722:	f200 80b0 	bhi.w	8000886 <__udivmoddi4+0x2a6>
 8000726:	4620      	mov	r0, r4
 8000728:	1bdb      	subs	r3, r3, r7
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	e7a5      	b.n	800067c <__udivmoddi4+0x9c>
 8000730:	f1c1 0620 	rsb	r6, r1, #32
 8000734:	408b      	lsls	r3, r1
 8000736:	fa22 f706 	lsr.w	r7, r2, r6
 800073a:	431f      	orrs	r7, r3
 800073c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000740:	fa04 f301 	lsl.w	r3, r4, r1
 8000744:	ea43 030c 	orr.w	r3, r3, ip
 8000748:	40f4      	lsrs	r4, r6
 800074a:	fa00 f801 	lsl.w	r8, r0, r1
 800074e:	0c38      	lsrs	r0, r7, #16
 8000750:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000754:	fbb4 fef0 	udiv	lr, r4, r0
 8000758:	fa1f fc87 	uxth.w	ip, r7
 800075c:	fb00 441e 	mls	r4, r0, lr, r4
 8000760:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000764:	fb0e f90c 	mul.w	r9, lr, ip
 8000768:	45a1      	cmp	r9, r4
 800076a:	fa02 f201 	lsl.w	r2, r2, r1
 800076e:	d90a      	bls.n	8000786 <__udivmoddi4+0x1a6>
 8000770:	193c      	adds	r4, r7, r4
 8000772:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000776:	f080 8084 	bcs.w	8000882 <__udivmoddi4+0x2a2>
 800077a:	45a1      	cmp	r9, r4
 800077c:	f240 8081 	bls.w	8000882 <__udivmoddi4+0x2a2>
 8000780:	f1ae 0e02 	sub.w	lr, lr, #2
 8000784:	443c      	add	r4, r7
 8000786:	eba4 0409 	sub.w	r4, r4, r9
 800078a:	fa1f f983 	uxth.w	r9, r3
 800078e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000792:	fb00 4413 	mls	r4, r0, r3, r4
 8000796:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079a:	fb03 fc0c 	mul.w	ip, r3, ip
 800079e:	45a4      	cmp	ip, r4
 80007a0:	d907      	bls.n	80007b2 <__udivmoddi4+0x1d2>
 80007a2:	193c      	adds	r4, r7, r4
 80007a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80007a8:	d267      	bcs.n	800087a <__udivmoddi4+0x29a>
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d965      	bls.n	800087a <__udivmoddi4+0x29a>
 80007ae:	3b02      	subs	r3, #2
 80007b0:	443c      	add	r4, r7
 80007b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007b6:	fba0 9302 	umull	r9, r3, r0, r2
 80007ba:	eba4 040c 	sub.w	r4, r4, ip
 80007be:	429c      	cmp	r4, r3
 80007c0:	46ce      	mov	lr, r9
 80007c2:	469c      	mov	ip, r3
 80007c4:	d351      	bcc.n	800086a <__udivmoddi4+0x28a>
 80007c6:	d04e      	beq.n	8000866 <__udivmoddi4+0x286>
 80007c8:	b155      	cbz	r5, 80007e0 <__udivmoddi4+0x200>
 80007ca:	ebb8 030e 	subs.w	r3, r8, lr
 80007ce:	eb64 040c 	sbc.w	r4, r4, ip
 80007d2:	fa04 f606 	lsl.w	r6, r4, r6
 80007d6:	40cb      	lsrs	r3, r1
 80007d8:	431e      	orrs	r6, r3
 80007da:	40cc      	lsrs	r4, r1
 80007dc:	e9c5 6400 	strd	r6, r4, [r5]
 80007e0:	2100      	movs	r1, #0
 80007e2:	e750      	b.n	8000686 <__udivmoddi4+0xa6>
 80007e4:	f1c2 0320 	rsb	r3, r2, #32
 80007e8:	fa20 f103 	lsr.w	r1, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	fa24 f303 	lsr.w	r3, r4, r3
 80007f4:	4094      	lsls	r4, r2
 80007f6:	430c      	orrs	r4, r1
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000800:	fa1f f78c 	uxth.w	r7, ip
 8000804:	fbb3 f0f8 	udiv	r0, r3, r8
 8000808:	fb08 3110 	mls	r1, r8, r0, r3
 800080c:	0c23      	lsrs	r3, r4, #16
 800080e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000812:	fb00 f107 	mul.w	r1, r0, r7
 8000816:	4299      	cmp	r1, r3
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x24c>
 800081a:	eb1c 0303 	adds.w	r3, ip, r3
 800081e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000822:	d22c      	bcs.n	800087e <__udivmoddi4+0x29e>
 8000824:	4299      	cmp	r1, r3
 8000826:	d92a      	bls.n	800087e <__udivmoddi4+0x29e>
 8000828:	3802      	subs	r0, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f1f8 	udiv	r1, r3, r8
 8000834:	fb08 3311 	mls	r3, r8, r1, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb01 f307 	mul.w	r3, r1, r7
 8000840:	42a3      	cmp	r3, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x276>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f101 36ff 	add.w	r6, r1, #4294967295
 800084c:	d213      	bcs.n	8000876 <__udivmoddi4+0x296>
 800084e:	42a3      	cmp	r3, r4
 8000850:	d911      	bls.n	8000876 <__udivmoddi4+0x296>
 8000852:	3902      	subs	r1, #2
 8000854:	4464      	add	r4, ip
 8000856:	1ae4      	subs	r4, r4, r3
 8000858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800085c:	e739      	b.n	80006d2 <__udivmoddi4+0xf2>
 800085e:	4604      	mov	r4, r0
 8000860:	e6f0      	b.n	8000644 <__udivmoddi4+0x64>
 8000862:	4608      	mov	r0, r1
 8000864:	e706      	b.n	8000674 <__udivmoddi4+0x94>
 8000866:	45c8      	cmp	r8, r9
 8000868:	d2ae      	bcs.n	80007c8 <__udivmoddi4+0x1e8>
 800086a:	ebb9 0e02 	subs.w	lr, r9, r2
 800086e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000872:	3801      	subs	r0, #1
 8000874:	e7a8      	b.n	80007c8 <__udivmoddi4+0x1e8>
 8000876:	4631      	mov	r1, r6
 8000878:	e7ed      	b.n	8000856 <__udivmoddi4+0x276>
 800087a:	4603      	mov	r3, r0
 800087c:	e799      	b.n	80007b2 <__udivmoddi4+0x1d2>
 800087e:	4630      	mov	r0, r6
 8000880:	e7d4      	b.n	800082c <__udivmoddi4+0x24c>
 8000882:	46d6      	mov	lr, sl
 8000884:	e77f      	b.n	8000786 <__udivmoddi4+0x1a6>
 8000886:	4463      	add	r3, ip
 8000888:	3802      	subs	r0, #2
 800088a:	e74d      	b.n	8000728 <__udivmoddi4+0x148>
 800088c:	4606      	mov	r6, r0
 800088e:	4623      	mov	r3, r4
 8000890:	4608      	mov	r0, r1
 8000892:	e70f      	b.n	80006b4 <__udivmoddi4+0xd4>
 8000894:	3e02      	subs	r6, #2
 8000896:	4463      	add	r3, ip
 8000898:	e730      	b.n	80006fc <__udivmoddi4+0x11c>
 800089a:	bf00      	nop

0800089c <__aeabi_idiv0>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <writeRegister>:
 * @param num Number of bytes to be written
 * @retval none
 * @note Since the register values to be written are 8-bit, there is no need to multiple writing
 */
static void writeRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	4613      	mov	r3, r2
 80008ae:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80008b4:	d901      	bls.n	80008ba <writeRegister+0x1a>
		address = 63;
 80008b6:	233f      	movs	r3, #63	@ 0x3f
 80008b8:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
		address = (address << 1 & ~0x01);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2104      	movs	r1, #4
 80008c6:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <writeRegister+0x58>)
 80008c8:	f002 fe68 	bl	800359c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 80008cc:	1df9      	adds	r1, r7, #7
 80008ce:	230a      	movs	r3, #10
 80008d0:	2201      	movs	r2, #1
 80008d2:	480a      	ldr	r0, [pc, #40]	@ (80008fc <writeRegister+0x5c>)
 80008d4:	f003 fba1 	bl	800401a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,value,num,10);
 80008d8:	79bb      	ldrb	r3, [r7, #6]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	230a      	movs	r3, #10
 80008de:	6839      	ldr	r1, [r7, #0]
 80008e0:	4806      	ldr	r0, [pc, #24]	@ (80008fc <writeRegister+0x5c>)
 80008e2:	f003 fb9a 	bl	800401a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2104      	movs	r1, #4
 80008ea:	4803      	ldr	r0, [pc, #12]	@ (80008f8 <writeRegister+0x58>)
 80008ec:	f002 fe56 	bl	800359c <HAL_GPIO_WritePin>
	

}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40020c00 	.word	0x40020c00
 80008fc:	20000180 	.word	0x20000180

08000900 <readRegister>:
 *	@param value Pointer to buffer that stores the read value
 *	@param num Number of bytes to be written
 * 	@retval none
 */
static void readRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b3f      	cmp	r3, #63	@ 0x3f
 8000914:	d901      	bls.n	800091a <readRegister+0x1a>
		address = 63;
 8000916:	233f      	movs	r3, #63	@ 0x3f
 8000918:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
		address = (address << 1 | 0x01);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	b25b      	sxtb	r3, r3
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	b25b      	sxtb	r3, r3
 8000926:	b2db      	uxtb	r3, r3
 8000928:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2104      	movs	r1, #4
 800092e:	480c      	ldr	r0, [pc, #48]	@ (8000960 <readRegister+0x60>)
 8000930:	f002 fe34 	bl	800359c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000934:	1df9      	adds	r1, r7, #7
 8000936:	230a      	movs	r3, #10
 8000938:	2201      	movs	r2, #1
 800093a:	480a      	ldr	r0, [pc, #40]	@ (8000964 <readRegister+0x64>)
 800093c:	f003 fb6d 	bl	800401a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	b29a      	uxth	r2, r3
 8000944:	230a      	movs	r3, #10
 8000946:	6839      	ldr	r1, [r7, #0]
 8000948:	4806      	ldr	r0, [pc, #24]	@ (8000964 <readRegister+0x64>)
 800094a:	f003 fcdb 	bl	8004304 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2104      	movs	r1, #4
 8000952:	4803      	ldr	r0, [pc, #12]	@ (8000960 <readRegister+0x60>)
 8000954:	f002 fe22 	bl	800359c <HAL_GPIO_WritePin>
	
	
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40020c00 	.word	0x40020c00
 8000964:	20000180 	.word	0x20000180

08000968 <adxlFormat>:
						2 		|  				+-8g		
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	uint8_t formatreg=0;
 8000970:	2300      	movs	r3, #0
 8000972:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1); //Set register to 0
 8000974:	f107 030f 	add.w	r3, r7, #15
 8000978:	2201      	movs	r2, #1
 800097a:	4619      	mov	r1, r3
 800097c:	202c      	movs	r0, #44	@ 0x2c
 800097e:	f7ff ff8f 	bl	80008a0 <writeRegister>
	formatreg = (adxl->IntMode << 6 | adxl->Range) & RANGE_REG_MASK;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	78db      	ldrb	r3, [r3, #3]
 8000986:	019b      	lsls	r3, r3, #6
 8000988:	b25a      	sxtb	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	791b      	ldrb	r3, [r3, #4]
 800098e:	b25b      	sxtb	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b25b      	sxtb	r3, r3
 8000994:	b2db      	uxtb	r3, r3
 8000996:	f003 0343 	and.w	r3, r3, #67	@ 0x43
 800099a:	b2db      	uxtb	r3, r3
 800099c:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1);
 800099e:	f107 030f 	add.w	r3, r7, #15
 80009a2:	2201      	movs	r2, #1
 80009a4:	4619      	mov	r1, r3
 80009a6:	202c      	movs	r0, #44	@ 0x2c
 80009a8:	f7ff ff7a 	bl	80008a0 <writeRegister>

	formatreg = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg,1);
 80009b0:	f107 030f 	add.w	r3, r7, #15
 80009b4:	2201      	movs	r2, #1
 80009b6:	4619      	mov	r1, r3
 80009b8:	202d      	movs	r0, #45	@ 0x2d
 80009ba:	f7ff ff71 	bl	80008a0 <writeRegister>
	formatreg = (adxl->DataReadyMode << 2 | adxl->TempMode << 1 | adxl->StandbyMode) & POWER_CTL_REG_MASK;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	789b      	ldrb	r3, [r3, #2]
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	b25a      	sxtb	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	785b      	ldrb	r3, [r3, #1]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	4313      	orrs	r3, r2
 80009d0:	b25a      	sxtb	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	4313      	orrs	r3, r2
 80009da:	b25b      	sxtb	r3, r3
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg, 1);
 80009e6:	f107 030f 	add.w	r3, r7, #15
 80009ea:	2201      	movs	r2, #1
 80009ec:	4619      	mov	r1, r3
 80009ee:	202d      	movs	r0, #45	@ 0x2d
 80009f0:	f7ff ff56 	bl	80008a0 <writeRegister>
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <adxlReset>:

/**
 * @brief Call to reset ADXL355
 */
static void adxlReset(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
    uint8_t shadow_reg_store[5] = {};
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	2300      	movs	r3, #0
 8000a08:	753b      	strb	r3, [r7, #20]
    uint8_t shadow_reg_read[5] = {};
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	733b      	strb	r3, [r7, #12]
    uint8_t reset_write = ADXL_RESET_WRITE;
 8000a12:	2352      	movs	r3, #82	@ 0x52
 8000a14:	71fb      	strb	r3, [r7, #7]
    //Store values from shadow registers
    readRegister(SHADOW_REG1, shadow_reg_store, 5);
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	2205      	movs	r2, #5
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	2050      	movs	r0, #80	@ 0x50
 8000a20:	f7ff ff6e 	bl	8000900 <readRegister>
    while (1) {
        //Perform a software reset
        writeRegister(ADXL_RESET, &reset_write, 1);
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	2201      	movs	r2, #1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	202f      	movs	r0, #47	@ 0x2f
 8000a2c:	f7ff ff38 	bl	80008a0 <writeRegister>
        //Read shadow registers after reset
        readRegister(SHADOW_REG1, shadow_reg_read, 5);
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	2205      	movs	r2, #5
 8000a36:	4619      	mov	r1, r3
 8000a38:	2050      	movs	r0, #80	@ 0x50
 8000a3a:	f7ff ff61 	bl	8000900 <readRegister>
        // Check if shadow registers match the stored values
        uint8_t match = 1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	77fb      	strb	r3, [r7, #31]
        for (int i = 0; i < 5; i++) {
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
 8000a46:	e011      	b.n	8000a6c <adxlReset+0x70>
            if (shadow_reg_read[i] != shadow_reg_store[i]) {
 8000a48:	f107 0208 	add.w	r2, r7, #8
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	4413      	add	r3, r2
 8000a50:	781a      	ldrb	r2, [r3, #0]
 8000a52:	f107 0110 	add.w	r1, r7, #16
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	440b      	add	r3, r1
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d002      	beq.n	8000a66 <adxlReset+0x6a>
                match = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	77fb      	strb	r3, [r7, #31]
                break;
 8000a64:	e005      	b.n	8000a72 <adxlReset+0x76>
        for (int i = 0; i < 5; i++) {
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	ddea      	ble.n	8000a48 <adxlReset+0x4c>
            }
        }
        // If all shadow registers match, exit the loop
        if (match) break;
 8000a72:	7ffb      	ldrb	r3, [r7, #31]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d100      	bne.n	8000a7a <adxlReset+0x7e>
    while (1) {
 8000a78:	e7d4      	b.n	8000a24 <adxlReset+0x28>
        if (match) break;
 8000a7a:	bf00      	nop
    }
}
 8000a7c:	bf00      	nop
 8000a7e:	3720      	adds	r7, #32
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2104      	movs	r1, #4
 8000a90:	482d      	ldr	r0, [pc, #180]	@ (8000b48 <ADXL_Init+0xc4>)
 8000a92:	f002 fd83 	bl	800359c <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f001 f996 	bl	8001dc8 <HAL_Delay>
	//Reset device
	adxlReset();
 8000a9c:	f7ff ffae 	bl	80009fc <adxlReset>
	uint8_t testval[2] = {};
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	81bb      	strh	r3, [r7, #12]
	// The Device Address register is constant, i.e. = 0xAD
	readRegister(DEVID_AD, testval, 2);
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	4619      	mov	r1, r3
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff ff27 	bl	8000900 <readRegister>
	if (testval[0] != DEVID_AD_DEFAULT_VAL || testval[1] != DEVID_MST_DEFAULT_VAL) return ADXL_ERR;
 8000ab2:	7b3b      	ldrb	r3, [r7, #12]
 8000ab4:	2bad      	cmp	r3, #173	@ 0xad
 8000ab6:	d102      	bne.n	8000abe <ADXL_Init+0x3a>
 8000ab8:	7b7b      	ldrb	r3, [r7, #13]
 8000aba:	2b1d      	cmp	r3, #29
 8000abc:	d001      	beq.n	8000ac2 <ADXL_Init+0x3e>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e03d      	b.n	8000b3e <ADXL_Init+0xba>

	//Init of BW_RATE and DATAFORMAT registers
	adxlFormat(adxl);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ff50 	bl	8000968 <adxlFormat>
	
	// Settings gains 
	switch (adxl->Range) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	791b      	ldrb	r3, [r3, #4]
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d01e      	beq.n	8000b0e <ADXL_Init+0x8a>
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	dc28      	bgt.n	8000b26 <ADXL_Init+0xa2>
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d002      	beq.n	8000ade <ADXL_Init+0x5a>
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d00c      	beq.n	8000af6 <ADXL_Init+0x72>
 8000adc:	e023      	b.n	8000b26 <ADXL_Init+0xa2>
		case ADXL_RANGE_2G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <ADXL_Init+0xc8>)
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b50 <ADXL_Init+0xcc>)
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <ADXL_Init+0xc8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8000b54 <ADXL_Init+0xd0>)
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <ADXL_Init+0xd0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <ADXL_Init+0xd4>)
 8000af2:	6013      	str	r3, [r2, #0]
			break;
 8000af4:	e022      	b.n	8000b3c <ADXL_Init+0xb8>
		case ADXL_RANGE_4G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_4G;
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <ADXL_Init+0xc8>)
 8000af8:	4a18      	ldr	r2, [pc, #96]	@ (8000b5c <ADXL_Init+0xd8>)
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <ADXL_Init+0xc8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a13      	ldr	r2, [pc, #76]	@ (8000b58 <ADXL_Init+0xd4>)
 8000b0a:	6013      	str	r3, [r2, #0]
			break;
 8000b0c:	e016      	b.n	8000b3c <ADXL_Init+0xb8>
		case ADXL_RANGE_8G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_8G;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <ADXL_Init+0xc8>)
 8000b10:	4a13      	ldr	r2, [pc, #76]	@ (8000b60 <ADXL_Init+0xdc>)
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <ADXL_Init+0xc8>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <ADXL_Init+0xd4>)
 8000b22:	6013      	str	r3, [r2, #0]
			break;
 8000b24:	e00a      	b.n	8000b3c <ADXL_Init+0xb8>
		default:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <ADXL_Init+0xc8>)
 8000b28:	4a09      	ldr	r2, [pc, #36]	@ (8000b50 <ADXL_Init+0xcc>)
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <ADXL_Init+0xc8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <ADXL_Init+0xd4>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
			
	return ADXL_OK;
 8000b3c:	2300      	movs	r3, #0
	
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	20000084 	.word	0x20000084
 8000b50:	36831049 	.word	0x36831049
 8000b54:	20000080 	.word	0x20000080
 8000b58:	2000007c 	.word	0x2000007c
 8000b5c:	37031494 	.word	0x37031494
 8000b60:	3783126f 	.word	0x3783126f

08000b64 <ADXL_getAccelRaw>:
 * @brief Read accelerometer data in all 3 axis
 * @param[out] Data	pointer to buffer that stores the 3 axis acceleration value
 * @retval none
 */
void ADXL_getAccelRaw(void *Data)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    uint8_t data[9] = {};
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	711a      	strb	r2, [r3, #4]
    readRegister(XDATA3, data, 9);
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2209      	movs	r2, #9
 8000b80:	4619      	mov	r1, r3
 8000b82:	2008      	movs	r0, #8
 8000b84:	f7ff febc 	bl	8000900 <readRegister>

	int32_t *acc = Data;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	617b      	str	r3, [r7, #20]

	// Two's Complement 20-bit conversion
	acc[0] = (int32_t)((data[0] << 12) | (data[1] << 4) | (data[2] >> 4));
 8000b8c:	7a3b      	ldrb	r3, [r7, #8]
 8000b8e:	031a      	lsls	r2, r3, #12
 8000b90:	7a7b      	ldrb	r3, [r7, #9]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	4313      	orrs	r3, r2
 8000b96:	7aba      	ldrb	r2, [r7, #10]
 8000b98:	0912      	lsrs	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	601a      	str	r2, [r3, #0]
	acc[1] = (int32_t)((data[3] << 12) | (data[4] << 4) | (data[5] >> 4));
 8000ba2:	7afb      	ldrb	r3, [r7, #11]
 8000ba4:	031a      	lsls	r2, r3, #12
 8000ba6:	7b3b      	ldrb	r3, [r7, #12]
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	431a      	orrs	r2, r3
 8000bac:	7b7b      	ldrb	r3, [r7, #13]
 8000bae:	091b      	lsrs	r3, r3, #4
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
	acc[2] = (int32_t)((data[6] << 12) | (data[7] << 4) | (data[8] >> 4));
 8000bbc:	7bbb      	ldrb	r3, [r7, #14]
 8000bbe:	031a      	lsls	r2, r3, #12
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	011b      	lsls	r3, r3, #4
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	7c3b      	ldrb	r3, [r7, #16]
 8000bc8:	091b      	lsrs	r3, r3, #4
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4619      	mov	r1, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]

	// Sign extension for 20-bit values
	if (acc[0] & 0x80000) acc[0] |= 0xFFF00000;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d007      	beq.n	8000bf2 <ADXL_getAccelRaw+0x8e>
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <ADXL_getAccelRaw+0xd8>)
 8000bea:	4313      	orrs	r3, r2
 8000bec:	461a      	mov	r2, r3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	601a      	str	r2, [r3, #0]
	if (acc[1] & 0x80000) acc[1] |= 0xFFF00000;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d008      	beq.n	8000c12 <ADXL_getAccelRaw+0xae>
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	3304      	adds	r3, #4
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <ADXL_getAccelRaw+0xd8>)
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	3204      	adds	r2, #4
 8000c10:	6013      	str	r3, [r2, #0]
	if (acc[2] & 0x80000) acc[2] |= 0xFFF00000;
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3308      	adds	r3, #8
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d008      	beq.n	8000c32 <ADXL_getAccelRaw+0xce>
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	3308      	adds	r3, #8
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <ADXL_getAccelRaw+0xd8>)
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	3208      	adds	r2, #8
 8000c30:	6013      	str	r3, [r2, #0]
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	fff00000 	.word	0xfff00000

08000c40 <ADXL_getAccelFloat>:
/**
 * @brief Read accelerometer data and convert it to float
 * @param pData Pointer to buffer that stores acceleration value
 * @retval none
 */
void ADXL_getAccelFloat(void *pData) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	int32_t rawdata[3] = {};
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
	float *dataout = pData;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	617b      	str	r3, [r7, #20]
	ADXL_getAccelRaw(rawdata);
 8000c58:	f107 0308 	add.w	r3, r7, #8
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff81 	bl	8000b64 <ADXL_getAccelRaw>

	//Convert raw data to float
	dataout[0] = (float)rawdata[0] * GAINX;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	ee07 3a90 	vmov	s15, r3
 8000c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <ADXL_getAccelFloat+0x7c>)
 8000c6e:	edd3 7a00 	vldr	s15, [r3]
 8000c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	edc3 7a00 	vstr	s15, [r3]
	dataout[1] = (float)rawdata[1] * GAINY;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <ADXL_getAccelFloat+0x80>)
 8000c88:	edd3 7a00 	vldr	s15, [r3]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3304      	adds	r3, #4
 8000c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c94:	edc3 7a00 	vstr	s15, [r3]
	dataout[2] = (float)rawdata[2] * GAINZ;
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	ee07 3a90 	vmov	s15, r3
 8000c9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ca2:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <ADXL_getAccelFloat+0x84>)
 8000ca4:	edd3 7a00 	vldr	s15, [r3]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3308      	adds	r3, #8
 8000cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb0:	edc3 7a00 	vstr	s15, [r3]
}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000007c 	.word	0x2000007c
 8000cc0:	20000080 	.word	0x20000080
 8000cc4:	20000084 	.word	0x20000084

08000cc8 <ADXL_Measure>:
/** Starts Measure Mode
* @param: s = ON or OFF				

*/
void ADXL_Measure(Switch s)
		{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 8000cd2:	f107 030f 	add.w	r3, r7, #15
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4619      	mov	r1, r3
 8000cda:	202d      	movs	r0, #45	@ 0x2d
 8000cdc:	f7ff fe10 	bl	8000900 <readRegister>
			switch (s) {
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d002      	beq.n	8000cec <ADXL_Measure+0x24>
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d012      	beq.n	8000d10 <ADXL_Measure+0x48>
				case OFF:
				reg &= ~(1<<3);
				writeRegister(POWER_CTL,&reg,1);
				break;				
				}
		}
 8000cea:	e01e      	b.n	8000d2a <ADXL_Measure+0x62>
				reg &= ~(1<<2);
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	f023 0304 	bic.w	r3, r3, #4
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	73fb      	strb	r3, [r7, #15]
				reg |= (1<<3);
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,&reg,1);
 8000d00:	f107 030f 	add.w	r3, r7, #15
 8000d04:	2201      	movs	r2, #1
 8000d06:	4619      	mov	r1, r3
 8000d08:	202d      	movs	r0, #45	@ 0x2d
 8000d0a:	f7ff fdc9 	bl	80008a0 <writeRegister>
				break;
 8000d0e:	e00c      	b.n	8000d2a <ADXL_Measure+0x62>
				reg &= ~(1<<3);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	f023 0308 	bic.w	r3, r3, #8
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,&reg,1);
 8000d1a:	f107 030f 	add.w	r3, r7, #15
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4619      	mov	r1, r3
 8000d22:	202d      	movs	r0, #45	@ 0x2d
 8000d24:	f7ff fdbc 	bl	80008a0 <writeRegister>
				break;				
 8000d28:	bf00      	nop
		}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d46:	4b21      	ldr	r3, [pc, #132]	@ (8000dcc <MX_ADC1_Init+0x98>)
 8000d48:	4a21      	ldr	r2, [pc, #132]	@ (8000dd0 <MX_ADC1_Init+0x9c>)
 8000d4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <MX_ADC1_Init+0x98>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d52:	4b1e      	ldr	r3, [pc, #120]	@ (8000dcc <MX_ADC1_Init+0x98>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <MX_ADC1_Init+0x98>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <MX_ADC1_Init+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d64:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <MX_ADC1_Init+0x98>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <MX_ADC1_Init+0x98>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d72:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <MX_ADC1_Init+0x98>)
 8000d74:	4a17      	ldr	r2, [pc, #92]	@ (8000dd4 <MX_ADC1_Init+0xa0>)
 8000d76:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d78:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <MX_ADC1_Init+0x98>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <MX_ADC1_Init+0x98>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_ADC1_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <MX_ADC1_Init+0x98>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d92:	480e      	ldr	r0, [pc, #56]	@ (8000dcc <MX_ADC1_Init+0x98>)
 8000d94:	f001 f83c 	bl	8001e10 <HAL_ADC_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d9e:	f000 fbb5 	bl	800150c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000da2:	230a      	movs	r3, #10
 8000da4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dae:	463b      	mov	r3, r7
 8000db0:	4619      	mov	r1, r3
 8000db2:	4806      	ldr	r0, [pc, #24]	@ (8000dcc <MX_ADC1_Init+0x98>)
 8000db4:	f001 f870 	bl	8001e98 <HAL_ADC_ConfigChannel>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000dbe:	f000 fba5 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000088 	.word	0x20000088
 8000dd0:	40012000 	.word	0x40012000
 8000dd4:	0f000001 	.word	0x0f000001

08000dd8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	@ 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a15      	ldr	r2, [pc, #84]	@ (8000e4c <HAL_ADC_MspInit+0x74>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d123      	bne.n	8000e42 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <HAL_ADC_MspInit+0x78>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	4a14      	ldr	r2, [pc, #80]	@ (8000e50 <HAL_ADC_MspInit+0x78>)
 8000e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e06:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_ADC_MspInit+0x78>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <HAL_ADC_MspInit+0x78>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a0e      	ldr	r2, [pc, #56]	@ (8000e50 <HAL_ADC_MspInit+0x78>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <HAL_ADC_MspInit+0x78>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <HAL_ADC_MspInit+0x7c>)
 8000e3e:	f002 fa01 	bl	8003244 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	@ 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40012000 	.word	0x40012000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020800 	.word	0x40020800

08000e58 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e5c:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <MX_CAN1_Init+0x64>)
 8000e5e:	4a18      	ldr	r2, [pc, #96]	@ (8000ec0 <MX_CAN1_Init+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000e62:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <MX_CAN1_Init+0x64>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e68:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <MX_CAN1_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <MX_CAN1_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000e74:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <MX_CAN1_Init+0x64>)
 8000e76:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000e7a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <MX_CAN1_Init+0x64>)
 8000e7e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e82:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e84:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <MX_CAN1_Init+0x64>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <MX_CAN1_Init+0x64>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e90:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <MX_CAN1_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e96:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <MX_CAN1_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <MX_CAN1_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <MX_CAN1_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	@ (8000ebc <MX_CAN1_Init+0x64>)
 8000eaa:	f001 fa45 	bl	8002338 <HAL_CAN_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000eb4:	f000 fb2a 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200000d0 	.word	0x200000d0
 8000ec0:	40006400 	.word	0x40006400

08000ec4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	@ 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f50 <HAL_CAN_MspInit+0x8c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d12f      	bne.n	8000f46 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <HAL_CAN_MspInit+0x90>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	4a1a      	ldr	r2, [pc, #104]	@ (8000f54 <HAL_CAN_MspInit+0x90>)
 8000eec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef2:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <HAL_CAN_MspInit+0x90>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <HAL_CAN_MspInit+0x90>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <HAL_CAN_MspInit+0x90>)
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_CAN_MspInit+0x90>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f16:	2303      	movs	r3, #3
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f26:	2309      	movs	r3, #9
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4809      	ldr	r0, [pc, #36]	@ (8000f58 <HAL_CAN_MspInit+0x94>)
 8000f32:	f002 f987 	bl	8003244 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2014      	movs	r0, #20
 8000f3c:	f002 f94b 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f40:	2014      	movs	r0, #20
 8000f42:	f002 f964 	bl	800320e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f46:	bf00      	nop
 8000f48:	3728      	adds	r7, #40	@ 0x28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40006400 	.word	0x40006400
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40020c00 	.word	0x40020c00

08000f5c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	@ 0x28
 8000f60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f72:	4b34      	ldr	r3, [pc, #208]	@ (8001044 <MX_GPIO_Init+0xe8>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a33      	ldr	r2, [pc, #204]	@ (8001044 <MX_GPIO_Init+0xe8>)
 8000f78:	f043 0310 	orr.w	r3, r3, #16
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <MX_GPIO_Init+0xe8>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001044 <MX_GPIO_Init+0xe8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001044 <MX_GPIO_Init+0xe8>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b2b      	ldr	r3, [pc, #172]	@ (8001044 <MX_GPIO_Init+0xe8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b28      	ldr	r3, [pc, #160]	@ (8001044 <MX_GPIO_Init+0xe8>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a27      	ldr	r2, [pc, #156]	@ (8001044 <MX_GPIO_Init+0xe8>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b25      	ldr	r3, [pc, #148]	@ (8001044 <MX_GPIO_Init+0xe8>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <MX_GPIO_Init+0xe8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a21      	ldr	r2, [pc, #132]	@ (8001044 <MX_GPIO_Init+0xe8>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001044 <MX_GPIO_Init+0xe8>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <MX_GPIO_Init+0xe8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <MX_GPIO_Init+0xe8>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <MX_GPIO_Init+0xe8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ff0:	4815      	ldr	r0, [pc, #84]	@ (8001048 <MX_GPIO_Init+0xec>)
 8000ff2:	f002 fad3 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	4814      	ldr	r0, [pc, #80]	@ (800104c <MX_GPIO_Init+0xf0>)
 8000ffc:	f002 face 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001000:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	480b      	ldr	r0, [pc, #44]	@ (8001048 <MX_GPIO_Init+0xec>)
 800101a:	f002 f913 	bl	8003244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800101e:	2304      	movs	r3, #4
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_GPIO_Init+0xf0>)
 8001036:	f002 f905 	bl	8003244 <HAL_GPIO_Init>

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	@ 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40020400 	.word	0x40020400
 800104c:	40020c00 	.word	0x40020c00

08001050 <HAL_TIM_IC_CaptureCallback>:
void C_transverseHeight(uint16_t transverseLength);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
//	static uint32_t encoder_position = 0;
//	static uint32_t overflow_counter = 0;
//	static uint32_t encoder_temp = 0;

    // Read the current value from the timer counter
	current_encoder_value  = __HAL_TIM_GET_COUNTER(htim);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105e:	4a22      	ldr	r2, [pc, #136]	@ (80010e8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001060:	6013      	str	r3, [r2, #0]

    // Detect overflow: if the current value is less than the previous value,
    // it means the counter has wrapped around from 65535 back to 0.
	if (current_encoder_value < prev_encoder_value) {
 8001062:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4b21      	ldr	r3, [pc, #132]	@ (80010ec <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d205      	bcs.n	800107a <HAL_TIM_IC_CaptureCallback+0x2a>
	        extended_counter += 65536; // add one full count cycle (0x10000)
 800106e:	4b20      	ldr	r3, [pc, #128]	@ (80010f0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001076:	4a1e      	ldr	r2, [pc, #120]	@ (80010f0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001078:	6013      	str	r3, [r2, #0]
	}

    prev_encoder_value = current_encoder_value;
 800107a:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <HAL_TIM_IC_CaptureCallback+0x98>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a1b      	ldr	r2, [pc, #108]	@ (80010ec <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001080:	6013      	str	r3, [r2, #0]

//	if (current_encoder_value  >= 65531) {
//		extended_counter += 65536;
//		overflow_counter = extended_counter - 1;
//	} else {
		total_count = extended_counter + current_encoder_value;
 8001082:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a19      	ldr	r2, [pc, #100]	@ (80010f4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800108e:	6013      	str	r3, [r2, #0]
//	}
	encoder_position = total_count/4;
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	4a18      	ldr	r2, [pc, #96]	@ (80010f8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001098:	6013      	str	r3, [r2, #0]
	C_drivenDistance = (float) (encoder_position/ENCODER_PULSES_PER_WHEEL_TURN_26RPM) * DRIVE_WHEEL_CIRCUMFERENCE_METER;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80010a6:	ed9f 5b0c 	vldr	d5, [pc, #48]	@ 80010d8 <HAL_TIM_IC_CaptureCallback+0x88>
 80010aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010b6:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 80010e0 <HAL_TIM_IC_CaptureCallback+0x90>
 80010ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010c2:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <HAL_TIM_IC_CaptureCallback+0xac>)
 80010c4:	edc3 7a00 	vstr	s15, [r3]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	f3af 8000 	nop.w
 80010d8:	00000000 	.word	0x00000000
 80010dc:	40a2a600 	.word	0x40a2a600
 80010e0:	c0ebedfa 	.word	0xc0ebedfa
 80010e4:	3fca2339 	.word	0x3fca2339
 80010e8:	20000168 	.word	0x20000168
 80010ec:	20000178 	.word	0x20000178
 80010f0:	20000174 	.word	0x20000174
 80010f4:	20000170 	.word	0x20000170
 80010f8:	2000016c 	.word	0x2000016c
 80010fc:	2000017c 	.word	0x2000017c

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001106:	f000 fe02 	bl	8001d0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110a:	f000 f8ad 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f7ff ff25 	bl	8000f5c <MX_GPIO_Init>
  MX_CAN1_Init();
 8001112:	f7ff fea1 	bl	8000e58 <MX_CAN1_Init>
  MX_TIM2_Init();
 8001116:	f000 fb05 	bl	8001724 <MX_TIM2_Init>
  MX_ADC1_Init();
 800111a:	f7ff fe0b 	bl	8000d34 <MX_ADC1_Init>
  MX_TIM3_Init();
 800111e:	f000 fb77 	bl	8001810 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001122:	f000 fbed 	bl	8001900 <MX_TIM4_Init>
  MX_TIM9_Init();
 8001126:	f000 fc41 	bl	80019ac <MX_TIM9_Init>
  MX_SPI3_Init();
 800112a:	f000 f9f5 	bl	8001518 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_MspInit(&hcan1);
 800112e:	4844      	ldr	r0, [pc, #272]	@ (8001240 <main+0x140>)
 8001130:	f7ff fec8 	bl	8000ec4 <HAL_CAN_MspInit>
  CAN_Config();
 8001134:	f000 f95e 	bl	80013f4 <CAN_Config>

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001138:	2102      	movs	r1, #2
 800113a:	4841      	ldr	r0, [pc, #260]	@ (8001240 <main+0x140>)
 800113c:	f001 fd1a 	bl	8002b74 <HAL_CAN_ActivateNotification>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <main+0x4a>
	  Error_Handler();
 8001146:	f000 f9e1 	bl	800150c <Error_Handler>
  }

  ADXL.StandbyMode = ADXL_MODE_MEASUREMENT;
 800114a:	4b3e      	ldr	r3, [pc, #248]	@ (8001244 <main+0x144>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
  ADXL.TempMode = ADXL_TEMP_OFF;
 8001150:	4b3c      	ldr	r3, [pc, #240]	@ (8001244 <main+0x144>)
 8001152:	2201      	movs	r2, #1
 8001154:	705a      	strb	r2, [r3, #1]
  ADXL.DataReadyMode = ADXL_DRDY_ON;
 8001156:	4b3b      	ldr	r3, [pc, #236]	@ (8001244 <main+0x144>)
 8001158:	2200      	movs	r2, #0
 800115a:	709a      	strb	r2, [r3, #2]
  ADXL.IntMode = ADXL_INT_ACTIVELOW;
 800115c:	4b39      	ldr	r3, [pc, #228]	@ (8001244 <main+0x144>)
 800115e:	2200      	movs	r2, #0
 8001160:	70da      	strb	r2, [r3, #3]
  ADXL.Range = ADXL_RANGE_2G;
 8001162:	4b38      	ldr	r3, [pc, #224]	@ (8001244 <main+0x144>)
 8001164:	2201      	movs	r2, #1
 8001166:	711a      	strb	r2, [r3, #4]

  TxHeader.StdId = 0x101;
 8001168:	4b37      	ldr	r3, [pc, #220]	@ (8001248 <main+0x148>)
 800116a:	f240 1201 	movw	r2, #257	@ 0x101
 800116e:	601a      	str	r2, [r3, #0]
  TxHeader.DLC = 5;
 8001170:	4b35      	ldr	r3, [pc, #212]	@ (8001248 <main+0x148>)
 8001172:	2205      	movs	r2, #5
 8001174:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8001176:	4b34      	ldr	r3, [pc, #208]	@ (8001248 <main+0x148>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 800117c:	4b32      	ldr	r3, [pc, #200]	@ (8001248 <main+0x148>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  TxHeader.TransmitGlobalTime = DISABLE;
 8001182:	4b31      	ldr	r3, [pc, #196]	@ (8001248 <main+0x148>)
 8001184:	2200      	movs	r2, #0
 8001186:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0x00;
 8001188:	4b30      	ldr	r3, [pc, #192]	@ (800124c <main+0x14c>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x00;
 800118e:	4b2f      	ldr	r3, [pc, #188]	@ (800124c <main+0x14c>)
 8001190:	2200      	movs	r2, #0
 8001192:	705a      	strb	r2, [r3, #1]
//  TxData[3] = 0x00;
//  TxData[4] = 0x00;
//  TxData[5] = 0x00;


  ADXL_Init(&ADXL);
 8001194:	482b      	ldr	r0, [pc, #172]	@ (8001244 <main+0x144>)
 8001196:	f7ff fc75 	bl	8000a84 <ADXL_Init>
  ADXL_Measure(ON);
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff fd94 	bl	8000cc8 <ADXL_Measure>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011a0:	2100      	movs	r1, #0
 80011a2:	482b      	ldr	r0, [pc, #172]	@ (8001250 <main+0x150>)
 80011a4:	f003 fec4 	bl	8004f30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011a8:	2100      	movs	r1, #0
 80011aa:	482a      	ldr	r0, [pc, #168]	@ (8001254 <main+0x154>)
 80011ac:	f003 fec0 	bl	8004f30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80011b0:	2100      	movs	r1, #0
 80011b2:	4829      	ldr	r0, [pc, #164]	@ (8001258 <main+0x158>)
 80011b4:	f003 febc 	bl	8004f30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 80011b8:	2104      	movs	r1, #4
 80011ba:	4827      	ldr	r0, [pc, #156]	@ (8001258 <main+0x158>)
 80011bc:	f003 feb8 	bl	8004f30 <HAL_TIM_PWM_Start>

  htim2.Instance->CCR1 = SERVO_CCR_AT_CENTER;
 80011c0:	4b23      	ldr	r3, [pc, #140]	@ (8001250 <main+0x150>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f240 22fd 	movw	r2, #765	@ 0x2fd
 80011c8:	635a      	str	r2, [r3, #52]	@ 0x34
  htim9.Instance->CCR1 = MARKER_SERVO_HIGH_CCR;
 80011ca:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <main+0x158>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	22fa      	movs	r2, #250	@ 0xfa
 80011d0:	635a      	str	r2, [r3, #52]	@ 0x34
  htim9.Instance->CCR2 = MARKER_SERVO_HIGH_CCR;
 80011d2:	4b21      	ldr	r3, [pc, #132]	@ (8001258 <main+0x158>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	22fa      	movs	r2, #250	@ 0xfa
 80011d8:	639a      	str	r2, [r3, #56]	@ 0x38

  State nextState = STATE_IDLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  C_transverseHeight(1270);
 80011de:	f240 40f6 	movw	r0, #1270	@ 0x4f6
 80011e2:	f000 f89d 	bl	8001320 <C_transverseHeight>
	  if (height_diff <= -50) {
 80011e6:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <main+0x15c>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001260 <main+0x160>
 80011f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f8:	d805      	bhi.n	8001206 <main+0x106>
		  htim9.Instance->CCR2 = MARKER_SERVO_LOW_CCR;
 80011fa:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <main+0x158>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001202:	639a      	str	r2, [r3, #56]	@ 0x38
 8001204:	e003      	b.n	800120e <main+0x10e>
	  } else {
		  htim9.Instance->CCR2 = MARKER_SERVO_HIGH_CCR;
 8001206:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <main+0x158>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	22fa      	movs	r2, #250	@ 0xfa
 800120c:	639a      	str	r2, [r3, #56]	@ 0x38
	  }

	  if (height_diff >= 50) {
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <main+0x15c>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001264 <main+0x164>
 8001218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001220:	db05      	blt.n	800122e <main+0x12e>
		  htim9.Instance->CCR1 = MARKER_SERVO_LOW_CCR;
 8001222:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <main+0x158>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800122a:	635a      	str	r2, [r3, #52]	@ 0x34
 800122c:	e003      	b.n	8001236 <main+0x136>
	  } else {
		  htim9.Instance->CCR1 = MARKER_SERVO_HIGH_CCR;
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <main+0x158>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	22fa      	movs	r2, #250	@ 0xfa
 8001234:	635a      	str	r2, [r3, #52]	@ 0x34
//	 	  }

//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

//	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  HAL_Delay(10);
 8001236:	200a      	movs	r0, #10
 8001238:	f000 fdc6 	bl	8001dc8 <HAL_Delay>
	  C_transverseHeight(1270);
 800123c:	e7cf      	b.n	80011de <main+0xde>
 800123e:	bf00      	nop
 8001240:	200000d0 	.word	0x200000d0
 8001244:	20000140 	.word	0x20000140
 8001248:	200000f8 	.word	0x200000f8
 800124c:	2000012c 	.word	0x2000012c
 8001250:	200001e4 	.word	0x200001e4
 8001254:	20000230 	.word	0x20000230
 8001258:	200002c8 	.word	0x200002c8
 800125c:	20000160 	.word	0x20000160
 8001260:	c2480000 	.word	0xc2480000
 8001264:	42480000 	.word	0x42480000

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	@ 0x50
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	2234      	movs	r2, #52	@ 0x34
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f004 ff7e 	bl	8006178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800128c:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <SystemClock_Config+0xb0>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	4a21      	ldr	r2, [pc, #132]	@ (8001318 <SystemClock_Config+0xb0>)
 8001292:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001296:	6413      	str	r3, [r2, #64]	@ 0x40
 8001298:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <SystemClock_Config+0xb0>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012a4:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <SystemClock_Config+0xb4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012ac:	4a1b      	ldr	r2, [pc, #108]	@ (800131c <SystemClock_Config+0xb4>)
 80012ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <SystemClock_Config+0xb4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c4:	2301      	movs	r3, #1
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c8:	2310      	movs	r3, #16
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 f995 	bl	8003604 <HAL_RCC_OscConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80012e0:	f000 f914 	bl	800150c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e4:	230f      	movs	r3, #15
 80012e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 fc2e 	bl	8003b60 <HAL_RCC_ClockConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800130a:	f000 f8ff 	bl	800150c <Error_Handler>
  }
}
 800130e:	bf00      	nop
 8001310:	3750      	adds	r7, #80	@ 0x50
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000

08001320 <C_transverseHeight>:

/* USER CODE BEGIN 4 */
void C_transverseHeight(uint16_t transverseLength) {
 8001320:	b580      	push	{r7, lr}
 8001322:	ed2d 8b02 	vpush	{d8}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
//    float accelData_g[3];
    ADXL_getAccelFloat(accelData_g);
 800132e:	4829      	ldr	r0, [pc, #164]	@ (80013d4 <C_transverseHeight+0xb4>)
 8001330:	f7ff fc86 	bl	8000c40 <ADXL_getAccelFloat>
    float accel_x = accelData_g[0];
 8001334:	4b27      	ldr	r3, [pc, #156]	@ (80013d4 <C_transverseHeight+0xb4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
    float accel_z = accelData_g[2];
 800133a:	4b26      	ldr	r3, [pc, #152]	@ (80013d4 <C_transverseHeight+0xb4>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	60bb      	str	r3, [r7, #8]
    //static float theta = 0;

    theta = atanf(accel_x / accel_z);
 8001340:	ed97 7a03 	vldr	s14, [r7, #12]
 8001344:	edd7 7a02 	vldr	s15, [r7, #8]
 8001348:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800134c:	eeb0 0a66 	vmov.f32	s0, s13
 8001350:	f004 ff44 	bl	80061dc <atanf>
 8001354:	eef0 7a40 	vmov.f32	s15, s0
 8001358:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <C_transverseHeight+0xb8>)
 800135a:	edc3 7a00 	vstr	s15, [r3]
    //theta_deg =  theta * (180.0f / 3.14)
    height_diff = transverseLength * sinf(theta);
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <C_transverseHeight+0xb8>)
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	eeb0 0a67 	vmov.f32	s0, s15
 8001372:	f005 f839 	bl	80063e8 <sinf>
 8001376:	eef0 7a40 	vmov.f32	s15, s0
 800137a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800137e:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <C_transverseHeight+0xbc>)
 8001380:	edc3 7a00 	vstr	s15, [r3]
    height_diff_send = height_diff * 10;
 8001384:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <C_transverseHeight+0xbc>)
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800138e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001396:	ee17 3a90 	vmov	r3, s15
 800139a:	b21a      	sxth	r2, r3
 800139c:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <C_transverseHeight+0xc0>)
 800139e:	801a      	strh	r2, [r3, #0]

    TxData[2] = (height_diff_send) & 0xFF;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <C_transverseHeight+0xc0>)
 80013a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <C_transverseHeight+0xc4>)
 80013aa:	709a      	strb	r2, [r3, #2]
    TxData[3] = ((height_diff_send) >> 8) & 0xFF;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <C_transverseHeight+0xc0>)
 80013ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b2:	121b      	asrs	r3, r3, #8
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <C_transverseHeight+0xc4>)
 80013ba:	70da      	strb	r2, [r3, #3]
    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80013bc:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <C_transverseHeight+0xc8>)
 80013be:	4a09      	ldr	r2, [pc, #36]	@ (80013e4 <C_transverseHeight+0xc4>)
 80013c0:	490a      	ldr	r1, [pc, #40]	@ (80013ec <C_transverseHeight+0xcc>)
 80013c2:	480b      	ldr	r0, [pc, #44]	@ (80013f0 <C_transverseHeight+0xd0>)
 80013c4:	f001 f9e4 	bl	8002790 <HAL_CAN_AddTxMessage>
}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	ecbd 8b02 	vpop	{d8}
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000148 	.word	0x20000148
 80013d8:	2000015c 	.word	0x2000015c
 80013dc:	20000160 	.word	0x20000160
 80013e0:	20000164 	.word	0x20000164
 80013e4:	2000012c 	.word	0x2000012c
 80013e8:	2000013c 	.word	0x2000013c
 80013ec:	200000f8 	.word	0x200000f8
 80013f0:	200000d0 	.word	0x200000d0

080013f4 <CAN_Config>:

static void CAN_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	@ 0x28
 80013f8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 80013fa:	230d      	movs	r3, #13
 80013fc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001402:	2301      	movs	r3, #1
 8001404:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000; //Only ID 0x284 and 0x285 can pass through
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800141a:	2301      	movs	r3, #1
 800141c:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	4619      	mov	r1, r3
 8001426:	480a      	ldr	r0, [pc, #40]	@ (8001450 <CAN_Config+0x5c>)
 8001428:	f001 f882 	bl	8002530 <HAL_CAN_ConfigFilter>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <CAN_Config+0x42>
	{
		/* Filter configuration Error */
		Error_Handler();
 8001432:	f000 f86b 	bl	800150c <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001436:	4806      	ldr	r0, [pc, #24]	@ (8001450 <CAN_Config+0x5c>)
 8001438:	f001 f966 	bl	8002708 <HAL_CAN_Start>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <CAN_Config+0x52>
	{
		/* Start Error */
		Error_Handler();
 8001442:	f000 f863 	bl	800150c <Error_Handler>
	}
}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	@ 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200000d0 	.word	0x200000d0

08001454 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 800145c:	4b22      	ldr	r3, [pc, #136]	@ (80014e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800145e:	4a23      	ldr	r2, [pc, #140]	@ (80014ec <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001460:	2100      	movs	r1, #0
 8001462:	4823      	ldr	r0, [pc, #140]	@ (80014f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8001464:	f001 fa64 	bl	8002930 <HAL_CAN_GetRxMessage>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800146e:	2180      	movs	r1, #128	@ 0x80
 8001470:	4820      	ldr	r0, [pc, #128]	@ (80014f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8001472:	f002 f8ac 	bl	80035ce <HAL_GPIO_TogglePin>
		Error_Handler();
 8001476:	f000 f849 	bl	800150c <Error_Handler>
	}

	if (RxHeader.StdId == 0x123) {
 800147a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f240 1223 	movw	r2, #291	@ 0x123
 8001482:	4293      	cmp	r3, r2
 8001484:	d10b      	bne.n	800149e <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001486:	2101      	movs	r1, #1
 8001488:	481a      	ldr	r0, [pc, #104]	@ (80014f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800148a:	f002 f8a0 	bl	80035ce <HAL_GPIO_TogglePin>
		dis_off = RxData[0]*(-1);
 800148e:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	425b      	negs	r3, r3
 8001494:	b2db      	uxtb	r3, r3
 8001496:	b25a      	sxtb	r2, r3
 8001498:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800149a:	701a      	strb	r2, [r3, #0]
		S_heightThreashold = RxData[1];
		S_wheelBase = RxData[2] | (RxData[3] << 8);
		S_startSurvey = RxData[4] & 0x01;
	}

}
 800149c:	e01f      	b.n	80014de <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
	} else if (RxHeader.StdId == 0x102) {
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80014a6:	d11a      	bne.n	80014de <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
		S_surveyDistanceSet = RxData[0];
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80014aa:	781a      	ldrb	r2, [r3, #0]
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80014ae:	701a      	strb	r2, [r3, #0]
		S_heightThreashold = RxData[1];
 80014b0:	4b0d      	ldr	r3, [pc, #52]	@ (80014e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80014b2:	785a      	ldrb	r2, [r3, #1]
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80014b6:	701a      	strb	r2, [r3, #0]
		S_wheelBase = RxData[2] | (RxData[3] << 8);
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80014ba:	789b      	ldrb	r3, [r3, #2]
 80014bc:	b21a      	sxth	r2, r3
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80014c0:	78db      	ldrb	r3, [r3, #3]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	4313      	orrs	r3, r2
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80014ce:	801a      	strh	r2, [r3, #0]
		S_startSurvey = RxData[4] & 0x01;
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80014d2:	791b      	ldrb	r3, [r3, #4]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80014dc:	701a      	strb	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000134 	.word	0x20000134
 80014ec:	20000110 	.word	0x20000110
 80014f0:	200000d0 	.word	0x200000d0
 80014f4:	40020400 	.word	0x40020400
 80014f8:	20000154 	.word	0x20000154
 80014fc:	20000155 	.word	0x20000155
 8001500:	20000000 	.word	0x20000000
 8001504:	20000156 	.word	0x20000156
 8001508:	20000158 	.word	0x20000158

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <Error_Handler+0x8>

08001518 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <MX_SPI3_Init+0x74>)
 800151e:	4a1c      	ldr	r2, [pc, #112]	@ (8001590 <MX_SPI3_Init+0x78>)
 8001520:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <MX_SPI3_Init+0x74>)
 8001524:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001528:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <MX_SPI3_Init+0x74>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001530:	4b16      	ldr	r3, [pc, #88]	@ (800158c <MX_SPI3_Init+0x74>)
 8001532:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001536:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_SPI3_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800153e:	4b13      	ldr	r3, [pc, #76]	@ (800158c <MX_SPI3_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <MX_SPI3_Init+0x74>)
 8001546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800154a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <MX_SPI3_Init+0x74>)
 800154e:	2210      	movs	r2, #16
 8001550:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <MX_SPI3_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <MX_SPI3_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <MX_SPI3_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <MX_SPI3_Init+0x74>)
 8001566:	2207      	movs	r2, #7
 8001568:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800156a:	4b08      	ldr	r3, [pc, #32]	@ (800158c <MX_SPI3_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <MX_SPI3_Init+0x74>)
 8001572:	2208      	movs	r2, #8
 8001574:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_SPI3_Init+0x74>)
 8001578:	f002 fca4 	bl	8003ec4 <HAL_SPI_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001582:	f7ff ffc3 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000180 	.word	0x20000180
 8001590:	40003c00 	.word	0x40003c00

08001594 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	@ 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a17      	ldr	r2, [pc, #92]	@ (8001610 <HAL_SPI_MspInit+0x7c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d128      	bne.n	8001608 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015b6:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <HAL_SPI_MspInit+0x80>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	4a16      	ldr	r2, [pc, #88]	@ (8001614 <HAL_SPI_MspInit+0x80>)
 80015bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c2:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <HAL_SPI_MspInit+0x80>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <HAL_SPI_MspInit+0x80>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a10      	ldr	r2, [pc, #64]	@ (8001614 <HAL_SPI_MspInit+0x80>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <HAL_SPI_MspInit+0x80>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80015e6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015f8:	2306      	movs	r3, #6
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4805      	ldr	r0, [pc, #20]	@ (8001618 <HAL_SPI_MspInit+0x84>)
 8001604:	f001 fe1e 	bl	8003244 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	@ 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40003c00 	.word	0x40003c00
 8001614:	40023800 	.word	0x40023800
 8001618:	40020800 	.word	0x40020800

0800161c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <HAL_MspInit+0x44>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	4a0e      	ldr	r2, [pc, #56]	@ (8001660 <HAL_MspInit+0x44>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	@ 0x40
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <HAL_MspInit+0x44>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <HAL_MspInit+0x44>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	4a08      	ldr	r2, [pc, #32]	@ (8001660 <HAL_MspInit+0x44>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001644:	6453      	str	r3, [r2, #68]	@ 0x44
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_MspInit+0x44>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <NMI_Handler+0x4>

0800166c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <MemManage_Handler+0x4>

0800167c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <UsageFault_Handler+0x4>

0800168c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ba:	f000 fb65 	bl	8001d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <CAN1_RX0_IRQHandler+0x10>)
 80016ca:	f001 fa79 	bl	8002bc0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200000d0 	.word	0x200000d0

080016d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <TIM2_IRQHandler+0x10>)
 80016de:	f003 fdc7 	bl	8005270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200001e4 	.word	0x200001e4

080016ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <TIM4_IRQHandler+0x10>)
 80016f2:	f003 fdbd 	bl	8005270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000027c 	.word	0x2000027c

08001700 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <SystemInit+0x20>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800170a:	4a05      	ldr	r2, [pc, #20]	@ (8001720 <SystemInit+0x20>)
 800170c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001710:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08e      	sub	sp, #56	@ 0x38
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001744:	463b      	mov	r3, r7
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001756:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <MX_TIM2_Init+0xe8>)
 8001758:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800175c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 800175e:	4b2b      	ldr	r3, [pc, #172]	@ (800180c <MX_TIM2_Init+0xe8>)
 8001760:	221f      	movs	r2, #31
 8001762:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001764:	4b29      	ldr	r3, [pc, #164]	@ (800180c <MX_TIM2_Init+0xe8>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800176a:	4b28      	ldr	r3, [pc, #160]	@ (800180c <MX_TIM2_Init+0xe8>)
 800176c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001770:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001772:	4b26      	ldr	r3, [pc, #152]	@ (800180c <MX_TIM2_Init+0xe8>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001778:	4b24      	ldr	r3, [pc, #144]	@ (800180c <MX_TIM2_Init+0xe8>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800177e:	4823      	ldr	r0, [pc, #140]	@ (800180c <MX_TIM2_Init+0xe8>)
 8001780:	f003 fb1e 	bl	8004dc0 <HAL_TIM_Base_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800178a:	f7ff febf 	bl	800150c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001792:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001794:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001798:	4619      	mov	r1, r3
 800179a:	481c      	ldr	r0, [pc, #112]	@ (800180c <MX_TIM2_Init+0xe8>)
 800179c:	f003 ff84 	bl	80056a8 <HAL_TIM_ConfigClockSource>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80017a6:	f7ff feb1 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017aa:	4818      	ldr	r0, [pc, #96]	@ (800180c <MX_TIM2_Init+0xe8>)
 80017ac:	f003 fb5f 	bl	8004e6e <HAL_TIM_PWM_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80017b6:	f7ff fea9 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	4619      	mov	r1, r3
 80017c8:	4810      	ldr	r0, [pc, #64]	@ (800180c <MX_TIM2_Init+0xe8>)
 80017ca:	f004 fc29 	bl	8006020 <HAL_TIMEx_MasterConfigSynchronization>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80017d4:	f7ff fe9a 	bl	800150c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d8:	2360      	movs	r3, #96	@ 0x60
 80017da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e8:	463b      	mov	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	4619      	mov	r1, r3
 80017ee:	4807      	ldr	r0, [pc, #28]	@ (800180c <MX_TIM2_Init+0xe8>)
 80017f0:	f003 fe46 	bl	8005480 <HAL_TIM_PWM_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80017fa:	f7ff fe87 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017fe:	4803      	ldr	r0, [pc, #12]	@ (800180c <MX_TIM2_Init+0xe8>)
 8001800:	f000 f9da 	bl	8001bb8 <HAL_TIM_MspPostInit>

}
 8001804:	bf00      	nop
 8001806:	3738      	adds	r7, #56	@ 0x38
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200001e4 	.word	0x200001e4

08001810 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08e      	sub	sp, #56	@ 0x38
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001830:	463b      	mov	r3, r7
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
 800183e:	615a      	str	r2, [r3, #20]
 8001840:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001842:	4b2d      	ldr	r3, [pc, #180]	@ (80018f8 <MX_TIM3_Init+0xe8>)
 8001844:	4a2d      	ldr	r2, [pc, #180]	@ (80018fc <MX_TIM3_Init+0xec>)
 8001846:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8001848:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <MX_TIM3_Init+0xe8>)
 800184a:	2207      	movs	r2, #7
 800184c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b2a      	ldr	r3, [pc, #168]	@ (80018f8 <MX_TIM3_Init+0xe8>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001854:	4b28      	ldr	r3, [pc, #160]	@ (80018f8 <MX_TIM3_Init+0xe8>)
 8001856:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800185a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b26      	ldr	r3, [pc, #152]	@ (80018f8 <MX_TIM3_Init+0xe8>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001862:	4b25      	ldr	r3, [pc, #148]	@ (80018f8 <MX_TIM3_Init+0xe8>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001868:	4823      	ldr	r0, [pc, #140]	@ (80018f8 <MX_TIM3_Init+0xe8>)
 800186a:	f003 faa9 	bl	8004dc0 <HAL_TIM_Base_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001874:	f7ff fe4a 	bl	800150c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001878:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800187c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800187e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001882:	4619      	mov	r1, r3
 8001884:	481c      	ldr	r0, [pc, #112]	@ (80018f8 <MX_TIM3_Init+0xe8>)
 8001886:	f003 ff0f 	bl	80056a8 <HAL_TIM_ConfigClockSource>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001890:	f7ff fe3c 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001894:	4818      	ldr	r0, [pc, #96]	@ (80018f8 <MX_TIM3_Init+0xe8>)
 8001896:	f003 faea 	bl	8004e6e <HAL_TIM_PWM_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80018a0:	f7ff fe34 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	4811      	ldr	r0, [pc, #68]	@ (80018f8 <MX_TIM3_Init+0xe8>)
 80018b4:	f004 fbb4 	bl	8006020 <HAL_TIMEx_MasterConfigSynchronization>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80018be:	f7ff fe25 	bl	800150c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c2:	2360      	movs	r3, #96	@ 0x60
 80018c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d2:	463b      	mov	r3, r7
 80018d4:	2200      	movs	r2, #0
 80018d6:	4619      	mov	r1, r3
 80018d8:	4807      	ldr	r0, [pc, #28]	@ (80018f8 <MX_TIM3_Init+0xe8>)
 80018da:	f003 fdd1 	bl	8005480 <HAL_TIM_PWM_ConfigChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80018e4:	f7ff fe12 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018e8:	4803      	ldr	r0, [pc, #12]	@ (80018f8 <MX_TIM3_Init+0xe8>)
 80018ea:	f000 f965 	bl	8001bb8 <HAL_TIM_MspPostInit>

}
 80018ee:	bf00      	nop
 80018f0:	3738      	adds	r7, #56	@ 0x38
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000230 	.word	0x20000230
 80018fc:	40000400 	.word	0x40000400

08001900 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	@ 0x30
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	2224      	movs	r2, #36	@ 0x24
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f004 fc32 	bl	8006178 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	463b      	mov	r3, r7
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800191e:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <MX_TIM4_Init+0xa4>)
 8001920:	4a21      	ldr	r2, [pc, #132]	@ (80019a8 <MX_TIM4_Init+0xa8>)
 8001922:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001924:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <MX_TIM4_Init+0xa4>)
 8001926:	2200      	movs	r2, #0
 8001928:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192a:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <MX_TIM4_Init+0xa4>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001930:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <MX_TIM4_Init+0xa4>)
 8001932:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001936:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <MX_TIM4_Init+0xa4>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193e:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <MX_TIM4_Init+0xa4>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001944:	2303      	movs	r3, #3
 8001946:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800194c:	2301      	movs	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800195c:	2301      	movs	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	4619      	mov	r1, r3
 800196e:	480d      	ldr	r0, [pc, #52]	@ (80019a4 <MX_TIM4_Init+0xa4>)
 8001970:	f003 fbd8 	bl	8005124 <HAL_TIM_Encoder_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800197a:	f7ff fdc7 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001986:	463b      	mov	r3, r7
 8001988:	4619      	mov	r1, r3
 800198a:	4806      	ldr	r0, [pc, #24]	@ (80019a4 <MX_TIM4_Init+0xa4>)
 800198c:	f004 fb48 	bl	8006020 <HAL_TIMEx_MasterConfigSynchronization>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001996:	f7ff fdb9 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	3730      	adds	r7, #48	@ 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000027c 	.word	0x2000027c
 80019a8:	40000800 	.word	0x40000800

080019ac <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	@ 0x30
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b2:	f107 0320 	add.w	r3, r7, #32
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	615a      	str	r2, [r3, #20]
 80019d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80019d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a80 <MX_TIM9_Init+0xd4>)
 80019d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001a84 <MX_TIM9_Init+0xd8>)
 80019d6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 32-1;
 80019d8:	4b29      	ldr	r3, [pc, #164]	@ (8001a80 <MX_TIM9_Init+0xd4>)
 80019da:	221f      	movs	r2, #31
 80019dc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019de:	4b28      	ldr	r3, [pc, #160]	@ (8001a80 <MX_TIM9_Init+0xd4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 80019e4:	4b26      	ldr	r3, [pc, #152]	@ (8001a80 <MX_TIM9_Init+0xd4>)
 80019e6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80019ea:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ec:	4b24      	ldr	r3, [pc, #144]	@ (8001a80 <MX_TIM9_Init+0xd4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f2:	4b23      	ldr	r3, [pc, #140]	@ (8001a80 <MX_TIM9_Init+0xd4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80019f8:	4821      	ldr	r0, [pc, #132]	@ (8001a80 <MX_TIM9_Init+0xd4>)
 80019fa:	f003 f9e1 	bl	8004dc0 <HAL_TIM_Base_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001a04:	f7ff fd82 	bl	800150c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	4619      	mov	r1, r3
 8001a14:	481a      	ldr	r0, [pc, #104]	@ (8001a80 <MX_TIM9_Init+0xd4>)
 8001a16:	f003 fe47 	bl	80056a8 <HAL_TIM_ConfigClockSource>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001a20:	f7ff fd74 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001a24:	4816      	ldr	r0, [pc, #88]	@ (8001a80 <MX_TIM9_Init+0xd4>)
 8001a26:	f003 fa22 	bl	8004e6e <HAL_TIM_PWM_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001a30:	f7ff fd6c 	bl	800150c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a34:	2360      	movs	r3, #96	@ 0x60
 8001a36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2200      	movs	r2, #0
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480d      	ldr	r0, [pc, #52]	@ (8001a80 <MX_TIM9_Init+0xd4>)
 8001a4c:	f003 fd18 	bl	8005480 <HAL_TIM_PWM_ConfigChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001a56:	f7ff fd59 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4807      	ldr	r0, [pc, #28]	@ (8001a80 <MX_TIM9_Init+0xd4>)
 8001a62:	f003 fd0d 	bl	8005480 <HAL_TIM_PWM_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8001a6c:	f7ff fd4e 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001a70:	4803      	ldr	r0, [pc, #12]	@ (8001a80 <MX_TIM9_Init+0xd4>)
 8001a72:	f000 f8a1 	bl	8001bb8 <HAL_TIM_MspPostInit>

}
 8001a76:	bf00      	nop
 8001a78:	3730      	adds	r7, #48	@ 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200002c8 	.word	0x200002c8
 8001a84:	40014000 	.word	0x40014000

08001a88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a98:	d114      	bne.n	8001ac4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b14 <HAL_TIM_Base_MspInit+0x8c>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001b14 <HAL_TIM_Base_MspInit+0x8c>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <HAL_TIM_Base_MspInit+0x8c>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	201c      	movs	r0, #28
 8001ab8:	f001 fb8d 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001abc:	201c      	movs	r0, #28
 8001abe:	f001 fba6 	bl	800320e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001ac2:	e022      	b.n	8001b0a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a13      	ldr	r2, [pc, #76]	@ (8001b18 <HAL_TIM_Base_MspInit+0x90>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d10c      	bne.n	8001ae8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <HAL_TIM_Base_MspInit+0x8c>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	4a10      	ldr	r2, [pc, #64]	@ (8001b14 <HAL_TIM_Base_MspInit+0x8c>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <HAL_TIM_Base_MspInit+0x8c>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
}
 8001ae6:	e010      	b.n	8001b0a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM9)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0b      	ldr	r2, [pc, #44]	@ (8001b1c <HAL_TIM_Base_MspInit+0x94>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d10b      	bne.n	8001b0a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001af2:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <HAL_TIM_Base_MspInit+0x8c>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af6:	4a07      	ldr	r2, [pc, #28]	@ (8001b14 <HAL_TIM_Base_MspInit+0x8c>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001afe:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_TIM_Base_MspInit+0x8c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40000400 	.word	0x40000400
 8001b1c:	40014000 	.word	0x40014000

08001b20 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	@ 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bac <HAL_TIM_Encoder_MspInit+0x8c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d130      	bne.n	8001ba4 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b42:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b4e:	4b18      	ldr	r3, [pc, #96]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	4a14      	ldr	r2, [pc, #80]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001b60:	f043 0308 	orr.w	r3, r3, #8
 8001b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b66:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x90>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b72:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b84:	2302      	movs	r3, #2
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4809      	ldr	r0, [pc, #36]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0x94>)
 8001b90:	f001 fb58 	bl	8003244 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	201e      	movs	r0, #30
 8001b9a:	f001 fb1c 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b9e:	201e      	movs	r0, #30
 8001ba0:	f001 fb35 	bl	800320e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	@ 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40000800 	.word	0x40000800
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020c00 	.word	0x40020c00

08001bb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	@ 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bd8:	d11c      	bne.n	8001c14 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	4b32      	ldr	r3, [pc, #200]	@ (8001ca4 <HAL_TIM_MspPostInit+0xec>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a31      	ldr	r2, [pc, #196]	@ (8001ca4 <HAL_TIM_MspPostInit+0xec>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca4 <HAL_TIM_MspPostInit+0xec>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c02:	2301      	movs	r3, #1
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4826      	ldr	r0, [pc, #152]	@ (8001ca8 <HAL_TIM_MspPostInit+0xf0>)
 8001c0e:	f001 fb19 	bl	8003244 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001c12:	e042      	b.n	8001c9a <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM3)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a24      	ldr	r2, [pc, #144]	@ (8001cac <HAL_TIM_MspPostInit+0xf4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d11c      	bne.n	8001c58 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <HAL_TIM_MspPostInit+0xec>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	4a20      	ldr	r2, [pc, #128]	@ (8001ca4 <HAL_TIM_MspPostInit+0xec>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <HAL_TIM_MspPostInit+0xec>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c36:	2340      	movs	r3, #64	@ 0x40
 8001c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c42:	2302      	movs	r3, #2
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c46:	2302      	movs	r3, #2
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4817      	ldr	r0, [pc, #92]	@ (8001cb0 <HAL_TIM_MspPostInit+0xf8>)
 8001c52:	f001 faf7 	bl	8003244 <HAL_GPIO_Init>
}
 8001c56:	e020      	b.n	8001c9a <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM9)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a15      	ldr	r2, [pc, #84]	@ (8001cb4 <HAL_TIM_MspPostInit+0xfc>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d11b      	bne.n	8001c9a <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <HAL_TIM_MspPostInit+0xec>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca4 <HAL_TIM_MspPostInit+0xec>)
 8001c68:	f043 0310 	orr.w	r3, r3, #16
 8001c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <HAL_TIM_MspPostInit+0xec>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c7a:	2360      	movs	r3, #96	@ 0x60
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4808      	ldr	r0, [pc, #32]	@ (8001cb8 <HAL_TIM_MspPostInit+0x100>)
 8001c96:	f001 fad5 	bl	8003244 <HAL_GPIO_Init>
}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	@ 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40000400 	.word	0x40000400
 8001cb0:	40020800 	.word	0x40020800
 8001cb4:	40014000 	.word	0x40014000
 8001cb8:	40021000 	.word	0x40021000

08001cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cf4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cc0:	f7ff fd1e 	bl	8001700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc4:	480c      	ldr	r0, [pc, #48]	@ (8001cf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cc6:	490d      	ldr	r1, [pc, #52]	@ (8001cfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ccc:	e002      	b.n	8001cd4 <LoopCopyDataInit>

08001cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd2:	3304      	adds	r3, #4

08001cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd8:	d3f9      	bcc.n	8001cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cda:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001d08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce0:	e001      	b.n	8001ce6 <LoopFillZerobss>

08001ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce4:	3204      	adds	r2, #4

08001ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce8:	d3fb      	bcc.n	8001ce2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001cea:	f004 fa53 	bl	8006194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cee:	f7ff fa07 	bl	8001100 <main>
  bx  lr    
 8001cf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cf4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cfc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001d00:	080066f0 	.word	0x080066f0
  ldr r2, =_sbss
 8001d04:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001d08:	20000450 	.word	0x20000450

08001d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC_IRQHandler>

08001d0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d12:	2003      	movs	r0, #3
 8001d14:	f001 fa54 	bl	80031c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d18:	200f      	movs	r0, #15
 8001d1a:	f000 f805 	bl	8001d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d1e:	f7ff fc7d 	bl	800161c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d30:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <HAL_InitTick+0x54>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <HAL_InitTick+0x58>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f001 fa6f 	bl	800322a <HAL_SYSTICK_Config>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00e      	b.n	8001d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b0f      	cmp	r3, #15
 8001d5a:	d80a      	bhi.n	8001d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	f001 fa37 	bl	80031d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d68:	4a06      	ldr	r2, [pc, #24]	@ (8001d84 <HAL_InitTick+0x5c>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e000      	b.n	8001d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000004 	.word	0x20000004
 8001d80:	2000000c 	.word	0x2000000c
 8001d84:	20000008 	.word	0x20000008

08001d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <HAL_IncTick+0x20>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_IncTick+0x24>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	4a04      	ldr	r2, [pc, #16]	@ (8001dac <HAL_IncTick+0x24>)
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	2000000c 	.word	0x2000000c
 8001dac:	20000314 	.word	0x20000314

08001db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return uwTick;
 8001db4:	4b03      	ldr	r3, [pc, #12]	@ (8001dc4 <HAL_GetTick+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000314 	.word	0x20000314

08001dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff ffee 	bl	8001db0 <HAL_GetTick>
 8001dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de0:	d005      	beq.n	8001dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e0c <HAL_Delay+0x44>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dee:	bf00      	nop
 8001df0:	f7ff ffde 	bl	8001db0 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d8f7      	bhi.n	8001df0 <HAL_Delay+0x28>
  {
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000000c 	.word	0x2000000c

08001e10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e031      	b.n	8001e8a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d109      	bne.n	8001e42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe ffd2 	bl	8000dd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d116      	bne.n	8001e7c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <HAL_ADC_Init+0x84>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	f043 0202 	orr.w	r2, r3, #2
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f970 	bl	8002144 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f023 0303 	bic.w	r3, r3, #3
 8001e72:	f043 0201 	orr.w	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e7a:	e001      	b.n	8001e80 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	ffffeefd 	.word	0xffffeefd

08001e98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1c>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e136      	b.n	8002122 <HAL_ADC_ConfigChannel+0x28a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b09      	cmp	r3, #9
 8001ec2:	d93a      	bls.n	8001f3a <HAL_ADC_ConfigChannel+0xa2>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ecc:	d035      	beq.n	8001f3a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68d9      	ldr	r1, [r3, #12]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3b1e      	subs	r3, #30
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a8d      	ldr	r2, [pc, #564]	@ (8002130 <HAL_ADC_ConfigChannel+0x298>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d10a      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68d9      	ldr	r1, [r3, #12]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	061a      	lsls	r2, r3, #24
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f12:	e035      	b.n	8001f80 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68d9      	ldr	r1, [r3, #12]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	4618      	mov	r0, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4403      	add	r3, r0
 8001f2c:	3b1e      	subs	r3, #30
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f38:	e022      	b.n	8001f80 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6919      	ldr	r1, [r3, #16]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	461a      	mov	r2, r3
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	2207      	movs	r2, #7
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43da      	mvns	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6919      	ldr	r1, [r3, #16]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	4603      	mov	r3, r0
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4403      	add	r3, r0
 8001f76:	409a      	lsls	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b06      	cmp	r3, #6
 8001f86:	d824      	bhi.n	8001fd2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	3b05      	subs	r3, #5
 8001f9a:	221f      	movs	r2, #31
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43da      	mvns	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3b05      	subs	r3, #5
 8001fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fd0:	e04c      	b.n	800206c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d824      	bhi.n	8002024 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	3b23      	subs	r3, #35	@ 0x23
 8001fec:	221f      	movs	r2, #31
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	4618      	mov	r0, r3
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	3b23      	subs	r3, #35	@ 0x23
 8002016:	fa00 f203 	lsl.w	r2, r0, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	631a      	str	r2, [r3, #48]	@ 0x30
 8002022:	e023      	b.n	800206c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	3b41      	subs	r3, #65	@ 0x41
 8002036:	221f      	movs	r2, #31
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43da      	mvns	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	400a      	ands	r2, r1
 8002044:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	b29b      	uxth	r3, r3
 8002052:	4618      	mov	r0, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	3b41      	subs	r3, #65	@ 0x41
 8002060:	fa00 f203 	lsl.w	r2, r0, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a30      	ldr	r2, [pc, #192]	@ (8002134 <HAL_ADC_ConfigChannel+0x29c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d10a      	bne.n	800208c <HAL_ADC_ConfigChannel+0x1f4>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800207e:	d105      	bne.n	800208c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002080:	4b2d      	ldr	r3, [pc, #180]	@ (8002138 <HAL_ADC_ConfigChannel+0x2a0>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a2c      	ldr	r2, [pc, #176]	@ (8002138 <HAL_ADC_ConfigChannel+0x2a0>)
 8002086:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800208a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a28      	ldr	r2, [pc, #160]	@ (8002134 <HAL_ADC_ConfigChannel+0x29c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10f      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x21e>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b12      	cmp	r3, #18
 800209c:	d10b      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800209e:	4b26      	ldr	r3, [pc, #152]	@ (8002138 <HAL_ADC_ConfigChannel+0x2a0>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4a25      	ldr	r2, [pc, #148]	@ (8002138 <HAL_ADC_ConfigChannel+0x2a0>)
 80020a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80020a8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80020aa:	4b23      	ldr	r3, [pc, #140]	@ (8002138 <HAL_ADC_ConfigChannel+0x2a0>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4a22      	ldr	r2, [pc, #136]	@ (8002138 <HAL_ADC_ConfigChannel+0x2a0>)
 80020b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020b4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002134 <HAL_ADC_ConfigChannel+0x29c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d12b      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x280>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002130 <HAL_ADC_ConfigChannel+0x298>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d003      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x23a>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b11      	cmp	r3, #17
 80020d0:	d122      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80020d2:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <HAL_ADC_ConfigChannel+0x2a0>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4a18      	ldr	r2, [pc, #96]	@ (8002138 <HAL_ADC_ConfigChannel+0x2a0>)
 80020d8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80020dc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80020de:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <HAL_ADC_ConfigChannel+0x2a0>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4a15      	ldr	r2, [pc, #84]	@ (8002138 <HAL_ADC_ConfigChannel+0x2a0>)
 80020e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020e8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a10      	ldr	r2, [pc, #64]	@ (8002130 <HAL_ADC_ConfigChannel+0x298>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d111      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80020f4:	4b11      	ldr	r3, [pc, #68]	@ (800213c <HAL_ADC_ConfigChannel+0x2a4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a11      	ldr	r2, [pc, #68]	@ (8002140 <HAL_ADC_ConfigChannel+0x2a8>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	0c9a      	lsrs	r2, r3, #18
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800210a:	e002      	b.n	8002112 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3b01      	subs	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f9      	bne.n	800210c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	10000012 	.word	0x10000012
 8002134:	40012000 	.word	0x40012000
 8002138:	40012300 	.word	0x40012300
 800213c:	20000004 	.word	0x20000004
 8002140:	431bde83 	.word	0x431bde83

08002144 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800214c:	4b78      	ldr	r3, [pc, #480]	@ (8002330 <ADC_Init+0x1ec>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a77      	ldr	r2, [pc, #476]	@ (8002330 <ADC_Init+0x1ec>)
 8002152:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002156:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002158:	4b75      	ldr	r3, [pc, #468]	@ (8002330 <ADC_Init+0x1ec>)
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4973      	ldr	r1, [pc, #460]	@ (8002330 <ADC_Init+0x1ec>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002174:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6859      	ldr	r1, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	021a      	lsls	r2, r3, #8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002198:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6899      	ldr	r1, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d2:	4a58      	ldr	r2, [pc, #352]	@ (8002334 <ADC_Init+0x1f0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d022      	beq.n	800221e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6899      	ldr	r1, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002208:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6899      	ldr	r1, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	e00f      	b.n	800223e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800222c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800223c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0202 	bic.w	r2, r2, #2
 800224c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6899      	ldr	r1, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	005a      	lsls	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d01b      	beq.n	80022a4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800227a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800228a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	3b01      	subs	r3, #1
 8002298:	035a      	lsls	r2, r3, #13
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	e007      	b.n	80022b4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80022c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	051a      	lsls	r2, r3, #20
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6899      	ldr	r1, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022f6:	025a      	lsls	r2, r3, #9
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800230e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6899      	ldr	r1, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	029a      	lsls	r2, r3, #10
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	609a      	str	r2, [r3, #8]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40012300 	.word	0x40012300
 8002334:	0f000001 	.word	0x0f000001

08002338 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0ed      	b.n	8002526 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe fdb4 	bl	8000ec4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800236c:	f7ff fd20 	bl	8001db0 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002372:	e012      	b.n	800239a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002374:	f7ff fd1c 	bl	8001db0 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b0a      	cmp	r3, #10
 8002380:	d90b      	bls.n	800239a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2205      	movs	r2, #5
 8002392:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e0c5      	b.n	8002526 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0e5      	beq.n	8002374 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0202 	bic.w	r2, r2, #2
 80023b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b8:	f7ff fcfa 	bl	8001db0 <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023be:	e012      	b.n	80023e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023c0:	f7ff fcf6 	bl	8001db0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b0a      	cmp	r3, #10
 80023cc:	d90b      	bls.n	80023e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2205      	movs	r2, #5
 80023de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e09f      	b.n	8002526 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1e5      	bne.n	80023c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7e1b      	ldrb	r3, [r3, #24]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d108      	bne.n	800240e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	e007      	b.n	800241e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800241c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	7e5b      	ldrb	r3, [r3, #25]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d108      	bne.n	8002438 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e007      	b.n	8002448 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002446:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	7e9b      	ldrb	r3, [r3, #26]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d108      	bne.n	8002462 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0220 	orr.w	r2, r2, #32
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	e007      	b.n	8002472 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0220 	bic.w	r2, r2, #32
 8002470:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	7edb      	ldrb	r3, [r3, #27]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d108      	bne.n	800248c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0210 	bic.w	r2, r2, #16
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	e007      	b.n	800249c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0210 	orr.w	r2, r2, #16
 800249a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7f1b      	ldrb	r3, [r3, #28]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d108      	bne.n	80024b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0208 	orr.w	r2, r2, #8
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e007      	b.n	80024c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0208 	bic.w	r2, r2, #8
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7f5b      	ldrb	r3, [r3, #29]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d108      	bne.n	80024e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0204 	orr.w	r2, r2, #4
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e007      	b.n	80024f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0204 	bic.w	r2, r2, #4
 80024ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	ea42 0103 	orr.w	r1, r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	1e5a      	subs	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002546:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d003      	beq.n	8002556 <HAL_CAN_ConfigFilter+0x26>
 800254e:	7cfb      	ldrb	r3, [r7, #19]
 8002550:	2b02      	cmp	r3, #2
 8002552:	f040 80c7 	bne.w	80026e4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a69      	ldr	r2, [pc, #420]	@ (8002700 <HAL_CAN_ConfigFilter+0x1d0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d001      	beq.n	8002564 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002560:	4b68      	ldr	r3, [pc, #416]	@ (8002704 <HAL_CAN_ConfigFilter+0x1d4>)
 8002562:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	4a63      	ldr	r2, [pc, #396]	@ (8002704 <HAL_CAN_ConfigFilter+0x1d4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d111      	bne.n	80025a0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002582:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	431a      	orrs	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	2201      	movs	r2, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	401a      	ands	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d123      	bne.n	8002612 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	401a      	ands	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3248      	adds	r2, #72	@ 0x48
 80025f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002606:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002608:	6979      	ldr	r1, [r7, #20]
 800260a:	3348      	adds	r3, #72	@ 0x48
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	440b      	add	r3, r1
 8002610:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d122      	bne.n	8002660 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	431a      	orrs	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800263a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3248      	adds	r2, #72	@ 0x48
 8002640:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002654:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002656:	6979      	ldr	r1, [r7, #20]
 8002658:	3348      	adds	r3, #72	@ 0x48
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	440b      	add	r3, r1
 800265e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43db      	mvns	r3, r3
 8002672:	401a      	ands	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800267a:	e007      	b.n	800268c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	431a      	orrs	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	43db      	mvns	r3, r3
 800269e:	401a      	ands	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80026a6:	e007      	b.n	80026b8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d107      	bne.n	80026d0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	431a      	orrs	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80026d6:	f023 0201 	bic.w	r2, r3, #1
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e006      	b.n	80026f2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
  }
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	371c      	adds	r7, #28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40003400 	.word	0x40003400
 8002704:	40006400 	.word	0x40006400

08002708 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d12e      	bne.n	800277a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002734:	f7ff fb3c 	bl	8001db0 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800273a:	e012      	b.n	8002762 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800273c:	f7ff fb38 	bl	8001db0 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b0a      	cmp	r3, #10
 8002748:	d90b      	bls.n	8002762 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2205      	movs	r2, #5
 800275a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e012      	b.n	8002788 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e5      	bne.n	800273c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e006      	b.n	8002788 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
  }
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	@ 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80027ae:	7ffb      	ldrb	r3, [r7, #31]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d003      	beq.n	80027bc <HAL_CAN_AddTxMessage+0x2c>
 80027b4:	7ffb      	ldrb	r3, [r7, #31]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	f040 80ad 	bne.w	8002916 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10a      	bne.n	80027dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8095 	beq.w	8002906 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	0e1b      	lsrs	r3, r3, #24
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80027e6:	2201      	movs	r2, #1
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	409a      	lsls	r2, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10d      	bne.n	8002814 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002802:	68f9      	ldr	r1, [r7, #12]
 8002804:	6809      	ldr	r1, [r1, #0]
 8002806:	431a      	orrs	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	3318      	adds	r3, #24
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	440b      	add	r3, r1
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e00f      	b.n	8002834 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800281e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002824:	68f9      	ldr	r1, [r7, #12]
 8002826:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002828:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	3318      	adds	r3, #24
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	440b      	add	r3, r1
 8002832:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6819      	ldr	r1, [r3, #0]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	3318      	adds	r3, #24
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	440b      	add	r3, r1
 8002844:	3304      	adds	r3, #4
 8002846:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	7d1b      	ldrb	r3, [r3, #20]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d111      	bne.n	8002874 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	3318      	adds	r3, #24
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	4413      	add	r3, r2
 800285c:	3304      	adds	r3, #4
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	6811      	ldr	r1, [r2, #0]
 8002864:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	3318      	adds	r3, #24
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	440b      	add	r3, r1
 8002870:	3304      	adds	r3, #4
 8002872:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3307      	adds	r3, #7
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	061a      	lsls	r2, r3, #24
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3306      	adds	r3, #6
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	041b      	lsls	r3, r3, #16
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3305      	adds	r3, #5
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	4313      	orrs	r3, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	3204      	adds	r2, #4
 8002894:	7812      	ldrb	r2, [r2, #0]
 8002896:	4610      	mov	r0, r2
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	6811      	ldr	r1, [r2, #0]
 800289c:	ea43 0200 	orr.w	r2, r3, r0
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	440b      	add	r3, r1
 80028a6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80028aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3303      	adds	r3, #3
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	061a      	lsls	r2, r3, #24
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3302      	adds	r3, #2
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	041b      	lsls	r3, r3, #16
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3301      	adds	r3, #1
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	4313      	orrs	r3, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	7812      	ldrb	r2, [r2, #0]
 80028cc:	4610      	mov	r0, r2
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	6811      	ldr	r1, [r2, #0]
 80028d2:	ea43 0200 	orr.w	r2, r3, r0
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	440b      	add	r3, r1
 80028dc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80028e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3318      	adds	r3, #24
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	4413      	add	r3, r2
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	6811      	ldr	r1, [r2, #0]
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3318      	adds	r3, #24
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	440b      	add	r3, r1
 8002900:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e00e      	b.n	8002924 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e006      	b.n	8002924 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
  }
}
 8002924:	4618      	mov	r0, r3
 8002926:	3724      	adds	r7, #36	@ 0x24
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002944:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d003      	beq.n	8002954 <HAL_CAN_GetRxMessage+0x24>
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	2b02      	cmp	r3, #2
 8002950:	f040 8103 	bne.w	8002b5a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10e      	bne.n	8002978 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d116      	bne.n	8002996 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0f7      	b.n	8002b68 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d107      	bne.n	8002996 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0e8      	b.n	8002b68 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	331b      	adds	r3, #27
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	4413      	add	r3, r2
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0204 	and.w	r2, r3, #4
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10c      	bne.n	80029ce <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	331b      	adds	r3, #27
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	4413      	add	r3, r2
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	0d5b      	lsrs	r3, r3, #21
 80029c4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e00b      	b.n	80029e6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	331b      	adds	r3, #27
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	4413      	add	r3, r2
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	08db      	lsrs	r3, r3, #3
 80029de:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	331b      	adds	r3, #27
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	4413      	add	r3, r2
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0202 	and.w	r2, r3, #2
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	331b      	adds	r3, #27
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	4413      	add	r3, r2
 8002a08:	3304      	adds	r3, #4
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2208      	movs	r2, #8
 8002a18:	611a      	str	r2, [r3, #16]
 8002a1a:	e00b      	b.n	8002a34 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	331b      	adds	r3, #27
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	4413      	add	r3, r2
 8002a28:	3304      	adds	r3, #4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 020f 	and.w	r2, r3, #15
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	331b      	adds	r3, #27
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	4413      	add	r3, r2
 8002a40:	3304      	adds	r3, #4
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0a1b      	lsrs	r3, r3, #8
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	331b      	adds	r3, #27
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	4413      	add	r3, r2
 8002a58:	3304      	adds	r3, #4
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	0c1b      	lsrs	r3, r3, #16
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	0a1a      	lsrs	r2, r3, #8
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0c1a      	lsrs	r2, r3, #16
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	0e1a      	lsrs	r2, r3, #24
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	3303      	adds	r3, #3
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	3304      	adds	r3, #4
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	0a1a      	lsrs	r2, r3, #8
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	3305      	adds	r3, #5
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0c1a      	lsrs	r2, r3, #16
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	3306      	adds	r3, #6
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0e1a      	lsrs	r2, r3, #24
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	3307      	adds	r3, #7
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d108      	bne.n	8002b46 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0220 	orr.w	r2, r2, #32
 8002b42:	60da      	str	r2, [r3, #12]
 8002b44:	e007      	b.n	8002b56 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0220 	orr.w	r2, r2, #32
 8002b54:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e006      	b.n	8002b68 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
  }
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b84:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d002      	beq.n	8002b92 <HAL_CAN_ActivateNotification+0x1e>
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d109      	bne.n	8002ba6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6959      	ldr	r1, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e006      	b.n	8002bb4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
  }
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	@ 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d07c      	beq.n	8002d00 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d023      	beq.n	8002c58 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2201      	movs	r2, #1
 8002c16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f983 	bl	8002f2e <HAL_CAN_TxMailbox0CompleteCallback>
 8002c28:	e016      	b.n	8002c58 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d004      	beq.n	8002c3e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c36:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c3c:	e00c      	b.n	8002c58 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d004      	beq.n	8002c52 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c50:	e002      	b.n	8002c58 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f989 	bl	8002f6a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d024      	beq.n	8002cac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f963 	bl	8002f42 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c7c:	e016      	b.n	8002cac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c90:	e00c      	b.n	8002cac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d004      	beq.n	8002ca6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca4:	e002      	b.n	8002cac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f969 	bl	8002f7e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d024      	beq.n	8002d00 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002cbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f943 	bl	8002f56 <HAL_CAN_TxMailbox2CompleteCallback>
 8002cd0:	e016      	b.n	8002d00 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce4:	e00c      	b.n	8002d00 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d004      	beq.n	8002cfa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf8:	e002      	b.n	8002d00 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f949 	bl	8002f92 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00c      	beq.n	8002d24 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d007      	beq.n	8002d24 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2210      	movs	r2, #16
 8002d22:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d006      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f930 	bl	8002fa6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d009      	beq.n	8002d64 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fe fb78 	bl	8001454 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00c      	beq.n	8002d88 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d007      	beq.n	8002d88 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2210      	movs	r2, #16
 8002d86:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d006      	beq.n	8002daa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2208      	movs	r2, #8
 8002da2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f912 	bl	8002fce <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d009      	beq.n	8002dc8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8f9 	bl	8002fba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d006      	beq.n	8002dea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2210      	movs	r2, #16
 8002de2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f8fc 	bl	8002fe2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00b      	beq.n	8002e0c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d006      	beq.n	8002e0c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2208      	movs	r2, #8
 8002e04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f8f5 	bl	8002ff6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d07b      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d072      	beq.n	8002f06 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	f043 0302 	orr.w	r3, r3, #2
 8002e56:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	f043 0304 	orr.w	r3, r3, #4
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d043      	beq.n	8002f06 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d03e      	beq.n	8002f06 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e8e:	2b60      	cmp	r3, #96	@ 0x60
 8002e90:	d02b      	beq.n	8002eea <HAL_CAN_IRQHandler+0x32a>
 8002e92:	2b60      	cmp	r3, #96	@ 0x60
 8002e94:	d82e      	bhi.n	8002ef4 <HAL_CAN_IRQHandler+0x334>
 8002e96:	2b50      	cmp	r3, #80	@ 0x50
 8002e98:	d022      	beq.n	8002ee0 <HAL_CAN_IRQHandler+0x320>
 8002e9a:	2b50      	cmp	r3, #80	@ 0x50
 8002e9c:	d82a      	bhi.n	8002ef4 <HAL_CAN_IRQHandler+0x334>
 8002e9e:	2b40      	cmp	r3, #64	@ 0x40
 8002ea0:	d019      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x316>
 8002ea2:	2b40      	cmp	r3, #64	@ 0x40
 8002ea4:	d826      	bhi.n	8002ef4 <HAL_CAN_IRQHandler+0x334>
 8002ea6:	2b30      	cmp	r3, #48	@ 0x30
 8002ea8:	d010      	beq.n	8002ecc <HAL_CAN_IRQHandler+0x30c>
 8002eaa:	2b30      	cmp	r3, #48	@ 0x30
 8002eac:	d822      	bhi.n	8002ef4 <HAL_CAN_IRQHandler+0x334>
 8002eae:	2b10      	cmp	r3, #16
 8002eb0:	d002      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x2f8>
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d005      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002eb6:	e01d      	b.n	8002ef4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	f043 0308 	orr.w	r3, r3, #8
 8002ebe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ec0:	e019      	b.n	8002ef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	f043 0310 	orr.w	r3, r3, #16
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eca:	e014      	b.n	8002ef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	f043 0320 	orr.w	r3, r3, #32
 8002ed2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ed4:	e00f      	b.n	8002ef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ede:	e00a      	b.n	8002ef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ee8:	e005      	b.n	8002ef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ef2:	e000      	b.n	8002ef6 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ef4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f04:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f872 	bl	800300a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f26:	bf00      	nop
 8002f28:	3728      	adds	r7, #40	@ 0x28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003030:	4b0b      	ldr	r3, [pc, #44]	@ (8003060 <__NVIC_SetPriorityGrouping+0x40>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800303c:	4013      	ands	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003048:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 800304a:	4313      	orrs	r3, r2
 800304c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304e:	4a04      	ldr	r2, [pc, #16]	@ (8003060 <__NVIC_SetPriorityGrouping+0x40>)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	60d3      	str	r3, [r2, #12]
}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000ed00 	.word	0xe000ed00
 8003064:	05fa0000 	.word	0x05fa0000

08003068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800306c:	4b04      	ldr	r3, [pc, #16]	@ (8003080 <__NVIC_GetPriorityGrouping+0x18>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	f003 0307 	and.w	r3, r3, #7
}
 8003076:	4618      	mov	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	2b00      	cmp	r3, #0
 8003094:	db0b      	blt.n	80030ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	f003 021f 	and.w	r2, r3, #31
 800309c:	4907      	ldr	r1, [pc, #28]	@ (80030bc <__NVIC_EnableIRQ+0x38>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	2001      	movs	r0, #1
 80030a6:	fa00 f202 	lsl.w	r2, r0, r2
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000e100 	.word	0xe000e100

080030c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	db0a      	blt.n	80030ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	490c      	ldr	r1, [pc, #48]	@ (800310c <__NVIC_SetPriority+0x4c>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	0112      	lsls	r2, r2, #4
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	440b      	add	r3, r1
 80030e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e8:	e00a      	b.n	8003100 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4908      	ldr	r1, [pc, #32]	@ (8003110 <__NVIC_SetPriority+0x50>)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	3b04      	subs	r3, #4
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	440b      	add	r3, r1
 80030fe:	761a      	strb	r2, [r3, #24]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000e100 	.word	0xe000e100
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	@ 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f1c3 0307 	rsb	r3, r3, #7
 800312e:	2b04      	cmp	r3, #4
 8003130:	bf28      	it	cs
 8003132:	2304      	movcs	r3, #4
 8003134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3304      	adds	r3, #4
 800313a:	2b06      	cmp	r3, #6
 800313c:	d902      	bls.n	8003144 <NVIC_EncodePriority+0x30>
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3b03      	subs	r3, #3
 8003142:	e000      	b.n	8003146 <NVIC_EncodePriority+0x32>
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	f04f 32ff 	mov.w	r2, #4294967295
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	401a      	ands	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800315c:	f04f 31ff 	mov.w	r1, #4294967295
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	43d9      	mvns	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	4313      	orrs	r3, r2
         );
}
 800316e:	4618      	mov	r0, r3
 8003170:	3724      	adds	r7, #36	@ 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800318c:	d301      	bcc.n	8003192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800318e:	2301      	movs	r3, #1
 8003190:	e00f      	b.n	80031b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003192:	4a0a      	ldr	r2, [pc, #40]	@ (80031bc <SysTick_Config+0x40>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3b01      	subs	r3, #1
 8003198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800319a:	210f      	movs	r1, #15
 800319c:	f04f 30ff 	mov.w	r0, #4294967295
 80031a0:	f7ff ff8e 	bl	80030c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a4:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <SysTick_Config+0x40>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031aa:	4b04      	ldr	r3, [pc, #16]	@ (80031bc <SysTick_Config+0x40>)
 80031ac:	2207      	movs	r2, #7
 80031ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	e000e010 	.word	0xe000e010

080031c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ff29 	bl	8003020 <__NVIC_SetPriorityGrouping>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e8:	f7ff ff3e 	bl	8003068 <__NVIC_GetPriorityGrouping>
 80031ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	6978      	ldr	r0, [r7, #20]
 80031f4:	f7ff ff8e 	bl	8003114 <NVIC_EncodePriority>
 80031f8:	4602      	mov	r2, r0
 80031fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ff5d 	bl	80030c0 <__NVIC_SetPriority>
}
 8003206:	bf00      	nop
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff31 	bl	8003084 <__NVIC_EnableIRQ>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ffa2 	bl	800317c <SysTick_Config>
 8003238:	4603      	mov	r3, r0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	@ 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	e175      	b.n	8003550 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003264:	2201      	movs	r2, #1
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	429a      	cmp	r2, r3
 800327e:	f040 8164 	bne.w	800354a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b01      	cmp	r3, #1
 800328c:	d005      	beq.n	800329a <HAL_GPIO_Init+0x56>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d130      	bne.n	80032fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	2203      	movs	r2, #3
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032d0:	2201      	movs	r2, #1
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	f003 0201 	and.w	r2, r3, #1
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	2b03      	cmp	r3, #3
 8003306:	d017      	beq.n	8003338 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	2203      	movs	r2, #3
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d123      	bne.n	800338c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	08da      	lsrs	r2, r3, #3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3208      	adds	r2, #8
 800334c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	220f      	movs	r2, #15
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	08da      	lsrs	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3208      	adds	r2, #8
 8003386:	69b9      	ldr	r1, [r7, #24]
 8003388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0203 	and.w	r2, r3, #3
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80be 	beq.w	800354a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ce:	4b66      	ldr	r3, [pc, #408]	@ (8003568 <HAL_GPIO_Init+0x324>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d2:	4a65      	ldr	r2, [pc, #404]	@ (8003568 <HAL_GPIO_Init+0x324>)
 80033d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033da:	4b63      	ldr	r3, [pc, #396]	@ (8003568 <HAL_GPIO_Init+0x324>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80033e6:	4a61      	ldr	r2, [pc, #388]	@ (800356c <HAL_GPIO_Init+0x328>)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	3302      	adds	r3, #2
 80033ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	220f      	movs	r2, #15
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a58      	ldr	r2, [pc, #352]	@ (8003570 <HAL_GPIO_Init+0x32c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d037      	beq.n	8003482 <HAL_GPIO_Init+0x23e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a57      	ldr	r2, [pc, #348]	@ (8003574 <HAL_GPIO_Init+0x330>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d031      	beq.n	800347e <HAL_GPIO_Init+0x23a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a56      	ldr	r2, [pc, #344]	@ (8003578 <HAL_GPIO_Init+0x334>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d02b      	beq.n	800347a <HAL_GPIO_Init+0x236>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a55      	ldr	r2, [pc, #340]	@ (800357c <HAL_GPIO_Init+0x338>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d025      	beq.n	8003476 <HAL_GPIO_Init+0x232>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a54      	ldr	r2, [pc, #336]	@ (8003580 <HAL_GPIO_Init+0x33c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01f      	beq.n	8003472 <HAL_GPIO_Init+0x22e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a53      	ldr	r2, [pc, #332]	@ (8003584 <HAL_GPIO_Init+0x340>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d019      	beq.n	800346e <HAL_GPIO_Init+0x22a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a52      	ldr	r2, [pc, #328]	@ (8003588 <HAL_GPIO_Init+0x344>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_GPIO_Init+0x226>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a51      	ldr	r2, [pc, #324]	@ (800358c <HAL_GPIO_Init+0x348>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00d      	beq.n	8003466 <HAL_GPIO_Init+0x222>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a50      	ldr	r2, [pc, #320]	@ (8003590 <HAL_GPIO_Init+0x34c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <HAL_GPIO_Init+0x21e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a4f      	ldr	r2, [pc, #316]	@ (8003594 <HAL_GPIO_Init+0x350>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_GPIO_Init+0x21a>
 800345a:	2309      	movs	r3, #9
 800345c:	e012      	b.n	8003484 <HAL_GPIO_Init+0x240>
 800345e:	230a      	movs	r3, #10
 8003460:	e010      	b.n	8003484 <HAL_GPIO_Init+0x240>
 8003462:	2308      	movs	r3, #8
 8003464:	e00e      	b.n	8003484 <HAL_GPIO_Init+0x240>
 8003466:	2307      	movs	r3, #7
 8003468:	e00c      	b.n	8003484 <HAL_GPIO_Init+0x240>
 800346a:	2306      	movs	r3, #6
 800346c:	e00a      	b.n	8003484 <HAL_GPIO_Init+0x240>
 800346e:	2305      	movs	r3, #5
 8003470:	e008      	b.n	8003484 <HAL_GPIO_Init+0x240>
 8003472:	2304      	movs	r3, #4
 8003474:	e006      	b.n	8003484 <HAL_GPIO_Init+0x240>
 8003476:	2303      	movs	r3, #3
 8003478:	e004      	b.n	8003484 <HAL_GPIO_Init+0x240>
 800347a:	2302      	movs	r3, #2
 800347c:	e002      	b.n	8003484 <HAL_GPIO_Init+0x240>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <HAL_GPIO_Init+0x240>
 8003482:	2300      	movs	r3, #0
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	f002 0203 	and.w	r2, r2, #3
 800348a:	0092      	lsls	r2, r2, #2
 800348c:	4093      	lsls	r3, r2
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003494:	4935      	ldr	r1, [pc, #212]	@ (800356c <HAL_GPIO_Init+0x328>)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	089b      	lsrs	r3, r3, #2
 800349a:	3302      	adds	r3, #2
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003598 <HAL_GPIO_Init+0x354>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034c6:	4a34      	ldr	r2, [pc, #208]	@ (8003598 <HAL_GPIO_Init+0x354>)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034cc:	4b32      	ldr	r3, [pc, #200]	@ (8003598 <HAL_GPIO_Init+0x354>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034f0:	4a29      	ldr	r2, [pc, #164]	@ (8003598 <HAL_GPIO_Init+0x354>)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034f6:	4b28      	ldr	r3, [pc, #160]	@ (8003598 <HAL_GPIO_Init+0x354>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	43db      	mvns	r3, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4013      	ands	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800351a:	4a1f      	ldr	r2, [pc, #124]	@ (8003598 <HAL_GPIO_Init+0x354>)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003520:	4b1d      	ldr	r3, [pc, #116]	@ (8003598 <HAL_GPIO_Init+0x354>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003544:	4a14      	ldr	r2, [pc, #80]	@ (8003598 <HAL_GPIO_Init+0x354>)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3301      	adds	r3, #1
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b0f      	cmp	r3, #15
 8003554:	f67f ae86 	bls.w	8003264 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003558:	bf00      	nop
 800355a:	bf00      	nop
 800355c:	3724      	adds	r7, #36	@ 0x24
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800
 800356c:	40013800 	.word	0x40013800
 8003570:	40020000 	.word	0x40020000
 8003574:	40020400 	.word	0x40020400
 8003578:	40020800 	.word	0x40020800
 800357c:	40020c00 	.word	0x40020c00
 8003580:	40021000 	.word	0x40021000
 8003584:	40021400 	.word	0x40021400
 8003588:	40021800 	.word	0x40021800
 800358c:	40021c00 	.word	0x40021c00
 8003590:	40022000 	.word	0x40022000
 8003594:	40022400 	.word	0x40022400
 8003598:	40013c00 	.word	0x40013c00

0800359c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
 80035a8:	4613      	mov	r3, r2
 80035aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035ac:	787b      	ldrb	r3, [r7, #1]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035b2:	887a      	ldrh	r2, [r7, #2]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80035b8:	e003      	b.n	80035c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80035ba:	887b      	ldrh	r3, [r7, #2]
 80035bc:	041a      	lsls	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	619a      	str	r2, [r3, #24]
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b085      	sub	sp, #20
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	460b      	mov	r3, r1
 80035d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035e0:	887a      	ldrh	r2, [r7, #2]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4013      	ands	r3, r2
 80035e6:	041a      	lsls	r2, r3, #16
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	43d9      	mvns	r1, r3
 80035ec:	887b      	ldrh	r3, [r7, #2]
 80035ee:	400b      	ands	r3, r1
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	619a      	str	r2, [r3, #24]
}
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800360c:	2300      	movs	r3, #0
 800360e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e29b      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8087 	beq.w	8003736 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003628:	4b96      	ldr	r3, [pc, #600]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 030c 	and.w	r3, r3, #12
 8003630:	2b04      	cmp	r3, #4
 8003632:	d00c      	beq.n	800364e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003634:	4b93      	ldr	r3, [pc, #588]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 030c 	and.w	r3, r3, #12
 800363c:	2b08      	cmp	r3, #8
 800363e:	d112      	bne.n	8003666 <HAL_RCC_OscConfig+0x62>
 8003640:	4b90      	ldr	r3, [pc, #576]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003648:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800364c:	d10b      	bne.n	8003666 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364e:	4b8d      	ldr	r3, [pc, #564]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d06c      	beq.n	8003734 <HAL_RCC_OscConfig+0x130>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d168      	bne.n	8003734 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e275      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800366e:	d106      	bne.n	800367e <HAL_RCC_OscConfig+0x7a>
 8003670:	4b84      	ldr	r3, [pc, #528]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a83      	ldr	r2, [pc, #524]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	e02e      	b.n	80036dc <HAL_RCC_OscConfig+0xd8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x9c>
 8003686:	4b7f      	ldr	r3, [pc, #508]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a7e      	ldr	r2, [pc, #504]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 800368c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	4b7c      	ldr	r3, [pc, #496]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7b      	ldr	r2, [pc, #492]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003698:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e01d      	b.n	80036dc <HAL_RCC_OscConfig+0xd8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0xc0>
 80036aa:	4b76      	ldr	r3, [pc, #472]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a75      	ldr	r2, [pc, #468]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b73      	ldr	r3, [pc, #460]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a72      	ldr	r2, [pc, #456]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e00b      	b.n	80036dc <HAL_RCC_OscConfig+0xd8>
 80036c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a6b      	ldr	r2, [pc, #428]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe fb64 	bl	8001db0 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ec:	f7fe fb60 	bl	8001db0 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	@ 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e229      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fe:	4b61      	ldr	r3, [pc, #388]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0xe8>
 800370a:	e014      	b.n	8003736 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fe fb50 	bl	8001db0 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003714:	f7fe fb4c 	bl	8001db0 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	@ 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e215      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003726:	4b57      	ldr	r3, [pc, #348]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x110>
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d069      	beq.n	8003816 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003742:	4b50      	ldr	r3, [pc, #320]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374e:	4b4d      	ldr	r3, [pc, #308]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	2b08      	cmp	r3, #8
 8003758:	d11c      	bne.n	8003794 <HAL_RCC_OscConfig+0x190>
 800375a:	4b4a      	ldr	r3, [pc, #296]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d116      	bne.n	8003794 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003766:	4b47      	ldr	r3, [pc, #284]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <HAL_RCC_OscConfig+0x17a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d001      	beq.n	800377e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e1e9      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377e:	4b41      	ldr	r3, [pc, #260]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	493d      	ldr	r1, [pc, #244]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003792:	e040      	b.n	8003816 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d023      	beq.n	80037e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800379c:	4b39      	ldr	r3, [pc, #228]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a38      	ldr	r2, [pc, #224]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fe fb02 	bl	8001db0 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b0:	f7fe fafe 	bl	8001db0 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e1c7      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c2:	4b30      	ldr	r3, [pc, #192]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4929      	ldr	r1, [pc, #164]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
 80037e2:	e018      	b.n	8003816 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e4:	4b27      	ldr	r3, [pc, #156]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a26      	ldr	r2, [pc, #152]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fe fade 	bl	8001db0 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f8:	f7fe fada 	bl	8001db0 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e1a3      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380a:	4b1e      	ldr	r3, [pc, #120]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d038      	beq.n	8003894 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d019      	beq.n	800385e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800382a:	4b16      	ldr	r3, [pc, #88]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 800382c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382e:	4a15      	ldr	r2, [pc, #84]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003836:	f7fe fabb 	bl	8001db0 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800383e:	f7fe fab7 	bl	8001db0 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e180      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003850:	4b0c      	ldr	r3, [pc, #48]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x23a>
 800385c:	e01a      	b.n	8003894 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385e:	4b09      	ldr	r3, [pc, #36]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003862:	4a08      	ldr	r2, [pc, #32]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fe faa1 	bl	8001db0 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003870:	e00a      	b.n	8003888 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003872:	f7fe fa9d 	bl	8001db0 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d903      	bls.n	8003888 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e166      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>
 8003884:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003888:	4b92      	ldr	r3, [pc, #584]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 800388a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1ee      	bne.n	8003872 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80a4 	beq.w	80039ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a2:	4b8c      	ldr	r3, [pc, #560]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10d      	bne.n	80038ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	4b89      	ldr	r3, [pc, #548]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	4a88      	ldr	r2, [pc, #544]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 80038b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ba:	4b86      	ldr	r3, [pc, #536]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c6:	2301      	movs	r3, #1
 80038c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ca:	4b83      	ldr	r3, [pc, #524]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d118      	bne.n	8003908 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038d6:	4b80      	ldr	r3, [pc, #512]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a7f      	ldr	r2, [pc, #508]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 80038dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e2:	f7fe fa65 	bl	8001db0 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ea:	f7fe fa61 	bl	8001db0 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b64      	cmp	r3, #100	@ 0x64
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e12a      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fc:	4b76      	ldr	r3, [pc, #472]	@ (8003ad8 <HAL_RCC_OscConfig+0x4d4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d106      	bne.n	800391e <HAL_RCC_OscConfig+0x31a>
 8003910:	4b70      	ldr	r3, [pc, #448]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003914:	4a6f      	ldr	r2, [pc, #444]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	6713      	str	r3, [r2, #112]	@ 0x70
 800391c:	e02d      	b.n	800397a <HAL_RCC_OscConfig+0x376>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0x33c>
 8003926:	4b6b      	ldr	r3, [pc, #428]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392a:	4a6a      	ldr	r2, [pc, #424]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	6713      	str	r3, [r2, #112]	@ 0x70
 8003932:	4b68      	ldr	r3, [pc, #416]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003936:	4a67      	ldr	r2, [pc, #412]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003938:	f023 0304 	bic.w	r3, r3, #4
 800393c:	6713      	str	r3, [r2, #112]	@ 0x70
 800393e:	e01c      	b.n	800397a <HAL_RCC_OscConfig+0x376>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b05      	cmp	r3, #5
 8003946:	d10c      	bne.n	8003962 <HAL_RCC_OscConfig+0x35e>
 8003948:	4b62      	ldr	r3, [pc, #392]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394c:	4a61      	ldr	r2, [pc, #388]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 800394e:	f043 0304 	orr.w	r3, r3, #4
 8003952:	6713      	str	r3, [r2, #112]	@ 0x70
 8003954:	4b5f      	ldr	r3, [pc, #380]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003958:	4a5e      	ldr	r2, [pc, #376]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003960:	e00b      	b.n	800397a <HAL_RCC_OscConfig+0x376>
 8003962:	4b5c      	ldr	r3, [pc, #368]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003966:	4a5b      	ldr	r2, [pc, #364]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	6713      	str	r3, [r2, #112]	@ 0x70
 800396e:	4b59      	ldr	r3, [pc, #356]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003972:	4a58      	ldr	r2, [pc, #352]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003974:	f023 0304 	bic.w	r3, r3, #4
 8003978:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d015      	beq.n	80039ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003982:	f7fe fa15 	bl	8001db0 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003988:	e00a      	b.n	80039a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398a:	f7fe fa11 	bl	8001db0 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003998:	4293      	cmp	r3, r2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e0d8      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a0:	4b4c      	ldr	r3, [pc, #304]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ee      	beq.n	800398a <HAL_RCC_OscConfig+0x386>
 80039ac:	e014      	b.n	80039d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fe f9ff 	bl	8001db0 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fe f9fb 	bl	8001db0 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e0c2      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039cc:	4b41      	ldr	r3, [pc, #260]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1ee      	bne.n	80039b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d105      	bne.n	80039ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039de:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	4a3c      	ldr	r2, [pc, #240]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 80039e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80ae 	beq.w	8003b50 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039f4:	4b37      	ldr	r3, [pc, #220]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d06d      	beq.n	8003adc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d14b      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a08:	4b32      	ldr	r3, [pc, #200]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a31      	ldr	r2, [pc, #196]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fe f9cc 	bl	8001db0 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1c:	f7fe f9c8 	bl	8001db0 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e091      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2e:	4b29      	ldr	r3, [pc, #164]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	019b      	lsls	r3, r3, #6
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	3b01      	subs	r3, #1
 8003a54:	041b      	lsls	r3, r3, #16
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	061b      	lsls	r3, r3, #24
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a64:	071b      	lsls	r3, r3, #28
 8003a66:	491b      	ldr	r1, [pc, #108]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a6c:	4b19      	ldr	r3, [pc, #100]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a18      	ldr	r2, [pc, #96]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fe f99a 	bl	8001db0 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a80:	f7fe f996 	bl	8001db0 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e05f      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a92:	4b10      	ldr	r3, [pc, #64]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0x47c>
 8003a9e:	e057      	b.n	8003b50 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fe f980 	bl	8001db0 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab4:	f7fe f97c 	bl	8001db0 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e045      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac6:	4b03      	ldr	r3, [pc, #12]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4b0>
 8003ad2:	e03d      	b.n	8003b50 <HAL_RCC_OscConfig+0x54c>
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003adc:	4b1f      	ldr	r3, [pc, #124]	@ (8003b5c <HAL_RCC_OscConfig+0x558>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d030      	beq.n	8003b4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d129      	bne.n	8003b4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d122      	bne.n	8003b4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d119      	bne.n	8003b4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	3b01      	subs	r3, #1
 8003b26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d10f      	bne.n	8003b4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b46:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800

08003b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0d0      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b78:	4b6a      	ldr	r3, [pc, #424]	@ (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d910      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b67      	ldr	r3, [pc, #412]	@ (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 020f 	bic.w	r2, r3, #15
 8003b8e:	4965      	ldr	r1, [pc, #404]	@ (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b63      	ldr	r3, [pc, #396]	@ (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0b8      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d020      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc0:	4b59      	ldr	r3, [pc, #356]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4a58      	ldr	r2, [pc, #352]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bd8:	4b53      	ldr	r3, [pc, #332]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4a52      	ldr	r2, [pc, #328]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003bde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003be2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be4:	4b50      	ldr	r3, [pc, #320]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	494d      	ldr	r1, [pc, #308]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d040      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d107      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0a:	4b47      	ldr	r3, [pc, #284]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d115      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e07f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c22:	4b41      	ldr	r3, [pc, #260]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e073      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c32:	4b3d      	ldr	r3, [pc, #244]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e06b      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c42:	4b39      	ldr	r3, [pc, #228]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f023 0203 	bic.w	r2, r3, #3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4936      	ldr	r1, [pc, #216]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c54:	f7fe f8ac 	bl	8001db0 <HAL_GetTick>
 8003c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c5c:	f7fe f8a8 	bl	8001db0 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e053      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c72:	4b2d      	ldr	r3, [pc, #180]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 020c 	and.w	r2, r3, #12
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d1eb      	bne.n	8003c5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c84:	4b27      	ldr	r3, [pc, #156]	@ (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d210      	bcs.n	8003cb4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c92:	4b24      	ldr	r3, [pc, #144]	@ (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 020f 	bic.w	r2, r3, #15
 8003c9a:	4922      	ldr	r1, [pc, #136]	@ (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b20      	ldr	r3, [pc, #128]	@ (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e032      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc0:	4b19      	ldr	r3, [pc, #100]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4916      	ldr	r1, [pc, #88]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cde:	4b12      	ldr	r3, [pc, #72]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	490e      	ldr	r1, [pc, #56]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cf2:	f000 f821 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	490a      	ldr	r1, [pc, #40]	@ (8003d2c <HAL_RCC_ClockConfig+0x1cc>)
 8003d04:	5ccb      	ldrb	r3, [r1, r3]
 8003d06:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0a:	4a09      	ldr	r2, [pc, #36]	@ (8003d30 <HAL_RCC_ClockConfig+0x1d0>)
 8003d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d0e:	4b09      	ldr	r3, [pc, #36]	@ (8003d34 <HAL_RCC_ClockConfig+0x1d4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe f808 	bl	8001d28 <HAL_InitTick>

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40023c00 	.word	0x40023c00
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	08006570 	.word	0x08006570
 8003d30:	20000004 	.word	0x20000004
 8003d34:	20000008 	.word	0x20000008

08003d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d3c:	b090      	sub	sp, #64	@ 0x40
 8003d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d44:	2300      	movs	r3, #0
 8003d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d48:	2300      	movs	r3, #0
 8003d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d50:	4b59      	ldr	r3, [pc, #356]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d00d      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0x40>
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	f200 80a1 	bhi.w	8003ea4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x34>
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d003      	beq.n	8003d72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d6a:	e09b      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d6c:	4b53      	ldr	r3, [pc, #332]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x184>)
 8003d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d70:	e09b      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d72:	4b53      	ldr	r3, [pc, #332]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d76:	e098      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d78:	4b4f      	ldr	r3, [pc, #316]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d82:	4b4d      	ldr	r3, [pc, #308]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d028      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	099b      	lsrs	r3, r3, #6
 8003d94:	2200      	movs	r2, #0
 8003d96:	623b      	str	r3, [r7, #32]
 8003d98:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003da0:	2100      	movs	r1, #0
 8003da2:	4b47      	ldr	r3, [pc, #284]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003da4:	fb03 f201 	mul.w	r2, r3, r1
 8003da8:	2300      	movs	r3, #0
 8003daa:	fb00 f303 	mul.w	r3, r0, r3
 8003dae:	4413      	add	r3, r2
 8003db0:	4a43      	ldr	r2, [pc, #268]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003db2:	fba0 1202 	umull	r1, r2, r0, r2
 8003db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003db8:	460a      	mov	r2, r1
 8003dba:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003dbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dbe:	4413      	add	r3, r2
 8003dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
 8003dc8:	61fa      	str	r2, [r7, #28]
 8003dca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003dd2:	f7fc fbed 	bl	80005b0 <__aeabi_uldivmod>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4613      	mov	r3, r2
 8003ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dde:	e053      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de0:	4b35      	ldr	r3, [pc, #212]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	099b      	lsrs	r3, r3, #6
 8003de6:	2200      	movs	r2, #0
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	617a      	str	r2, [r7, #20]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003df2:	f04f 0b00 	mov.w	fp, #0
 8003df6:	4652      	mov	r2, sl
 8003df8:	465b      	mov	r3, fp
 8003dfa:	f04f 0000 	mov.w	r0, #0
 8003dfe:	f04f 0100 	mov.w	r1, #0
 8003e02:	0159      	lsls	r1, r3, #5
 8003e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e08:	0150      	lsls	r0, r2, #5
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	ebb2 080a 	subs.w	r8, r2, sl
 8003e12:	eb63 090b 	sbc.w	r9, r3, fp
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e2a:	ebb2 0408 	subs.w	r4, r2, r8
 8003e2e:	eb63 0509 	sbc.w	r5, r3, r9
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	00eb      	lsls	r3, r5, #3
 8003e3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e40:	00e2      	lsls	r2, r4, #3
 8003e42:	4614      	mov	r4, r2
 8003e44:	461d      	mov	r5, r3
 8003e46:	eb14 030a 	adds.w	r3, r4, sl
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	eb45 030b 	adc.w	r3, r5, fp
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e5e:	4629      	mov	r1, r5
 8003e60:	028b      	lsls	r3, r1, #10
 8003e62:	4621      	mov	r1, r4
 8003e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e68:	4621      	mov	r1, r4
 8003e6a:	028a      	lsls	r2, r1, #10
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e72:	2200      	movs	r2, #0
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	60fa      	str	r2, [r7, #12]
 8003e78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e7c:	f7fc fb98 	bl	80005b0 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4613      	mov	r3, r2
 8003e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e88:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	0c1b      	lsrs	r3, r3, #16
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	3301      	adds	r3, #1
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003e98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ea2:	e002      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea4:	4b05      	ldr	r3, [pc, #20]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x184>)
 8003ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3740      	adds	r7, #64	@ 0x40
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	00f42400 	.word	0x00f42400
 8003ec0:	017d7840 	.word	0x017d7840

08003ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e09d      	b.n	8004012 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d108      	bne.n	8003ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ee6:	d009      	beq.n	8003efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	61da      	str	r2, [r3, #28]
 8003eee:	e005      	b.n	8003efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fd fb3c 	bl	8001594 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f3c:	d902      	bls.n	8003f44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	e002      	b.n	8003f4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003f52:	d007      	beq.n	8003f64 <HAL_SPI_Init+0xa0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f5c:	d002      	beq.n	8003f64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa6:	ea42 0103 	orr.w	r1, r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	0c1b      	lsrs	r3, r3, #16
 8003fc0:	f003 0204 	and.w	r2, r3, #4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003fe0:	ea42 0103 	orr.w	r1, r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004000:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b088      	sub	sp, #32
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	4613      	mov	r3, r2
 8004028:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_SPI_Transmit+0x22>
 8004038:	2302      	movs	r3, #2
 800403a:	e15f      	b.n	80042fc <HAL_SPI_Transmit+0x2e2>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004044:	f7fd feb4 	bl	8001db0 <HAL_GetTick>
 8004048:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b01      	cmp	r3, #1
 8004058:	d002      	beq.n	8004060 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800405a:	2302      	movs	r3, #2
 800405c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800405e:	e148      	b.n	80042f2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_SPI_Transmit+0x52>
 8004066:	88fb      	ldrh	r3, [r7, #6]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d102      	bne.n	8004072 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004070:	e13f      	b.n	80042f2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2203      	movs	r2, #3
 8004076:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	88fa      	ldrh	r2, [r7, #6]
 800408a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040bc:	d10f      	bne.n	80040de <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e8:	2b40      	cmp	r3, #64	@ 0x40
 80040ea:	d007      	beq.n	80040fc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004104:	d94f      	bls.n	80041a6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_SPI_Transmit+0xfa>
 800410e:	8afb      	ldrh	r3, [r7, #22]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d142      	bne.n	800419a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004118:	881a      	ldrh	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004124:	1c9a      	adds	r2, r3, #2
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004138:	e02f      	b.n	800419a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d112      	bne.n	800416e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414c:	881a      	ldrh	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004158:	1c9a      	adds	r2, r3, #2
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800416c:	e015      	b.n	800419a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800416e:	f7fd fe1f 	bl	8001db0 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d803      	bhi.n	8004186 <HAL_SPI_Transmit+0x16c>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d102      	bne.n	800418c <HAL_SPI_Transmit+0x172>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d106      	bne.n	800419a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004198:	e0ab      	b.n	80042f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ca      	bne.n	800413a <HAL_SPI_Transmit+0x120>
 80041a4:	e080      	b.n	80042a8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_SPI_Transmit+0x19a>
 80041ae:	8afb      	ldrh	r3, [r7, #22]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d174      	bne.n	800429e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d912      	bls.n	80041e4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c2:	881a      	ldrh	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ce:	1c9a      	adds	r2, r3, #2
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b02      	subs	r3, #2
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041e2:	e05c      	b.n	800429e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	7812      	ldrb	r2, [r2, #0]
 80041f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800420a:	e048      	b.n	800429e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b02      	cmp	r3, #2
 8004218:	d12b      	bne.n	8004272 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d912      	bls.n	800424a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004228:	881a      	ldrh	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004234:	1c9a      	adds	r2, r3, #2
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b02      	subs	r3, #2
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004248:	e029      	b.n	800429e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	7812      	ldrb	r2, [r2, #0]
 8004256:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004270:	e015      	b.n	800429e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004272:	f7fd fd9d 	bl	8001db0 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d803      	bhi.n	800428a <HAL_SPI_Transmit+0x270>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d102      	bne.n	8004290 <HAL_SPI_Transmit+0x276>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d106      	bne.n	800429e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800429c:	e029      	b.n	80042f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1b1      	bne.n	800420c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	6839      	ldr	r1, [r7, #0]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 fd1d 	bl	8004cec <SPI_EndRxTxTransaction>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	77fb      	strb	r3, [r7, #31]
 80042e8:	e003      	b.n	80042f2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80042fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b01      	cmp	r3, #1
 8004322:	d002      	beq.n	800432a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004324:	2302      	movs	r3, #2
 8004326:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004328:	e11a      	b.n	8004560 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004332:	d112      	bne.n	800435a <HAL_SPI_Receive+0x56>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10e      	bne.n	800435a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2204      	movs	r2, #4
 8004340:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004344:	88fa      	ldrh	r2, [r7, #6]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	4613      	mov	r3, r2
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f90e 	bl	8004572 <HAL_SPI_TransmitReceive>
 8004356:	4603      	mov	r3, r0
 8004358:	e107      	b.n	800456a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_SPI_Receive+0x64>
 8004364:	2302      	movs	r3, #2
 8004366:	e100      	b.n	800456a <HAL_SPI_Receive+0x266>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004370:	f7fd fd1e 	bl	8001db0 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_SPI_Receive+0x7e>
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004386:	e0eb      	b.n	8004560 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2204      	movs	r2, #4
 800438c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	88fa      	ldrh	r2, [r7, #6]
 80043a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043d2:	d908      	bls.n	80043e6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	e007      	b.n	80043f6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043f4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043fe:	d10f      	bne.n	8004420 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800440e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800441e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442a:	2b40      	cmp	r3, #64	@ 0x40
 800442c:	d007      	beq.n	800443e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800443c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004446:	d86f      	bhi.n	8004528 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004448:	e034      	b.n	80044b4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b01      	cmp	r3, #1
 8004456:	d117      	bne.n	8004488 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f103 020c 	add.w	r2, r3, #12
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004464:	7812      	ldrb	r2, [r2, #0]
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004486:	e015      	b.n	80044b4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004488:	f7fd fc92 	bl	8001db0 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d803      	bhi.n	80044a0 <HAL_SPI_Receive+0x19c>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d102      	bne.n	80044a6 <HAL_SPI_Receive+0x1a2>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80044b2:	e055      	b.n	8004560 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1c4      	bne.n	800444a <HAL_SPI_Receive+0x146>
 80044c0:	e038      	b.n	8004534 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d115      	bne.n	80044fc <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	b292      	uxth	r2, r2
 80044dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	1c9a      	adds	r2, r3, #2
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80044fa:	e015      	b.n	8004528 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044fc:	f7fd fc58 	bl	8001db0 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d803      	bhi.n	8004514 <HAL_SPI_Receive+0x210>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004512:	d102      	bne.n	800451a <HAL_SPI_Receive+0x216>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004526:	e01b      	b.n	8004560 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1c6      	bne.n	80044c2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	6839      	ldr	r1, [r7, #0]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 fb5b 	bl	8004bf4 <SPI_EndRxTransaction>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
 8004556:	e003      	b.n	8004560 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004568:	7dfb      	ldrb	r3, [r7, #23]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b08a      	sub	sp, #40	@ 0x28
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004580:	2301      	movs	r3, #1
 8004582:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_SPI_TransmitReceive+0x26>
 8004594:	2302      	movs	r3, #2
 8004596:	e20a      	b.n	80049ae <HAL_SPI_TransmitReceive+0x43c>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045a0:	f7fd fc06 	bl	8001db0 <HAL_GetTick>
 80045a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80045b4:	887b      	ldrh	r3, [r7, #2]
 80045b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80045b8:	887b      	ldrh	r3, [r7, #2]
 80045ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045bc:	7efb      	ldrb	r3, [r7, #27]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d00e      	beq.n	80045e0 <HAL_SPI_TransmitReceive+0x6e>
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045c8:	d106      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d102      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x66>
 80045d2:	7efb      	ldrb	r3, [r7, #27]
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d003      	beq.n	80045e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80045de:	e1e0      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_SPI_TransmitReceive+0x80>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_SPI_TransmitReceive+0x80>
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80045f8:	e1d3      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b04      	cmp	r3, #4
 8004604:	d003      	beq.n	800460e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2205      	movs	r2, #5
 800460a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	887a      	ldrh	r2, [r7, #2]
 800461e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	887a      	ldrh	r2, [r7, #2]
 8004626:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	887a      	ldrh	r2, [r7, #2]
 8004634:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	887a      	ldrh	r2, [r7, #2]
 800463a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004650:	d802      	bhi.n	8004658 <HAL_SPI_TransmitReceive+0xe6>
 8004652:	8a3b      	ldrh	r3, [r7, #16]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d908      	bls.n	800466a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004666:	605a      	str	r2, [r3, #4]
 8004668:	e007      	b.n	800467a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004678:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b40      	cmp	r3, #64	@ 0x40
 8004686:	d007      	beq.n	8004698 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004696:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046a0:	f240 8081 	bls.w	80047a6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_SPI_TransmitReceive+0x140>
 80046ac:	8a7b      	ldrh	r3, [r7, #18]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d16d      	bne.n	800478e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b6:	881a      	ldrh	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c2:	1c9a      	adds	r2, r3, #2
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d6:	e05a      	b.n	800478e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d11b      	bne.n	800471e <HAL_SPI_TransmitReceive+0x1ac>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d016      	beq.n	800471e <HAL_SPI_TransmitReceive+0x1ac>
 80046f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d113      	bne.n	800471e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fa:	881a      	ldrh	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004706:	1c9a      	adds	r2, r3, #2
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b01      	cmp	r3, #1
 800472a:	d11c      	bne.n	8004766 <HAL_SPI_TransmitReceive+0x1f4>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d016      	beq.n	8004766 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	b292      	uxth	r2, r2
 8004744:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	1c9a      	adds	r2, r3, #2
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004762:	2301      	movs	r3, #1
 8004764:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004766:	f7fd fb23 	bl	8001db0 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004772:	429a      	cmp	r2, r3
 8004774:	d80b      	bhi.n	800478e <HAL_SPI_TransmitReceive+0x21c>
 8004776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d007      	beq.n	800478e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800478c:	e109      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d19f      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x166>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d199      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x166>
 80047a4:	e0e3      	b.n	800496e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_SPI_TransmitReceive+0x244>
 80047ae:	8a7b      	ldrh	r3, [r7, #18]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	f040 80cf 	bne.w	8004954 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d912      	bls.n	80047e6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c4:	881a      	ldrh	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d0:	1c9a      	adds	r2, r3, #2
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b02      	subs	r3, #2
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047e4:	e0b6      	b.n	8004954 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	7812      	ldrb	r2, [r2, #0]
 80047f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800480c:	e0a2      	b.n	8004954 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b02      	cmp	r3, #2
 800481a:	d134      	bne.n	8004886 <HAL_SPI_TransmitReceive+0x314>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d02f      	beq.n	8004886 <HAL_SPI_TransmitReceive+0x314>
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	2b01      	cmp	r3, #1
 800482a:	d12c      	bne.n	8004886 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b01      	cmp	r3, #1
 8004834:	d912      	bls.n	800485c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	881a      	ldrh	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004846:	1c9a      	adds	r2, r3, #2
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b02      	subs	r3, #2
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800485a:	e012      	b.n	8004882 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	7812      	ldrb	r2, [r2, #0]
 8004868:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b01      	cmp	r3, #1
 8004892:	d148      	bne.n	8004926 <HAL_SPI_TransmitReceive+0x3b4>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d042      	beq.n	8004926 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d923      	bls.n	80048f4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	b292      	uxth	r2, r2
 80048b8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	1c9a      	adds	r2, r3, #2
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b02      	subs	r3, #2
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d81f      	bhi.n	8004922 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048f0:	605a      	str	r2, [r3, #4]
 80048f2:	e016      	b.n	8004922 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f103 020c 	add.w	r2, r3, #12
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004900:	7812      	ldrb	r2, [r2, #0]
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004922:	2301      	movs	r3, #1
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004926:	f7fd fa43 	bl	8001db0 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004932:	429a      	cmp	r2, r3
 8004934:	d803      	bhi.n	800493e <HAL_SPI_TransmitReceive+0x3cc>
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d102      	bne.n	8004944 <HAL_SPI_TransmitReceive+0x3d2>
 800493e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004940:	2b00      	cmp	r3, #0
 8004942:	d107      	bne.n	8004954 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004952:	e026      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	f47f af57 	bne.w	800480e <HAL_SPI_TransmitReceive+0x29c>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	f47f af50 	bne.w	800480e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f9ba 	bl	8004cec <SPI_EndRxTxTransaction>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004998:	e003      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80049aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3728      	adds	r7, #40	@ 0x28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049c8:	f7fd f9f2 	bl	8001db0 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d0:	1a9b      	subs	r3, r3, r2
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	4413      	add	r3, r2
 80049d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049d8:	f7fd f9ea 	bl	8001db0 <HAL_GetTick>
 80049dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049de:	4b39      	ldr	r3, [pc, #228]	@ (8004ac4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	015b      	lsls	r3, r3, #5
 80049e4:	0d1b      	lsrs	r3, r3, #20
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ee:	e054      	b.n	8004a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d050      	beq.n	8004a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049f8:	f7fd f9da 	bl	8001db0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d902      	bls.n	8004a0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d13d      	bne.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a26:	d111      	bne.n	8004a4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a30:	d004      	beq.n	8004a3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3a:	d107      	bne.n	8004a4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a54:	d10f      	bne.n	8004a76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e017      	b.n	8004aba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	bf0c      	ite	eq
 8004aaa:	2301      	moveq	r3, #1
 8004aac:	2300      	movne	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d19b      	bne.n	80049f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3720      	adds	r7, #32
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000004 	.word	0x20000004

08004ac8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	@ 0x28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ada:	f7fd f969 	bl	8001db0 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004aea:	f7fd f961 	bl	8001db0 <HAL_GetTick>
 8004aee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	330c      	adds	r3, #12
 8004af6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004af8:	4b3d      	ldr	r3, [pc, #244]	@ (8004bf0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	00da      	lsls	r2, r3, #3
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	0d1b      	lsrs	r3, r3, #20
 8004b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b10:	e060      	b.n	8004bd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b18:	d107      	bne.n	8004b2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d104      	bne.n	8004b2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b30:	d050      	beq.n	8004bd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b32:	f7fd f93d 	bl	8001db0 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d902      	bls.n	8004b48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d13d      	bne.n	8004bc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b60:	d111      	bne.n	8004b86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b6a:	d004      	beq.n	8004b76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b74:	d107      	bne.n	8004b86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b8e:	d10f      	bne.n	8004bb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e010      	b.n	8004be6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d196      	bne.n	8004b12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3728      	adds	r7, #40	@ 0x28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20000004 	.word	0x20000004

08004bf4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c08:	d111      	bne.n	8004c2e <SPI_EndRxTransaction+0x3a>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c12:	d004      	beq.n	8004c1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c1c:	d107      	bne.n	8004c2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c2c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c36:	d112      	bne.n	8004c5e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2180      	movs	r1, #128	@ 0x80
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff feb8 	bl	80049b8 <SPI_WaitFlagStateUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d021      	beq.n	8004c92 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c52:	f043 0220 	orr.w	r2, r3, #32
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e03d      	b.n	8004cda <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c5e:	4b21      	ldr	r3, [pc, #132]	@ (8004ce4 <SPI_EndRxTransaction+0xf0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a21      	ldr	r2, [pc, #132]	@ (8004ce8 <SPI_EndRxTransaction+0xf4>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	0d5b      	lsrs	r3, r3, #21
 8004c6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c8a:	2b80      	cmp	r3, #128	@ 0x80
 8004c8c:	d0f2      	beq.n	8004c74 <SPI_EndRxTransaction+0x80>
 8004c8e:	e000      	b.n	8004c92 <SPI_EndRxTransaction+0x9e>
        break;
 8004c90:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c9a:	d11d      	bne.n	8004cd8 <SPI_EndRxTransaction+0xe4>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ca4:	d004      	beq.n	8004cb0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cae:	d113      	bne.n	8004cd8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7ff ff03 	bl	8004ac8 <SPI_WaitFifoStateUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ccc:	f043 0220 	orr.w	r2, r3, #32
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e000      	b.n	8004cda <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000004 	.word	0x20000004
 8004ce8:	165e9f81 	.word	0x165e9f81

08004cec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f7ff fedf 	bl	8004ac8 <SPI_WaitFifoStateUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d007      	beq.n	8004d20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d14:	f043 0220 	orr.w	r2, r3, #32
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e046      	b.n	8004dae <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d20:	4b25      	ldr	r3, [pc, #148]	@ (8004db8 <SPI_EndRxTxTransaction+0xcc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a25      	ldr	r2, [pc, #148]	@ (8004dbc <SPI_EndRxTxTransaction+0xd0>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	0d5b      	lsrs	r3, r3, #21
 8004d2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d30:	fb02 f303 	mul.w	r3, r2, r3
 8004d34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d3e:	d112      	bne.n	8004d66 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2200      	movs	r2, #0
 8004d48:	2180      	movs	r1, #128	@ 0x80
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7ff fe34 	bl	80049b8 <SPI_WaitFlagStateUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d016      	beq.n	8004d84 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d5a:	f043 0220 	orr.w	r2, r3, #32
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e023      	b.n	8004dae <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7c:	2b80      	cmp	r3, #128	@ 0x80
 8004d7e:	d0f2      	beq.n	8004d66 <SPI_EndRxTxTransaction+0x7a>
 8004d80:	e000      	b.n	8004d84 <SPI_EndRxTxTransaction+0x98>
        break;
 8004d82:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7ff fe99 	bl	8004ac8 <SPI_WaitFifoStateUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da0:	f043 0220 	orr.w	r2, r3, #32
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e000      	b.n	8004dae <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000004 	.word	0x20000004
 8004dbc:	165e9f81 	.word	0x165e9f81

08004dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e049      	b.n	8004e66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fc fe4e 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	f000 fd44 	bl	800588c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e049      	b.n	8004f14 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f841 	bl	8004f1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4610      	mov	r0, r2
 8004eae:	f000 fced 	bl	800588c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d109      	bne.n	8004f54 <HAL_TIM_PWM_Start+0x24>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	bf14      	ite	ne
 8004f4c:	2301      	movne	r3, #1
 8004f4e:	2300      	moveq	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	e03c      	b.n	8004fce <HAL_TIM_PWM_Start+0x9e>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d109      	bne.n	8004f6e <HAL_TIM_PWM_Start+0x3e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	bf14      	ite	ne
 8004f66:	2301      	movne	r3, #1
 8004f68:	2300      	moveq	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	e02f      	b.n	8004fce <HAL_TIM_PWM_Start+0x9e>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d109      	bne.n	8004f88 <HAL_TIM_PWM_Start+0x58>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	bf14      	ite	ne
 8004f80:	2301      	movne	r3, #1
 8004f82:	2300      	moveq	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	e022      	b.n	8004fce <HAL_TIM_PWM_Start+0x9e>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b0c      	cmp	r3, #12
 8004f8c:	d109      	bne.n	8004fa2 <HAL_TIM_PWM_Start+0x72>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	bf14      	ite	ne
 8004f9a:	2301      	movne	r3, #1
 8004f9c:	2300      	moveq	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	e015      	b.n	8004fce <HAL_TIM_PWM_Start+0x9e>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b10      	cmp	r3, #16
 8004fa6:	d109      	bne.n	8004fbc <HAL_TIM_PWM_Start+0x8c>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	bf14      	ite	ne
 8004fb4:	2301      	movne	r3, #1
 8004fb6:	2300      	moveq	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	e008      	b.n	8004fce <HAL_TIM_PWM_Start+0x9e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	bf14      	ite	ne
 8004fc8:	2301      	movne	r3, #1
 8004fca:	2300      	moveq	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e092      	b.n	80050fc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d104      	bne.n	8004fe6 <HAL_TIM_PWM_Start+0xb6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fe4:	e023      	b.n	800502e <HAL_TIM_PWM_Start+0xfe>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d104      	bne.n	8004ff6 <HAL_TIM_PWM_Start+0xc6>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ff4:	e01b      	b.n	800502e <HAL_TIM_PWM_Start+0xfe>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d104      	bne.n	8005006 <HAL_TIM_PWM_Start+0xd6>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005004:	e013      	b.n	800502e <HAL_TIM_PWM_Start+0xfe>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b0c      	cmp	r3, #12
 800500a:	d104      	bne.n	8005016 <HAL_TIM_PWM_Start+0xe6>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005014:	e00b      	b.n	800502e <HAL_TIM_PWM_Start+0xfe>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b10      	cmp	r3, #16
 800501a:	d104      	bne.n	8005026 <HAL_TIM_PWM_Start+0xf6>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005024:	e003      	b.n	800502e <HAL_TIM_PWM_Start+0xfe>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2202      	movs	r2, #2
 800502a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2201      	movs	r2, #1
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f000 ffcc 	bl	8005fd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a30      	ldr	r2, [pc, #192]	@ (8005104 <HAL_TIM_PWM_Start+0x1d4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <HAL_TIM_PWM_Start+0x120>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a2f      	ldr	r2, [pc, #188]	@ (8005108 <HAL_TIM_PWM_Start+0x1d8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d101      	bne.n	8005054 <HAL_TIM_PWM_Start+0x124>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <HAL_TIM_PWM_Start+0x126>
 8005054:	2300      	movs	r3, #0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005068:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a25      	ldr	r2, [pc, #148]	@ (8005104 <HAL_TIM_PWM_Start+0x1d4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d022      	beq.n	80050ba <HAL_TIM_PWM_Start+0x18a>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507c:	d01d      	beq.n	80050ba <HAL_TIM_PWM_Start+0x18a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a22      	ldr	r2, [pc, #136]	@ (800510c <HAL_TIM_PWM_Start+0x1dc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d018      	beq.n	80050ba <HAL_TIM_PWM_Start+0x18a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a20      	ldr	r2, [pc, #128]	@ (8005110 <HAL_TIM_PWM_Start+0x1e0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d013      	beq.n	80050ba <HAL_TIM_PWM_Start+0x18a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1f      	ldr	r2, [pc, #124]	@ (8005114 <HAL_TIM_PWM_Start+0x1e4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00e      	beq.n	80050ba <HAL_TIM_PWM_Start+0x18a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a19      	ldr	r2, [pc, #100]	@ (8005108 <HAL_TIM_PWM_Start+0x1d8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d009      	beq.n	80050ba <HAL_TIM_PWM_Start+0x18a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005118 <HAL_TIM_PWM_Start+0x1e8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d004      	beq.n	80050ba <HAL_TIM_PWM_Start+0x18a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a19      	ldr	r2, [pc, #100]	@ (800511c <HAL_TIM_PWM_Start+0x1ec>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d115      	bne.n	80050e6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	4b17      	ldr	r3, [pc, #92]	@ (8005120 <HAL_TIM_PWM_Start+0x1f0>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b06      	cmp	r3, #6
 80050ca:	d015      	beq.n	80050f8 <HAL_TIM_PWM_Start+0x1c8>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050d2:	d011      	beq.n	80050f8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e4:	e008      	b.n	80050f8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e000      	b.n	80050fa <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40010000 	.word	0x40010000
 8005108:	40010400 	.word	0x40010400
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40014000 	.word	0x40014000
 800511c:	40001800 	.word	0x40001800
 8005120:	00010007 	.word	0x00010007

08005124 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e08f      	b.n	8005258 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d106      	bne.n	8005152 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7fc fce7 	bl	8001b20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6899      	ldr	r1, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4b3e      	ldr	r3, [pc, #248]	@ (8005260 <HAL_TIM_Encoder_Init+0x13c>)
 8005166:	400b      	ands	r3, r1
 8005168:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3304      	adds	r3, #4
 8005172:	4619      	mov	r1, r3
 8005174:	4610      	mov	r0, r2
 8005176:	f000 fb89 	bl	800588c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4b31      	ldr	r3, [pc, #196]	@ (8005264 <HAL_TIM_Encoder_Init+0x140>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	021b      	lsls	r3, r3, #8
 80051ae:	4313      	orrs	r3, r2
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005268 <HAL_TIM_Encoder_Init+0x144>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4b2a      	ldr	r3, [pc, #168]	@ (800526c <HAL_TIM_Encoder_Init+0x148>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	4313      	orrs	r3, r2
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	011a      	lsls	r2, r3, #4
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	031b      	lsls	r3, r3, #12
 80051e4:	4313      	orrs	r3, r2
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	4313      	orrs	r3, r2
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	fffebff8 	.word	0xfffebff8
 8005264:	fffffcfc 	.word	0xfffffcfc
 8005268:	fffff3f3 	.word	0xfffff3f3
 800526c:	ffff0f0f 	.word	0xffff0f0f

08005270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d020      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01b      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0202 	mvn.w	r2, #2
 80052a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fb fec8 	bl	8001050 <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fac4 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 facb 	bl	8005864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d020      	beq.n	8005320 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01b      	beq.n	8005320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0204 	mvn.w	r2, #4
 80052f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fb fea2 	bl	8001050 <HAL_TIM_IC_CaptureCallback>
 800530c:	e005      	b.n	800531a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fa9e 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 faa5 	bl	8005864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d020      	beq.n	800536c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01b      	beq.n	800536c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0208 	mvn.w	r2, #8
 800533c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2204      	movs	r2, #4
 8005342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fb fe7c 	bl	8001050 <HAL_TIM_IC_CaptureCallback>
 8005358:	e005      	b.n	8005366 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fa78 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fa7f 	bl	8005864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 0310 	and.w	r3, r3, #16
 8005372:	2b00      	cmp	r3, #0
 8005374:	d020      	beq.n	80053b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f003 0310 	and.w	r3, r3, #16
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01b      	beq.n	80053b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0210 	mvn.w	r2, #16
 8005388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2208      	movs	r2, #8
 800538e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fb fe56 	bl	8001050 <HAL_TIM_IC_CaptureCallback>
 80053a4:	e005      	b.n	80053b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fa52 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fa59 	bl	8005864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00c      	beq.n	80053dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0201 	mvn.w	r2, #1
 80053d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa30 	bl	800583c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d104      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00c      	beq.n	800540a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fea3 	bl	8006150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00c      	beq.n	800542e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800541a:	2b00      	cmp	r3, #0
 800541c:	d007      	beq.n	800542e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fe9b 	bl	8006164 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00c      	beq.n	8005452 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800544a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fa13 	bl	8005878 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00c      	beq.n	8005476 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f06f 0220 	mvn.w	r2, #32
 800546e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fe63 	bl	800613c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005476:	bf00      	nop
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800549a:	2302      	movs	r3, #2
 800549c:	e0ff      	b.n	800569e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b14      	cmp	r3, #20
 80054aa:	f200 80f0 	bhi.w	800568e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054ae:	a201      	add	r2, pc, #4	@ (adr r2, 80054b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	08005509 	.word	0x08005509
 80054b8:	0800568f 	.word	0x0800568f
 80054bc:	0800568f 	.word	0x0800568f
 80054c0:	0800568f 	.word	0x0800568f
 80054c4:	08005549 	.word	0x08005549
 80054c8:	0800568f 	.word	0x0800568f
 80054cc:	0800568f 	.word	0x0800568f
 80054d0:	0800568f 	.word	0x0800568f
 80054d4:	0800558b 	.word	0x0800558b
 80054d8:	0800568f 	.word	0x0800568f
 80054dc:	0800568f 	.word	0x0800568f
 80054e0:	0800568f 	.word	0x0800568f
 80054e4:	080055cb 	.word	0x080055cb
 80054e8:	0800568f 	.word	0x0800568f
 80054ec:	0800568f 	.word	0x0800568f
 80054f0:	0800568f 	.word	0x0800568f
 80054f4:	0800560d 	.word	0x0800560d
 80054f8:	0800568f 	.word	0x0800568f
 80054fc:	0800568f 	.word	0x0800568f
 8005500:	0800568f 	.word	0x0800568f
 8005504:	0800564d 	.word	0x0800564d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fa68 	bl	80059e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0208 	orr.w	r2, r2, #8
 8005522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699a      	ldr	r2, [r3, #24]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0204 	bic.w	r2, r2, #4
 8005532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6999      	ldr	r1, [r3, #24]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	691a      	ldr	r2, [r3, #16]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	619a      	str	r2, [r3, #24]
      break;
 8005546:	e0a5      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 faba 	bl	8005ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6999      	ldr	r1, [r3, #24]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	021a      	lsls	r2, r3, #8
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	619a      	str	r2, [r3, #24]
      break;
 8005588:	e084      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fb11 	bl	8005bb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0208 	orr.w	r2, r2, #8
 80055a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69da      	ldr	r2, [r3, #28]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0204 	bic.w	r2, r2, #4
 80055b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69d9      	ldr	r1, [r3, #28]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	61da      	str	r2, [r3, #28]
      break;
 80055c8:	e064      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 fb67 	bl	8005ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69d9      	ldr	r1, [r3, #28]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	021a      	lsls	r2, r3, #8
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	61da      	str	r2, [r3, #28]
      break;
 800560a:	e043      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fb9e 	bl	8005d54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0208 	orr.w	r2, r2, #8
 8005626:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0204 	bic.w	r2, r2, #4
 8005636:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	691a      	ldr	r2, [r3, #16]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800564a:	e023      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fbd0 	bl	8005df8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005666:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005676:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	021a      	lsls	r2, r3, #8
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800568c:	e002      	b.n	8005694 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
      break;
 8005692:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800569c:	7dfb      	ldrb	r3, [r7, #23]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop

080056a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_TIM_ConfigClockSource+0x1c>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e0b4      	b.n	800582e <HAL_TIM_ConfigClockSource+0x186>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	4b56      	ldr	r3, [pc, #344]	@ (8005838 <HAL_TIM_ConfigClockSource+0x190>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056fc:	d03e      	beq.n	800577c <HAL_TIM_ConfigClockSource+0xd4>
 80056fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005702:	f200 8087 	bhi.w	8005814 <HAL_TIM_ConfigClockSource+0x16c>
 8005706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800570a:	f000 8086 	beq.w	800581a <HAL_TIM_ConfigClockSource+0x172>
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005712:	d87f      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x16c>
 8005714:	2b70      	cmp	r3, #112	@ 0x70
 8005716:	d01a      	beq.n	800574e <HAL_TIM_ConfigClockSource+0xa6>
 8005718:	2b70      	cmp	r3, #112	@ 0x70
 800571a:	d87b      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x16c>
 800571c:	2b60      	cmp	r3, #96	@ 0x60
 800571e:	d050      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005720:	2b60      	cmp	r3, #96	@ 0x60
 8005722:	d877      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x16c>
 8005724:	2b50      	cmp	r3, #80	@ 0x50
 8005726:	d03c      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005728:	2b50      	cmp	r3, #80	@ 0x50
 800572a:	d873      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x16c>
 800572c:	2b40      	cmp	r3, #64	@ 0x40
 800572e:	d058      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005730:	2b40      	cmp	r3, #64	@ 0x40
 8005732:	d86f      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x16c>
 8005734:	2b30      	cmp	r3, #48	@ 0x30
 8005736:	d064      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0x15a>
 8005738:	2b30      	cmp	r3, #48	@ 0x30
 800573a:	d86b      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x16c>
 800573c:	2b20      	cmp	r3, #32
 800573e:	d060      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0x15a>
 8005740:	2b20      	cmp	r3, #32
 8005742:	d867      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x16c>
 8005744:	2b00      	cmp	r3, #0
 8005746:	d05c      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0x15a>
 8005748:	2b10      	cmp	r3, #16
 800574a:	d05a      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0x15a>
 800574c:	e062      	b.n	8005814 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800575e:	f000 fc19 	bl	8005f94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005770:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	609a      	str	r2, [r3, #8]
      break;
 800577a:	e04f      	b.n	800581c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800578c:	f000 fc02 	bl	8005f94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800579e:	609a      	str	r2, [r3, #8]
      break;
 80057a0:	e03c      	b.n	800581c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ae:	461a      	mov	r2, r3
 80057b0:	f000 fb76 	bl	8005ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2150      	movs	r1, #80	@ 0x50
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fbcf 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 80057c0:	e02c      	b.n	800581c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ce:	461a      	mov	r2, r3
 80057d0:	f000 fb95 	bl	8005efe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2160      	movs	r1, #96	@ 0x60
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fbbf 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 80057e0:	e01c      	b.n	800581c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ee:	461a      	mov	r2, r3
 80057f0:	f000 fb56 	bl	8005ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2140      	movs	r1, #64	@ 0x40
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 fbaf 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005800:	e00c      	b.n	800581c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4619      	mov	r1, r3
 800580c:	4610      	mov	r0, r2
 800580e:	f000 fba6 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005812:	e003      	b.n	800581c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
      break;
 8005818:	e000      	b.n	800581c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800581a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800582c:	7bfb      	ldrb	r3, [r7, #15]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	fffeff88 	.word	0xfffeff88

0800583c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a46      	ldr	r2, [pc, #280]	@ (80059b8 <TIM_Base_SetConfig+0x12c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d013      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058aa:	d00f      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a43      	ldr	r2, [pc, #268]	@ (80059bc <TIM_Base_SetConfig+0x130>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00b      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a42      	ldr	r2, [pc, #264]	@ (80059c0 <TIM_Base_SetConfig+0x134>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d007      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a41      	ldr	r2, [pc, #260]	@ (80059c4 <TIM_Base_SetConfig+0x138>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a40      	ldr	r2, [pc, #256]	@ (80059c8 <TIM_Base_SetConfig+0x13c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d108      	bne.n	80058de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a35      	ldr	r2, [pc, #212]	@ (80059b8 <TIM_Base_SetConfig+0x12c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d02b      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ec:	d027      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a32      	ldr	r2, [pc, #200]	@ (80059bc <TIM_Base_SetConfig+0x130>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d023      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a31      	ldr	r2, [pc, #196]	@ (80059c0 <TIM_Base_SetConfig+0x134>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01f      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a30      	ldr	r2, [pc, #192]	@ (80059c4 <TIM_Base_SetConfig+0x138>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d01b      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a2f      	ldr	r2, [pc, #188]	@ (80059c8 <TIM_Base_SetConfig+0x13c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d017      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a2e      	ldr	r2, [pc, #184]	@ (80059cc <TIM_Base_SetConfig+0x140>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a2d      	ldr	r2, [pc, #180]	@ (80059d0 <TIM_Base_SetConfig+0x144>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00f      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a2c      	ldr	r2, [pc, #176]	@ (80059d4 <TIM_Base_SetConfig+0x148>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00b      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a2b      	ldr	r2, [pc, #172]	@ (80059d8 <TIM_Base_SetConfig+0x14c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d007      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a2a      	ldr	r2, [pc, #168]	@ (80059dc <TIM_Base_SetConfig+0x150>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d003      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a29      	ldr	r2, [pc, #164]	@ (80059e0 <TIM_Base_SetConfig+0x154>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d108      	bne.n	8005950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a10      	ldr	r2, [pc, #64]	@ (80059b8 <TIM_Base_SetConfig+0x12c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_Base_SetConfig+0xf8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a12      	ldr	r2, [pc, #72]	@ (80059c8 <TIM_Base_SetConfig+0x13c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d103      	bne.n	800598c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b01      	cmp	r3, #1
 800599c:	d105      	bne.n	80059aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f023 0201 	bic.w	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	611a      	str	r2, [r3, #16]
  }
}
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40010000 	.word	0x40010000
 80059bc:	40000400 	.word	0x40000400
 80059c0:	40000800 	.word	0x40000800
 80059c4:	40000c00 	.word	0x40000c00
 80059c8:	40010400 	.word	0x40010400
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40014400 	.word	0x40014400
 80059d4:	40014800 	.word	0x40014800
 80059d8:	40001800 	.word	0x40001800
 80059dc:	40001c00 	.word	0x40001c00
 80059e0:	40002000 	.word	0x40002000

080059e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f023 0201 	bic.w	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8005abc <TIM_OC1_SetConfig+0xd8>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f023 0302 	bic.w	r3, r3, #2
 8005a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a21      	ldr	r2, [pc, #132]	@ (8005ac0 <TIM_OC1_SetConfig+0xdc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_OC1_SetConfig+0x64>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a20      	ldr	r2, [pc, #128]	@ (8005ac4 <TIM_OC1_SetConfig+0xe0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d10c      	bne.n	8005a62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f023 0308 	bic.w	r3, r3, #8
 8005a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f023 0304 	bic.w	r3, r3, #4
 8005a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a16      	ldr	r2, [pc, #88]	@ (8005ac0 <TIM_OC1_SetConfig+0xdc>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d003      	beq.n	8005a72 <TIM_OC1_SetConfig+0x8e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a15      	ldr	r2, [pc, #84]	@ (8005ac4 <TIM_OC1_SetConfig+0xe0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d111      	bne.n	8005a96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	621a      	str	r2, [r3, #32]
}
 8005ab0:	bf00      	nop
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	fffeff8f 	.word	0xfffeff8f
 8005ac0:	40010000 	.word	0x40010000
 8005ac4:	40010400 	.word	0x40010400

08005ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	f023 0210 	bic.w	r2, r3, #16
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4b2e      	ldr	r3, [pc, #184]	@ (8005bac <TIM_OC2_SetConfig+0xe4>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	021b      	lsls	r3, r3, #8
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f023 0320 	bic.w	r3, r3, #32
 8005b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a23      	ldr	r2, [pc, #140]	@ (8005bb0 <TIM_OC2_SetConfig+0xe8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d003      	beq.n	8005b30 <TIM_OC2_SetConfig+0x68>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a22      	ldr	r2, [pc, #136]	@ (8005bb4 <TIM_OC2_SetConfig+0xec>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d10d      	bne.n	8005b4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a18      	ldr	r2, [pc, #96]	@ (8005bb0 <TIM_OC2_SetConfig+0xe8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_OC2_SetConfig+0x94>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a17      	ldr	r2, [pc, #92]	@ (8005bb4 <TIM_OC2_SetConfig+0xec>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d113      	bne.n	8005b84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	621a      	str	r2, [r3, #32]
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	feff8fff 	.word	0xfeff8fff
 8005bb0:	40010000 	.word	0x40010000
 8005bb4:	40010400 	.word	0x40010400

08005bb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4b2d      	ldr	r3, [pc, #180]	@ (8005c98 <TIM_OC3_SetConfig+0xe0>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0303 	bic.w	r3, r3, #3
 8005bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a22      	ldr	r2, [pc, #136]	@ (8005c9c <TIM_OC3_SetConfig+0xe4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d003      	beq.n	8005c1e <TIM_OC3_SetConfig+0x66>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a21      	ldr	r2, [pc, #132]	@ (8005ca0 <TIM_OC3_SetConfig+0xe8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d10d      	bne.n	8005c3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a17      	ldr	r2, [pc, #92]	@ (8005c9c <TIM_OC3_SetConfig+0xe4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d003      	beq.n	8005c4a <TIM_OC3_SetConfig+0x92>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a16      	ldr	r2, [pc, #88]	@ (8005ca0 <TIM_OC3_SetConfig+0xe8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d113      	bne.n	8005c72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	621a      	str	r2, [r3, #32]
}
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	fffeff8f 	.word	0xfffeff8f
 8005c9c:	40010000 	.word	0x40010000
 8005ca0:	40010400 	.word	0x40010400

08005ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4b1e      	ldr	r3, [pc, #120]	@ (8005d48 <TIM_OC4_SetConfig+0xa4>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	021b      	lsls	r3, r3, #8
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	031b      	lsls	r3, r3, #12
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a13      	ldr	r2, [pc, #76]	@ (8005d4c <TIM_OC4_SetConfig+0xa8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_OC4_SetConfig+0x68>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a12      	ldr	r2, [pc, #72]	@ (8005d50 <TIM_OC4_SetConfig+0xac>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d109      	bne.n	8005d20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	019b      	lsls	r3, r3, #6
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	feff8fff 	.word	0xfeff8fff
 8005d4c:	40010000 	.word	0x40010000
 8005d50:	40010400 	.word	0x40010400

08005d54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005dec <TIM_OC5_SetConfig+0x98>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005d94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	041b      	lsls	r3, r3, #16
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a12      	ldr	r2, [pc, #72]	@ (8005df0 <TIM_OC5_SetConfig+0x9c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d003      	beq.n	8005db2 <TIM_OC5_SetConfig+0x5e>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a11      	ldr	r2, [pc, #68]	@ (8005df4 <TIM_OC5_SetConfig+0xa0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d109      	bne.n	8005dc6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005db8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	621a      	str	r2, [r3, #32]
}
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	fffeff8f 	.word	0xfffeff8f
 8005df0:	40010000 	.word	0x40010000
 8005df4:	40010400 	.word	0x40010400

08005df8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4b1c      	ldr	r3, [pc, #112]	@ (8005e94 <TIM_OC6_SetConfig+0x9c>)
 8005e24:	4013      	ands	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	051b      	lsls	r3, r3, #20
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a13      	ldr	r2, [pc, #76]	@ (8005e98 <TIM_OC6_SetConfig+0xa0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_OC6_SetConfig+0x60>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a12      	ldr	r2, [pc, #72]	@ (8005e9c <TIM_OC6_SetConfig+0xa4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d109      	bne.n	8005e6c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	029b      	lsls	r3, r3, #10
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	621a      	str	r2, [r3, #32]
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	feff8fff 	.word	0xfeff8fff
 8005e98:	40010000 	.word	0x40010000
 8005e9c:	40010400 	.word	0x40010400

08005ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f023 0201 	bic.w	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f023 030a 	bic.w	r3, r3, #10
 8005edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b087      	sub	sp, #28
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	f023 0210 	bic.w	r2, r3, #16
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	031b      	lsls	r3, r3, #12
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f043 0307 	orr.w	r3, r3, #7
 8005f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	609a      	str	r2, [r3, #8]
}
 8005f88:	bf00      	nop
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	021a      	lsls	r2, r3, #8
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	609a      	str	r2, [r3, #8]
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f003 031f 	and.w	r3, r3, #31
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a1a      	ldr	r2, [r3, #32]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	401a      	ands	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a1a      	ldr	r2, [r3, #32]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 031f 	and.w	r3, r3, #31
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	fa01 f303 	lsl.w	r3, r1, r3
 800600c:	431a      	orrs	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	621a      	str	r2, [r3, #32]
}
 8006012:	bf00      	nop
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
	...

08006020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006034:	2302      	movs	r3, #2
 8006036:	e06d      	b.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a30      	ldr	r2, [pc, #192]	@ (8006120 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a2f      	ldr	r2, [pc, #188]	@ (8006124 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d108      	bne.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006072:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006084:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	4313      	orrs	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a20      	ldr	r2, [pc, #128]	@ (8006120 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d022      	beq.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060aa:	d01d      	beq.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006128 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d018      	beq.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1c      	ldr	r2, [pc, #112]	@ (800612c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d013      	beq.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006130 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00e      	beq.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a15      	ldr	r2, [pc, #84]	@ (8006124 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d009      	beq.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a16      	ldr	r2, [pc, #88]	@ (8006134 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d004      	beq.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a15      	ldr	r2, [pc, #84]	@ (8006138 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d10c      	bne.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	40010000 	.word	0x40010000
 8006124:	40010400 	.word	0x40010400
 8006128:	40000400 	.word	0x40000400
 800612c:	40000800 	.word	0x40000800
 8006130:	40000c00 	.word	0x40000c00
 8006134:	40014000 	.word	0x40014000
 8006138:	40001800 	.word	0x40001800

0800613c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <memset>:
 8006178:	4402      	add	r2, r0
 800617a:	4603      	mov	r3, r0
 800617c:	4293      	cmp	r3, r2
 800617e:	d100      	bne.n	8006182 <memset+0xa>
 8006180:	4770      	bx	lr
 8006182:	f803 1b01 	strb.w	r1, [r3], #1
 8006186:	e7f9      	b.n	800617c <memset+0x4>

08006188 <__errno>:
 8006188:	4b01      	ldr	r3, [pc, #4]	@ (8006190 <__errno+0x8>)
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20000010 	.word	0x20000010

08006194 <__libc_init_array>:
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	4d0d      	ldr	r5, [pc, #52]	@ (80061cc <__libc_init_array+0x38>)
 8006198:	4c0d      	ldr	r4, [pc, #52]	@ (80061d0 <__libc_init_array+0x3c>)
 800619a:	1b64      	subs	r4, r4, r5
 800619c:	10a4      	asrs	r4, r4, #2
 800619e:	2600      	movs	r6, #0
 80061a0:	42a6      	cmp	r6, r4
 80061a2:	d109      	bne.n	80061b8 <__libc_init_array+0x24>
 80061a4:	4d0b      	ldr	r5, [pc, #44]	@ (80061d4 <__libc_init_array+0x40>)
 80061a6:	4c0c      	ldr	r4, [pc, #48]	@ (80061d8 <__libc_init_array+0x44>)
 80061a8:	f000 f9d4 	bl	8006554 <_init>
 80061ac:	1b64      	subs	r4, r4, r5
 80061ae:	10a4      	asrs	r4, r4, #2
 80061b0:	2600      	movs	r6, #0
 80061b2:	42a6      	cmp	r6, r4
 80061b4:	d105      	bne.n	80061c2 <__libc_init_array+0x2e>
 80061b6:	bd70      	pop	{r4, r5, r6, pc}
 80061b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061bc:	4798      	blx	r3
 80061be:	3601      	adds	r6, #1
 80061c0:	e7ee      	b.n	80061a0 <__libc_init_array+0xc>
 80061c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c6:	4798      	blx	r3
 80061c8:	3601      	adds	r6, #1
 80061ca:	e7f2      	b.n	80061b2 <__libc_init_array+0x1e>
 80061cc:	080066e8 	.word	0x080066e8
 80061d0:	080066e8 	.word	0x080066e8
 80061d4:	080066e8 	.word	0x080066e8
 80061d8:	080066ec 	.word	0x080066ec

080061dc <atanf>:
 80061dc:	b538      	push	{r3, r4, r5, lr}
 80061de:	ee10 5a10 	vmov	r5, s0
 80061e2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80061e6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80061ea:	eef0 7a40 	vmov.f32	s15, s0
 80061ee:	d30f      	bcc.n	8006210 <atanf+0x34>
 80061f0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80061f4:	d904      	bls.n	8006200 <atanf+0x24>
 80061f6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80061fa:	eeb0 0a67 	vmov.f32	s0, s15
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8006338 <atanf+0x15c>
 8006204:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800633c <atanf+0x160>
 8006208:	2d00      	cmp	r5, #0
 800620a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800620e:	e7f4      	b.n	80061fa <atanf+0x1e>
 8006210:	4b4b      	ldr	r3, [pc, #300]	@ (8006340 <atanf+0x164>)
 8006212:	429c      	cmp	r4, r3
 8006214:	d810      	bhi.n	8006238 <atanf+0x5c>
 8006216:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800621a:	d20a      	bcs.n	8006232 <atanf+0x56>
 800621c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8006344 <atanf+0x168>
 8006220:	ee30 7a07 	vadd.f32	s14, s0, s14
 8006224:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006228:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800622c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006230:	dce3      	bgt.n	80061fa <atanf+0x1e>
 8006232:	f04f 33ff 	mov.w	r3, #4294967295
 8006236:	e013      	b.n	8006260 <atanf+0x84>
 8006238:	f000 f8a4 	bl	8006384 <fabsf>
 800623c:	4b42      	ldr	r3, [pc, #264]	@ (8006348 <atanf+0x16c>)
 800623e:	429c      	cmp	r4, r3
 8006240:	d84f      	bhi.n	80062e2 <atanf+0x106>
 8006242:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8006246:	429c      	cmp	r4, r3
 8006248:	d841      	bhi.n	80062ce <atanf+0xf2>
 800624a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800624e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006252:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006256:	2300      	movs	r3, #0
 8006258:	ee30 0a27 	vadd.f32	s0, s0, s15
 800625c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006266:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800634c <atanf+0x170>
 800626a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8006350 <atanf+0x174>
 800626e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8006354 <atanf+0x178>
 8006272:	ee66 6a06 	vmul.f32	s13, s12, s12
 8006276:	eee6 5a87 	vfma.f32	s11, s13, s14
 800627a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8006358 <atanf+0x17c>
 800627e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006282:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800635c <atanf+0x180>
 8006286:	eee7 5a26 	vfma.f32	s11, s14, s13
 800628a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8006360 <atanf+0x184>
 800628e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006292:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006364 <atanf+0x188>
 8006296:	eee7 5a26 	vfma.f32	s11, s14, s13
 800629a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8006368 <atanf+0x18c>
 800629e:	eea6 5a87 	vfma.f32	s10, s13, s14
 80062a2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800636c <atanf+0x190>
 80062a6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80062aa:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8006370 <atanf+0x194>
 80062ae:	eea7 5a26 	vfma.f32	s10, s14, s13
 80062b2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006374 <atanf+0x198>
 80062b6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80062ba:	ee27 7a26 	vmul.f32	s14, s14, s13
 80062be:	eea5 7a86 	vfma.f32	s14, s11, s12
 80062c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80062c6:	d121      	bne.n	800630c <atanf+0x130>
 80062c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062cc:	e795      	b.n	80061fa <atanf+0x1e>
 80062ce:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80062d2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80062d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80062da:	2301      	movs	r3, #1
 80062dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80062e0:	e7be      	b.n	8006260 <atanf+0x84>
 80062e2:	4b25      	ldr	r3, [pc, #148]	@ (8006378 <atanf+0x19c>)
 80062e4:	429c      	cmp	r4, r3
 80062e6:	d80b      	bhi.n	8006300 <atanf+0x124>
 80062e8:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80062ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062f0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80062f4:	2302      	movs	r3, #2
 80062f6:	ee70 6a67 	vsub.f32	s13, s0, s15
 80062fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062fe:	e7af      	b.n	8006260 <atanf+0x84>
 8006300:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006304:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006308:	2303      	movs	r3, #3
 800630a:	e7a9      	b.n	8006260 <atanf+0x84>
 800630c:	4a1b      	ldr	r2, [pc, #108]	@ (800637c <atanf+0x1a0>)
 800630e:	491c      	ldr	r1, [pc, #112]	@ (8006380 <atanf+0x1a4>)
 8006310:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006314:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006318:	edd3 6a00 	vldr	s13, [r3]
 800631c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006320:	2d00      	cmp	r5, #0
 8006322:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006326:	edd2 7a00 	vldr	s15, [r2]
 800632a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800632e:	bfb8      	it	lt
 8006330:	eef1 7a67 	vneglt.f32	s15, s15
 8006334:	e761      	b.n	80061fa <atanf+0x1e>
 8006336:	bf00      	nop
 8006338:	bfc90fdb 	.word	0xbfc90fdb
 800633c:	3fc90fdb 	.word	0x3fc90fdb
 8006340:	3edfffff 	.word	0x3edfffff
 8006344:	7149f2ca 	.word	0x7149f2ca
 8006348:	3f97ffff 	.word	0x3f97ffff
 800634c:	3c8569d7 	.word	0x3c8569d7
 8006350:	3d4bda59 	.word	0x3d4bda59
 8006354:	bd6ef16b 	.word	0xbd6ef16b
 8006358:	3d886b35 	.word	0x3d886b35
 800635c:	3dba2e6e 	.word	0x3dba2e6e
 8006360:	3e124925 	.word	0x3e124925
 8006364:	3eaaaaab 	.word	0x3eaaaaab
 8006368:	bd15a221 	.word	0xbd15a221
 800636c:	bd9d8795 	.word	0xbd9d8795
 8006370:	bde38e38 	.word	0xbde38e38
 8006374:	be4ccccd 	.word	0xbe4ccccd
 8006378:	401bffff 	.word	0x401bffff
 800637c:	08006590 	.word	0x08006590
 8006380:	08006580 	.word	0x08006580

08006384 <fabsf>:
 8006384:	ee10 3a10 	vmov	r3, s0
 8006388:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800638c:	ee00 3a10 	vmov	s0, r3
 8006390:	4770      	bx	lr

08006392 <sinf_poly>:
 8006392:	07cb      	lsls	r3, r1, #31
 8006394:	d412      	bmi.n	80063bc <sinf_poly+0x2a>
 8006396:	ee21 5b00 	vmul.f64	d5, d1, d0
 800639a:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800639e:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80063a2:	eea6 7b01 	vfma.f64	d7, d6, d1
 80063a6:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80063aa:	ee21 1b05 	vmul.f64	d1, d1, d5
 80063ae:	eea6 0b05 	vfma.f64	d0, d6, d5
 80063b2:	eea7 0b01 	vfma.f64	d0, d7, d1
 80063b6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80063ba:	4770      	bx	lr
 80063bc:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80063c0:	ee21 5b01 	vmul.f64	d5, d1, d1
 80063c4:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80063c8:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80063cc:	eea1 7b06 	vfma.f64	d7, d1, d6
 80063d0:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80063d4:	eea1 0b06 	vfma.f64	d0, d1, d6
 80063d8:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80063dc:	ee21 1b05 	vmul.f64	d1, d1, d5
 80063e0:	eea5 0b06 	vfma.f64	d0, d5, d6
 80063e4:	e7e5      	b.n	80063b2 <sinf_poly+0x20>
	...

080063e8 <sinf>:
 80063e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063ea:	ee10 4a10 	vmov	r4, s0
 80063ee:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80063f2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80063f6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80063fa:	eef0 7a40 	vmov.f32	s15, s0
 80063fe:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8006402:	d218      	bcs.n	8006436 <sinf+0x4e>
 8006404:	ee26 1b06 	vmul.f64	d1, d6, d6
 8006408:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800640c:	d20a      	bcs.n	8006424 <sinf+0x3c>
 800640e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8006412:	d103      	bne.n	800641c <sinf+0x34>
 8006414:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8006418:	ed8d 1a01 	vstr	s2, [sp, #4]
 800641c:	eeb0 0a67 	vmov.f32	s0, s15
 8006420:	b003      	add	sp, #12
 8006422:	bd30      	pop	{r4, r5, pc}
 8006424:	483a      	ldr	r0, [pc, #232]	@ (8006510 <sinf+0x128>)
 8006426:	eeb0 0b46 	vmov.f64	d0, d6
 800642a:	2100      	movs	r1, #0
 800642c:	b003      	add	sp, #12
 800642e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006432:	f7ff bfae 	b.w	8006392 <sinf_poly>
 8006436:	f240 422e 	movw	r2, #1070	@ 0x42e
 800643a:	4293      	cmp	r3, r2
 800643c:	d824      	bhi.n	8006488 <sinf+0xa0>
 800643e:	4b34      	ldr	r3, [pc, #208]	@ (8006510 <sinf+0x128>)
 8006440:	ed93 7b08 	vldr	d7, [r3, #32]
 8006444:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006448:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800644c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8006450:	ee17 1a90 	vmov	r1, s15
 8006454:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8006458:	1609      	asrs	r1, r1, #24
 800645a:	ee07 1a90 	vmov	s15, r1
 800645e:	f001 0203 	and.w	r2, r1, #3
 8006462:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006466:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800646a:	ed92 0b00 	vldr	d0, [r2]
 800646e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8006472:	f011 0f02 	tst.w	r1, #2
 8006476:	eea5 6b47 	vfms.f64	d6, d5, d7
 800647a:	bf08      	it	eq
 800647c:	4618      	moveq	r0, r3
 800647e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8006482:	ee20 0b06 	vmul.f64	d0, d0, d6
 8006486:	e7d1      	b.n	800642c <sinf+0x44>
 8006488:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800648c:	d237      	bcs.n	80064fe <sinf+0x116>
 800648e:	4921      	ldr	r1, [pc, #132]	@ (8006514 <sinf+0x12c>)
 8006490:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8006494:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8006498:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800649c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80064a0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80064a4:	6a10      	ldr	r0, [r2, #32]
 80064a6:	6912      	ldr	r2, [r2, #16]
 80064a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064ac:	40ab      	lsls	r3, r5
 80064ae:	fba0 5003 	umull	r5, r0, r0, r3
 80064b2:	4359      	muls	r1, r3
 80064b4:	fbe3 0102 	umlal	r0, r1, r3, r2
 80064b8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80064bc:	0f9d      	lsrs	r5, r3, #30
 80064be:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80064c2:	1ac9      	subs	r1, r1, r3
 80064c4:	f7fa f846 	bl	8000554 <__aeabi_l2d>
 80064c8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80064cc:	4b10      	ldr	r3, [pc, #64]	@ (8006510 <sinf+0x128>)
 80064ce:	f004 0203 	and.w	r2, r4, #3
 80064d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80064d6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8006508 <sinf+0x120>
 80064da:	ed92 0b00 	vldr	d0, [r2]
 80064de:	ec41 0b17 	vmov	d7, r0, r1
 80064e2:	f014 0f02 	tst.w	r4, #2
 80064e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80064ea:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80064ee:	4629      	mov	r1, r5
 80064f0:	bf08      	it	eq
 80064f2:	4618      	moveq	r0, r3
 80064f4:	ee27 1b07 	vmul.f64	d1, d7, d7
 80064f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80064fc:	e796      	b.n	800642c <sinf+0x44>
 80064fe:	b003      	add	sp, #12
 8006500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006504:	f000 b816 	b.w	8006534 <__math_invalidf>
 8006508:	54442d18 	.word	0x54442d18
 800650c:	3c1921fb 	.word	0x3c1921fb
 8006510:	08006600 	.word	0x08006600
 8006514:	080065a0 	.word	0x080065a0

08006518 <with_errnof>:
 8006518:	b510      	push	{r4, lr}
 800651a:	ed2d 8b02 	vpush	{d8}
 800651e:	eeb0 8a40 	vmov.f32	s16, s0
 8006522:	4604      	mov	r4, r0
 8006524:	f7ff fe30 	bl	8006188 <__errno>
 8006528:	eeb0 0a48 	vmov.f32	s0, s16
 800652c:	ecbd 8b02 	vpop	{d8}
 8006530:	6004      	str	r4, [r0, #0]
 8006532:	bd10      	pop	{r4, pc}

08006534 <__math_invalidf>:
 8006534:	eef0 7a40 	vmov.f32	s15, s0
 8006538:	ee30 7a40 	vsub.f32	s14, s0, s0
 800653c:	eef4 7a67 	vcmp.f32	s15, s15
 8006540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006544:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8006548:	d602      	bvs.n	8006550 <__math_invalidf+0x1c>
 800654a:	2021      	movs	r0, #33	@ 0x21
 800654c:	f7ff bfe4 	b.w	8006518 <with_errnof>
 8006550:	4770      	bx	lr
	...

08006554 <_init>:
 8006554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006556:	bf00      	nop
 8006558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655a:	bc08      	pop	{r3}
 800655c:	469e      	mov	lr, r3
 800655e:	4770      	bx	lr

08006560 <_fini>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	bf00      	nop
 8006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006566:	bc08      	pop	{r3}
 8006568:	469e      	mov	lr, r3
 800656a:	4770      	bx	lr


profileograph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000449c  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004694  08004694  00005694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046ac  080046ac  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080046ac  080046ac  000056ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046b4  080046b4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046b4  080046b4  000056b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046b8  080046b8  000056b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080046bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  2000000c  080046c8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  080046c8  00006528  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017003  00000000  00000000  0000603a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002072  00000000  00000000  0001d03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0001f0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd4  00000000  00000000  00020548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028980  00000000  00000000  0002151c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b27  00000000  00000000  00049e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fff37  00000000  00000000  0005d9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d8fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005834  00000000  00000000  0015d940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00163174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800467c 	.word	0x0800467c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800467c 	.word	0x0800467c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96a 	b.w	8000534 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	460c      	mov	r4, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14e      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000284:	4694      	mov	ip, r2
 8000286:	458c      	cmp	ip, r1
 8000288:	4686      	mov	lr, r0
 800028a:	fab2 f282 	clz	r2, r2
 800028e:	d962      	bls.n	8000356 <__udivmoddi4+0xde>
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0320 	rsb	r3, r2, #32
 8000296:	4091      	lsls	r1, r2
 8000298:	fa20 f303 	lsr.w	r3, r0, r3
 800029c:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a0:	4319      	orrs	r1, r3
 80002a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f f68c 	uxth.w	r6, ip
 80002ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb04 f106 	mul.w	r1, r4, r6
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ce:	f080 8112 	bcs.w	80004f6 <__udivmoddi4+0x27e>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 810f 	bls.w	80004f6 <__udivmoddi4+0x27e>
 80002d8:	3c02      	subs	r4, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a59      	subs	r1, r3, r1
 80002de:	fa1f f38e 	uxth.w	r3, lr
 80002e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ee:	fb00 f606 	mul.w	r6, r0, r6
 80002f2:	429e      	cmp	r6, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x94>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fe:	f080 80fc 	bcs.w	80004fa <__udivmoddi4+0x282>
 8000302:	429e      	cmp	r6, r3
 8000304:	f240 80f9 	bls.w	80004fa <__udivmoddi4+0x282>
 8000308:	4463      	add	r3, ip
 800030a:	3802      	subs	r0, #2
 800030c:	1b9b      	subs	r3, r3, r6
 800030e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000312:	2100      	movs	r1, #0
 8000314:	b11d      	cbz	r5, 800031e <__udivmoddi4+0xa6>
 8000316:	40d3      	lsrs	r3, r2
 8000318:	2200      	movs	r2, #0
 800031a:	e9c5 3200 	strd	r3, r2, [r5]
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d905      	bls.n	8000332 <__udivmoddi4+0xba>
 8000326:	b10d      	cbz	r5, 800032c <__udivmoddi4+0xb4>
 8000328:	e9c5 0100 	strd	r0, r1, [r5]
 800032c:	2100      	movs	r1, #0
 800032e:	4608      	mov	r0, r1
 8000330:	e7f5      	b.n	800031e <__udivmoddi4+0xa6>
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d146      	bne.n	80003c8 <__udivmoddi4+0x150>
 800033a:	42a3      	cmp	r3, r4
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xcc>
 800033e:	4290      	cmp	r0, r2
 8000340:	f0c0 80f0 	bcc.w	8000524 <__udivmoddi4+0x2ac>
 8000344:	1a86      	subs	r6, r0, r2
 8000346:	eb64 0303 	sbc.w	r3, r4, r3
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d0e6      	beq.n	800031e <__udivmoddi4+0xa6>
 8000350:	e9c5 6300 	strd	r6, r3, [r5]
 8000354:	e7e3      	b.n	800031e <__udivmoddi4+0xa6>
 8000356:	2a00      	cmp	r2, #0
 8000358:	f040 8090 	bne.w	800047c <__udivmoddi4+0x204>
 800035c:	eba1 040c 	sub.w	r4, r1, ip
 8000360:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000364:	fa1f f78c 	uxth.w	r7, ip
 8000368:	2101      	movs	r1, #1
 800036a:	fbb4 f6f8 	udiv	r6, r4, r8
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb08 4416 	mls	r4, r8, r6, r4
 8000376:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037a:	fb07 f006 	mul.w	r0, r7, r6
 800037e:	4298      	cmp	r0, r3
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x11c>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f106 34ff 	add.w	r4, r6, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x11a>
 800038c:	4298      	cmp	r0, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2b4>
 8000392:	4626      	mov	r6, r4
 8000394:	1a1c      	subs	r4, r3, r0
 8000396:	fa1f f38e 	uxth.w	r3, lr
 800039a:	fbb4 f0f8 	udiv	r0, r4, r8
 800039e:	fb08 4410 	mls	r4, r8, r0, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	429f      	cmp	r7, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x148>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x146>
 80003b8:	429f      	cmp	r7, r3
 80003ba:	f200 80b0 	bhi.w	800051e <__udivmoddi4+0x2a6>
 80003be:	4620      	mov	r0, r4
 80003c0:	1bdb      	subs	r3, r3, r7
 80003c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c6:	e7a5      	b.n	8000314 <__udivmoddi4+0x9c>
 80003c8:	f1c1 0620 	rsb	r6, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	431f      	orrs	r7, r3
 80003d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d8:	fa04 f301 	lsl.w	r3, r4, r1
 80003dc:	ea43 030c 	orr.w	r3, r3, ip
 80003e0:	40f4      	lsrs	r4, r6
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	0c38      	lsrs	r0, r7, #16
 80003e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ec:	fbb4 fef0 	udiv	lr, r4, r0
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	fb00 441e 	mls	r4, r0, lr, r4
 80003f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000400:	45a1      	cmp	r9, r4
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	d90a      	bls.n	800041e <__udivmoddi4+0x1a6>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040e:	f080 8084 	bcs.w	800051a <__udivmoddi4+0x2a2>
 8000412:	45a1      	cmp	r9, r4
 8000414:	f240 8081 	bls.w	800051a <__udivmoddi4+0x2a2>
 8000418:	f1ae 0e02 	sub.w	lr, lr, #2
 800041c:	443c      	add	r4, r7
 800041e:	eba4 0409 	sub.w	r4, r4, r9
 8000422:	fa1f f983 	uxth.w	r9, r3
 8000426:	fbb4 f3f0 	udiv	r3, r4, r0
 800042a:	fb00 4413 	mls	r4, r0, r3, r4
 800042e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000432:	fb03 fc0c 	mul.w	ip, r3, ip
 8000436:	45a4      	cmp	ip, r4
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x1d2>
 800043a:	193c      	adds	r4, r7, r4
 800043c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000440:	d267      	bcs.n	8000512 <__udivmoddi4+0x29a>
 8000442:	45a4      	cmp	ip, r4
 8000444:	d965      	bls.n	8000512 <__udivmoddi4+0x29a>
 8000446:	3b02      	subs	r3, #2
 8000448:	443c      	add	r4, r7
 800044a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044e:	fba0 9302 	umull	r9, r3, r0, r2
 8000452:	eba4 040c 	sub.w	r4, r4, ip
 8000456:	429c      	cmp	r4, r3
 8000458:	46ce      	mov	lr, r9
 800045a:	469c      	mov	ip, r3
 800045c:	d351      	bcc.n	8000502 <__udivmoddi4+0x28a>
 800045e:	d04e      	beq.n	80004fe <__udivmoddi4+0x286>
 8000460:	b155      	cbz	r5, 8000478 <__udivmoddi4+0x200>
 8000462:	ebb8 030e 	subs.w	r3, r8, lr
 8000466:	eb64 040c 	sbc.w	r4, r4, ip
 800046a:	fa04 f606 	lsl.w	r6, r4, r6
 800046e:	40cb      	lsrs	r3, r1
 8000470:	431e      	orrs	r6, r3
 8000472:	40cc      	lsrs	r4, r1
 8000474:	e9c5 6400 	strd	r6, r4, [r5]
 8000478:	2100      	movs	r1, #0
 800047a:	e750      	b.n	800031e <__udivmoddi4+0xa6>
 800047c:	f1c2 0320 	rsb	r3, r2, #32
 8000480:	fa20 f103 	lsr.w	r1, r0, r3
 8000484:	fa0c fc02 	lsl.w	ip, ip, r2
 8000488:	fa24 f303 	lsr.w	r3, r4, r3
 800048c:	4094      	lsls	r4, r2
 800048e:	430c      	orrs	r4, r1
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	fa00 fe02 	lsl.w	lr, r0, r2
 8000498:	fa1f f78c 	uxth.w	r7, ip
 800049c:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a0:	fb08 3110 	mls	r1, r8, r0, r3
 80004a4:	0c23      	lsrs	r3, r4, #16
 80004a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004aa:	fb00 f107 	mul.w	r1, r0, r7
 80004ae:	4299      	cmp	r1, r3
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x24c>
 80004b2:	eb1c 0303 	adds.w	r3, ip, r3
 80004b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ba:	d22c      	bcs.n	8000516 <__udivmoddi4+0x29e>
 80004bc:	4299      	cmp	r1, r3
 80004be:	d92a      	bls.n	8000516 <__udivmoddi4+0x29e>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004cc:	fb08 3311 	mls	r3, r8, r1, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb01 f307 	mul.w	r3, r1, r7
 80004d8:	42a3      	cmp	r3, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x276>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e4:	d213      	bcs.n	800050e <__udivmoddi4+0x296>
 80004e6:	42a3      	cmp	r3, r4
 80004e8:	d911      	bls.n	800050e <__udivmoddi4+0x296>
 80004ea:	3902      	subs	r1, #2
 80004ec:	4464      	add	r4, ip
 80004ee:	1ae4      	subs	r4, r4, r3
 80004f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f4:	e739      	b.n	800036a <__udivmoddi4+0xf2>
 80004f6:	4604      	mov	r4, r0
 80004f8:	e6f0      	b.n	80002dc <__udivmoddi4+0x64>
 80004fa:	4608      	mov	r0, r1
 80004fc:	e706      	b.n	800030c <__udivmoddi4+0x94>
 80004fe:	45c8      	cmp	r8, r9
 8000500:	d2ae      	bcs.n	8000460 <__udivmoddi4+0x1e8>
 8000502:	ebb9 0e02 	subs.w	lr, r9, r2
 8000506:	eb63 0c07 	sbc.w	ip, r3, r7
 800050a:	3801      	subs	r0, #1
 800050c:	e7a8      	b.n	8000460 <__udivmoddi4+0x1e8>
 800050e:	4631      	mov	r1, r6
 8000510:	e7ed      	b.n	80004ee <__udivmoddi4+0x276>
 8000512:	4603      	mov	r3, r0
 8000514:	e799      	b.n	800044a <__udivmoddi4+0x1d2>
 8000516:	4630      	mov	r0, r6
 8000518:	e7d4      	b.n	80004c4 <__udivmoddi4+0x24c>
 800051a:	46d6      	mov	lr, sl
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1a6>
 800051e:	4463      	add	r3, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e74d      	b.n	80003c0 <__udivmoddi4+0x148>
 8000524:	4606      	mov	r6, r0
 8000526:	4623      	mov	r3, r4
 8000528:	4608      	mov	r0, r1
 800052a:	e70f      	b.n	800034c <__udivmoddi4+0xd4>
 800052c:	3e02      	subs	r6, #2
 800052e:	4463      	add	r3, ip
 8000530:	e730      	b.n	8000394 <__udivmoddi4+0x11c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
static void writeRegister(uint8_t address,uint8_t value)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	460a      	mov	r2, r1
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	4613      	mov	r3, r2
 8000546:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	2b3f      	cmp	r3, #63	@ 0x3f
 800054c:	d901      	bls.n	8000552 <writeRegister+0x1a>
		address = 63;
 800054e:	233f      	movs	r3, #63	@ 0x3f
 8000550:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000558:	b2db      	uxtb	r3, r3
 800055a:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2120      	movs	r1, #32
 8000560:	480b      	ldr	r0, [pc, #44]	@ (8000590 <writeRegister+0x58>)
 8000562:	f001 ff0b 	bl	800237c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000566:	1df9      	adds	r1, r7, #7
 8000568:	230a      	movs	r3, #10
 800056a:	2201      	movs	r2, #1
 800056c:	4809      	ldr	r0, [pc, #36]	@ (8000594 <writeRegister+0x5c>)
 800056e:	f003 f986 	bl	800387e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,10);
 8000572:	1db9      	adds	r1, r7, #6
 8000574:	230a      	movs	r3, #10
 8000576:	2201      	movs	r2, #1
 8000578:	4806      	ldr	r0, [pc, #24]	@ (8000594 <writeRegister+0x5c>)
 800057a:	f003 f980 	bl	800387e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	2120      	movs	r1, #32
 8000582:	4803      	ldr	r0, [pc, #12]	@ (8000590 <writeRegister+0x58>)
 8000584:	f001 fefa 	bl	800237c <HAL_GPIO_WritePin>
	

}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40020400 	.word	0x40020400
 8000594:	200004a0 	.word	0x200004a0

08000598 <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

static void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	6039      	str	r1, [r7, #0]
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80005ac:	d901      	bls.n	80005b2 <readRegister+0x1a>
		address = 63;
 80005ae:	233f      	movs	r3, #63	@ 0x3f
 80005b0:	71fb      	strb	r3, [r7, #7]
		
		// Multiple Byte Read Settings
		if (num > 1)
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d905      	bls.n	80005c4 <readRegister+0x2c>
		address |= 0x40;
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	71fb      	strb	r3, [r7, #7]
 80005c2:	e004      	b.n	80005ce <readRegister+0x36>
		else	
		address &= ~(0x40);
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2120      	movs	r1, #32
 80005dc:	480c      	ldr	r0, [pc, #48]	@ (8000610 <readRegister+0x78>)
 80005de:	f001 fecd 	bl	800237c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 80005e2:	1df9      	adds	r1, r7, #7
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	480a      	ldr	r0, [pc, #40]	@ (8000614 <readRegister+0x7c>)
 80005ea:	f003 f948 	bl	800387e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	230a      	movs	r3, #10
 80005f4:	6839      	ldr	r1, [r7, #0]
 80005f6:	4807      	ldr	r0, [pc, #28]	@ (8000614 <readRegister+0x7c>)
 80005f8:	f003 fab6 	bl	8003b68 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2120      	movs	r1, #32
 8000600:	4803      	ldr	r0, [pc, #12]	@ (8000610 <readRegister+0x78>)
 8000602:	f001 febb 	bl	800237c <HAL_GPIO_WritePin>
	
	
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40020400 	.word	0x40020400
 8000614:	200004a0 	.word	0x200004a0

08000618 <adxlBW>:
						10 		|  				100
						11 		|  				200
						12 		|  				400
			*/
static void adxlBW(ADXL_InitTypeDef * adxl)
		{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
		uint8_t bwreg=0;
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	4619      	mov	r1, r3
 8000628:	202c      	movs	r0, #44	@ 0x2c
 800062a:	f7ff ff85 	bl	8000538 <writeRegister>
		if (adxl->LPMode == LPMODE_LOWPOWER) 
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	789b      	ldrb	r3, [r3, #2]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d11a      	bne.n	800066c <adxlBW+0x54>
						{
						// Low power mode
						bwreg |= (1 << 4);
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	f043 0310 	orr.w	r3, r3, #16
 800063c:	73fb      	strb	r3, [r7, #15]
						if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	78db      	ldrb	r3, [r3, #3]
 8000642:	2b06      	cmp	r3, #6
 8000644:	d807      	bhi.n	8000656 <adxlBW+0x3e>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	78db      	ldrb	r3, [r3, #3]
 800064a:	2b0c      	cmp	r3, #12
 800064c:	d903      	bls.n	8000656 <adxlBW+0x3e>
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	3307      	adds	r3, #7
 8000652:	73fb      	strb	r3, [r7, #15]
 8000654:	e004      	b.n	8000660 <adxlBW+0x48>
								else bwreg +=(adxl->Rate);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	78da      	ldrb	r2, [r3, #3]
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	4413      	add	r3, r2
 800065e:	73fb      	strb	r3, [r7, #15]
						writeRegister(BW_RATE,bwreg);	
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	4619      	mov	r1, r3
 8000664:	202c      	movs	r0, #44	@ 0x2c
 8000666:	f7ff ff67 	bl	8000538 <writeRegister>
	
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
						else bwreg +=(adxl->Rate);
				writeRegister(BW_RATE,bwreg);	
				}
		}
 800066a:	e015      	b.n	8000698 <adxlBW+0x80>
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	78db      	ldrb	r3, [r3, #3]
 8000670:	2b05      	cmp	r3, #5
 8000672:	d807      	bhi.n	8000684 <adxlBW+0x6c>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	78db      	ldrb	r3, [r3, #3]
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d903      	bls.n	8000684 <adxlBW+0x6c>
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	3306      	adds	r3, #6
 8000680:	73fb      	strb	r3, [r7, #15]
 8000682:	e004      	b.n	800068e <adxlBW+0x76>
						else bwreg +=(adxl->Rate);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	78da      	ldrb	r2, [r3, #3]
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	4413      	add	r3, r2
 800068c:	73fb      	strb	r3, [r7, #15]
				writeRegister(BW_RATE,bwreg);	
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	4619      	mov	r1, r3
 8000692:	202c      	movs	r0, #44	@ 0x2c
 8000694:	f7ff ff50 	bl	8000538 <writeRegister>
		}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <adxlFormat>:
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl)
			{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
			uint8_t formatreg=0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	4619      	mov	r1, r3
 80006b0:	2031      	movs	r0, #49	@ 0x31
 80006b2:	f7ff ff41 	bl	8000538 <writeRegister>
			formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	019b      	lsls	r3, r3, #6
 80006bc:	b25a      	sxtb	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	785b      	ldrb	r3, [r3, #1]
 80006c2:	015b      	lsls	r3, r3, #5
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b25a      	sxtb	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	799b      	ldrb	r3, [r3, #6]
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b25a      	sxtb	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	795b      	ldrb	r3, [r3, #5]
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	4313      	orrs	r3, r2
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	73fb      	strb	r3, [r7, #15]
			formatreg += (adxl -> Range);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791a      	ldrb	r2, [r3, #4]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	4413      	add	r3, r2
 80006ec:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	4619      	mov	r1, r3
 80006f2:	2031      	movs	r0, #49	@ 0x31
 80006f4:	f7ff ff20 	bl	8000538 <writeRegister>
			}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	2120      	movs	r1, #32
 800070c:	484b      	ldr	r0, [pc, #300]	@ (800083c <ADXL_Init+0x13c>)
 800070e:	f001 fe35 	bl	800237c <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 8000712:	2005      	movs	r0, #5
 8000714:	f001 fb7c 	bl	8001e10 <HAL_Delay>
	uint8_t testval = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	73fb      	strb	r3, [r7, #15]
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID,&testval,1);
 800071c:	f107 030f 	add.w	r3, r7, #15
 8000720:	2201      	movs	r2, #1
 8000722:	4619      	mov	r1, r3
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff ff37 	bl	8000598 <readRegister>
	if (testval != 0xE5) return ADXL_ERR;
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2be5      	cmp	r3, #229	@ 0xe5
 800072e:	d001      	beq.n	8000734 <ADXL_Init+0x34>
 8000730:	2301      	movs	r3, #1
 8000732:	e07f      	b.n	8000834 <ADXL_Init+0x134>
	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff6f 	bl	8000618 <adxlBW>
	adxlFormat(adxl);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ffb0 	bl	80006a0 <adxlFormat>
	
	// Settings gains 
	if (adxl->Resolution == RESOLUTION_10BIT)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	795b      	ldrb	r3, [r3, #5]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d13f      	bne.n	80007c8 <ADXL_Init+0xc8>
			{
			switch (adxl->Range) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	2b03      	cmp	r3, #3
 800074e:	d846      	bhi.n	80007de <ADXL_Init+0xde>
 8000750:	a201      	add	r2, pc, #4	@ (adr r2, 8000758 <ADXL_Init+0x58>)
 8000752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000756:	bf00      	nop
 8000758:	08000769 	.word	0x08000769
 800075c:	08000781 	.word	0x08000781
 8000760:	08000799 	.word	0x08000799
 8000764:	080007b1 	.word	0x080007b1
							case RANGE_2G:
								GAINX = GAINY = GAINZ = 1/255.0f;
 8000768:	4b35      	ldr	r3, [pc, #212]	@ (8000840 <ADXL_Init+0x140>)
 800076a:	4a36      	ldr	r2, [pc, #216]	@ (8000844 <ADXL_Init+0x144>)
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	4b34      	ldr	r3, [pc, #208]	@ (8000840 <ADXL_Init+0x140>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a35      	ldr	r2, [pc, #212]	@ (8000848 <ADXL_Init+0x148>)
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	4b34      	ldr	r3, [pc, #208]	@ (8000848 <ADXL_Init+0x148>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a34      	ldr	r2, [pc, #208]	@ (800084c <ADXL_Init+0x14c>)
 800077c:	6013      	str	r3, [r2, #0]
								break;
 800077e:	e02e      	b.n	80007de <ADXL_Init+0xde>
							case RANGE_4G:
								GAINX = GAINY = GAINZ = 1/127.0f;
 8000780:	4b2f      	ldr	r3, [pc, #188]	@ (8000840 <ADXL_Init+0x140>)
 8000782:	4a33      	ldr	r2, [pc, #204]	@ (8000850 <ADXL_Init+0x150>)
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	4b2e      	ldr	r3, [pc, #184]	@ (8000840 <ADXL_Init+0x140>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a2f      	ldr	r2, [pc, #188]	@ (8000848 <ADXL_Init+0x148>)
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	4b2e      	ldr	r3, [pc, #184]	@ (8000848 <ADXL_Init+0x148>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a2e      	ldr	r2, [pc, #184]	@ (800084c <ADXL_Init+0x14c>)
 8000794:	6013      	str	r3, [r2, #0]
								break;
 8000796:	e022      	b.n	80007de <ADXL_Init+0xde>
							case RANGE_8G:
								GAINX = GAINY = GAINZ = 1/63.0f;
 8000798:	4b29      	ldr	r3, [pc, #164]	@ (8000840 <ADXL_Init+0x140>)
 800079a:	4a2e      	ldr	r2, [pc, #184]	@ (8000854 <ADXL_Init+0x154>)
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	4b28      	ldr	r3, [pc, #160]	@ (8000840 <ADXL_Init+0x140>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a29      	ldr	r2, [pc, #164]	@ (8000848 <ADXL_Init+0x148>)
 80007a4:	6013      	str	r3, [r2, #0]
 80007a6:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <ADXL_Init+0x148>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a28      	ldr	r2, [pc, #160]	@ (800084c <ADXL_Init+0x14c>)
 80007ac:	6013      	str	r3, [r2, #0]
								break;
 80007ae:	e016      	b.n	80007de <ADXL_Init+0xde>
							case RANGE_16G:
								GAINX = GAINY = GAINZ = 1/31.0f;
 80007b0:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <ADXL_Init+0x140>)
 80007b2:	4a29      	ldr	r2, [pc, #164]	@ (8000858 <ADXL_Init+0x158>)
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	4b22      	ldr	r3, [pc, #136]	@ (8000840 <ADXL_Init+0x140>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a23      	ldr	r2, [pc, #140]	@ (8000848 <ADXL_Init+0x148>)
 80007bc:	6013      	str	r3, [r2, #0]
 80007be:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <ADXL_Init+0x148>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a22      	ldr	r2, [pc, #136]	@ (800084c <ADXL_Init+0x14c>)
 80007c4:	6013      	str	r3, [r2, #0]
								break;
 80007c6:	e00a      	b.n	80007de <ADXL_Init+0xde>
								}
			} else 
			{
			GAINX = GAINY = GAINZ = 1/255.0f;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000840 <ADXL_Init+0x140>)
 80007ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000844 <ADXL_Init+0x144>)
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <ADXL_Init+0x140>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a1d      	ldr	r2, [pc, #116]	@ (8000848 <ADXL_Init+0x148>)
 80007d4:	6013      	str	r3, [r2, #0]
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <ADXL_Init+0x148>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a1c      	ldr	r2, [pc, #112]	@ (800084c <ADXL_Init+0x14c>)
 80007dc:	6013      	str	r3, [r2, #0]
			}
	// Setting AutoSleep and Link bits
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 80007de:	f107 030e 	add.w	r3, r7, #14
 80007e2:	2201      	movs	r2, #1
 80007e4:	4619      	mov	r1, r3
 80007e6:	202d      	movs	r0, #45	@ 0x2d
 80007e8:	f7ff fed6 	bl	8000598 <readRegister>
			if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	79db      	ldrb	r3, [r3, #7]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d105      	bne.n	8000800 <ADXL_Init+0x100>
 80007f4:	7bbb      	ldrb	r3, [r7, #14]
 80007f6:	f043 0310 	orr.w	r3, r3, #16
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	73bb      	strb	r3, [r7, #14]
 80007fe:	e004      	b.n	800080a <ADXL_Init+0x10a>
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	f023 0310 	bic.w	r3, r3, #16
 8000806:	b2db      	uxtb	r3, r3
 8000808:	73bb      	strb	r3, [r7, #14]
			if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7a1b      	ldrb	r3, [r3, #8]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d105      	bne.n	800081e <ADXL_Init+0x11e>
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	f043 0320 	orr.w	r3, r3, #32
 8000818:	b2db      	uxtb	r3, r3
 800081a:	73bb      	strb	r3, [r7, #14]
 800081c:	e004      	b.n	8000828 <ADXL_Init+0x128>
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	f023 0320 	bic.w	r3, r3, #32
 8000824:	b2db      	uxtb	r3, r3
 8000826:	73bb      	strb	r3, [r7, #14]
			writeRegister(POWER_CTL,reg);
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	4619      	mov	r1, r3
 800082c:	202d      	movs	r0, #45	@ 0x2d
 800082e:	f7ff fe83 	bl	8000538 <writeRegister>
			
	return ADXL_OK;
 8000832:	2300      	movs	r3, #0
	
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40020400 	.word	0x40020400
 8000840:	20000030 	.word	0x20000030
 8000844:	3b808081 	.word	0x3b808081
 8000848:	2000002c 	.word	0x2000002c
 800084c:	20000028 	.word	0x20000028
 8000850:	3c010204 	.word	0x3c010204
 8000854:	3c820821 	.word	0x3c820821
 8000858:	3d042108 	.word	0x3d042108

0800085c <ADXL_getAccel>:
						uint16_t acc[3];
						ADXL_getAccel(acc,OUTPUT_SIGNED);
						and so on...
*/
void ADXL_getAccel(void *Data , uint8_t outputType)
	{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
	uint8_t data[6]={0,0,0,0,0,0};	
 8000868:	4a3a      	ldr	r2, [pc, #232]	@ (8000954 <ADXL_getAccel+0xf8>)
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000872:	6018      	str	r0, [r3, #0]
 8000874:	3304      	adds	r3, #4
 8000876:	8019      	strh	r1, [r3, #0]
	readRegister(DATA0,data,6);
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	2206      	movs	r2, #6
 800087e:	4619      	mov	r1, r3
 8000880:	2032      	movs	r0, #50	@ 0x32
 8000882:	f7ff fe89 	bl	8000598 <readRegister>
	
	
	if (outputType == OUTPUT_SIGNED)
 8000886:	78fb      	ldrb	r3, [r7, #3]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d11f      	bne.n	80008cc <ADXL_getAccel+0x70>
		{
		int16_t * acc = Data;	
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	613b      	str	r3, [r7, #16]
	  // Two's Complement
	  acc[0] = (int16_t) ((data[1]*256+data[0]));
 8000890:	7a7b      	ldrb	r3, [r7, #9]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	b29b      	uxth	r3, r3
 8000896:	7a3a      	ldrb	r2, [r7, #8]
 8000898:	4413      	add	r3, r2
 800089a:	b29b      	uxth	r3, r3
 800089c:	b21a      	sxth	r2, r3
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	801a      	strh	r2, [r3, #0]
	  acc[1] = (int16_t) ((data[3]*256+data[2]));
 80008a2:	7afb      	ldrb	r3, [r7, #11]
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	7aba      	ldrb	r2, [r7, #10]
 80008aa:	4413      	add	r3, r2
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	3302      	adds	r3, #2
 80008b2:	b212      	sxth	r2, r2
 80008b4:	801a      	strh	r2, [r3, #0]
	  acc[2] = (int16_t) ((data[5]*256+data[4]));
 80008b6:	7b7b      	ldrb	r3, [r7, #13]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	7b3a      	ldrb	r2, [r7, #12]
 80008be:	4413      	add	r3, r2
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	3304      	adds	r3, #4
 80008c6:	b212      	sxth	r2, r2
 80008c8:	801a      	strh	r2, [r3, #0]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
						
						}
	}
 80008ca:	e03f      	b.n	800094c <ADXL_getAccel+0xf0>
	else if (outputType == OUTPUT_FLOAT)
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d13c      	bne.n	800094c <ADXL_getAccel+0xf0>
						float * fdata = Data;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	617b      	str	r3, [r7, #20]
						fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
 80008d6:	7a7b      	ldrb	r3, [r7, #9]
 80008d8:	021b      	lsls	r3, r3, #8
 80008da:	b29b      	uxth	r3, r3
 80008dc:	7a3a      	ldrb	r2, [r7, #8]
 80008de:	4413      	add	r3, r2
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	ee07 3a90 	vmov	s15, r3
 80008e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <ADXL_getAccel+0xfc>)
 80008ee:	edd3 7a00 	vldr	s15, [r3]
 80008f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	edc3 7a00 	vstr	s15, [r3]
						fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
 80008fc:	7afb      	ldrb	r3, [r7, #11]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	b29b      	uxth	r3, r3
 8000902:	7aba      	ldrb	r2, [r7, #10]
 8000904:	4413      	add	r3, r2
 8000906:	b29b      	uxth	r3, r3
 8000908:	b21b      	sxth	r3, r3
 800090a:	ee07 3a90 	vmov	s15, r3
 800090e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000912:	4b12      	ldr	r3, [pc, #72]	@ (800095c <ADXL_getAccel+0x100>)
 8000914:	edd3 7a00 	vldr	s15, [r3]
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3304      	adds	r3, #4
 800091c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000920:	edc3 7a00 	vstr	s15, [r3]
						fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
 8000924:	7b7b      	ldrb	r3, [r7, #13]
 8000926:	021b      	lsls	r3, r3, #8
 8000928:	b29b      	uxth	r3, r3
 800092a:	7b3a      	ldrb	r2, [r7, #12]
 800092c:	4413      	add	r3, r2
 800092e:	b29b      	uxth	r3, r3
 8000930:	b21b      	sxth	r3, r3
 8000932:	ee07 3a90 	vmov	s15, r3
 8000936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <ADXL_getAccel+0x104>)
 800093c:	edd3 7a00 	vldr	s15, [r3]
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	3308      	adds	r3, #8
 8000944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000948:	edc3 7a00 	vstr	s15, [r3]
	}
 800094c:	bf00      	nop
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	08004694 	.word	0x08004694
 8000958:	20000028 	.word	0x20000028
 800095c:	2000002c 	.word	0x2000002c
 8000960:	20000030 	.word	0x20000030

08000964 <ADXL_Measure>:
/** Starts Measure Mode
* @param: s = ON or OFF				

*/
void ADXL_Measure(Switch s)
		{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 800096e:	f107 030f 	add.w	r3, r7, #15
 8000972:	2201      	movs	r2, #1
 8000974:	4619      	mov	r1, r3
 8000976:	202d      	movs	r0, #45	@ 0x2d
 8000978:	f7ff fe0e 	bl	8000598 <readRegister>
			switch (s) {
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <ADXL_Measure+0x24>
 8000982:	2b01      	cmp	r3, #1
 8000984:	d010      	beq.n	80009a8 <ADXL_Measure+0x44>
				case OFF:
				reg &= ~(1<<3);
				writeRegister(POWER_CTL,reg);
				break;				
				}
		}
 8000986:	e01a      	b.n	80009be <ADXL_Measure+0x5a>
				reg &= ~(1<<2);
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	f023 0304 	bic.w	r3, r3, #4
 800098e:	b2db      	uxtb	r3, r3
 8000990:	73fb      	strb	r3, [r7, #15]
				reg |= (1<<3);
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	b2db      	uxtb	r3, r3
 800099a:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	4619      	mov	r1, r3
 80009a0:	202d      	movs	r0, #45	@ 0x2d
 80009a2:	f7ff fdc9 	bl	8000538 <writeRegister>
				break;
 80009a6:	e00a      	b.n	80009be <ADXL_Measure+0x5a>
				reg &= ~(1<<3);
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	f023 0308 	bic.w	r3, r3, #8
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	4619      	mov	r1, r3
 80009b6:	202d      	movs	r0, #45	@ 0x2d
 80009b8:	f7ff fdbe 	bl	8000538 <writeRegister>
				break;				
 80009bc:	bf00      	nop
		}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <lsm6dso_read_data_polling>:
static void platform_delay(uint32_t ms);
static void platform_init(void);

/* Main Example --------------------------------------------------------------*/
void lsm6dso_read_data_polling(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
  stmdev_ctx_t dev_ctx;
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 80009ce:	4b76      	ldr	r3, [pc, #472]	@ (8000ba8 <lsm6dso_read_data_polling+0x1e0>)
 80009d0:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 80009d2:	4b76      	ldr	r3, [pc, #472]	@ (8000bac <lsm6dso_read_data_polling+0x1e4>)
 80009d4:	60fb      	str	r3, [r7, #12]
  dev_ctx.mdelay = platform_delay;
 80009d6:	4b76      	ldr	r3, [pc, #472]	@ (8000bb0 <lsm6dso_read_data_polling+0x1e8>)
 80009d8:	613b      	str	r3, [r7, #16]
  dev_ctx.handle = &SENSOR_BUS;
 80009da:	4b76      	ldr	r3, [pc, #472]	@ (8000bb4 <lsm6dso_read_data_polling+0x1ec>)
 80009dc:	617b      	str	r3, [r7, #20]
  /* Init test platform */
  platform_init();
 80009de:	f000 f96e 	bl	8000cbe <platform_init>
  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 80009e2:	200a      	movs	r0, #10
 80009e4:	f000 f960 	bl	8000ca8 <platform_delay>
  /* Check device ID */
  lsm6dso_device_id_get(&dev_ctx, &whoamI);
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	4972      	ldr	r1, [pc, #456]	@ (8000bb8 <lsm6dso_read_data_polling+0x1f0>)
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 fd74 	bl	80014dc <lsm6dso_device_id_get>

  if (whoamI != LSM6DSO_ID)
 80009f4:	4b70      	ldr	r3, [pc, #448]	@ (8000bb8 <lsm6dso_read_data_polling+0x1f0>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b6c      	cmp	r3, #108	@ 0x6c
 80009fa:	d001      	beq.n	8000a00 <lsm6dso_read_data_polling+0x38>
    while (1);
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <lsm6dso_read_data_polling+0x34>

  /* Restore default configuration */
  lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	2101      	movs	r1, #1
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fd79 	bl	80014fe <lsm6dso_reset_set>

  do {
    lsm6dso_reset_get(&dev_ctx, &rst);
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	496a      	ldr	r1, [pc, #424]	@ (8000bbc <lsm6dso_read_data_polling+0x1f4>)
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fd99 	bl	800154a <lsm6dso_reset_get>
  } while (rst);
 8000a18:	4b68      	ldr	r3, [pc, #416]	@ (8000bbc <lsm6dso_read_data_polling+0x1f4>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f5      	bne.n	8000a0c <lsm6dso_read_data_polling+0x44>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	2180      	movs	r1, #128	@ 0x80
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fe06 	bl	8001638 <lsm6dso_i3c_disable_set>
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	2101      	movs	r1, #1
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fc12 	bl	800125c <lsm6dso_block_data_update_set>
  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f9f2 	bl	8000e28 <lsm6dso_xl_data_rate_set>
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	2101      	movs	r1, #1
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fb0c 	bl	8001068 <lsm6dso_gy_data_rate_set>
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f9c0 	bl	8000ddc <lsm6dso_xl_full_scale_set>
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	2106      	movs	r1, #6
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fada 	bl	800101c <lsm6dso_gy_full_scale_set>
  /* Configure filtering chain(No aux interface)
   * Accelerometer - LPF1 + LPF2 path
   */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	2104      	movs	r1, #4
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 fdaa 	bl	80015c8 <lsm6dso_xl_hp_path_on_out_set>
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2101      	movs	r1, #1
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fd7e 	bl	800157c <lsm6dso_xl_filter_lp2_set>

  /* Read samples in polling mode (no int) */
  while (1) {
    uint8_t reg;
    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(&dev_ctx, &reg);
 8000a80:	1dfa      	adds	r2, r7, #7
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fc0d 	bl	80012a8 <lsm6dso_xl_flag_data_ready_get>

    if (reg) {
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d034      	beq.n	8000afe <lsm6dso_read_data_polling+0x136>
      /* Read acceleration field data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8000a94:	2206      	movs	r2, #6
 8000a96:	2100      	movs	r1, #0
 8000a98:	4849      	ldr	r0, [pc, #292]	@ (8000bc0 <lsm6dso_read_data_polling+0x1f8>)
 8000a9a:	f003 fdc3 	bl	8004624 <memset>
      lsm6dso_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	4947      	ldr	r1, [pc, #284]	@ (8000bc0 <lsm6dso_read_data_polling+0x1f8>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 fcb4 	bl	8001412 <lsm6dso_acceleration_raw_get>
      acceleration_mg[0] =
        lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
 8000aaa:	4b45      	ldr	r3, [pc, #276]	@ (8000bc0 <lsm6dso_read_data_polling+0x1f8>)
 8000aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 f947 	bl	8000d44 <lsm6dso_from_fs2_to_mg>
 8000ab6:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[0] =
 8000aba:	4b42      	ldr	r3, [pc, #264]	@ (8000bc4 <lsm6dso_read_data_polling+0x1fc>)
 8000abc:	edc3 7a00 	vstr	s15, [r3]
      acceleration_mg[1] =
        lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
 8000ac0:	4b3f      	ldr	r3, [pc, #252]	@ (8000bc0 <lsm6dso_read_data_polling+0x1f8>)
 8000ac2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f93c 	bl	8000d44 <lsm6dso_from_fs2_to_mg>
 8000acc:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[1] =
 8000ad0:	4b3c      	ldr	r3, [pc, #240]	@ (8000bc4 <lsm6dso_read_data_polling+0x1fc>)
 8000ad2:	edc3 7a01 	vstr	s15, [r3, #4]
      acceleration_mg[2] =
        lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
 8000ad6:	4b3a      	ldr	r3, [pc, #232]	@ (8000bc0 <lsm6dso_read_data_polling+0x1f8>)
 8000ad8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f931 	bl	8000d44 <lsm6dso_from_fs2_to_mg>
 8000ae2:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[2] =
 8000ae6:	4b37      	ldr	r3, [pc, #220]	@ (8000bc4 <lsm6dso_read_data_polling+0x1fc>)
 8000ae8:	edc3 7a02 	vstr	s15, [r3, #8]
//      sprintf((char *)tx_buffer,
//              "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
//              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8000aec:	4836      	ldr	r0, [pc, #216]	@ (8000bc8 <lsm6dso_read_data_polling+0x200>)
 8000aee:	f7ff fba3 	bl	8000238 <strlen>
 8000af2:	4603      	mov	r3, r0
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	4619      	mov	r1, r3
 8000af8:	4833      	ldr	r0, [pc, #204]	@ (8000bc8 <lsm6dso_read_data_polling+0x200>)
 8000afa:	f000 f8c9 	bl	8000c90 <tx_com>
    }

    lsm6dso_gy_flag_data_ready_get(&dev_ctx, &reg);
 8000afe:	1dfa      	adds	r2, r7, #7
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fbe7 	bl	80012da <lsm6dso_gy_flag_data_ready_get>

    if (reg) {
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d02b      	beq.n	8000b6a <lsm6dso_read_data_polling+0x1a2>
      /* Read angular rate field data */
      memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8000b12:	2206      	movs	r2, #6
 8000b14:	2100      	movs	r1, #0
 8000b16:	482d      	ldr	r0, [pc, #180]	@ (8000bcc <lsm6dso_read_data_polling+0x204>)
 8000b18:	f003 fd84 	bl	8004624 <memset>
      lsm6dso_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	492a      	ldr	r1, [pc, #168]	@ (8000bcc <lsm6dso_read_data_polling+0x204>)
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fc2d 	bl	8001382 <lsm6dso_angular_rate_raw_get>
      angular_rate_mdps[0] =
        lsm6dso_from_fs2000_to_mdps(data_raw_angular_rate[0]);
 8000b28:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <lsm6dso_read_data_polling+0x204>)
 8000b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f920 	bl	8000d74 <lsm6dso_from_fs2000_to_mdps>
 8000b34:	eef0 7a40 	vmov.f32	s15, s0
      angular_rate_mdps[0] =
 8000b38:	4b25      	ldr	r3, [pc, #148]	@ (8000bd0 <lsm6dso_read_data_polling+0x208>)
 8000b3a:	edc3 7a00 	vstr	s15, [r3]
      angular_rate_mdps[1] =
        lsm6dso_from_fs2000_to_mdps(data_raw_angular_rate[1]);
 8000b3e:	4b23      	ldr	r3, [pc, #140]	@ (8000bcc <lsm6dso_read_data_polling+0x204>)
 8000b40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f915 	bl	8000d74 <lsm6dso_from_fs2000_to_mdps>
 8000b4a:	eef0 7a40 	vmov.f32	s15, s0
      angular_rate_mdps[1] =
 8000b4e:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <lsm6dso_read_data_polling+0x208>)
 8000b50:	edc3 7a01 	vstr	s15, [r3, #4]
      angular_rate_mdps[2] =
        lsm6dso_from_fs2000_to_mdps(data_raw_angular_rate[2]);
 8000b54:	4b1d      	ldr	r3, [pc, #116]	@ (8000bcc <lsm6dso_read_data_polling+0x204>)
 8000b56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f90a 	bl	8000d74 <lsm6dso_from_fs2000_to_mdps>
 8000b60:	eef0 7a40 	vmov.f32	s15, s0
      angular_rate_mdps[2] =
 8000b64:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <lsm6dso_read_data_polling+0x208>)
 8000b66:	edc3 7a02 	vstr	s15, [r3, #8]
//              "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
//              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
//      tx_com(tx_buffer, strlen((char const *)tx_buffer));
    }

    lsm6dso_temp_flag_data_ready_get(&dev_ctx, &reg);
 8000b6a:	1dfa      	adds	r2, r7, #7
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fbca 	bl	800130c <lsm6dso_temp_flag_data_ready_get>

    if (reg) {
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d080      	beq.n	8000a80 <lsm6dso_read_data_polling+0xb8>
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <lsm6dso_read_data_polling+0x20c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	801a      	strh	r2, [r3, #0]
      lsm6dso_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8000b84:	f107 0308 	add.w	r3, r7, #8
 8000b88:	4912      	ldr	r1, [pc, #72]	@ (8000bd4 <lsm6dso_read_data_polling+0x20c>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fbd7 	bl	800133e <lsm6dso_temperature_raw_get>
      temperature_degC =
        lsm6dso_from_lsb_to_celsius(data_raw_temperature);
 8000b90:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <lsm6dso_read_data_polling+0x20c>)
 8000b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f904 	bl	8000da4 <lsm6dso_from_lsb_to_celsius>
 8000b9c:	eef0 7a40 	vmov.f32	s15, s0
      temperature_degC =
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd8 <lsm6dso_read_data_polling+0x210>)
 8000ba2:	edc3 7a00 	vstr	s15, [r3]
  while (1) {
 8000ba6:	e76b      	b.n	8000a80 <lsm6dso_read_data_polling+0xb8>
 8000ba8:	08000bdd 	.word	0x08000bdd
 8000bac:	08000c31 	.word	0x08000c31
 8000bb0:	08000ca9 	.word	0x08000ca9
 8000bb4:	200004a0 	.word	0x200004a0
 8000bb8:	20000060 	.word	0x20000060
 8000bbc:	20000061 	.word	0x20000061
 8000bc0:	20000034 	.word	0x20000034
 8000bc4:	20000044 	.word	0x20000044
 8000bc8:	20000064 	.word	0x20000064
 8000bcc:	2000003c 	.word	0x2000003c
 8000bd0:	20000050 	.word	0x20000050
 8000bd4:	20000042 	.word	0x20000042
 8000bd8:	2000005c 	.word	0x2000005c

08000bdc <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	461a      	mov	r2, r3
 8000be8:	460b      	mov	r3, r1
 8000bea:	72fb      	strb	r3, [r7, #11]
 8000bec:	4613      	mov	r3, r2
 8000bee:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F401RE)
  HAL_I2C_Mem_Write(handle, LSM6DSO_I2C_ADD_L, reg,
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
#elif defined(STEVAL_MKI109V3)
  HAL_GPIO_WritePin(ADXLCS_GPIO_Port, ADXLCS_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <platform_write+0x50>)
 8000bf6:	f001 fbc1 	bl	800237c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000bfa:	f107 010b 	add.w	r1, r7, #11
 8000bfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c02:	2201      	movs	r2, #1
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f002 fe3a 	bl	800387e <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8000c0a:	893a      	ldrh	r2, [r7, #8]
 8000c0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c10:	6879      	ldr	r1, [r7, #4]
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	f002 fe33 	bl	800387e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ADXLCS_GPIO_Port, ADXLCS_Pin, GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	4803      	ldr	r0, [pc, #12]	@ (8000c2c <platform_write+0x50>)
 8000c1e:	f001 fbad 	bl	800237c <HAL_GPIO_WritePin>
#elif defined(SPC584B_DIS)
  i2c_lld_write(handle,  LSM6DSO_I2C_ADD_H & 0xFE, reg, (uint8_t*) bufp, len);
#endif
  return 0;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40020400 	.word	0x40020400

08000c30 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	72fb      	strb	r3, [r7, #11]
 8000c40:	4613      	mov	r3, r2
 8000c42:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F401RE)
  HAL_I2C_Mem_Read(handle, LSM6DSO_I2C_ADD_L, reg,
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
#elif defined(STEVAL_MKI109V3)
  reg |= 0x80;
 8000c44:	7afb      	ldrb	r3, [r7, #11]
 8000c46:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(ADXLCS_GPIO_Port, ADXLCS_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2120      	movs	r1, #32
 8000c52:	480e      	ldr	r0, [pc, #56]	@ (8000c8c <platform_read+0x5c>)
 8000c54:	f001 fb92 	bl	800237c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000c58:	f107 010b 	add.w	r1, r7, #11
 8000c5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c60:	2201      	movs	r2, #1
 8000c62:	68f8      	ldr	r0, [r7, #12]
 8000c64:	f002 fe0b 	bl	800387e <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 8000c68:	893a      	ldrh	r2, [r7, #8]
 8000c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f002 ff79 	bl	8003b68 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(ADXLCS_GPIO_Port, ADXLCS_Pin, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2120      	movs	r1, #32
 8000c7a:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <platform_read+0x5c>)
 8000c7c:	f001 fb7e 	bl	800237c <HAL_GPIO_WritePin>
#elif defined(SPC584B_DIS)
  i2c_lld_read(handle, LSM6DSO_I2C_ADD_H & 0xFE, reg, bufp, len);
#endif
  return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40020400 	.word	0x40020400

08000c90 <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	807b      	strh	r3, [r7, #2]
//#elif defined(STEVAL_MKI109V3)
//  CDC_Transmit_FS(tx_buffer, len);
#elif defined(SPC584B_DIS)
  sd_lld_write(&SD2, tx_buffer, len);
#endif
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
#if defined(NUCLEO_F401RE) | defined(STEVAL_MKI109V3)
  HAL_Delay(ms);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f001 f8ad 	bl	8001e10 <HAL_Delay>
#elif defined(SPC584B_DIS)
  osalThreadDelayMilliseconds(ms);
#endif
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
static void platform_init(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
//  TIM3->CCR2 = PWM_3V3;
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//  HAL_Delay(1000);
#endif
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b087      	sub	sp, #28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	460b      	mov	r3, r1
 8000cda:	72fb      	strb	r3, [r7, #11]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <lsm6dso_read_reg+0x20>
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e009      	b.n	8000d00 <lsm6dso_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	685c      	ldr	r4, [r3, #4]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	68d8      	ldr	r0, [r3, #12]
 8000cf4:	893b      	ldrh	r3, [r7, #8]
 8000cf6:	7af9      	ldrb	r1, [r7, #11]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	47a0      	blx	r4
 8000cfc:	6178      	str	r0, [r7, #20]

  return ret;
 8000cfe:	697b      	ldr	r3, [r7, #20]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	371c      	adds	r7, #28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd90      	pop	{r4, r7, pc}

08000d08 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	461a      	mov	r2, r3
 8000d14:	460b      	mov	r3, r1
 8000d16:	72fb      	strb	r3, [r7, #11]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d102      	bne.n	8000d28 <lsm6dso_write_reg+0x20>
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e009      	b.n	8000d3c <lsm6dso_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681c      	ldr	r4, [r3, #0]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	68d8      	ldr	r0, [r3, #12]
 8000d30:	893b      	ldrh	r3, [r7, #8]
 8000d32:	7af9      	ldrb	r1, [r7, #11]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	47a0      	blx	r4
 8000d38:	6178      	str	r0, [r7, #20]

  return ret;
 8000d3a:	697b      	ldr	r3, [r7, #20]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	371c      	adds	r7, #28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd90      	pop	{r4, r7, pc}

08000d44 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 8000d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d52:	ee07 3a90 	vmov	s15, r3
 8000d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000d70 <lsm6dso_from_fs2_to_mg+0x2c>
 8000d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000d62:	eeb0 0a67 	vmov.f32	s0, s15
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	3d79db23 	.word	0x3d79db23

08000d74 <lsm6dso_from_fs2000_to_mdps>:
{
  return ((float_t)lsb) * 35.0f;
}

float_t lsm6dso_from_fs2000_to_mdps(int16_t lsb)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 70.0f;
 8000d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d82:	ee07 3a90 	vmov	s15, r3
 8000d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d8a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000da0 <lsm6dso_from_fs2000_to_mdps+0x2c>
 8000d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000d92:	eeb0 0a67 	vmov.f32	s0, s15
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	428c0000 	.word	0x428c0000

08000da4 <lsm6dso_from_lsb_to_celsius>:

float_t lsm6dso_from_lsb_to_celsius(int16_t lsb)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8000dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db2:	ee07 3a90 	vmov	s15, r3
 8000db6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dba:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000dd8 <lsm6dso_from_lsb_to_celsius+0x34>
 8000dbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc2:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000dc6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000dca:	eeb0 0a67 	vmov.f32	s0, s15
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	43800000 	.word	0x43800000

08000ddc <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8000de8:	f107 0208 	add.w	r2, r7, #8
 8000dec:	2301      	movs	r3, #1
 8000dee:	2110      	movs	r1, #16
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff6b 	bl	8000ccc <lsm6dso_read_reg>
 8000df6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10f      	bne.n	8000e1e <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	7a3b      	ldrb	r3, [r7, #8]
 8000e08:	f362 0383 	bfi	r3, r2, #2, #2
 8000e0c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8000e0e:	f107 0208 	add.w	r2, r7, #8
 8000e12:	2301      	movs	r3, #1
 8000e14:	2110      	movs	r1, #16
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ff76 	bl	8000d08 <lsm6dso_write_reg>
 8000e1c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8000e34:	78fb      	ldrb	r3, [r7, #3]
 8000e36:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f000 fc42 	bl	80016c8 <lsm6dso_fsm_enable_get>
 8000e44:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <lsm6dso_xl_data_rate_set+0x28>
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	e0e0      	b.n	8001012 <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8000e50:	7b3b      	ldrb	r3, [r7, #12]
 8000e52:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000e56:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8000e58:	7b3b      	ldrb	r3, [r7, #12]
 8000e5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000e5e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8000e64:	7b3b      	ldrb	r3, [r7, #12]
 8000e66:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000e6a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8000e70:	7b3b      	ldrb	r3, [r7, #12]
 8000e72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000e76:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8000e7c:	7b3b      	ldrb	r3, [r7, #12]
 8000e7e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e82:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8000e88:	7b3b      	ldrb	r3, [r7, #12]
 8000e8a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e8e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8000e90:	4313      	orrs	r3, r2
 8000e92:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8000e94:	7b3b      	ldrb	r3, [r7, #12]
 8000e96:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000e9a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8000ea0:	7b3b      	ldrb	r3, [r7, #12]
 8000ea2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000ea6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8000eac:	7b7b      	ldrb	r3, [r7, #13]
 8000eae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000eb2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8000eb8:	7b7b      	ldrb	r3, [r7, #13]
 8000eba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ebe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8000ec4:	7b7b      	ldrb	r3, [r7, #13]
 8000ec6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000eca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8000ed0:	7b7b      	ldrb	r3, [r7, #13]
 8000ed2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000ed6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8000edc:	7b7b      	ldrb	r3, [r7, #13]
 8000ede:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000ee2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8000ee8:	7b7b      	ldrb	r3, [r7, #13]
 8000eea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000eee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8000ef4:	7b7b      	ldrb	r3, [r7, #13]
 8000ef6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000efa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8000f00:	7b7b      	ldrb	r3, [r7, #13]
 8000f02:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000f06:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d164      	bne.n	8000fda <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8000f10:	f107 030b 	add.w	r3, r7, #11
 8000f14:	4619      	mov	r1, r3
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 fbf8 	bl	800170c <lsm6dso_fsm_data_rate_get>
 8000f1c:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <lsm6dso_xl_data_rate_set+0x100>
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	e074      	b.n	8001012 <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8000f28:	7afb      	ldrb	r3, [r7, #11]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d852      	bhi.n	8000fd4 <lsm6dso_xl_data_rate_set+0x1ac>
 8000f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f34 <lsm6dso_xl_data_rate_set+0x10c>)
 8000f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f34:	08000f45 	.word	0x08000f45
 8000f38:	08000f57 	.word	0x08000f57
 8000f3c:	08000f75 	.word	0x08000f75
 8000f40:	08000f9f 	.word	0x08000f9f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8000f4e:	e044      	b.n	8000fda <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	75fb      	strb	r3, [r7, #23]
        break;
 8000f54:	e041      	b.n	8000fda <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8000f56:	78fb      	ldrb	r3, [r7, #3]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8000f60:	e03b      	b.n	8000fda <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d102      	bne.n	8000f6e <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	75fb      	strb	r3, [r7, #23]
        break;
 8000f6c:	e035      	b.n	8000fda <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	75fb      	strb	r3, [r7, #23]
        break;
 8000f72:	e032      	b.n	8000fda <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8000f74:	78fb      	ldrb	r3, [r7, #3]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8000f7e:	e02c      	b.n	8000fda <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d102      	bne.n	8000f8c <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8000f86:	2303      	movs	r3, #3
 8000f88:	75fb      	strb	r3, [r7, #23]
        break;
 8000f8a:	e026      	b.n	8000fda <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d102      	bne.n	8000f98 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8000f92:	2303      	movs	r3, #3
 8000f94:	75fb      	strb	r3, [r7, #23]
        break;
 8000f96:	e020      	b.n	8000fda <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	75fb      	strb	r3, [r7, #23]
        break;
 8000f9c:	e01d      	b.n	8000fda <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8000fa8:	e017      	b.n	8000fda <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d102      	bne.n	8000fb6 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	75fb      	strb	r3, [r7, #23]
        break;
 8000fb4:	e011      	b.n	8000fda <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d102      	bne.n	8000fc2 <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	75fb      	strb	r3, [r7, #23]
        break;
 8000fc0:	e00b      	b.n	8000fda <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8000fc2:	78fb      	ldrb	r3, [r7, #3]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d102      	bne.n	8000fce <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	75fb      	strb	r3, [r7, #23]
        break;
 8000fcc:	e005      	b.n	8000fda <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	75fb      	strb	r3, [r7, #23]
        break;
 8000fd2:	e002      	b.n	8000fda <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	75fb      	strb	r3, [r7, #23]
        break;
 8000fd8:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8000fda:	f107 0208 	add.w	r2, r7, #8
 8000fde:	2301      	movs	r3, #1
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fe72 	bl	8000ccc <lsm6dso_read_reg>
 8000fe8:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	7a3b      	ldrb	r3, [r7, #8]
 8000ff4:	f362 1307 	bfi	r3, r2, #4, #4
 8000ff8:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8000ffa:	f107 0208 	add.w	r2, r7, #8
 8000ffe:	2301      	movs	r3, #1
 8001000:	2110      	movs	r1, #16
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fe80 	bl	8000d08 <lsm6dso_write_reg>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4413      	add	r3, r2
 800100e:	613b      	str	r3, [r7, #16]

  return ret;
 8001010:	693b      	ldr	r3, [r7, #16]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop

0800101c <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8001028:	f107 0208 	add.w	r2, r7, #8
 800102c:	2301      	movs	r3, #1
 800102e:	2111      	movs	r1, #17
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fe4b 	bl	8000ccc <lsm6dso_read_reg>
 8001036:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10f      	bne.n	800105e <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	b2da      	uxtb	r2, r3
 8001046:	7a3b      	ldrb	r3, [r7, #8]
 8001048:	f362 0343 	bfi	r3, r2, #1, #3
 800104c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800104e:	f107 0208 	add.w	r2, r7, #8
 8001052:	2301      	movs	r3, #1
 8001054:	2111      	movs	r1, #17
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fe56 	bl	8000d08 <lsm6dso_write_reg>
 800105c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4619      	mov	r1, r3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fb22 	bl	80016c8 <lsm6dso_fsm_enable_get>
 8001084:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <lsm6dso_gy_data_rate_set+0x28>
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	e0e0      	b.n	8001252 <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001090:	7b3b      	ldrb	r3, [r7, #12]
 8001092:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001096:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8001098:	7b3b      	ldrb	r3, [r7, #12]
 800109a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800109e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80010a4:	7b3b      	ldrb	r3, [r7, #12]
 80010a6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80010aa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80010b0:	7b3b      	ldrb	r3, [r7, #12]
 80010b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80010b6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80010bc:	7b3b      	ldrb	r3, [r7, #12]
 80010be:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80010c2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80010c8:	7b3b      	ldrb	r3, [r7, #12]
 80010ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80010ce:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80010d4:	7b3b      	ldrb	r3, [r7, #12]
 80010d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80010da:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80010dc:	4313      	orrs	r3, r2
 80010de:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80010e0:	7b3b      	ldrb	r3, [r7, #12]
 80010e2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80010e6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80010ec:	7b7b      	ldrb	r3, [r7, #13]
 80010ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80010f2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80010fe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8001100:	4313      	orrs	r3, r2
 8001102:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8001104:	7b7b      	ldrb	r3, [r7, #13]
 8001106:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800110a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800110c:	4313      	orrs	r3, r2
 800110e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8001110:	7b7b      	ldrb	r3, [r7, #13]
 8001112:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001116:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8001118:	4313      	orrs	r3, r2
 800111a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800111c:	7b7b      	ldrb	r3, [r7, #13]
 800111e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001122:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8001124:	4313      	orrs	r3, r2
 8001126:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8001128:	7b7b      	ldrb	r3, [r7, #13]
 800112a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800112e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8001130:	4313      	orrs	r3, r2
 8001132:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8001134:	7b7b      	ldrb	r3, [r7, #13]
 8001136:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800113a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800113c:	4313      	orrs	r3, r2
 800113e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8001140:	7b7b      	ldrb	r3, [r7, #13]
 8001142:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001146:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8001148:	4313      	orrs	r3, r2
 800114a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800114c:	2b01      	cmp	r3, #1
 800114e:	d164      	bne.n	800121a <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8001150:	f107 030b 	add.w	r3, r7, #11
 8001154:	4619      	mov	r1, r3
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 fad8 	bl	800170c <lsm6dso_fsm_data_rate_get>
 800115c:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <lsm6dso_gy_data_rate_set+0x100>
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	e074      	b.n	8001252 <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8001168:	7afb      	ldrb	r3, [r7, #11]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d852      	bhi.n	8001214 <lsm6dso_gy_data_rate_set+0x1ac>
 800116e:	a201      	add	r2, pc, #4	@ (adr r2, 8001174 <lsm6dso_gy_data_rate_set+0x10c>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	08001185 	.word	0x08001185
 8001178:	08001197 	.word	0x08001197
 800117c:	080011b5 	.word	0x080011b5
 8001180:	080011df 	.word	0x080011df
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 800118a:	2301      	movs	r3, #1
 800118c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800118e:	e044      	b.n	800121a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	75fb      	strb	r3, [r7, #23]
        break;
 8001194:	e041      	b.n	800121a <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 800119c:	2302      	movs	r3, #2
 800119e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80011a0:	e03b      	b.n	800121a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d102      	bne.n	80011ae <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80011a8:	2302      	movs	r3, #2
 80011aa:	75fb      	strb	r3, [r7, #23]
        break;
 80011ac:	e035      	b.n	800121a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	75fb      	strb	r3, [r7, #23]
        break;
 80011b2:	e032      	b.n	800121a <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80011b4:	78fb      	ldrb	r3, [r7, #3]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80011ba:	2303      	movs	r3, #3
 80011bc:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80011be:	e02c      	b.n	800121a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d102      	bne.n	80011cc <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80011c6:	2303      	movs	r3, #3
 80011c8:	75fb      	strb	r3, [r7, #23]
        break;
 80011ca:	e026      	b.n	800121a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d102      	bne.n	80011d8 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80011d2:	2303      	movs	r3, #3
 80011d4:	75fb      	strb	r3, [r7, #23]
        break;
 80011d6:	e020      	b.n	800121a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	75fb      	strb	r3, [r7, #23]
        break;
 80011dc:	e01d      	b.n	800121a <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80011de:	78fb      	ldrb	r3, [r7, #3]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80011e4:	2304      	movs	r3, #4
 80011e6:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80011e8:	e017      	b.n	800121a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d102      	bne.n	80011f6 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80011f0:	2304      	movs	r3, #4
 80011f2:	75fb      	strb	r3, [r7, #23]
        break;
 80011f4:	e011      	b.n	800121a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d102      	bne.n	8001202 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80011fc:	2304      	movs	r3, #4
 80011fe:	75fb      	strb	r3, [r7, #23]
        break;
 8001200:	e00b      	b.n	800121a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	2b03      	cmp	r3, #3
 8001206:	d102      	bne.n	800120e <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8001208:	2304      	movs	r3, #4
 800120a:	75fb      	strb	r3, [r7, #23]
        break;
 800120c:	e005      	b.n	800121a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	75fb      	strb	r3, [r7, #23]
        break;
 8001212:	e002      	b.n	800121a <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	75fb      	strb	r3, [r7, #23]
        break;
 8001218:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800121a:	f107 0208 	add.w	r2, r7, #8
 800121e:	2301      	movs	r3, #1
 8001220:	2111      	movs	r1, #17
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fd52 	bl	8000ccc <lsm6dso_read_reg>
 8001228:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 800122a:	7dfb      	ldrb	r3, [r7, #23]
 800122c:	f003 030f 	and.w	r3, r3, #15
 8001230:	b2da      	uxtb	r2, r3
 8001232:	7a3b      	ldrb	r3, [r7, #8]
 8001234:	f362 1307 	bfi	r3, r2, #4, #4
 8001238:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800123a:	f107 0208 	add.w	r2, r7, #8
 800123e:	2301      	movs	r3, #1
 8001240:	2111      	movs	r1, #17
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fd60 	bl	8000d08 <lsm6dso_write_reg>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4413      	add	r3, r2
 800124e:	613b      	str	r3, [r7, #16]

  return ret;
 8001250:	693b      	ldr	r3, [r7, #16]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop

0800125c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001268:	f107 0208 	add.w	r2, r7, #8
 800126c:	2301      	movs	r3, #1
 800126e:	2112      	movs	r1, #18
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fd2b 	bl	8000ccc <lsm6dso_read_reg>
 8001276:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10f      	bne.n	800129e <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	b2da      	uxtb	r2, r3
 8001286:	7a3b      	ldrb	r3, [r7, #8]
 8001288:	f362 1386 	bfi	r3, r2, #6, #1
 800128c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800128e:	f107 0208 	add.w	r2, r7, #8
 8001292:	2301      	movs	r3, #1
 8001294:	2112      	movs	r1, #18
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fd36 	bl	8000d08 <lsm6dso_write_reg>
 800129c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(const stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
 80012b2:	f107 0208 	add.w	r2, r7, #8
 80012b6:	2301      	movs	r3, #1
 80012b8:	211e      	movs	r1, #30
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fd06 	bl	8000ccc <lsm6dso_read_reg>
 80012c0:	60f8      	str	r0, [r7, #12]
  *val = reg.xlda;
 80012c2:	7a3b      	ldrb	r3, [r7, #8]
 80012c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	701a      	strb	r2, [r3, #0]

  return ret;
 80012d0:	68fb      	ldr	r3, [r7, #12]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <lsm6dso_gy_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_flag_data_ready_get(const stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
 80012e4:	f107 0208 	add.w	r2, r7, #8
 80012e8:	2301      	movs	r3, #1
 80012ea:	211e      	movs	r1, #30
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fced 	bl	8000ccc <lsm6dso_read_reg>
 80012f2:	60f8      	str	r0, [r7, #12]
  *val = reg.gda;
 80012f4:	7a3b      	ldrb	r3, [r7, #8]
 80012f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	701a      	strb	r2, [r3, #0]

  return ret;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <lsm6dso_temp_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_temp_flag_data_ready_get(const stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
 8001316:	f107 0208 	add.w	r2, r7, #8
 800131a:	2301      	movs	r3, #1
 800131c:	211e      	movs	r1, #30
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fcd4 	bl	8000ccc <lsm6dso_read_reg>
 8001324:	60f8      	str	r0, [r7, #12]
  *val = reg.tda;
 8001326:	7a3b      	ldrb	r3, [r7, #8]
 8001328:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	701a      	strb	r2, [r3, #0]

  return ret;
 8001334:	68fb      	ldr	r3, [r7, #12]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <lsm6dso_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUT_TEMP_L, buff, 2);
 8001348:	f107 0208 	add.w	r2, r7, #8
 800134c:	2302      	movs	r3, #2
 800134e:	2120      	movs	r1, #32
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fcbb 	bl	8000ccc <lsm6dso_read_reg>
 8001356:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8001358:	7a7b      	ldrb	r3, [r7, #9]
 800135a:	b21a      	sxth	r2, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001366:	b29b      	uxth	r3, r3
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	b29b      	uxth	r3, r3
 800136c:	7a3a      	ldrb	r2, [r7, #8]
 800136e:	4413      	add	r3, r2
 8001370:	b29b      	uxth	r3, r3
 8001372:	b21a      	sxth	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	801a      	strh	r2, [r3, #0]

  return ret;
 8001378:	68fb      	ldr	r3, [r7, #12]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800138c:	f107 020c 	add.w	r2, r7, #12
 8001390:	2306      	movs	r3, #6
 8001392:	2122      	movs	r1, #34	@ 0x22
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff fc99 	bl	8000ccc <lsm6dso_read_reg>
 800139a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800139c:	7b7b      	ldrb	r3, [r7, #13]
 800139e:	b21a      	sxth	r2, r3
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	7b3a      	ldrb	r2, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3302      	adds	r3, #2
 80013c2:	b212      	sxth	r2, r2
 80013c4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	3302      	adds	r3, #2
 80013ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	7bba      	ldrb	r2, [r7, #14]
 80013d6:	4413      	add	r3, r2
 80013d8:	b29a      	uxth	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3302      	adds	r3, #2
 80013de:	b212      	sxth	r2, r2
 80013e0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80013e2:	7c7a      	ldrb	r2, [r7, #17]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	3304      	adds	r3, #4
 80013e8:	b212      	sxth	r2, r2
 80013ea:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3304      	adds	r3, #4
 80013f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	7c3a      	ldrb	r2, [r7, #16]
 80013fc:	4413      	add	r3, r2
 80013fe:	b29a      	uxth	r2, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	3304      	adds	r3, #4
 8001404:	b212      	sxth	r2, r2
 8001406:	801a      	strh	r2, [r3, #0]

  return ret;
 8001408:	697b      	ldr	r3, [r7, #20]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 800141c:	f107 020c 	add.w	r2, r7, #12
 8001420:	2306      	movs	r3, #6
 8001422:	2128      	movs	r1, #40	@ 0x28
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fc51 	bl	8000ccc <lsm6dso_read_reg>
 800142a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800142c:	7b7b      	ldrb	r3, [r7, #13]
 800142e:	b21a      	sxth	r2, r3
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143a:	b29b      	uxth	r3, r3
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	b29b      	uxth	r3, r3
 8001440:	7b3a      	ldrb	r2, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	b29b      	uxth	r3, r3
 8001446:	b21a      	sxth	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	3302      	adds	r3, #2
 8001452:	b212      	sxth	r2, r2
 8001454:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	3302      	adds	r3, #2
 800145a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145e:	b29b      	uxth	r3, r3
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b29b      	uxth	r3, r3
 8001464:	7bba      	ldrb	r2, [r7, #14]
 8001466:	4413      	add	r3, r2
 8001468:	b29a      	uxth	r2, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3302      	adds	r3, #2
 800146e:	b212      	sxth	r2, r2
 8001470:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001472:	7c7a      	ldrb	r2, [r7, #17]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3304      	adds	r3, #4
 8001478:	b212      	sxth	r2, r2
 800147a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	3304      	adds	r3, #4
 8001480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001484:	b29b      	uxth	r3, r3
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b29b      	uxth	r3, r3
 800148a:	7c3a      	ldrb	r2, [r7, #16]
 800148c:	4413      	add	r3, r2
 800148e:	b29a      	uxth	r2, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	3304      	adds	r3, #4
 8001494:	b212      	sxth	r2, r2
 8001496:	801a      	strh	r2, [r3, #0]

  return ret;
 8001498:	697b      	ldr	r3, [r7, #20]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(const stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 80014ae:	2300      	movs	r3, #0
 80014b0:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	7a3b      	ldrb	r3, [r7, #8]
 80014bc:	f362 1387 	bfi	r3, r2, #6, #2
 80014c0:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80014c2:	f107 0208 	add.w	r2, r7, #8
 80014c6:	2301      	movs	r3, #1
 80014c8:	2101      	movs	r1, #1
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fc1c 	bl	8000d08 <lsm6dso_write_reg>
 80014d0:	60f8      	str	r0, [r7, #12]

  return ret;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80014e6:	2301      	movs	r3, #1
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	210f      	movs	r1, #15
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fbed 	bl	8000ccc <lsm6dso_read_reg>
 80014f2:	60f8      	str	r0, [r7, #12]

  return ret;
 80014f4:	68fb      	ldr	r3, [r7, #12]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800150a:	f107 0208 	add.w	r2, r7, #8
 800150e:	2301      	movs	r3, #1
 8001510:	2112      	movs	r1, #18
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff fbda 	bl	8000ccc <lsm6dso_read_reg>
 8001518:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10f      	bne.n	8001540 <lsm6dso_reset_set+0x42>
  {
    reg.sw_reset = val;
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	b2da      	uxtb	r2, r3
 8001528:	7a3b      	ldrb	r3, [r7, #8]
 800152a:	f362 0300 	bfi	r3, r2, #0, #1
 800152e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001530:	f107 0208 	add.w	r2, r7, #8
 8001534:	2301      	movs	r3, #1
 8001536:	2112      	movs	r1, #18
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff fbe5 	bl	8000d08 <lsm6dso_write_reg>
 800153e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001540:	68fb      	ldr	r3, [r7, #12]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <lsm6dso_reset_get>:
  * @param  val      Get the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001554:	f107 0208 	add.w	r2, r7, #8
 8001558:	2301      	movs	r3, #1
 800155a:	2112      	movs	r1, #18
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fbb5 	bl	8000ccc <lsm6dso_read_reg>
 8001562:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 8001564:	7a3b      	ldrb	r3, [r7, #8]
 8001566:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	701a      	strb	r2, [r3, #0]

  return ret;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8001588:	f107 0208 	add.w	r2, r7, #8
 800158c:	2301      	movs	r3, #1
 800158e:	2110      	movs	r1, #16
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fb9b 	bl	8000ccc <lsm6dso_read_reg>
 8001596:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10f      	bne.n	80015be <lsm6dso_xl_filter_lp2_set+0x42>
  {
    reg.lpf2_xl_en = val;
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	7a3b      	ldrb	r3, [r7, #8]
 80015a8:	f362 0341 	bfi	r3, r2, #1, #1
 80015ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80015ae:	f107 0208 	add.w	r2, r7, #8
 80015b2:	2301      	movs	r3, #1
 80015b4:	2110      	movs	r1, #16
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff fba6 	bl	8000d08 <lsm6dso_write_reg>
 80015bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(const stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
 80015d4:	f107 0208 	add.w	r2, r7, #8
 80015d8:	2301      	movs	r3, #1
 80015da:	2117      	movs	r1, #23
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fb75 	bl	8000ccc <lsm6dso_read_reg>
 80015e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d121      	bne.n	800162e <lsm6dso_xl_hp_path_on_out_set+0x66>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	7a3b      	ldrb	r3, [r7, #8]
 80015f6:	f362 0382 	bfi	r3, r2, #2, #1
 80015fa:	723b      	strb	r3, [r7, #8]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	b2da      	uxtb	r2, r3
 8001606:	7a3b      	ldrb	r3, [r7, #8]
 8001608:	f362 1304 	bfi	r3, r2, #4, #1
 800160c:	723b      	strb	r3, [r7, #8]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	b2da      	uxtb	r2, r3
 8001616:	7a3b      	ldrb	r3, [r7, #8]
 8001618:	f362 1347 	bfi	r3, r2, #5, #3
 800161c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
 800161e:	f107 0208 	add.w	r2, r7, #8
 8001622:	2301      	movs	r3, #1
 8001624:	2117      	movs	r1, #23
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff fb6e 	bl	8000d08 <lsm6dso_write_reg>
 800162c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(const stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001644:	f107 020c 	add.w	r2, r7, #12
 8001648:	2301      	movs	r3, #1
 800164a:	2118      	movs	r1, #24
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff fb3d 	bl	8000ccc <lsm6dso_read_reg>
 8001652:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	09db      	lsrs	r3, r3, #7
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	b2da      	uxtb	r2, r3
 8001660:	7b3b      	ldrb	r3, [r7, #12]
 8001662:	f362 0341 	bfi	r3, r2, #1, #1
 8001666:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001668:	f107 020c 	add.w	r2, r7, #12
 800166c:	2301      	movs	r3, #1
 800166e:	2118      	movs	r1, #24
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fb49 	bl	8000d08 <lsm6dso_write_reg>
 8001676:	4602      	mov	r2, r0
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	4413      	add	r3, r2
 800167c:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <lsm6dso_i3c_disable_set+0x50>
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	e01b      	b.n	80016c0 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8001688:	f107 0210 	add.w	r2, r7, #16
 800168c:	2301      	movs	r3, #1
 800168e:	2162      	movs	r1, #98	@ 0x62
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fb1b 	bl	8000ccc <lsm6dso_read_reg>
 8001696:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	7c3b      	ldrb	r3, [r7, #16]
 80016a2:	f362 03c4 	bfi	r3, r2, #3, #2
 80016a6:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80016a8:	f107 0210 	add.w	r2, r7, #16
 80016ac:	2301      	movs	r3, #1
 80016ae:	2162      	movs	r1, #98	@ 0x62
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fb29 	bl	8000d08 <lsm6dso_write_reg>
 80016b6:	4602      	mov	r2, r0
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	4413      	add	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]

  return ret;
 80016be:	697b      	ldr	r3, [r7, #20]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(const stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80016d2:	2102      	movs	r1, #2
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fee4 	bl	80014a2 <lsm6dso_mem_bank_set>
 80016da:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80016dc:	2302      	movs	r3, #2
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	2146      	movs	r1, #70	@ 0x46
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff faf2 	bl	8000ccc <lsm6dso_read_reg>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4413      	add	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80016f0:	2100      	movs	r1, #0
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fed5 	bl	80014a2 <lsm6dso_mem_bank_set>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4413      	add	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]

  return ret;
 8001700:	68fb      	ldr	r3, [r7, #12]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(const stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8001716:	2102      	movs	r1, #2
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fec2 	bl	80014a2 <lsm6dso_mem_bank_set>
 800171e:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <lsm6dso_fsm_data_rate_get+0x1e>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	e03a      	b.n	80017a0 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 800172a:	f107 0208 	add.w	r2, r7, #8
 800172e:	2301      	movs	r3, #1
 8001730:	215f      	movs	r1, #95	@ 0x5f
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff faca 	bl	8000ccc <lsm6dso_read_reg>
 8001738:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d125      	bne.n	800178c <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8001740:	7a3b      	ldrb	r3, [r7, #8]
 8001742:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b03      	cmp	r3, #3
 800174a:	d81b      	bhi.n	8001784 <lsm6dso_fsm_data_rate_get+0x78>
 800174c:	a201      	add	r2, pc, #4	@ (adr r2, 8001754 <lsm6dso_fsm_data_rate_get+0x48>)
 800174e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001752:	bf00      	nop
 8001754:	08001765 	.word	0x08001765
 8001758:	0800176d 	.word	0x0800176d
 800175c:	08001775 	.word	0x08001775
 8001760:	0800177d 	.word	0x0800177d
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
      break;
 800176a:	e010      	b.n	800178e <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
      break;
 8001772:	e00c      	b.n	800178e <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2202      	movs	r2, #2
 8001778:	701a      	strb	r2, [r3, #0]
      break;
 800177a:	e008      	b.n	800178e <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	2203      	movs	r2, #3
 8001780:	701a      	strb	r2, [r3, #0]
      break;
 8001782:	e004      	b.n	800178e <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
      break;
 800178a:	e000      	b.n	800178e <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 800178c:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800178e:	2100      	movs	r1, #0
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fe86 	bl	80014a2 <lsm6dso_mem_bank_set>
 8001796:	4602      	mov	r2, r0
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4413      	add	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]

  return ret;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ac:	f000 fad3 	bl	8001d56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b0:	f000 f87e 	bl	80018b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b4:	f000 f956 	bl	8001a64 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017b8:	f000 f8d6 	bl	8001968 <MX_I2C1_Init>
  MX_SPI1_Init();
 80017bc:	f000 f914 	bl	80019e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  lsm6dso_read_data_polling();
 80017c0:	f7ff f902 	bl	80009c8 <lsm6dso_read_data_polling>

  ADXL.SPIMode = SPIMODE_4WIRE;
 80017c4:	4b34      	ldr	r3, [pc, #208]	@ (8001898 <main+0xf0>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
  ADXL.Rate = BWRATE_800;
 80017ca:	4b33      	ldr	r3, [pc, #204]	@ (8001898 <main+0xf0>)
 80017cc:	220d      	movs	r2, #13
 80017ce:	70da      	strb	r2, [r3, #3]
  ADXL.Range = RANGE_2G;
 80017d0:	4b31      	ldr	r3, [pc, #196]	@ (8001898 <main+0xf0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	711a      	strb	r2, [r3, #4]
  ADXL.Resolution = RESOLUTION_FULL;
 80017d6:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <main+0xf0>)
 80017d8:	2201      	movs	r2, #1
 80017da:	715a      	strb	r2, [r3, #5]

  if (ADXL_Init(&ADXL)!= ADXL_OK){
 80017dc:	482e      	ldr	r0, [pc, #184]	@ (8001898 <main+0xf0>)
 80017de:	f7fe ff8f 	bl	8000700 <ADXL_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d007      	beq.n	80017f8 <main+0x50>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017ee:	482b      	ldr	r0, [pc, #172]	@ (800189c <main+0xf4>)
 80017f0:	f000 fdc4 	bl	800237c <HAL_GPIO_WritePin>
	  Error_Handler();
 80017f4:	f000 f976 	bl	8001ae4 <Error_Handler>
  }

  ADXL_Measure(ON);
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff f8b3 	bl	8000964 <ADXL_Measure>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  ADXL_getAccel(accelData, OUTPUT_SIGNED);
 80017fe:	2101      	movs	r1, #1
 8001800:	4827      	ldr	r0, [pc, #156]	@ (80018a0 <main+0xf8>)
 8001802:	f7ff f82b 	bl	800085c <ADXL_getAccel>

	  xOut_g = accelData[0]/255.0*9.8;
 8001806:	4b26      	ldr	r3, [pc, #152]	@ (80018a0 <main+0xf8>)
 8001808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001814:	ed9f 5b1c 	vldr	d5, [pc, #112]	@ 8001888 <main+0xe0>
 8001818:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800181c:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 8001890 <main+0xe8>
 8001820:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001824:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001828:	4b1e      	ldr	r3, [pc, #120]	@ (80018a4 <main+0xfc>)
 800182a:	edc3 7a00 	vstr	s15, [r3]
	  yOut_g = accelData[1]/255.0*9.8;
 800182e:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <main+0xf8>)
 8001830:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800183c:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001888 <main+0xe0>
 8001840:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001844:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001890 <main+0xe8>
 8001848:	ee27 7b06 	vmul.f64	d7, d7, d6
 800184c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001850:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <main+0x100>)
 8001852:	edc3 7a00 	vstr	s15, [r3]
	  zOut_g = accelData[2]/255.0*9.8;
 8001856:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <main+0xf8>)
 8001858:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001864:	ed9f 5b08 	vldr	d5, [pc, #32]	@ 8001888 <main+0xe0>
 8001868:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800186c:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8001890 <main+0xe8>
 8001870:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001874:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <main+0x104>)
 800187a:	edc3 7a00 	vstr	s15, [r3]
//	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  HAL_Delay(50);
 800187e:	2032      	movs	r0, #50	@ 0x32
 8001880:	f000 fac6 	bl	8001e10 <HAL_Delay>
	  ADXL_getAccel(accelData, OUTPUT_SIGNED);
 8001884:	bf00      	nop
 8001886:	e7ba      	b.n	80017fe <main+0x56>
 8001888:	00000000 	.word	0x00000000
 800188c:	406fe000 	.word	0x406fe000
 8001890:	9999999a 	.word	0x9999999a
 8001894:	40239999 	.word	0x40239999
 8001898:	20000504 	.word	0x20000504
 800189c:	40020400 	.word	0x40020400
 80018a0:	20000510 	.word	0x20000510
 80018a4:	20000518 	.word	0x20000518
 80018a8:	2000051c 	.word	0x2000051c
 80018ac:	20000520 	.word	0x20000520

080018b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b094      	sub	sp, #80	@ 0x50
 80018b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	2234      	movs	r2, #52	@ 0x34
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 feb0 	bl	8004624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c4:	f107 0308 	add.w	r3, r7, #8
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d4:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <SystemClock_Config+0xb0>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	4a21      	ldr	r2, [pc, #132]	@ (8001960 <SystemClock_Config+0xb0>)
 80018da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018de:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <SystemClock_Config+0xb0>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001964 <SystemClock_Config+0xb4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80018f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001964 <SystemClock_Config+0xb4>)
 80018f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <SystemClock_Config+0xb4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001908:	2302      	movs	r3, #2
 800190a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800190c:	2301      	movs	r3, #1
 800190e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001910:	2310      	movs	r3, #16
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001914:	2300      	movs	r3, #0
 8001916:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4618      	mov	r0, r3
 800191e:	f000 fe7b 	bl	8002618 <HAL_RCC_OscConfig>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001928:	f000 f8dc 	bl	8001ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800192c:	230f      	movs	r3, #15
 800192e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f001 f914 	bl	8002b74 <HAL_RCC_ClockConfig>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001952:	f000 f8c7 	bl	8001ae4 <Error_Handler>
  }
}
 8001956:	bf00      	nop
 8001958:	3750      	adds	r7, #80	@ 0x50
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40007000 	.word	0x40007000

08001968 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800196c:	4b1b      	ldr	r3, [pc, #108]	@ (80019dc <MX_I2C1_Init+0x74>)
 800196e:	4a1c      	ldr	r2, [pc, #112]	@ (80019e0 <MX_I2C1_Init+0x78>)
 8001970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001972:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <MX_I2C1_Init+0x74>)
 8001974:	4a1b      	ldr	r2, [pc, #108]	@ (80019e4 <MX_I2C1_Init+0x7c>)
 8001976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001978:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <MX_I2C1_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <MX_I2C1_Init+0x74>)
 8001980:	2201      	movs	r2, #1
 8001982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001984:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <MX_I2C1_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800198a:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <MX_I2C1_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001990:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <MX_I2C1_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001996:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <MX_I2C1_Init+0x74>)
 8001998:	2200      	movs	r2, #0
 800199a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800199c:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <MX_I2C1_Init+0x74>)
 800199e:	2200      	movs	r2, #0
 80019a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019a2:	480e      	ldr	r0, [pc, #56]	@ (80019dc <MX_I2C1_Init+0x74>)
 80019a4:	f000 fd04 	bl	80023b0 <HAL_I2C_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019ae:	f000 f899 	bl	8001ae4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019b2:	2100      	movs	r1, #0
 80019b4:	4809      	ldr	r0, [pc, #36]	@ (80019dc <MX_I2C1_Init+0x74>)
 80019b6:	f000 fd97 	bl	80024e8 <HAL_I2CEx_ConfigAnalogFilter>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019c0:	f000 f890 	bl	8001ae4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019c4:	2100      	movs	r1, #0
 80019c6:	4805      	ldr	r0, [pc, #20]	@ (80019dc <MX_I2C1_Init+0x74>)
 80019c8:	f000 fdd9 	bl	800257e <HAL_I2CEx_ConfigDigitalFilter>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019d2:	f000 f887 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000044c 	.word	0x2000044c
 80019e0:	40005400 	.word	0x40005400
 80019e4:	00303d5b 	.word	0x00303d5b

080019e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <MX_SPI1_Init+0x74>)
 80019ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001a60 <MX_SPI1_Init+0x78>)
 80019f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <MX_SPI1_Init+0x74>)
 80019f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019fa:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <MX_SPI1_Init+0x74>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a00:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <MX_SPI1_Init+0x74>)
 8001a02:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a06:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a08:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <MX_SPI1_Init+0x74>)
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a0e:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <MX_SPI1_Init+0x74>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a14:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <MX_SPI1_Init+0x74>)
 8001a16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a1a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <MX_SPI1_Init+0x74>)
 8001a1e:	2210      	movs	r2, #16
 8001a20:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <MX_SPI1_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <MX_SPI1_Init+0x74>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <MX_SPI1_Init+0x74>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <MX_SPI1_Init+0x74>)
 8001a36:	2207      	movs	r2, #7
 8001a38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <MX_SPI1_Init+0x74>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <MX_SPI1_Init+0x74>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <MX_SPI1_Init+0x74>)
 8001a48:	f001 fe6e 	bl	8003728 <HAL_SPI_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a52:	f000 f847 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200004a0 	.word	0x200004a0
 8001a60:	40013000 	.word	0x40013000

08001a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <MX_GPIO_Init+0x78>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a17      	ldr	r2, [pc, #92]	@ (8001adc <MX_GPIO_Init+0x78>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <MX_GPIO_Init+0x78>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <MX_GPIO_Init+0x78>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a11      	ldr	r2, [pc, #68]	@ (8001adc <MX_GPIO_Init+0x78>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <MX_GPIO_Init+0x78>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f244 01a1 	movw	r1, #16545	@ 0x40a1
 8001ab0:	480b      	ldr	r0, [pc, #44]	@ (8001ae0 <MX_GPIO_Init+0x7c>)
 8001ab2:	f000 fc63 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin SPI1_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin;
 8001ab6:	f244 03a1 	movw	r3, #16545	@ 0x40a1
 8001aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	4619      	mov	r1, r3
 8001ace:	4804      	ldr	r0, [pc, #16]	@ (8001ae0 <MX_GPIO_Init+0x7c>)
 8001ad0:	f000 faa8 	bl	8002024 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020400 	.word	0x40020400

08001ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae8:	b672      	cpsid	i
}
 8001aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <Error_Handler+0x8>

08001af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <HAL_MspInit+0x44>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	4a0e      	ldr	r2, [pc, #56]	@ (8001b34 <HAL_MspInit+0x44>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <HAL_MspInit+0x44>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_MspInit+0x44>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	4a08      	ldr	r2, [pc, #32]	@ (8001b34 <HAL_MspInit+0x44>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_MspInit+0x44>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800

08001b38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b0ae      	sub	sp, #184	@ 0xb8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2290      	movs	r2, #144	@ 0x90
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 fd63 	bl	8004624 <memset>
  if(hi2c->Instance==I2C1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a22      	ldr	r2, [pc, #136]	@ (8001bec <HAL_I2C_MspInit+0xb4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d13c      	bne.n	8001be2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b6c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 f9ae 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b82:	f7ff ffaf 	bl	8001ae4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf0 <HAL_I2C_MspInit+0xb8>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	4a19      	ldr	r2, [pc, #100]	@ (8001bf0 <HAL_I2C_MspInit+0xb8>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b92:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <HAL_I2C_MspInit+0xb8>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba6:	2312      	movs	r3, #18
 8001ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bb8:	2304      	movs	r3, #4
 8001bba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480b      	ldr	r0, [pc, #44]	@ (8001bf4 <HAL_I2C_MspInit+0xbc>)
 8001bc6:	f000 fa2d 	bl	8002024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <HAL_I2C_MspInit+0xb8>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	4a08      	ldr	r2, [pc, #32]	@ (8001bf0 <HAL_I2C_MspInit+0xb8>)
 8001bd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_I2C_MspInit+0xb8>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001be2:	bf00      	nop
 8001be4:	37b8      	adds	r7, #184	@ 0xb8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40005400 	.word	0x40005400
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020400 	.word	0x40020400

08001bf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	@ 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a17      	ldr	r2, [pc, #92]	@ (8001c74 <HAL_SPI_MspInit+0x7c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d127      	bne.n	8001c6a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c1a:	4b17      	ldr	r3, [pc, #92]	@ (8001c78 <HAL_SPI_MspInit+0x80>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1e:	4a16      	ldr	r2, [pc, #88]	@ (8001c78 <HAL_SPI_MspInit+0x80>)
 8001c20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c26:	4b14      	ldr	r3, [pc, #80]	@ (8001c78 <HAL_SPI_MspInit+0x80>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <HAL_SPI_MspInit+0x80>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	4a10      	ldr	r2, [pc, #64]	@ (8001c78 <HAL_SPI_MspInit+0x80>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <HAL_SPI_MspInit+0x80>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c4a:	23e0      	movs	r3, #224	@ 0xe0
 8001c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c5a:	2305      	movs	r3, #5
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	4805      	ldr	r0, [pc, #20]	@ (8001c7c <HAL_SPI_MspInit+0x84>)
 8001c66:	f000 f9dd 	bl	8002024 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	@ 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40013000 	.word	0x40013000
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000

08001c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <NMI_Handler+0x4>

08001c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <MemManage_Handler+0x4>

08001c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <BusFault_Handler+0x4>

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd6:	f000 f87b 	bl	8001dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d08:	f7ff ffea 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d0c:	480c      	ldr	r0, [pc, #48]	@ (8001d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d0e:	490d      	ldr	r1, [pc, #52]	@ (8001d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d10:	4a0d      	ldr	r2, [pc, #52]	@ (8001d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d24:	4c0a      	ldr	r4, [pc, #40]	@ (8001d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d32:	f002 fc7f 	bl	8004634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d36:	f7ff fd37 	bl	80017a8 <main>
  bx  lr    
 8001d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d3c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d48:	080046bc 	.word	0x080046bc
  ldr r2, =_sbss
 8001d4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d50:	20000528 	.word	0x20000528

08001d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC_IRQHandler>

08001d56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d5a:	2003      	movs	r0, #3
 8001d5c:	f000 f92e 	bl	8001fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d60:	200f      	movs	r0, #15
 8001d62:	f000 f805 	bl	8001d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d66:	f7ff fec3 	bl	8001af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_InitTick+0x54>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <HAL_InitTick+0x58>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 f93b 	bl	800200a <HAL_SYSTICK_Config>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00e      	b.n	8001dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	d80a      	bhi.n	8001dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da4:	2200      	movs	r2, #0
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	f000 f911 	bl	8001fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db0:	4a06      	ldr	r2, [pc, #24]	@ (8001dcc <HAL_InitTick+0x5c>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e000      	b.n	8001dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	20000008 	.word	0x20000008
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_IncTick+0x20>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <HAL_IncTick+0x24>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	4a04      	ldr	r2, [pc, #16]	@ (8001df4 <HAL_IncTick+0x24>)
 8001de2:	6013      	str	r3, [r2, #0]
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000008 	.word	0x20000008
 8001df4:	20000524 	.word	0x20000524

08001df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	@ (8001e0c <HAL_GetTick+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000524 	.word	0x20000524

08001e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e18:	f7ff ffee 	bl	8001df8 <HAL_GetTick>
 8001e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e28:	d005      	beq.n	8001e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <HAL_Delay+0x44>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4413      	add	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e36:	bf00      	nop
 8001e38:	f7ff ffde 	bl	8001df8 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d8f7      	bhi.n	8001e38 <HAL_Delay+0x28>
  {
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000008 	.word	0x20000008

08001e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <__NVIC_SetPriorityGrouping+0x40>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e74:	4013      	ands	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	@ (8001e98 <__NVIC_SetPriorityGrouping+0x40>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00
 8001e9c:	05fa0000 	.word	0x05fa0000

08001ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea4:	4b04      	ldr	r3, [pc, #16]	@ (8001eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	f003 0307 	and.w	r3, r3, #7
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db0a      	blt.n	8001ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	@ (8001f08 <__NVIC_SetPriority+0x4c>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee4:	e00a      	b.n	8001efc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4908      	ldr	r1, [pc, #32]	@ (8001f0c <__NVIC_SetPriority+0x50>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	0112      	lsls	r2, r2, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	440b      	add	r3, r1
 8001efa:	761a      	strb	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000e100 	.word	0xe000e100
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	@ 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	@ 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f88:	d301      	bcc.n	8001f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00f      	b.n	8001fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <SysTick_Config+0x40>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f96:	210f      	movs	r1, #15
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f7ff ff8e 	bl	8001ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <SysTick_Config+0x40>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa6:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <SysTick_Config+0x40>)
 8001fa8:	2207      	movs	r2, #7
 8001faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	e000e010 	.word	0xe000e010

08001fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ff47 	bl	8001e58 <__NVIC_SetPriorityGrouping>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe4:	f7ff ff5c 	bl	8001ea0 <__NVIC_GetPriorityGrouping>
 8001fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ff8e 	bl	8001f10 <NVIC_EncodePriority>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff5d 	bl	8001ebc <__NVIC_SetPriority>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ffb0 	bl	8001f78 <SysTick_Config>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	@ 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	e175      	b.n	8002330 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002044:	2201      	movs	r2, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	429a      	cmp	r2, r3
 800205e:	f040 8164 	bne.w	800232a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d005      	beq.n	800207a <HAL_GPIO_Init+0x56>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d130      	bne.n	80020dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	2203      	movs	r2, #3
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b0:	2201      	movs	r2, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 0201 	and.w	r2, r3, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d017      	beq.n	8002118 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d123      	bne.n	800216c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3208      	adds	r2, #8
 800212c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	08da      	lsrs	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3208      	adds	r2, #8
 8002166:	69b9      	ldr	r1, [r7, #24]
 8002168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80be 	beq.w	800232a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	4b66      	ldr	r3, [pc, #408]	@ (8002348 <HAL_GPIO_Init+0x324>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	4a65      	ldr	r2, [pc, #404]	@ (8002348 <HAL_GPIO_Init+0x324>)
 80021b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ba:	4b63      	ldr	r3, [pc, #396]	@ (8002348 <HAL_GPIO_Init+0x324>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021c6:	4a61      	ldr	r2, [pc, #388]	@ (800234c <HAL_GPIO_Init+0x328>)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	220f      	movs	r2, #15
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a58      	ldr	r2, [pc, #352]	@ (8002350 <HAL_GPIO_Init+0x32c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d037      	beq.n	8002262 <HAL_GPIO_Init+0x23e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a57      	ldr	r2, [pc, #348]	@ (8002354 <HAL_GPIO_Init+0x330>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d031      	beq.n	800225e <HAL_GPIO_Init+0x23a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a56      	ldr	r2, [pc, #344]	@ (8002358 <HAL_GPIO_Init+0x334>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d02b      	beq.n	800225a <HAL_GPIO_Init+0x236>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a55      	ldr	r2, [pc, #340]	@ (800235c <HAL_GPIO_Init+0x338>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d025      	beq.n	8002256 <HAL_GPIO_Init+0x232>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a54      	ldr	r2, [pc, #336]	@ (8002360 <HAL_GPIO_Init+0x33c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01f      	beq.n	8002252 <HAL_GPIO_Init+0x22e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a53      	ldr	r2, [pc, #332]	@ (8002364 <HAL_GPIO_Init+0x340>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d019      	beq.n	800224e <HAL_GPIO_Init+0x22a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a52      	ldr	r2, [pc, #328]	@ (8002368 <HAL_GPIO_Init+0x344>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <HAL_GPIO_Init+0x226>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a51      	ldr	r2, [pc, #324]	@ (800236c <HAL_GPIO_Init+0x348>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00d      	beq.n	8002246 <HAL_GPIO_Init+0x222>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a50      	ldr	r2, [pc, #320]	@ (8002370 <HAL_GPIO_Init+0x34c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d007      	beq.n	8002242 <HAL_GPIO_Init+0x21e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4f      	ldr	r2, [pc, #316]	@ (8002374 <HAL_GPIO_Init+0x350>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d101      	bne.n	800223e <HAL_GPIO_Init+0x21a>
 800223a:	2309      	movs	r3, #9
 800223c:	e012      	b.n	8002264 <HAL_GPIO_Init+0x240>
 800223e:	230a      	movs	r3, #10
 8002240:	e010      	b.n	8002264 <HAL_GPIO_Init+0x240>
 8002242:	2308      	movs	r3, #8
 8002244:	e00e      	b.n	8002264 <HAL_GPIO_Init+0x240>
 8002246:	2307      	movs	r3, #7
 8002248:	e00c      	b.n	8002264 <HAL_GPIO_Init+0x240>
 800224a:	2306      	movs	r3, #6
 800224c:	e00a      	b.n	8002264 <HAL_GPIO_Init+0x240>
 800224e:	2305      	movs	r3, #5
 8002250:	e008      	b.n	8002264 <HAL_GPIO_Init+0x240>
 8002252:	2304      	movs	r3, #4
 8002254:	e006      	b.n	8002264 <HAL_GPIO_Init+0x240>
 8002256:	2303      	movs	r3, #3
 8002258:	e004      	b.n	8002264 <HAL_GPIO_Init+0x240>
 800225a:	2302      	movs	r3, #2
 800225c:	e002      	b.n	8002264 <HAL_GPIO_Init+0x240>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <HAL_GPIO_Init+0x240>
 8002262:	2300      	movs	r3, #0
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	f002 0203 	and.w	r2, r2, #3
 800226a:	0092      	lsls	r2, r2, #2
 800226c:	4093      	lsls	r3, r2
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002274:	4935      	ldr	r1, [pc, #212]	@ (800234c <HAL_GPIO_Init+0x328>)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	3302      	adds	r3, #2
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002282:	4b3d      	ldr	r3, [pc, #244]	@ (8002378 <HAL_GPIO_Init+0x354>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022a6:	4a34      	ldr	r2, [pc, #208]	@ (8002378 <HAL_GPIO_Init+0x354>)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ac:	4b32      	ldr	r3, [pc, #200]	@ (8002378 <HAL_GPIO_Init+0x354>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d0:	4a29      	ldr	r2, [pc, #164]	@ (8002378 <HAL_GPIO_Init+0x354>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022d6:	4b28      	ldr	r3, [pc, #160]	@ (8002378 <HAL_GPIO_Init+0x354>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002378 <HAL_GPIO_Init+0x354>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002300:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <HAL_GPIO_Init+0x354>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002324:	4a14      	ldr	r2, [pc, #80]	@ (8002378 <HAL_GPIO_Init+0x354>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3301      	adds	r3, #1
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	2b0f      	cmp	r3, #15
 8002334:	f67f ae86 	bls.w	8002044 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3724      	adds	r7, #36	@ 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800
 800234c:	40013800 	.word	0x40013800
 8002350:	40020000 	.word	0x40020000
 8002354:	40020400 	.word	0x40020400
 8002358:	40020800 	.word	0x40020800
 800235c:	40020c00 	.word	0x40020c00
 8002360:	40021000 	.word	0x40021000
 8002364:	40021400 	.word	0x40021400
 8002368:	40021800 	.word	0x40021800
 800236c:	40021c00 	.word	0x40021c00
 8002370:	40022000 	.word	0x40022000
 8002374:	40022400 	.word	0x40022400
 8002378:	40013c00 	.word	0x40013c00

0800237c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
 8002388:	4613      	mov	r3, r2
 800238a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800238c:	787b      	ldrb	r3, [r7, #1]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002398:	e003      	b.n	80023a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800239a:	887b      	ldrh	r3, [r7, #2]
 800239c:	041a      	lsls	r2, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	619a      	str	r2, [r3, #24]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e08b      	b.n	80024da <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff fbae 	bl	8001b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2224      	movs	r2, #36	@ 0x24
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002400:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002410:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	e006      	b.n	8002438 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002436:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d108      	bne.n	8002452 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	e007      	b.n	8002462 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002460:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b1d      	ldr	r3, [pc, #116]	@ (80024e4 <HAL_I2C_Init+0x134>)
 800246e:	430b      	orrs	r3, r1
 8002470:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002480:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69d9      	ldr	r1, [r3, #28]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1a      	ldr	r2, [r3, #32]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	02008000 	.word	0x02008000

080024e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d138      	bne.n	8002570 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002508:	2302      	movs	r3, #2
 800250a:	e032      	b.n	8002572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	@ 0x24
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800253a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6819      	ldr	r1, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	e000      	b.n	8002572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002570:	2302      	movs	r3, #2
  }
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800257e:	b480      	push	{r7}
 8002580:	b085      	sub	sp, #20
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b20      	cmp	r3, #32
 8002592:	d139      	bne.n	8002608 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800259e:	2302      	movs	r3, #2
 80025a0:	e033      	b.n	800260a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2224      	movs	r2, #36	@ 0x24
 80025ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e000      	b.n	800260a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002608:	2302      	movs	r3, #2
  }
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002620:	2300      	movs	r3, #0
 8002622:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e29b      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8087 	beq.w	800274a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800263c:	4b96      	ldr	r3, [pc, #600]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b04      	cmp	r3, #4
 8002646:	d00c      	beq.n	8002662 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002648:	4b93      	ldr	r3, [pc, #588]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b08      	cmp	r3, #8
 8002652:	d112      	bne.n	800267a <HAL_RCC_OscConfig+0x62>
 8002654:	4b90      	ldr	r3, [pc, #576]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002660:	d10b      	bne.n	800267a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002662:	4b8d      	ldr	r3, [pc, #564]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d06c      	beq.n	8002748 <HAL_RCC_OscConfig+0x130>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d168      	bne.n	8002748 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e275      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002682:	d106      	bne.n	8002692 <HAL_RCC_OscConfig+0x7a>
 8002684:	4b84      	ldr	r3, [pc, #528]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a83      	ldr	r2, [pc, #524]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 800268a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	e02e      	b.n	80026f0 <HAL_RCC_OscConfig+0xd8>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x9c>
 800269a:	4b7f      	ldr	r3, [pc, #508]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a7e      	ldr	r2, [pc, #504]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a7b      	ldr	r2, [pc, #492]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80026ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e01d      	b.n	80026f0 <HAL_RCC_OscConfig+0xd8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0xc0>
 80026be:	4b76      	ldr	r3, [pc, #472]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a75      	ldr	r2, [pc, #468]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80026c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b73      	ldr	r3, [pc, #460]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a72      	ldr	r2, [pc, #456]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0xd8>
 80026d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a6e      	ldr	r2, [pc, #440]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80026de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a6b      	ldr	r2, [pc, #428]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80026ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d013      	beq.n	8002720 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7ff fb7e 	bl	8001df8 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff fb7a 	bl	8001df8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	@ 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e229      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4b61      	ldr	r3, [pc, #388]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0xe8>
 800271e:	e014      	b.n	800274a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7ff fb6a 	bl	8001df8 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7ff fb66 	bl	8001df8 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	@ 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e215      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273a:	4b57      	ldr	r3, [pc, #348]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x110>
 8002746:	e000      	b.n	800274a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d069      	beq.n	800282a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002756:	4b50      	ldr	r3, [pc, #320]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002762:	4b4d      	ldr	r3, [pc, #308]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b08      	cmp	r3, #8
 800276c:	d11c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x190>
 800276e:	4b4a      	ldr	r3, [pc, #296]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d116      	bne.n	80027a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277a:	4b47      	ldr	r3, [pc, #284]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_RCC_OscConfig+0x17a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e1e9      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	4b41      	ldr	r3, [pc, #260]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	493d      	ldr	r1, [pc, #244]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a6:	e040      	b.n	800282a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d023      	beq.n	80027f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b0:	4b39      	ldr	r3, [pc, #228]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a38      	ldr	r2, [pc, #224]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7ff fb1c 	bl	8001df8 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c4:	f7ff fb18 	bl	8001df8 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1c7      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d6:	4b30      	ldr	r3, [pc, #192]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4929      	ldr	r1, [pc, #164]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]
 80027f6:	e018      	b.n	800282a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f8:	4b27      	ldr	r3, [pc, #156]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a26      	ldr	r2, [pc, #152]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7ff faf8 	bl	8001df8 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280c:	f7ff faf4 	bl	8001df8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e1a3      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281e:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d038      	beq.n	80028a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d019      	beq.n	8002872 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283e:	4b16      	ldr	r3, [pc, #88]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 8002840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002842:	4a15      	ldr	r2, [pc, #84]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284a:	f7ff fad5 	bl	8001df8 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002852:	f7ff fad1 	bl	8001df8 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e180      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002864:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 8002866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x23a>
 8002870:	e01a      	b.n	80028a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002872:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 8002874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002876:	4a08      	ldr	r2, [pc, #32]	@ (8002898 <HAL_RCC_OscConfig+0x280>)
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287e:	f7ff fabb 	bl	8001df8 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002886:	f7ff fab7 	bl	8001df8 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d903      	bls.n	800289c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e166      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>
 8002898:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	4b92      	ldr	r3, [pc, #584]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 800289e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ee      	bne.n	8002886 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80a4 	beq.w	80029fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b6:	4b8c      	ldr	r3, [pc, #560]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10d      	bne.n	80028de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c2:	4b89      	ldr	r3, [pc, #548]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	4a88      	ldr	r2, [pc, #544]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ce:	4b86      	ldr	r3, [pc, #536]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028da:	2301      	movs	r3, #1
 80028dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028de:	4b83      	ldr	r3, [pc, #524]	@ (8002aec <HAL_RCC_OscConfig+0x4d4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d118      	bne.n	800291c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80028ea:	4b80      	ldr	r3, [pc, #512]	@ (8002aec <HAL_RCC_OscConfig+0x4d4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a7f      	ldr	r2, [pc, #508]	@ (8002aec <HAL_RCC_OscConfig+0x4d4>)
 80028f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f6:	f7ff fa7f 	bl	8001df8 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fe:	f7ff fa7b 	bl	8001df8 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b64      	cmp	r3, #100	@ 0x64
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e12a      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002910:	4b76      	ldr	r3, [pc, #472]	@ (8002aec <HAL_RCC_OscConfig+0x4d4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x31a>
 8002924:	4b70      	ldr	r3, [pc, #448]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002928:	4a6f      	ldr	r2, [pc, #444]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002930:	e02d      	b.n	800298e <HAL_RCC_OscConfig+0x376>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0x33c>
 800293a:	4b6b      	ldr	r3, [pc, #428]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	6713      	str	r3, [r2, #112]	@ 0x70
 8002946:	4b68      	ldr	r3, [pc, #416]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294a:	4a67      	ldr	r2, [pc, #412]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 800294c:	f023 0304 	bic.w	r3, r3, #4
 8002950:	6713      	str	r3, [r2, #112]	@ 0x70
 8002952:	e01c      	b.n	800298e <HAL_RCC_OscConfig+0x376>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b05      	cmp	r3, #5
 800295a:	d10c      	bne.n	8002976 <HAL_RCC_OscConfig+0x35e>
 800295c:	4b62      	ldr	r3, [pc, #392]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002960:	4a61      	ldr	r2, [pc, #388]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002962:	f043 0304 	orr.w	r3, r3, #4
 8002966:	6713      	str	r3, [r2, #112]	@ 0x70
 8002968:	4b5f      	ldr	r3, [pc, #380]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296c:	4a5e      	ldr	r2, [pc, #376]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	@ 0x70
 8002974:	e00b      	b.n	800298e <HAL_RCC_OscConfig+0x376>
 8002976:	4b5c      	ldr	r3, [pc, #368]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6713      	str	r3, [r2, #112]	@ 0x70
 8002982:	4b59      	ldr	r3, [pc, #356]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	4a58      	ldr	r2, [pc, #352]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002996:	f7ff fa2f 	bl	8001df8 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7ff fa2b 	bl	8001df8 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e0d8      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b4:	4b4c      	ldr	r3, [pc, #304]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0ee      	beq.n	800299e <HAL_RCC_OscConfig+0x386>
 80029c0:	e014      	b.n	80029ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c2:	f7ff fa19 	bl	8001df8 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7ff fa15 	bl	8001df8 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e0c2      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e0:	4b41      	ldr	r3, [pc, #260]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1ee      	bne.n	80029ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d105      	bne.n	80029fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	4a3c      	ldr	r2, [pc, #240]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 80029f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029fc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80ae 	beq.w	8002b64 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a08:	4b37      	ldr	r3, [pc, #220]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d06d      	beq.n	8002af0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d14b      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1c:	4b32      	ldr	r3, [pc, #200]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a31      	ldr	r2, [pc, #196]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002a22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7ff f9e6 	bl	8001df8 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a30:	f7ff f9e2 	bl	8001df8 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e091      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	4b29      	ldr	r3, [pc, #164]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69da      	ldr	r2, [r3, #28]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	019b      	lsls	r3, r3, #6
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a64:	085b      	lsrs	r3, r3, #1
 8002a66:	3b01      	subs	r3, #1
 8002a68:	041b      	lsls	r3, r3, #16
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a70:	061b      	lsls	r3, r3, #24
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	071b      	lsls	r3, r3, #28
 8002a7a:	491b      	ldr	r1, [pc, #108]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a80:	4b19      	ldr	r3, [pc, #100]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a18      	ldr	r2, [pc, #96]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7ff f9b4 	bl	8001df8 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a94:	f7ff f9b0 	bl	8001df8 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e05f      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa6:	4b10      	ldr	r3, [pc, #64]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x47c>
 8002ab2:	e057      	b.n	8002b64 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002aba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7ff f99a 	bl	8001df8 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7ff f996 	bl	8001df8 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e045      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ada:	4b03      	ldr	r3, [pc, #12]	@ (8002ae8 <HAL_RCC_OscConfig+0x4d0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4b0>
 8002ae6:	e03d      	b.n	8002b64 <HAL_RCC_OscConfig+0x54c>
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002af0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b70 <HAL_RCC_OscConfig+0x558>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d030      	beq.n	8002b60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d129      	bne.n	8002b60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d122      	bne.n	8002b60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b26:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d119      	bne.n	8002b60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b36:	085b      	lsrs	r3, r3, #1
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d10f      	bne.n	8002b60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800

08002b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0d0      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 030f 	and.w	r3, r3, #15
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d910      	bls.n	8002bbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9a:	4b67      	ldr	r3, [pc, #412]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 020f 	bic.w	r2, r3, #15
 8002ba2:	4965      	ldr	r1, [pc, #404]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002baa:	4b63      	ldr	r3, [pc, #396]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0b8      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d020      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd4:	4b59      	ldr	r3, [pc, #356]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4a58      	ldr	r2, [pc, #352]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002bda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bec:	4b53      	ldr	r3, [pc, #332]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a52      	ldr	r2, [pc, #328]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002bf2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bf6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf8:	4b50      	ldr	r3, [pc, #320]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	494d      	ldr	r1, [pc, #308]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d040      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	4b47      	ldr	r3, [pc, #284]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d115      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e07f      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c36:	4b41      	ldr	r3, [pc, #260]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e073      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c46:	4b3d      	ldr	r3, [pc, #244]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e06b      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c56:	4b39      	ldr	r3, [pc, #228]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f023 0203 	bic.w	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4936      	ldr	r1, [pc, #216]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c68:	f7ff f8c6 	bl	8001df8 <HAL_GetTick>
 8002c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c70:	f7ff f8c2 	bl	8001df8 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e053      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	4b2d      	ldr	r3, [pc, #180]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 020c 	and.w	r2, r3, #12
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d1eb      	bne.n	8002c70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c98:	4b27      	ldr	r3, [pc, #156]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d210      	bcs.n	8002cc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b24      	ldr	r3, [pc, #144]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 020f 	bic.w	r2, r3, #15
 8002cae:	4922      	ldr	r1, [pc, #136]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b20      	ldr	r3, [pc, #128]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e032      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd4:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4916      	ldr	r1, [pc, #88]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cf2:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	490e      	ldr	r1, [pc, #56]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d06:	f000 f821 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	490a      	ldr	r1, [pc, #40]	@ (8002d40 <HAL_RCC_ClockConfig+0x1cc>)
 8002d18:	5ccb      	ldrb	r3, [r1, r3]
 8002d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1e:	4a09      	ldr	r2, [pc, #36]	@ (8002d44 <HAL_RCC_ClockConfig+0x1d0>)
 8002d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d22:	4b09      	ldr	r3, [pc, #36]	@ (8002d48 <HAL_RCC_ClockConfig+0x1d4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff f822 	bl	8001d70 <HAL_InitTick>

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023c00 	.word	0x40023c00
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	0800469c 	.word	0x0800469c
 8002d44:	20000000 	.word	0x20000000
 8002d48:	20000004 	.word	0x20000004

08002d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d50:	b090      	sub	sp, #64	@ 0x40
 8002d52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d58:	2300      	movs	r3, #0
 8002d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d64:	4b59      	ldr	r3, [pc, #356]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d00d      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x40>
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	f200 80a1 	bhi.w	8002eb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x34>
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d003      	beq.n	8002d86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d7e:	e09b      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d80:	4b53      	ldr	r3, [pc, #332]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d84:	e09b      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d86:	4b53      	ldr	r3, [pc, #332]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d8a:	e098      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d8c:	4b4f      	ldr	r3, [pc, #316]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d96:	4b4d      	ldr	r3, [pc, #308]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d028      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	099b      	lsrs	r3, r3, #6
 8002da8:	2200      	movs	r2, #0
 8002daa:	623b      	str	r3, [r7, #32]
 8002dac:	627a      	str	r2, [r7, #36]	@ 0x24
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002db4:	2100      	movs	r1, #0
 8002db6:	4b47      	ldr	r3, [pc, #284]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002db8:	fb03 f201 	mul.w	r2, r3, r1
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	fb00 f303 	mul.w	r3, r0, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4a43      	ldr	r2, [pc, #268]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dc6:	fba0 1202 	umull	r1, r2, r0, r2
 8002dca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dcc:	460a      	mov	r2, r1
 8002dce:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002dd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dd2:	4413      	add	r3, r2
 8002dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd8:	2200      	movs	r2, #0
 8002dda:	61bb      	str	r3, [r7, #24]
 8002ddc:	61fa      	str	r2, [r7, #28]
 8002dde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002de6:	f7fd fa2f 	bl	8000248 <__aeabi_uldivmod>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4613      	mov	r3, r2
 8002df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002df2:	e053      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df4:	4b35      	ldr	r3, [pc, #212]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	617a      	str	r2, [r7, #20]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e06:	f04f 0b00 	mov.w	fp, #0
 8002e0a:	4652      	mov	r2, sl
 8002e0c:	465b      	mov	r3, fp
 8002e0e:	f04f 0000 	mov.w	r0, #0
 8002e12:	f04f 0100 	mov.w	r1, #0
 8002e16:	0159      	lsls	r1, r3, #5
 8002e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e1c:	0150      	lsls	r0, r2, #5
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	ebb2 080a 	subs.w	r8, r2, sl
 8002e26:	eb63 090b 	sbc.w	r9, r3, fp
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e3e:	ebb2 0408 	subs.w	r4, r2, r8
 8002e42:	eb63 0509 	sbc.w	r5, r3, r9
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	00eb      	lsls	r3, r5, #3
 8002e50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e54:	00e2      	lsls	r2, r4, #3
 8002e56:	4614      	mov	r4, r2
 8002e58:	461d      	mov	r5, r3
 8002e5a:	eb14 030a 	adds.w	r3, r4, sl
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	eb45 030b 	adc.w	r3, r5, fp
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e72:	4629      	mov	r1, r5
 8002e74:	028b      	lsls	r3, r1, #10
 8002e76:	4621      	mov	r1, r4
 8002e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	028a      	lsls	r2, r1, #10
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e86:	2200      	movs	r2, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	60fa      	str	r2, [r7, #12]
 8002e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e90:	f7fd f9da 	bl	8000248 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4613      	mov	r3, r2
 8002e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	0c1b      	lsrs	r3, r3, #16
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002eac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002eb6:	e002      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb8:	4b05      	ldr	r3, [pc, #20]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3740      	adds	r7, #64	@ 0x40
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	00f42400 	.word	0x00f42400
 8002ed4:	017d7840 	.word	0x017d7840

08002ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d012      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f00:	4b69      	ldr	r3, [pc, #420]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a68      	ldr	r2, [pc, #416]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f06:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002f0a:	6093      	str	r3, [r2, #8]
 8002f0c:	4b66      	ldr	r3, [pc, #408]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f14:	4964      	ldr	r1, [pc, #400]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f22:	2301      	movs	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d017      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f32:	4b5d      	ldr	r3, [pc, #372]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f40:	4959      	ldr	r1, [pc, #356]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f50:	d101      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d017      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f6e:	4b4e      	ldr	r3, [pc, #312]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f74:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7c:	494a      	ldr	r1, [pc, #296]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002faa:	2301      	movs	r3, #1
 8002fac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 808b 	beq.w	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc0:	4a39      	ldr	r2, [pc, #228]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fc8:	4b37      	ldr	r3, [pc, #220]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fd4:	4b35      	ldr	r3, [pc, #212]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a34      	ldr	r2, [pc, #208]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe0:	f7fe ff0a 	bl	8001df8 <HAL_GetTick>
 8002fe4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe8:	f7fe ff06 	bl	8001df8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	@ 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e38f      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ffa:	4b2c      	ldr	r3, [pc, #176]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003006:	4b28      	ldr	r3, [pc, #160]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800300e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d035      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	429a      	cmp	r2, r3
 8003022:	d02e      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003024:	4b20      	ldr	r3, [pc, #128]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800302c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800302e:	4b1e      	ldr	r3, [pc, #120]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003032:	4a1d      	ldr	r2, [pc, #116]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003038:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800303a:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303e:	4a1a      	ldr	r2, [pc, #104]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003044:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003046:	4a18      	ldr	r2, [pc, #96]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800304c:	4b16      	ldr	r3, [pc, #88]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d114      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fe fece 	bl	8001df8 <HAL_GetTick>
 800305c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	e00a      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7fe feca 	bl	8001df8 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e351      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003076:	4b0c      	ldr	r3, [pc, #48]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0ee      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800308a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800308e:	d111      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800309c:	4b04      	ldr	r3, [pc, #16]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800309e:	400b      	ands	r3, r1
 80030a0:	4901      	ldr	r1, [pc, #4]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
 80030a6:	e00b      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40007000 	.word	0x40007000
 80030b0:	0ffffcff 	.word	0x0ffffcff
 80030b4:	4bac      	ldr	r3, [pc, #688]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4aab      	ldr	r2, [pc, #684]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ba:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80030be:	6093      	str	r3, [r2, #8]
 80030c0:	4ba9      	ldr	r3, [pc, #676]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030cc:	49a6      	ldr	r1, [pc, #664]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d010      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030de:	4ba2      	ldr	r3, [pc, #648]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030e4:	4aa0      	ldr	r2, [pc, #640]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80030ee:	4b9e      	ldr	r3, [pc, #632]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f8:	499b      	ldr	r1, [pc, #620]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800310c:	4b96      	ldr	r3, [pc, #600]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003112:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800311a:	4993      	ldr	r1, [pc, #588]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800312e:	4b8e      	ldr	r3, [pc, #568]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003134:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800313c:	498a      	ldr	r1, [pc, #552]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003150:	4b85      	ldr	r3, [pc, #532]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003156:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800315e:	4982      	ldr	r1, [pc, #520]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003172:	4b7d      	ldr	r3, [pc, #500]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003178:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003180:	4979      	ldr	r1, [pc, #484]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003194:	4b74      	ldr	r3, [pc, #464]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	4971      	ldr	r1, [pc, #452]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031bc:	f023 020c 	bic.w	r2, r3, #12
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c4:	4968      	ldr	r1, [pc, #416]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031d8:	4b63      	ldr	r3, [pc, #396]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031de:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e6:	4960      	ldr	r1, [pc, #384]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003200:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003208:	4957      	ldr	r1, [pc, #348]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800321c:	4b52      	ldr	r3, [pc, #328]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003222:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322a:	494f      	ldr	r1, [pc, #316]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800323e:	4b4a      	ldr	r3, [pc, #296]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003244:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324c:	4946      	ldr	r1, [pc, #280]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003260:	4b41      	ldr	r3, [pc, #260]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003266:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326e:	493e      	ldr	r1, [pc, #248]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003282:	4b39      	ldr	r3, [pc, #228]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003288:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003290:	4935      	ldr	r1, [pc, #212]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032a4:	4b30      	ldr	r3, [pc, #192]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032aa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032b2:	492d      	ldr	r1, [pc, #180]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d011      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032c6:	4b28      	ldr	r3, [pc, #160]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032cc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032d4:	4924      	ldr	r1, [pc, #144]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032e4:	d101      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80032e6:	2301      	movs	r3, #1
 80032e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80032f6:	2301      	movs	r3, #1
 80032f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003306:	4b18      	ldr	r3, [pc, #96]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003314:	4914      	ldr	r1, [pc, #80]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00b      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003328:	4b0f      	ldr	r3, [pc, #60]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003338:	490b      	ldr	r1, [pc, #44]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00f      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800334c:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003352:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800335c:	4902      	ldr	r1, [pc, #8]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003364:	e002      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003378:	4b8a      	ldr	r3, [pc, #552]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800337a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800337e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003388:	4986      	ldr	r1, [pc, #536]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00b      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800339c:	4b81      	ldr	r3, [pc, #516]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033a2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033ac:	497d      	ldr	r1, [pc, #500]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d006      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 80d6 	beq.w	8003574 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80033c8:	4b76      	ldr	r3, [pc, #472]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a75      	ldr	r2, [pc, #468]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d4:	f7fe fd10 	bl	8001df8 <HAL_GetTick>
 80033d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033dc:	f7fe fd0c 	bl	8001df8 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	@ 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e195      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033ee:	4b6d      	ldr	r3, [pc, #436]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d021      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340a:	2b00      	cmp	r3, #0
 800340c:	d11d      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800340e:	4b65      	ldr	r3, [pc, #404]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003410:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003414:	0c1b      	lsrs	r3, r3, #16
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800341c:	4b61      	ldr	r3, [pc, #388]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800341e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003422:	0e1b      	lsrs	r3, r3, #24
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	019a      	lsls	r2, r3, #6
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	041b      	lsls	r3, r3, #16
 8003434:	431a      	orrs	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	061b      	lsls	r3, r3, #24
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	071b      	lsls	r3, r3, #28
 8003442:	4958      	ldr	r1, [pc, #352]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d004      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003468:	2b00      	cmp	r3, #0
 800346a:	d02e      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003474:	d129      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003476:	4b4b      	ldr	r3, [pc, #300]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003484:	4b47      	ldr	r3, [pc, #284]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800348a:	0f1b      	lsrs	r3, r3, #28
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	019a      	lsls	r2, r3, #6
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	061b      	lsls	r3, r3, #24
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	071b      	lsls	r3, r3, #28
 80034aa:	493e      	ldr	r1, [pc, #248]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80034b2:	4b3c      	ldr	r3, [pc, #240]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034b8:	f023 021f 	bic.w	r2, r3, #31
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	3b01      	subs	r3, #1
 80034c2:	4938      	ldr	r1, [pc, #224]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d01d      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034d6:	4b33      	ldr	r3, [pc, #204]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034dc:	0e1b      	lsrs	r3, r3, #24
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034e4:	4b2f      	ldr	r3, [pc, #188]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034ea:	0f1b      	lsrs	r3, r3, #28
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	019a      	lsls	r2, r3, #6
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	431a      	orrs	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	061b      	lsls	r3, r3, #24
 8003504:	431a      	orrs	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	071b      	lsls	r3, r3, #28
 800350a:	4926      	ldr	r1, [pc, #152]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d011      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	019a      	lsls	r2, r3, #6
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	041b      	lsls	r3, r3, #16
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	061b      	lsls	r3, r3, #24
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	071b      	lsls	r3, r3, #28
 800353a:	491a      	ldr	r1, [pc, #104]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003542:	4b18      	ldr	r3, [pc, #96]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a17      	ldr	r2, [pc, #92]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003548:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800354c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800354e:	f7fe fc53 	bl	8001df8 <HAL_GetTick>
 8003552:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003556:	f7fe fc4f 	bl	8001df8 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b64      	cmp	r3, #100	@ 0x64
 8003562:	d901      	bls.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e0d8      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003568:	4b0e      	ldr	r3, [pc, #56]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b01      	cmp	r3, #1
 8003578:	f040 80ce 	bne.w	8003718 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800357c:	4b09      	ldr	r3, [pc, #36]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a08      	ldr	r2, [pc, #32]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003582:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003588:	f7fe fc36 	bl	8001df8 <HAL_GetTick>
 800358c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800358e:	e00b      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003590:	f7fe fc32 	bl	8001df8 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	@ 0x64
 800359c:	d904      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0bb      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035b4:	d0ec      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d02e      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d12a      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035de:	4b51      	ldr	r3, [pc, #324]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e4:	0c1b      	lsrs	r3, r3, #16
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f2:	0f1b      	lsrs	r3, r3, #28
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	019a      	lsls	r2, r3, #6
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	041b      	lsls	r3, r3, #16
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	061b      	lsls	r3, r3, #24
 800360c:	431a      	orrs	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	071b      	lsls	r3, r3, #28
 8003612:	4944      	ldr	r1, [pc, #272]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800361a:	4b42      	ldr	r3, [pc, #264]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800361c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003620:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003628:	3b01      	subs	r3, #1
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	493d      	ldr	r1, [pc, #244]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d022      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003644:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003648:	d11d      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800364a:	4b36      	ldr	r3, [pc, #216]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003650:	0e1b      	lsrs	r3, r3, #24
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003658:	4b32      	ldr	r3, [pc, #200]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365e:	0f1b      	lsrs	r3, r3, #28
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	019a      	lsls	r2, r3, #6
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	041b      	lsls	r3, r3, #16
 8003672:	431a      	orrs	r2, r3
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	061b      	lsls	r3, r3, #24
 8003678:	431a      	orrs	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	071b      	lsls	r3, r3, #28
 800367e:	4929      	ldr	r1, [pc, #164]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d028      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003692:	4b24      	ldr	r3, [pc, #144]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003698:	0e1b      	lsrs	r3, r3, #24
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036a0:	4b20      	ldr	r3, [pc, #128]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a6:	0c1b      	lsrs	r3, r3, #16
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	019a      	lsls	r2, r3, #6
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	041b      	lsls	r3, r3, #16
 80036b8:	431a      	orrs	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	071b      	lsls	r3, r3, #28
 80036c6:	4917      	ldr	r1, [pc, #92]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80036ce:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	4911      	ldr	r1, [pc, #68]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80036e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0e      	ldr	r2, [pc, #56]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f0:	f7fe fb82 	bl	8001df8 <HAL_GetTick>
 80036f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036f8:	f7fe fb7e 	bl	8001df8 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	@ 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e007      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800370a:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003712:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003716:	d1ef      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800

08003728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e09d      	b.n	8003876 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373e:	2b00      	cmp	r3, #0
 8003740:	d108      	bne.n	8003754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800374a:	d009      	beq.n	8003760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	61da      	str	r2, [r3, #28]
 8003752:	e005      	b.n	8003760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fe fa3c 	bl	8001bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003796:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037a0:	d902      	bls.n	80037a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	e002      	b.n	80037ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80037b6:	d007      	beq.n	80037c8 <HAL_SPI_Init+0xa0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037c0:	d002      	beq.n	80037c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380a:	ea42 0103 	orr.w	r1, r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	0c1b      	lsrs	r3, r3, #16
 8003824:	f003 0204 	and.w	r2, r3, #4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003844:	ea42 0103 	orr.w	r1, r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003864:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b088      	sub	sp, #32
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	4613      	mov	r3, r2
 800388c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_SPI_Transmit+0x22>
 800389c:	2302      	movs	r3, #2
 800389e:	e15f      	b.n	8003b60 <HAL_SPI_Transmit+0x2e2>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a8:	f7fe faa6 	bl	8001df8 <HAL_GetTick>
 80038ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d002      	beq.n	80038c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038be:	2302      	movs	r3, #2
 80038c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038c2:	e148      	b.n	8003b56 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_SPI_Transmit+0x52>
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038d4:	e13f      	b.n	8003b56 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2203      	movs	r2, #3
 80038da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	88fa      	ldrh	r2, [r7, #6]
 80038ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	88fa      	ldrh	r2, [r7, #6]
 80038f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003920:	d10f      	bne.n	8003942 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003930:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003940:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394c:	2b40      	cmp	r3, #64	@ 0x40
 800394e:	d007      	beq.n	8003960 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800395e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003968:	d94f      	bls.n	8003a0a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_SPI_Transmit+0xfa>
 8003972:	8afb      	ldrh	r3, [r7, #22]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d142      	bne.n	80039fe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397c:	881a      	ldrh	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003988:	1c9a      	adds	r2, r3, #2
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800399c:	e02f      	b.n	80039fe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d112      	bne.n	80039d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b0:	881a      	ldrh	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039bc:	1c9a      	adds	r2, r3, #2
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039d0:	e015      	b.n	80039fe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d2:	f7fe fa11 	bl	8001df8 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d803      	bhi.n	80039ea <HAL_SPI_Transmit+0x16c>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d102      	bne.n	80039f0 <HAL_SPI_Transmit+0x172>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80039fc:	e0ab      	b.n	8003b56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1ca      	bne.n	800399e <HAL_SPI_Transmit+0x120>
 8003a08:	e080      	b.n	8003b0c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_SPI_Transmit+0x19a>
 8003a12:	8afb      	ldrh	r3, [r7, #22]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d174      	bne.n	8003b02 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d912      	bls.n	8003a48 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a32:	1c9a      	adds	r2, r3, #2
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b02      	subs	r3, #2
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a46:	e05c      	b.n	8003b02 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	330c      	adds	r3, #12
 8003a52:	7812      	ldrb	r2, [r2, #0]
 8003a54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a6e:	e048      	b.n	8003b02 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d12b      	bne.n	8003ad6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d912      	bls.n	8003aae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8c:	881a      	ldrh	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a98:	1c9a      	adds	r2, r3, #2
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b02      	subs	r3, #2
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003aac:	e029      	b.n	8003b02 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	330c      	adds	r3, #12
 8003ab8:	7812      	ldrb	r2, [r2, #0]
 8003aba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ad4:	e015      	b.n	8003b02 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad6:	f7fe f98f 	bl	8001df8 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d803      	bhi.n	8003aee <HAL_SPI_Transmit+0x270>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d102      	bne.n	8003af4 <HAL_SPI_Transmit+0x276>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003b00:	e029      	b.n	8003b56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1b1      	bne.n	8003a70 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	6839      	ldr	r1, [r7, #0]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fd1d 	bl	8004550 <SPI_EndRxTxTransaction>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10a      	bne.n	8003b40 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e003      	b.n	8003b56 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003b5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d002      	beq.n	8003b8e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b8c:	e11a      	b.n	8003dc4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b96:	d112      	bne.n	8003bbe <HAL_SPI_Receive+0x56>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10e      	bne.n	8003bbe <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ba8:	88fa      	ldrh	r2, [r7, #6]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f90e 	bl	8003dd6 <HAL_SPI_TransmitReceive>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	e107      	b.n	8003dce <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_SPI_Receive+0x64>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e100      	b.n	8003dce <HAL_SPI_Receive+0x266>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bd4:	f7fe f910 	bl	8001df8 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_SPI_Receive+0x7e>
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bea:	e0eb      	b.n	8003dc4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2204      	movs	r2, #4
 8003bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	88fa      	ldrh	r2, [r7, #6]
 8003c04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	88fa      	ldrh	r2, [r7, #6]
 8003c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c36:	d908      	bls.n	8003c4a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	e007      	b.n	8003c5a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c58:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c62:	d10f      	bne.n	8003c84 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c82:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8e:	2b40      	cmp	r3, #64	@ 0x40
 8003c90:	d007      	beq.n	8003ca2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ca0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003caa:	d86f      	bhi.n	8003d8c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003cac:	e034      	b.n	8003d18 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d117      	bne.n	8003cec <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f103 020c 	add.w	r2, r3, #12
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003cea:	e015      	b.n	8003d18 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cec:	f7fe f884 	bl	8001df8 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d803      	bhi.n	8003d04 <HAL_SPI_Receive+0x19c>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d102      	bne.n	8003d0a <HAL_SPI_Receive+0x1a2>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003d16:	e055      	b.n	8003dc4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1c4      	bne.n	8003cae <HAL_SPI_Receive+0x146>
 8003d24:	e038      	b.n	8003d98 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d115      	bne.n	8003d60 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	b292      	uxth	r2, r2
 8003d40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	1c9a      	adds	r2, r3, #2
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003d5e:	e015      	b.n	8003d8c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d60:	f7fe f84a 	bl	8001df8 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d803      	bhi.n	8003d78 <HAL_SPI_Receive+0x210>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d76:	d102      	bne.n	8003d7e <HAL_SPI_Receive+0x216>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003d8a:	e01b      	b.n	8003dc4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1c6      	bne.n	8003d26 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	6839      	ldr	r1, [r7, #0]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 fb5b 	bl	8004458 <SPI_EndRxTransaction>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
 8003dba:	e003      	b.n	8003dc4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b08a      	sub	sp, #40	@ 0x28
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
 8003de2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003de4:	2301      	movs	r3, #1
 8003de6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_SPI_TransmitReceive+0x26>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e20a      	b.n	8004212 <HAL_SPI_TransmitReceive+0x43c>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e04:	f7fd fff8 	bl	8001df8 <HAL_GetTick>
 8003e08:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e10:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003e18:	887b      	ldrh	r3, [r7, #2]
 8003e1a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003e1c:	887b      	ldrh	r3, [r7, #2]
 8003e1e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e20:	7efb      	ldrb	r3, [r7, #27]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d00e      	beq.n	8003e44 <HAL_SPI_TransmitReceive+0x6e>
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e2c:	d106      	bne.n	8003e3c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d102      	bne.n	8003e3c <HAL_SPI_TransmitReceive+0x66>
 8003e36:	7efb      	ldrb	r3, [r7, #27]
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d003      	beq.n	8003e44 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003e42:	e1e0      	b.n	8004206 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_SPI_TransmitReceive+0x80>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_SPI_TransmitReceive+0x80>
 8003e50:	887b      	ldrh	r3, [r7, #2]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003e5c:	e1d3      	b.n	8004206 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d003      	beq.n	8003e72 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2205      	movs	r2, #5
 8003e6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	887a      	ldrh	r2, [r7, #2]
 8003e82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	887a      	ldrh	r2, [r7, #2]
 8003e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	887a      	ldrh	r2, [r7, #2]
 8003e98:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	887a      	ldrh	r2, [r7, #2]
 8003e9e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003eb4:	d802      	bhi.n	8003ebc <HAL_SPI_TransmitReceive+0xe6>
 8003eb6:	8a3b      	ldrh	r3, [r7, #16]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d908      	bls.n	8003ece <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	e007      	b.n	8003ede <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003edc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee8:	2b40      	cmp	r3, #64	@ 0x40
 8003eea:	d007      	beq.n	8003efc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003efa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f04:	f240 8081 	bls.w	800400a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_SPI_TransmitReceive+0x140>
 8003f10:	8a7b      	ldrh	r3, [r7, #18]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d16d      	bne.n	8003ff2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1a:	881a      	ldrh	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f26:	1c9a      	adds	r2, r3, #2
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f3a:	e05a      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d11b      	bne.n	8003f82 <HAL_SPI_TransmitReceive+0x1ac>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d016      	beq.n	8003f82 <HAL_SPI_TransmitReceive+0x1ac>
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d113      	bne.n	8003f82 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5e:	881a      	ldrh	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6a:	1c9a      	adds	r2, r3, #2
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d11c      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x1f4>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d016      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	b292      	uxth	r2, r2
 8003fa8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	1c9a      	adds	r2, r3, #2
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fca:	f7fd ff15 	bl	8001df8 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d80b      	bhi.n	8003ff2 <HAL_SPI_TransmitReceive+0x21c>
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d007      	beq.n	8003ff2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003ff0:	e109      	b.n	8004206 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d19f      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x166>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d199      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x166>
 8004008:	e0e3      	b.n	80041d2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_SPI_TransmitReceive+0x244>
 8004012:	8a7b      	ldrh	r3, [r7, #18]
 8004014:	2b01      	cmp	r3, #1
 8004016:	f040 80cf 	bne.w	80041b8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d912      	bls.n	800404a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004028:	881a      	ldrh	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004034:	1c9a      	adds	r2, r3, #2
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b02      	subs	r3, #2
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004048:	e0b6      	b.n	80041b8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	7812      	ldrb	r2, [r2, #0]
 8004056:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004070:	e0a2      	b.n	80041b8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b02      	cmp	r3, #2
 800407e:	d134      	bne.n	80040ea <HAL_SPI_TransmitReceive+0x314>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d02f      	beq.n	80040ea <HAL_SPI_TransmitReceive+0x314>
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	2b01      	cmp	r3, #1
 800408e:	d12c      	bne.n	80040ea <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b01      	cmp	r3, #1
 8004098:	d912      	bls.n	80040c0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409e:	881a      	ldrh	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040aa:	1c9a      	adds	r2, r3, #2
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b02      	subs	r3, #2
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040be:	e012      	b.n	80040e6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	7812      	ldrb	r2, [r2, #0]
 80040cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d148      	bne.n	800418a <HAL_SPI_TransmitReceive+0x3b4>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d042      	beq.n	800418a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	d923      	bls.n	8004158 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	b292      	uxth	r2, r2
 800411c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	1c9a      	adds	r2, r3, #2
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b02      	subs	r3, #2
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d81f      	bhi.n	8004186 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	e016      	b.n	8004186 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f103 020c 	add.w	r2, r3, #12
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	7812      	ldrb	r2, [r2, #0]
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004186:	2301      	movs	r3, #1
 8004188:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800418a:	f7fd fe35 	bl	8001df8 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004196:	429a      	cmp	r2, r3
 8004198:	d803      	bhi.n	80041a2 <HAL_SPI_TransmitReceive+0x3cc>
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d102      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x3d2>
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d107      	bne.n	80041b8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80041b6:	e026      	b.n	8004206 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f47f af57 	bne.w	8004072 <HAL_SPI_TransmitReceive+0x29c>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f47f af50 	bne.w	8004072 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f9ba 	bl	8004550 <SPI_EndRxTxTransaction>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041fc:	e003      	b.n	8004206 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800420e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004212:	4618      	mov	r0, r3
 8004214:	3728      	adds	r7, #40	@ 0x28
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800422c:	f7fd fde4 	bl	8001df8 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	4413      	add	r3, r2
 800423a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800423c:	f7fd fddc 	bl	8001df8 <HAL_GetTick>
 8004240:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004242:	4b39      	ldr	r3, [pc, #228]	@ (8004328 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	015b      	lsls	r3, r3, #5
 8004248:	0d1b      	lsrs	r3, r3, #20
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	fb02 f303 	mul.w	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004252:	e054      	b.n	80042fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d050      	beq.n	80042fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800425c:	f7fd fdcc 	bl	8001df8 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	429a      	cmp	r2, r3
 800426a:	d902      	bls.n	8004272 <SPI_WaitFlagStateUntilTimeout+0x56>
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d13d      	bne.n	80042ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004280:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800428a:	d111      	bne.n	80042b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004294:	d004      	beq.n	80042a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429e:	d107      	bne.n	80042b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042b8:	d10f      	bne.n	80042da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e017      	b.n	800431e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4013      	ands	r3, r2
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	429a      	cmp	r2, r3
 800431a:	d19b      	bne.n	8004254 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20000000 	.word	0x20000000

0800432c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	@ 0x28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800433e:	f7fd fd5b 	bl	8001df8 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	4413      	add	r3, r2
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800434e:	f7fd fd53 	bl	8001df8 <HAL_GetTick>
 8004352:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800435c:	4b3d      	ldr	r3, [pc, #244]	@ (8004454 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	00da      	lsls	r2, r3, #3
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	0d1b      	lsrs	r3, r3, #20
 800436c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004374:	e060      	b.n	8004438 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800437c:	d107      	bne.n	800438e <SPI_WaitFifoStateUntilTimeout+0x62>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d104      	bne.n	800438e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800438c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d050      	beq.n	8004438 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004396:	f7fd fd2f 	bl	8001df8 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d902      	bls.n	80043ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d13d      	bne.n	8004428 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043c4:	d111      	bne.n	80043ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ce:	d004      	beq.n	80043da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d8:	d107      	bne.n	80043ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043f2:	d10f      	bne.n	8004414 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004412:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e010      	b.n	800444a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	3b01      	subs	r3, #1
 8004436:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4013      	ands	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	429a      	cmp	r2, r3
 8004446:	d196      	bne.n	8004376 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3728      	adds	r7, #40	@ 0x28
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000000 	.word	0x20000000

08004458 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800446c:	d111      	bne.n	8004492 <SPI_EndRxTransaction+0x3a>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004476:	d004      	beq.n	8004482 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004480:	d107      	bne.n	8004492 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004490:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800449a:	d112      	bne.n	80044c2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2200      	movs	r2, #0
 80044a4:	2180      	movs	r1, #128	@ 0x80
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f7ff feb8 	bl	800421c <SPI_WaitFlagStateUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d021      	beq.n	80044f6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b6:	f043 0220 	orr.w	r2, r3, #32
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e03d      	b.n	800453e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044c2:	4b21      	ldr	r3, [pc, #132]	@ (8004548 <SPI_EndRxTransaction+0xf0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a21      	ldr	r2, [pc, #132]	@ (800454c <SPI_EndRxTransaction+0xf4>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	0d5b      	lsrs	r3, r3, #21
 80044ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044d2:	fb02 f303 	mul.w	r3, r2, r3
 80044d6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ee:	2b80      	cmp	r3, #128	@ 0x80
 80044f0:	d0f2      	beq.n	80044d8 <SPI_EndRxTransaction+0x80>
 80044f2:	e000      	b.n	80044f6 <SPI_EndRxTransaction+0x9e>
        break;
 80044f4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044fe:	d11d      	bne.n	800453c <SPI_EndRxTransaction+0xe4>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004508:	d004      	beq.n	8004514 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004512:	d113      	bne.n	800453c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2200      	movs	r2, #0
 800451c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7ff ff03 	bl	800432c <SPI_WaitFifoStateUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004530:	f043 0220 	orr.w	r2, r3, #32
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e000      	b.n	800453e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000000 	.word	0x20000000
 800454c:	165e9f81 	.word	0x165e9f81

08004550 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2200      	movs	r2, #0
 8004564:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f7ff fedf 	bl	800432c <SPI_WaitFifoStateUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e046      	b.n	8004612 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004584:	4b25      	ldr	r3, [pc, #148]	@ (800461c <SPI_EndRxTxTransaction+0xcc>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a25      	ldr	r2, [pc, #148]	@ (8004620 <SPI_EndRxTxTransaction+0xd0>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	0d5b      	lsrs	r3, r3, #21
 8004590:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004594:	fb02 f303 	mul.w	r3, r2, r3
 8004598:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045a2:	d112      	bne.n	80045ca <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2200      	movs	r2, #0
 80045ac:	2180      	movs	r1, #128	@ 0x80
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff fe34 	bl	800421c <SPI_WaitFlagStateUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d016      	beq.n	80045e8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045be:	f043 0220 	orr.w	r2, r3, #32
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e023      	b.n	8004612 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e0:	2b80      	cmp	r3, #128	@ 0x80
 80045e2:	d0f2      	beq.n	80045ca <SPI_EndRxTxTransaction+0x7a>
 80045e4:	e000      	b.n	80045e8 <SPI_EndRxTxTransaction+0x98>
        break;
 80045e6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff fe99 	bl	800432c <SPI_WaitFifoStateUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e000      	b.n	8004612 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000000 	.word	0x20000000
 8004620:	165e9f81 	.word	0x165e9f81

08004624 <memset>:
 8004624:	4402      	add	r2, r0
 8004626:	4603      	mov	r3, r0
 8004628:	4293      	cmp	r3, r2
 800462a:	d100      	bne.n	800462e <memset+0xa>
 800462c:	4770      	bx	lr
 800462e:	f803 1b01 	strb.w	r1, [r3], #1
 8004632:	e7f9      	b.n	8004628 <memset+0x4>

08004634 <__libc_init_array>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	4d0d      	ldr	r5, [pc, #52]	@ (800466c <__libc_init_array+0x38>)
 8004638:	4c0d      	ldr	r4, [pc, #52]	@ (8004670 <__libc_init_array+0x3c>)
 800463a:	1b64      	subs	r4, r4, r5
 800463c:	10a4      	asrs	r4, r4, #2
 800463e:	2600      	movs	r6, #0
 8004640:	42a6      	cmp	r6, r4
 8004642:	d109      	bne.n	8004658 <__libc_init_array+0x24>
 8004644:	4d0b      	ldr	r5, [pc, #44]	@ (8004674 <__libc_init_array+0x40>)
 8004646:	4c0c      	ldr	r4, [pc, #48]	@ (8004678 <__libc_init_array+0x44>)
 8004648:	f000 f818 	bl	800467c <_init>
 800464c:	1b64      	subs	r4, r4, r5
 800464e:	10a4      	asrs	r4, r4, #2
 8004650:	2600      	movs	r6, #0
 8004652:	42a6      	cmp	r6, r4
 8004654:	d105      	bne.n	8004662 <__libc_init_array+0x2e>
 8004656:	bd70      	pop	{r4, r5, r6, pc}
 8004658:	f855 3b04 	ldr.w	r3, [r5], #4
 800465c:	4798      	blx	r3
 800465e:	3601      	adds	r6, #1
 8004660:	e7ee      	b.n	8004640 <__libc_init_array+0xc>
 8004662:	f855 3b04 	ldr.w	r3, [r5], #4
 8004666:	4798      	blx	r3
 8004668:	3601      	adds	r6, #1
 800466a:	e7f2      	b.n	8004652 <__libc_init_array+0x1e>
 800466c:	080046b4 	.word	0x080046b4
 8004670:	080046b4 	.word	0x080046b4
 8004674:	080046b4 	.word	0x080046b4
 8004678:	080046b8 	.word	0x080046b8

0800467c <_init>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	bf00      	nop
 8004680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004682:	bc08      	pop	{r3}
 8004684:	469e      	mov	lr, r3
 8004686:	4770      	bx	lr

08004688 <_fini>:
 8004688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468a:	bf00      	nop
 800468c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468e:	bc08      	pop	{r3}
 8004690:	469e      	mov	lr, r3
 8004692:	4770      	bx	lr


profileograph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005400  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080055f8  080055f8  000065f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005608  08005608  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005608  08005608  00006608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005610  08005610  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005610  08005610  00006610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005614  08005614  00006614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005618  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000000c  08005624  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005624  0000723c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010929  00000000  00000000  0000703a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d9  00000000  00000000  00017963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  0001a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba2  00000000  00000000  0001b150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286e4  00000000  00000000  0001bcf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c84  00000000  00000000  000443d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fca67  00000000  00000000  0005705a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153ac1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e98  00000000  00000000  00153b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0015799c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080055e0 	.word	0x080055e0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080055e0 	.word	0x080055e0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <writeRegister>:
 * @param num Number of bytes to be written
 * @retval none
 * @note Since the register values to be written are 8-bit, there is no need to multiple writing
 */
static void writeRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	6039      	str	r1, [r7, #0]
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b3f      	cmp	r3, #63	@ 0x3f
 800053c:	d901      	bls.n	8000542 <writeRegister+0x1a>
		address = 63;
 800053e:	233f      	movs	r3, #63	@ 0x3f
 8000540:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
		address = (address << 1 & ~0x01);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	480c      	ldr	r0, [pc, #48]	@ (8000580 <writeRegister+0x58>)
 8000550:	f002 fac8 	bl	8002ae4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000554:	1df9      	adds	r1, r7, #7
 8000556:	230a      	movs	r3, #10
 8000558:	2201      	movs	r2, #1
 800055a:	480a      	ldr	r0, [pc, #40]	@ (8000584 <writeRegister+0x5c>)
 800055c:	f003 f801 	bl	8003562 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,value,num,10);
 8000560:	79bb      	ldrb	r3, [r7, #6]
 8000562:	b29a      	uxth	r2, r3
 8000564:	230a      	movs	r3, #10
 8000566:	6839      	ldr	r1, [r7, #0]
 8000568:	4806      	ldr	r0, [pc, #24]	@ (8000584 <writeRegister+0x5c>)
 800056a:	f002 fffa 	bl	8003562 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2120      	movs	r1, #32
 8000572:	4803      	ldr	r0, [pc, #12]	@ (8000580 <writeRegister+0x58>)
 8000574:	f002 fab6 	bl	8002ae4 <HAL_GPIO_WritePin>
	

}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40020400 	.word	0x40020400
 8000584:	200000f0 	.word	0x200000f0

08000588 <readRegister>:
 *	@param value Pointer to buffer that stores the read value
 *	@param num Number of bytes to be written
 * 	@retval none
 */
static void readRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b3f      	cmp	r3, #63	@ 0x3f
 800059c:	d901      	bls.n	80005a2 <readRegister+0x1a>
		address = 63;
 800059e:	233f      	movs	r3, #63	@ 0x3f
 80005a0:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
		address = (address << 1 | 0x01);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <readRegister+0x60>)
 80005b8:	f002 fa94 	bl	8002ae4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 80005bc:	1df9      	adds	r1, r7, #7
 80005be:	230a      	movs	r3, #10
 80005c0:	2201      	movs	r2, #1
 80005c2:	480a      	ldr	r0, [pc, #40]	@ (80005ec <readRegister+0x64>)
 80005c4:	f002 ffcd 	bl	8003562 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 80005c8:	79bb      	ldrb	r3, [r7, #6]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	230a      	movs	r3, #10
 80005ce:	6839      	ldr	r1, [r7, #0]
 80005d0:	4806      	ldr	r0, [pc, #24]	@ (80005ec <readRegister+0x64>)
 80005d2:	f003 f93b 	bl	800384c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2120      	movs	r1, #32
 80005da:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <readRegister+0x60>)
 80005dc:	f002 fa82 	bl	8002ae4 <HAL_GPIO_WritePin>
	
	
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40020400 	.word	0x40020400
 80005ec:	200000f0 	.word	0x200000f0

080005f0 <adxlFormat>:
						2 		|  				+-8g		
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	uint8_t formatreg=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1); //Set register to 0
 80005fc:	f107 030f 	add.w	r3, r7, #15
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	202c      	movs	r0, #44	@ 0x2c
 8000606:	f7ff ff8f 	bl	8000528 <writeRegister>
	formatreg = (adxl->IntMode << 6 | adxl->Range) & RANGE_REG_MASK;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	78db      	ldrb	r3, [r3, #3]
 800060e:	019b      	lsls	r3, r3, #6
 8000610:	b25a      	sxtb	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	b25b      	sxtb	r3, r3
 8000618:	4313      	orrs	r3, r2
 800061a:	b25b      	sxtb	r3, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 0343 	and.w	r3, r3, #67	@ 0x43
 8000622:	b2db      	uxtb	r3, r3
 8000624:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1);
 8000626:	f107 030f 	add.w	r3, r7, #15
 800062a:	2201      	movs	r2, #1
 800062c:	4619      	mov	r1, r3
 800062e:	202c      	movs	r0, #44	@ 0x2c
 8000630:	f7ff ff7a 	bl	8000528 <writeRegister>

	formatreg = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg,1);
 8000638:	f107 030f 	add.w	r3, r7, #15
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	202d      	movs	r0, #45	@ 0x2d
 8000642:	f7ff ff71 	bl	8000528 <writeRegister>
	formatreg = (adxl->DataReadyMode << 2 | adxl->TempMode << 1 | adxl->StandbyMode) & POWER_CTL_REG_MASK;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	b25a      	sxtb	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	b25b      	sxtb	r3, r3
 8000656:	4313      	orrs	r3, r2
 8000658:	b25a      	sxtb	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b25b      	sxtb	r3, r3
 8000660:	4313      	orrs	r3, r2
 8000662:	b25b      	sxtb	r3, r3
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	b2db      	uxtb	r3, r3
 800066c:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg, 1);
 800066e:	f107 030f 	add.w	r3, r7, #15
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	202d      	movs	r0, #45	@ 0x2d
 8000678:	f7ff ff56 	bl	8000528 <writeRegister>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <adxlReset>:

/**
 * @brief Call to reset ADXL355
 */
static void adxlReset(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
    uint8_t shadow_reg_store[5] = {};
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	2300      	movs	r3, #0
 8000690:	753b      	strb	r3, [r7, #20]
    uint8_t shadow_reg_read[5] = {};
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	2300      	movs	r3, #0
 8000698:	733b      	strb	r3, [r7, #12]
    uint8_t reset_write = ADXL_RESET_WRITE;
 800069a:	2352      	movs	r3, #82	@ 0x52
 800069c:	71fb      	strb	r3, [r7, #7]
    //Store values from shadow registers
    readRegister(SHADOW_REG1, shadow_reg_store, 5);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	2205      	movs	r2, #5
 80006a4:	4619      	mov	r1, r3
 80006a6:	2050      	movs	r0, #80	@ 0x50
 80006a8:	f7ff ff6e 	bl	8000588 <readRegister>
    while (1) {
        //Perform a software reset
        writeRegister(ADXL_RESET, &reset_write, 1);
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	2201      	movs	r2, #1
 80006b0:	4619      	mov	r1, r3
 80006b2:	202f      	movs	r0, #47	@ 0x2f
 80006b4:	f7ff ff38 	bl	8000528 <writeRegister>
        //Read shadow registers after reset
        readRegister(SHADOW_REG1, shadow_reg_read, 5);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2205      	movs	r2, #5
 80006be:	4619      	mov	r1, r3
 80006c0:	2050      	movs	r0, #80	@ 0x50
 80006c2:	f7ff ff61 	bl	8000588 <readRegister>
        // Check if shadow registers match the stored values
        uint8_t match = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	77fb      	strb	r3, [r7, #31]
        for (int i = 0; i < 5; i++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	e011      	b.n	80006f4 <adxlReset+0x70>
            if (shadow_reg_read[i] != shadow_reg_store[i]) {
 80006d0:	f107 0208 	add.w	r2, r7, #8
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	4413      	add	r3, r2
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	f107 0110 	add.w	r1, r7, #16
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	440b      	add	r3, r1
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d002      	beq.n	80006ee <adxlReset+0x6a>
                match = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	77fb      	strb	r3, [r7, #31]
                break;
 80006ec:	e005      	b.n	80006fa <adxlReset+0x76>
        for (int i = 0; i < 5; i++) {
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	3301      	adds	r3, #1
 80006f2:	61bb      	str	r3, [r7, #24]
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	ddea      	ble.n	80006d0 <adxlReset+0x4c>
            }
        }
        // If all shadow registers match, exit the loop
        if (match) break;
 80006fa:	7ffb      	ldrb	r3, [r7, #31]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d100      	bne.n	8000702 <adxlReset+0x7e>
    while (1) {
 8000700:	e7d4      	b.n	80006ac <adxlReset+0x28>
        if (match) break;
 8000702:	bf00      	nop
    }
}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2120      	movs	r1, #32
 8000718:	482d      	ldr	r0, [pc, #180]	@ (80007d0 <ADXL_Init+0xc4>)
 800071a:	f002 f9e3 	bl	8002ae4 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 800071e:	2005      	movs	r0, #5
 8000720:	f000 fec6 	bl	80014b0 <HAL_Delay>
	//Reset device
	adxlReset();
 8000724:	f7ff ffae 	bl	8000684 <adxlReset>
	uint8_t testval[2] = {};
 8000728:	2300      	movs	r3, #0
 800072a:	81bb      	strh	r3, [r7, #12]
	// The Device Address register is constant, i.e. = 0xAD
	readRegister(DEVID_AD, testval, 2);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2202      	movs	r2, #2
 8000732:	4619      	mov	r1, r3
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff ff27 	bl	8000588 <readRegister>
	if (testval[0] != DEVID_AD_DEFAULT_VAL || testval[1] != DEVID_MST_DEFAULT_VAL) return ADXL_ERR;
 800073a:	7b3b      	ldrb	r3, [r7, #12]
 800073c:	2bad      	cmp	r3, #173	@ 0xad
 800073e:	d102      	bne.n	8000746 <ADXL_Init+0x3a>
 8000740:	7b7b      	ldrb	r3, [r7, #13]
 8000742:	2b1d      	cmp	r3, #29
 8000744:	d001      	beq.n	800074a <ADXL_Init+0x3e>
 8000746:	2301      	movs	r3, #1
 8000748:	e03d      	b.n	80007c6 <ADXL_Init+0xba>

	//Init of BW_RATE and DATAFORMAT registers
	adxlFormat(adxl);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff50 	bl	80005f0 <adxlFormat>
	
	// Settings gains 
	switch (adxl->Range) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d01e      	beq.n	8000796 <ADXL_Init+0x8a>
 8000758:	2b03      	cmp	r3, #3
 800075a:	dc28      	bgt.n	80007ae <ADXL_Init+0xa2>
 800075c:	2b01      	cmp	r3, #1
 800075e:	d002      	beq.n	8000766 <ADXL_Init+0x5a>
 8000760:	2b02      	cmp	r3, #2
 8000762:	d00c      	beq.n	800077e <ADXL_Init+0x72>
 8000764:	e023      	b.n	80007ae <ADXL_Init+0xa2>
		case ADXL_RANGE_2G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 8000766:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <ADXL_Init+0xc8>)
 8000768:	4a1b      	ldr	r2, [pc, #108]	@ (80007d8 <ADXL_Init+0xcc>)
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <ADXL_Init+0xc8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1a      	ldr	r2, [pc, #104]	@ (80007dc <ADXL_Init+0xd0>)
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <ADXL_Init+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a19      	ldr	r2, [pc, #100]	@ (80007e0 <ADXL_Init+0xd4>)
 800077a:	6013      	str	r3, [r2, #0]
			break;
 800077c:	e022      	b.n	80007c4 <ADXL_Init+0xb8>
		case ADXL_RANGE_4G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_4G;
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <ADXL_Init+0xc8>)
 8000780:	4a18      	ldr	r2, [pc, #96]	@ (80007e4 <ADXL_Init+0xd8>)
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <ADXL_Init+0xc8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a14      	ldr	r2, [pc, #80]	@ (80007dc <ADXL_Init+0xd0>)
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <ADXL_Init+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a13      	ldr	r2, [pc, #76]	@ (80007e0 <ADXL_Init+0xd4>)
 8000792:	6013      	str	r3, [r2, #0]
			break;
 8000794:	e016      	b.n	80007c4 <ADXL_Init+0xb8>
		case ADXL_RANGE_8G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_8G;
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <ADXL_Init+0xc8>)
 8000798:	4a13      	ldr	r2, [pc, #76]	@ (80007e8 <ADXL_Init+0xdc>)
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <ADXL_Init+0xc8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <ADXL_Init+0xd0>)
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <ADXL_Init+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <ADXL_Init+0xd4>)
 80007aa:	6013      	str	r3, [r2, #0]
			break;
 80007ac:	e00a      	b.n	80007c4 <ADXL_Init+0xb8>
		default:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <ADXL_Init+0xc8>)
 80007b0:	4a09      	ldr	r2, [pc, #36]	@ (80007d8 <ADXL_Init+0xcc>)
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <ADXL_Init+0xc8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <ADXL_Init+0xd0>)
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <ADXL_Init+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <ADXL_Init+0xd4>)
 80007c2:	6013      	str	r3, [r2, #0]
}
			
	return ADXL_OK;
 80007c4:	2300      	movs	r3, #0
	
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40020400 	.word	0x40020400
 80007d4:	20000030 	.word	0x20000030
 80007d8:	36831049 	.word	0x36831049
 80007dc:	2000002c 	.word	0x2000002c
 80007e0:	20000028 	.word	0x20000028
 80007e4:	37031494 	.word	0x37031494
 80007e8:	3783126f 	.word	0x3783126f

080007ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000800:	4a21      	ldr	r2, [pc, #132]	@ (8000888 <MX_ADC1_Init+0x9c>)
 8000802:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000804:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800080a:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <MX_ADC1_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000810:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <MX_ADC1_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_ADC1_Init+0x98>)
 800082c:	4a17      	ldr	r2, [pc, #92]	@ (800088c <MX_ADC1_Init+0xa0>)
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000838:	2201      	movs	r2, #1
 800083a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_ADC1_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000846:	2201      	movs	r2, #1
 8000848:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800084a:	480e      	ldr	r0, [pc, #56]	@ (8000884 <MX_ADC1_Init+0x98>)
 800084c:	f000 fe54 	bl	80014f8 <HAL_ADC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 faad 	bl	8000db4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800085a:	230a      	movs	r3, #10
 800085c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085e:	2301      	movs	r3, #1
 8000860:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_ADC1_Init+0x98>)
 800086c:	f000 fe88 	bl	8001580 <HAL_ADC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000876:	f000 fa9d 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000034 	.word	0x20000034
 8000888:	40012000 	.word	0x40012000
 800088c:	0f000001 	.word	0x0f000001

08000890 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	@ 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a15      	ldr	r2, [pc, #84]	@ (8000904 <HAL_ADC_MspInit+0x74>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d123      	bne.n	80008fa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	4a14      	ldr	r2, [pc, #80]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008be:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e2:	2301      	movs	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e6:	2303      	movs	r3, #3
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	@ (800090c <HAL_ADC_MspInit+0x7c>)
 80008f6:	f001 ff49 	bl	800278c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	@ 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40012000 	.word	0x40012000
 8000908:	40023800 	.word	0x40023800
 800090c:	40020800 	.word	0x40020800

08000910 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000916:	4a18      	ldr	r2, [pc, #96]	@ (8000978 <MX_CAN1_Init+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <MX_CAN1_Init+0x64>)
 800091c:	2202      	movs	r2, #2
 800091e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_CAN1_Init+0x64>)
 800092e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000932:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000936:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800093a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800093c:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <MX_CAN1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000942:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000944:	2201      	movs	r2, #1
 8000946:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <MX_CAN1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_CAN1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000962:	f001 f85d 	bl	8001a20 <HAL_CAN_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800096c:	f000 fa22 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000007c 	.word	0x2000007c
 8000978:	40006400 	.word	0x40006400

0800097c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a1b      	ldr	r2, [pc, #108]	@ (8000a08 <HAL_CAN_MspInit+0x8c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12f      	bne.n	80009fe <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ce:	2303      	movs	r3, #3
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009de:	2309      	movs	r3, #9
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4809      	ldr	r0, [pc, #36]	@ (8000a10 <HAL_CAN_MspInit+0x94>)
 80009ea:	f001 fecf 	bl	800278c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2014      	movs	r0, #20
 80009f4:	f001 fe93 	bl	800271e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009f8:	2014      	movs	r0, #20
 80009fa:	f001 feac 	bl	8002756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	@ 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40006400 	.word	0x40006400
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020c00 	.word	0x40020c00

08000a14 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a1d      	ldr	r2, [pc, #116]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a17      	ldr	r2, [pc, #92]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a11      	ldr	r2, [pc, #68]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f244 01a1 	movw	r1, #16545	@ 0x40a1
 8000a90:	480b      	ldr	r0, [pc, #44]	@ (8000ac0 <MX_GPIO_Init+0xac>)
 8000a92:	f002 f827 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin;
 8000a96:	f244 03a1 	movw	r3, #16545	@ 0x40a1
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <MX_GPIO_Init+0xac>)
 8000ab0:	f001 fe6c 	bl	800278c <HAL_GPIO_Init>

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	@ 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac8:	f000 fc95 	bl	80013f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000acc:	f000 f872 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad0:	f7ff ffa0 	bl	8000a14 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ad4:	f000 f974 	bl	8000dc0 <MX_SPI1_Init>
  MX_CAN1_Init();
 8000ad8:	f7ff ff1a 	bl	8000910 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000adc:	f000 fa76 	bl	8000fcc <MX_TIM2_Init>
  MX_ADC1_Init();
 8000ae0:	f7ff fe84 	bl	80007ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ae4:	f000 fae8 	bl	80010b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ae8:	f000 fb5e 	bl	80011a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  CAN_Config();
 8000aec:	f000 f8be 	bl	8000c6c <CAN_Config>

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000af0:	2102      	movs	r1, #2
 8000af2:	482a      	ldr	r0, [pc, #168]	@ (8000b9c <main+0xd8>)
 8000af4:	f001 fae2 	bl	80020bc <HAL_CAN_ActivateNotification>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <main+0x3e>
	  Error_Handler();
 8000afe:	f000 f959 	bl	8000db4 <Error_Handler>
  }

  ADXL.StandbyMode = ADXL_MODE_MEASUREMENT;
 8000b02:	4b27      	ldr	r3, [pc, #156]	@ (8000ba0 <main+0xdc>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
  ADXL.TempMode = ADXL_TEMP_OFF;
 8000b08:	4b25      	ldr	r3, [pc, #148]	@ (8000ba0 <main+0xdc>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	705a      	strb	r2, [r3, #1]
  ADXL.DataReadyMode = ADXL_DRDY_ON;
 8000b0e:	4b24      	ldr	r3, [pc, #144]	@ (8000ba0 <main+0xdc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	709a      	strb	r2, [r3, #2]
  ADXL.IntMode = ADXL_INT_ACTIVELOW;
 8000b14:	4b22      	ldr	r3, [pc, #136]	@ (8000ba0 <main+0xdc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	70da      	strb	r2, [r3, #3]
  ADXL.Range = ADXL_RANGE_2G;
 8000b1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ba0 <main+0xdc>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	711a      	strb	r2, [r3, #4]

  TxHeader.StdId = 0x123;
 8000b20:	4b20      	ldr	r3, [pc, #128]	@ (8000ba4 <main+0xe0>)
 8000b22:	f240 1223 	movw	r2, #291	@ 0x123
 8000b26:	601a      	str	r2, [r3, #0]
  TxHeader.DLC = 8;
 8000b28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba4 <main+0xe0>)
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <main+0xe0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <main+0xe0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <main+0xe0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0x01;
 8000b40:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <main+0xe4>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x02;
 8000b46:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <main+0xe4>)
 8000b48:	2202      	movs	r2, #2
 8000b4a:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x03;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <main+0xe4>)
 8000b4e:	2203      	movs	r2, #3
 8000b50:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x04;
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <main+0xe4>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0x05;
 8000b58:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <main+0xe4>)
 8000b5a:	2205      	movs	r2, #5
 8000b5c:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x06;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <main+0xe4>)
 8000b60:	2206      	movs	r2, #6
 8000b62:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0x07;
 8000b64:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <main+0xe4>)
 8000b66:	2207      	movs	r2, #7
 8000b68:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0x08;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <main+0xe4>)
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	71da      	strb	r2, [r3, #7]


  ADXL_Init(&ADXL);
 8000b70:	480b      	ldr	r0, [pc, #44]	@ (8000ba0 <main+0xdc>)
 8000b72:	f7ff fdcb 	bl	800070c <ADXL_Init>
//  ADXL_Measure(ON);

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b76:	2100      	movs	r1, #0
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <main+0xe8>)
 8000b7a:	f003 fc7d 	bl	8004478 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	480b      	ldr	r0, [pc, #44]	@ (8000bb0 <main+0xec>)
 8000b82:	f003 fc79 	bl	8004478 <HAL_TIM_PWM_Start>

  htim2.Instance->CCR1 = SERVO_CCR_AT_CENTER;
 8000b86:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <main+0xe8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f44f 723c 	mov.w	r2, #752	@ 0x2f0
 8000b8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Drive_Motor_Start(1);
 8000b90:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000b94:	f000 f8e4 	bl	8000d60 <Drive_Motor_Start>
 8000b98:	e7fa      	b.n	8000b90 <main+0xcc>
 8000b9a:	bf00      	nop
 8000b9c:	2000007c 	.word	0x2000007c
 8000ba0:	200000e8 	.word	0x200000e8
 8000ba4:	200000a4 	.word	0x200000a4
 8000ba8:	200000d8 	.word	0x200000d8
 8000bac:	20000154 	.word	0x20000154
 8000bb0:	200001a0 	.word	0x200001a0

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	@ 0x50
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2234      	movs	r2, #52	@ 0x34
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f004 fce0 	bl	8005588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd8:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <SystemClock_Config+0xb0>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bdc:	4a21      	ldr	r2, [pc, #132]	@ (8000c64 <SystemClock_Config+0xb0>)
 8000bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c64 <SystemClock_Config+0xb0>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <SystemClock_Config+0xb4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c68 <SystemClock_Config+0xb4>)
 8000bfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <SystemClock_Config+0xb4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c10:	2301      	movs	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c14:	2310      	movs	r3, #16
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 ff93 	bl	8002b4c <HAL_RCC_OscConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000c2c:	f000 f8c2 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c30:	230f      	movs	r3, #15
 8000c32:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fa2c 	bl	80030a8 <HAL_RCC_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c56:	f000 f8ad 	bl	8000db4 <Error_Handler>
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	3750      	adds	r7, #80	@ 0x50
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40007000 	.word	0x40007000

08000c6c <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 8000c72:	230d      	movs	r3, #13
 8000c74:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000; //Only ID 0x284 and 0x285 can pass through
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000c92:	2301      	movs	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480a      	ldr	r0, [pc, #40]	@ (8000cc8 <CAN_Config+0x5c>)
 8000ca0:	f000 ffba 	bl	8001c18 <HAL_CAN_ConfigFilter>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <CAN_Config+0x42>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000caa:	f000 f883 	bl	8000db4 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000cae:	4806      	ldr	r0, [pc, #24]	@ (8000cc8 <CAN_Config+0x5c>)
 8000cb0:	f001 f89e 	bl	8001df0 <HAL_CAN_Start>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <CAN_Config+0x52>
	{
		/* Start Error */
		Error_Handler();
 8000cba:	f000 f87b 	bl	8000db4 <Error_Handler>
	}
}
 8000cbe:	bf00      	nop
 8000cc0:	3728      	adds	r7, #40	@ 0x28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2000007c 	.word	0x2000007c

08000ccc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000cd4:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000cd6:	4a11      	ldr	r2, [pc, #68]	@ (8000d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4811      	ldr	r0, [pc, #68]	@ (8000d20 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000cdc:	f001 f8cc 	bl	8001e78 <HAL_CAN_GetRxMessage>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d005      	beq.n	8000cf2 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ce6:	2180      	movs	r1, #128	@ 0x80
 8000ce8:	480e      	ldr	r0, [pc, #56]	@ (8000d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000cea:	f001 ff14 	bl	8002b16 <HAL_GPIO_TogglePin>
		Error_Handler();
 8000cee:	f000 f861 	bl	8000db4 <Error_Handler>
	}

	if (RxHeader.StdId == 0x123) {
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f240 1223 	movw	r2, #291	@ 0x123
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d108      	bne.n	8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000cfe:	2101      	movs	r1, #1
 8000d00:	4808      	ldr	r0, [pc, #32]	@ (8000d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000d02:	f001 ff08 	bl	8002b16 <HAL_GPIO_TogglePin>
		dis_off = RxData[0];
 8000d06:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b25a      	sxtb	r2, r3
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000d0e:	701a      	strb	r2, [r3, #0]
	}

}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200000e0 	.word	0x200000e0
 8000d1c:	200000bc 	.word	0x200000bc
 8000d20:	2000007c 	.word	0x2000007c
 8000d24:	40020400 	.word	0x40020400
 8000d28:	200000ed 	.word	0x200000ed

08000d2c <Drive_Motor_Control>:
		//Write to the timer’s CCR register (cast to uint16_t)
		htim2.Instance->CCR1 = (uint16_t) ccrValue;
	}
}

void Drive_Motor_Control(uint16_t speed){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
	//Clamp input speed
	if (speed >= DRIVE_MOTOR_MIN_SPEED && speed <= DRIVE_MOTOR_MAX_SPEED){
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d3c:	d804      	bhi.n	8000d48 <Drive_Motor_Control+0x1c>
		  htim3.Instance->CCR1 = speed;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <Drive_Motor_Control+0x30>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	88fa      	ldrh	r2, [r7, #6]
 8000d44:	635a      	str	r2, [r3, #52]	@ 0x34
	} else {
		  htim3.Instance->CCR1 = DRIVE_MOTOR_MIN_SPEED;
	}
}
 8000d46:	e003      	b.n	8000d50 <Drive_Motor_Control+0x24>
		  htim3.Instance->CCR1 = DRIVE_MOTOR_MIN_SPEED;
 8000d48:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <Drive_Motor_Control+0x30>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	200001a0 	.word	0x200001a0

08000d60 <Drive_Motor_Start>:

void Drive_Motor_Start(float C_drivenDistance){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint8_t fullSpeed = 0;
	if (!fullSpeed) {
 8000d6a:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <Drive_Motor_Start+0x50>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d115      	bne.n	8000d9e <Drive_Motor_Start+0x3e>
		for (int speed = 100; speed < 1000; speed += 2) {
 8000d72:	2364      	movs	r3, #100	@ 0x64
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	e00a      	b.n	8000d8e <Drive_Motor_Start+0x2e>
			Drive_Motor_Control(speed);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ffd5 	bl	8000d2c <Drive_Motor_Control>
			HAL_Delay(1);
 8000d82:	2001      	movs	r0, #1
 8000d84:	f000 fb94 	bl	80014b0 <HAL_Delay>
		for (int speed = 100; speed < 1000; speed += 2) {
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d94:	dbf0      	blt.n	8000d78 <Drive_Motor_Start+0x18>
		}
		fullSpeed = 1;
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <Drive_Motor_Start+0x50>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
	} else {
		Drive_Motor_Control(1000);
	}
}
 8000d9c:	e003      	b.n	8000da6 <Drive_Motor_Start+0x46>
		Drive_Motor_Control(1000);
 8000d9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000da2:	f7ff ffc3 	bl	8000d2c <Drive_Motor_Control>
}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200000ee 	.word	0x200000ee

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <Error_Handler+0x8>

08000dc0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <MX_SPI1_Init+0x74>)
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e38 <MX_SPI1_Init+0x78>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <MX_SPI1_Init+0x74>)
 8000dcc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dd2:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <MX_SPI1_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd8:	4b16      	ldr	r3, [pc, #88]	@ (8000e34 <MX_SPI1_Init+0x74>)
 8000dda:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000dde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de0:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <MX_SPI1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de6:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <MX_SPI1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <MX_SPI1_Init+0x74>)
 8000dee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000df2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <MX_SPI1_Init+0x74>)
 8000df6:	2210      	movs	r2, #16
 8000df8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <MX_SPI1_Init+0x74>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <MX_SPI1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <MX_SPI1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <MX_SPI1_Init+0x74>)
 8000e0e:	2207      	movs	r2, #7
 8000e10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <MX_SPI1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <MX_SPI1_Init+0x74>)
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	@ (8000e34 <MX_SPI1_Init+0x74>)
 8000e20:	f002 faf4 	bl	800340c <HAL_SPI_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e2a:	f7ff ffc3 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200000f0 	.word	0x200000f0
 8000e38:	40013000 	.word	0x40013000

08000e3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a17      	ldr	r2, [pc, #92]	@ (8000eb8 <HAL_SPI_MspInit+0x7c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d127      	bne.n	8000eae <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e5e:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <HAL_SPI_MspInit+0x80>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	4a16      	ldr	r2, [pc, #88]	@ (8000ebc <HAL_SPI_MspInit+0x80>)
 8000e64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6a:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <HAL_SPI_MspInit+0x80>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <HAL_SPI_MspInit+0x80>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a10      	ldr	r2, [pc, #64]	@ (8000ebc <HAL_SPI_MspInit+0x80>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <HAL_SPI_MspInit+0x80>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e8e:	23e0      	movs	r3, #224	@ 0xe0
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <HAL_SPI_MspInit+0x84>)
 8000eaa:	f001 fc6f 	bl	800278c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	@ 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40013000 	.word	0x40013000
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	4a0e      	ldr	r2, [pc, #56]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	4a08      	ldr	r2, [pc, #32]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <NMI_Handler+0x4>

08000f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <MemManage_Handler+0x4>

08000f24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f62:	f000 fa85 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <CAN1_RX0_IRQHandler+0x10>)
 8000f72:	f001 f8c9 	bl	8002108 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000007c 	.word	0x2000007c

08000f80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <TIM2_IRQHandler+0x10>)
 8000f86:	f003 fb71 	bl	800466c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000154 	.word	0x20000154

08000f94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <TIM4_IRQHandler+0x10>)
 8000f9a:	f003 fb67 	bl	800466c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200001ec 	.word	0x200001ec

08000fa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08e      	sub	sp, #56	@ 0x38
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]
 8000ffa:	615a      	str	r2, [r3, #20]
 8000ffc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001000:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001004:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001006:	4b2b      	ldr	r3, [pc, #172]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001008:	221f      	movs	r2, #31
 800100a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b29      	ldr	r3, [pc, #164]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001012:	4b28      	ldr	r3, [pc, #160]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001014:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001018:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101a:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001020:	4b24      	ldr	r3, [pc, #144]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001026:	4823      	ldr	r0, [pc, #140]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001028:	f003 f96e 	bl	8004308 <HAL_TIM_Base_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001032:	f7ff febf 	bl	8000db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001036:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800103c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001040:	4619      	mov	r1, r3
 8001042:	481c      	ldr	r0, [pc, #112]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001044:	f003 fd2e 	bl	8004aa4 <HAL_TIM_ConfigClockSource>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800104e:	f7ff feb1 	bl	8000db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001052:	4818      	ldr	r0, [pc, #96]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001054:	f003 f9af 	bl	80043b6 <HAL_TIM_PWM_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800105e:	f7ff fea9 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	4810      	ldr	r0, [pc, #64]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001072:	f004 f9dd 	bl	8005430 <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800107c:	f7ff fe9a 	bl	8000db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001080:	2360      	movs	r3, #96	@ 0x60
 8001082:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	4619      	mov	r1, r3
 8001096:	4807      	ldr	r0, [pc, #28]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001098:	f003 fbf0 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80010a2:	f7ff fe87 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010a6:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 80010a8:	f000 f920 	bl	80012ec <HAL_TIM_MspPostInit>

}
 80010ac:	bf00      	nop
 80010ae:	3738      	adds	r7, #56	@ 0x38
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000154 	.word	0x20000154

080010b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08e      	sub	sp, #56	@ 0x38
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d8:	463b      	mov	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]
 80010e6:	615a      	str	r2, [r3, #20]
 80010e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ea:	4b2d      	ldr	r3, [pc, #180]	@ (80011a0 <MX_TIM3_Init+0xe8>)
 80010ec:	4a2d      	ldr	r2, [pc, #180]	@ (80011a4 <MX_TIM3_Init+0xec>)
 80010ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80010f0:	4b2b      	ldr	r3, [pc, #172]	@ (80011a0 <MX_TIM3_Init+0xe8>)
 80010f2:	2207      	movs	r2, #7
 80010f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f6:	4b2a      	ldr	r3, [pc, #168]	@ (80011a0 <MX_TIM3_Init+0xe8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80010fc:	4b28      	ldr	r3, [pc, #160]	@ (80011a0 <MX_TIM3_Init+0xe8>)
 80010fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001102:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001104:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <MX_TIM3_Init+0xe8>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110a:	4b25      	ldr	r3, [pc, #148]	@ (80011a0 <MX_TIM3_Init+0xe8>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001110:	4823      	ldr	r0, [pc, #140]	@ (80011a0 <MX_TIM3_Init+0xe8>)
 8001112:	f003 f8f9 	bl	8004308 <HAL_TIM_Base_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800111c:	f7ff fe4a 	bl	8000db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001126:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800112a:	4619      	mov	r1, r3
 800112c:	481c      	ldr	r0, [pc, #112]	@ (80011a0 <MX_TIM3_Init+0xe8>)
 800112e:	f003 fcb9 	bl	8004aa4 <HAL_TIM_ConfigClockSource>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001138:	f7ff fe3c 	bl	8000db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800113c:	4818      	ldr	r0, [pc, #96]	@ (80011a0 <MX_TIM3_Init+0xe8>)
 800113e:	f003 f93a 	bl	80043b6 <HAL_TIM_PWM_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001148:	f7ff fe34 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	4811      	ldr	r0, [pc, #68]	@ (80011a0 <MX_TIM3_Init+0xe8>)
 800115c:	f004 f968 	bl	8005430 <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001166:	f7ff fe25 	bl	8000db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800116a:	2360      	movs	r3, #96	@ 0x60
 800116c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	2200      	movs	r2, #0
 800117e:	4619      	mov	r1, r3
 8001180:	4807      	ldr	r0, [pc, #28]	@ (80011a0 <MX_TIM3_Init+0xe8>)
 8001182:	f003 fb7b 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800118c:	f7ff fe12 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001190:	4803      	ldr	r0, [pc, #12]	@ (80011a0 <MX_TIM3_Init+0xe8>)
 8001192:	f000 f8ab 	bl	80012ec <HAL_TIM_MspPostInit>

}
 8001196:	bf00      	nop
 8001198:	3738      	adds	r7, #56	@ 0x38
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001a0 	.word	0x200001a0
 80011a4:	40000400 	.word	0x40000400

080011a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <MX_TIM4_Init+0x94>)
 80011c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001240 <MX_TIM4_Init+0x98>)
 80011ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 80011cc:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <MX_TIM4_Init+0x94>)
 80011ce:	229f      	movs	r2, #159	@ 0x9f
 80011d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <MX_TIM4_Init+0x94>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80011d8:	4b18      	ldr	r3, [pc, #96]	@ (800123c <MX_TIM4_Init+0x94>)
 80011da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80011de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b16      	ldr	r3, [pc, #88]	@ (800123c <MX_TIM4_Init+0x94>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <MX_TIM4_Init+0x94>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011ec:	4813      	ldr	r0, [pc, #76]	@ (800123c <MX_TIM4_Init+0x94>)
 80011ee:	f003 f88b 	bl	8004308 <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80011f8:	f7ff fddc 	bl	8000db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001200:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	4619      	mov	r1, r3
 8001208:	480c      	ldr	r0, [pc, #48]	@ (800123c <MX_TIM4_Init+0x94>)
 800120a:	f003 fc4b 	bl	8004aa4 <HAL_TIM_ConfigClockSource>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001214:	f7ff fdce 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_TIM4_Init+0x94>)
 8001226:	f004 f903 	bl	8005430 <HAL_TIMEx_MasterConfigSynchronization>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001230:	f7ff fdc0 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001ec 	.word	0x200001ec
 8001240:	40000800 	.word	0x40000800

08001244 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001254:	d114      	bne.n	8001280 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001256:	4b22      	ldr	r3, [pc, #136]	@ (80012e0 <HAL_TIM_Base_MspInit+0x9c>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	4a21      	ldr	r2, [pc, #132]	@ (80012e0 <HAL_TIM_Base_MspInit+0x9c>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6413      	str	r3, [r2, #64]	@ 0x40
 8001262:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <HAL_TIM_Base_MspInit+0x9c>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	201c      	movs	r0, #28
 8001274:	f001 fa53 	bl	800271e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001278:	201c      	movs	r0, #28
 800127a:	f001 fa6c 	bl	8002756 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800127e:	e02a      	b.n	80012d6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a17      	ldr	r2, [pc, #92]	@ (80012e4 <HAL_TIM_Base_MspInit+0xa0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d10c      	bne.n	80012a4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <HAL_TIM_Base_MspInit+0x9c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	4a14      	ldr	r2, [pc, #80]	@ (80012e0 <HAL_TIM_Base_MspInit+0x9c>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6413      	str	r3, [r2, #64]	@ 0x40
 8001296:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_TIM_Base_MspInit+0x9c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
}
 80012a2:	e018      	b.n	80012d6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0f      	ldr	r2, [pc, #60]	@ (80012e8 <HAL_TIM_Base_MspInit+0xa4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d113      	bne.n	80012d6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <HAL_TIM_Base_MspInit+0x9c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	4a0b      	ldr	r2, [pc, #44]	@ (80012e0 <HAL_TIM_Base_MspInit+0x9c>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <HAL_TIM_Base_MspInit+0x9c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	201e      	movs	r0, #30
 80012cc:	f001 fa27 	bl	800271e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012d0:	201e      	movs	r0, #30
 80012d2:	f001 fa40 	bl	8002756 <HAL_NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40000400 	.word	0x40000400
 80012e8:	40000800 	.word	0x40000800

080012ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800130c:	d11c      	bne.n	8001348 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b21      	ldr	r3, [pc, #132]	@ (8001394 <HAL_TIM_MspPostInit+0xa8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a20      	ldr	r2, [pc, #128]	@ (8001394 <HAL_TIM_MspPostInit+0xa8>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <HAL_TIM_MspPostInit+0xa8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001326:	2301      	movs	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001336:	2301      	movs	r3, #1
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4815      	ldr	r0, [pc, #84]	@ (8001398 <HAL_TIM_MspPostInit+0xac>)
 8001342:	f001 fa23 	bl	800278c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001346:	e020      	b.n	800138a <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a13      	ldr	r2, [pc, #76]	@ (800139c <HAL_TIM_MspPostInit+0xb0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d11b      	bne.n	800138a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <HAL_TIM_MspPostInit+0xa8>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a0f      	ldr	r2, [pc, #60]	@ (8001394 <HAL_TIM_MspPostInit+0xa8>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <HAL_TIM_MspPostInit+0xa8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800136a:	2340      	movs	r3, #64	@ 0x40
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001376:	2302      	movs	r3, #2
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800137a:	2302      	movs	r3, #2
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4806      	ldr	r0, [pc, #24]	@ (80013a0 <HAL_TIM_MspPostInit+0xb4>)
 8001386:	f001 fa01 	bl	800278c <HAL_GPIO_Init>
}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	@ 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000
 800139c:	40000400 	.word	0x40000400
 80013a0:	40020800 	.word	0x40020800

080013a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013a8:	f7ff fdfe 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ae:	490d      	ldr	r1, [pc, #52]	@ (80013e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b0:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c4:	4c0a      	ldr	r4, [pc, #40]	@ (80013f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013d2:	f004 f8e1 	bl	8005598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d6:	f7ff fb75 	bl	8000ac4 <main>
  bx  lr    
 80013da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013dc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013e8:	08005618 	.word	0x08005618
  ldr r2, =_sbss
 80013ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013f0:	2000023c 	.word	0x2000023c

080013f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC_IRQHandler>

080013f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fa:	2003      	movs	r0, #3
 80013fc:	f001 f984 	bl	8002708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001400:	200f      	movs	r0, #15
 8001402:	f000 f805 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001406:	f7ff fd5d 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_InitTick+0x54>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_InitTick+0x58>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f001 f99f 	bl	8002772 <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00e      	b.n	800145c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d80a      	bhi.n	800145a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f001 f967 	bl	800271e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001450:	4a06      	ldr	r2, [pc, #24]	@ (800146c <HAL_InitTick+0x5c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000000 	.word	0x20000000
 8001468:	20000008 	.word	0x20000008
 800146c:	20000004 	.word	0x20000004

08001470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_IncTick+0x20>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_IncTick+0x24>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <HAL_IncTick+0x24>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000008 	.word	0x20000008
 8001494:	20000238 	.word	0x20000238

08001498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b03      	ldr	r3, [pc, #12]	@ (80014ac <HAL_GetTick+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000238 	.word	0x20000238

080014b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f7ff ffee 	bl	8001498 <HAL_GetTick>
 80014bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c8:	d005      	beq.n	80014d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_Delay+0x44>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014d6:	bf00      	nop
 80014d8:	f7ff ffde 	bl	8001498 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d8f7      	bhi.n	80014d8 <HAL_Delay+0x28>
  {
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000008 	.word	0x20000008

080014f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e031      	b.n	8001572 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff f9ba 	bl	8000890 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	2b00      	cmp	r3, #0
 8001534:	d116      	bne.n	8001564 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <HAL_ADC_Init+0x84>)
 800153c:	4013      	ands	r3, r2
 800153e:	f043 0202 	orr.w	r2, r3, #2
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f970 	bl	800182c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f023 0303 	bic.w	r3, r3, #3
 800155a:	f043 0201 	orr.w	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	641a      	str	r2, [r3, #64]	@ 0x40
 8001562:	e001      	b.n	8001568 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	ffffeefd 	.word	0xffffeefd

08001580 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_ADC_ConfigChannel+0x1c>
 8001598:	2302      	movs	r3, #2
 800159a:	e136      	b.n	800180a <HAL_ADC_ConfigChannel+0x28a>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b09      	cmp	r3, #9
 80015aa:	d93a      	bls.n	8001622 <HAL_ADC_ConfigChannel+0xa2>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80015b4:	d035      	beq.n	8001622 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68d9      	ldr	r1, [r3, #12]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	461a      	mov	r2, r3
 80015c4:	4613      	mov	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	3b1e      	subs	r3, #30
 80015cc:	2207      	movs	r2, #7
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	400a      	ands	r2, r1
 80015da:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a8d      	ldr	r2, [pc, #564]	@ (8001818 <HAL_ADC_ConfigChannel+0x298>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d10a      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68d9      	ldr	r1, [r3, #12]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	061a      	lsls	r2, r3, #24
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015fa:	e035      	b.n	8001668 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68d9      	ldr	r1, [r3, #12]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	4618      	mov	r0, r3
 800160e:	4603      	mov	r3, r0
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4403      	add	r3, r0
 8001614:	3b1e      	subs	r3, #30
 8001616:	409a      	lsls	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001620:	e022      	b.n	8001668 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6919      	ldr	r1, [r3, #16]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	b29b      	uxth	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	2207      	movs	r2, #7
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43da      	mvns	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	400a      	ands	r2, r1
 8001644:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6919      	ldr	r1, [r3, #16]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	b29b      	uxth	r3, r3
 8001656:	4618      	mov	r0, r3
 8001658:	4603      	mov	r3, r0
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4403      	add	r3, r0
 800165e:	409a      	lsls	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b06      	cmp	r3, #6
 800166e:	d824      	bhi.n	80016ba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	3b05      	subs	r3, #5
 8001682:	221f      	movs	r2, #31
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43da      	mvns	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	400a      	ands	r2, r1
 8001690:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	3b05      	subs	r3, #5
 80016ac:	fa00 f203 	lsl.w	r2, r0, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80016b8:	e04c      	b.n	8001754 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b0c      	cmp	r3, #12
 80016c0:	d824      	bhi.n	800170c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	3b23      	subs	r3, #35	@ 0x23
 80016d4:	221f      	movs	r2, #31
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	400a      	ands	r2, r1
 80016e2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	3b23      	subs	r3, #35	@ 0x23
 80016fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	631a      	str	r2, [r3, #48]	@ 0x30
 800170a:	e023      	b.n	8001754 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	3b41      	subs	r3, #65	@ 0x41
 800171e:	221f      	movs	r2, #31
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43da      	mvns	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	400a      	ands	r2, r1
 800172c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4618      	mov	r0, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	3b41      	subs	r3, #65	@ 0x41
 8001748:	fa00 f203 	lsl.w	r2, r0, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a30      	ldr	r2, [pc, #192]	@ (800181c <HAL_ADC_ConfigChannel+0x29c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d10a      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x1f4>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001766:	d105      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001768:	4b2d      	ldr	r3, [pc, #180]	@ (8001820 <HAL_ADC_ConfigChannel+0x2a0>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4a2c      	ldr	r2, [pc, #176]	@ (8001820 <HAL_ADC_ConfigChannel+0x2a0>)
 800176e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001772:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a28      	ldr	r2, [pc, #160]	@ (800181c <HAL_ADC_ConfigChannel+0x29c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d10f      	bne.n	800179e <HAL_ADC_ConfigChannel+0x21e>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b12      	cmp	r3, #18
 8001784:	d10b      	bne.n	800179e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001786:	4b26      	ldr	r3, [pc, #152]	@ (8001820 <HAL_ADC_ConfigChannel+0x2a0>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4a25      	ldr	r2, [pc, #148]	@ (8001820 <HAL_ADC_ConfigChannel+0x2a0>)
 800178c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001790:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001792:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <HAL_ADC_ConfigChannel+0x2a0>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4a22      	ldr	r2, [pc, #136]	@ (8001820 <HAL_ADC_ConfigChannel+0x2a0>)
 8001798:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800179c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a1e      	ldr	r2, [pc, #120]	@ (800181c <HAL_ADC_ConfigChannel+0x29c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d12b      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x280>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001818 <HAL_ADC_ConfigChannel+0x298>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d003      	beq.n	80017ba <HAL_ADC_ConfigChannel+0x23a>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b11      	cmp	r3, #17
 80017b8:	d122      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80017ba:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_ADC_ConfigChannel+0x2a0>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4a18      	ldr	r2, [pc, #96]	@ (8001820 <HAL_ADC_ConfigChannel+0x2a0>)
 80017c0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80017c4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80017c6:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <HAL_ADC_ConfigChannel+0x2a0>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4a15      	ldr	r2, [pc, #84]	@ (8001820 <HAL_ADC_ConfigChannel+0x2a0>)
 80017cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017d0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a10      	ldr	r2, [pc, #64]	@ (8001818 <HAL_ADC_ConfigChannel+0x298>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d111      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_ADC_ConfigChannel+0x2a4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a11      	ldr	r2, [pc, #68]	@ (8001828 <HAL_ADC_ConfigChannel+0x2a8>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	0c9a      	lsrs	r2, r3, #18
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80017f2:	e002      	b.n	80017fa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f9      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	10000012 	.word	0x10000012
 800181c:	40012000 	.word	0x40012000
 8001820:	40012300 	.word	0x40012300
 8001824:	20000000 	.word	0x20000000
 8001828:	431bde83 	.word	0x431bde83

0800182c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001834:	4b78      	ldr	r3, [pc, #480]	@ (8001a18 <ADC_Init+0x1ec>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4a77      	ldr	r2, [pc, #476]	@ (8001a18 <ADC_Init+0x1ec>)
 800183a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800183e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001840:	4b75      	ldr	r3, [pc, #468]	@ (8001a18 <ADC_Init+0x1ec>)
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4973      	ldr	r1, [pc, #460]	@ (8001a18 <ADC_Init+0x1ec>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800185c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	021a      	lsls	r2, r3, #8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001880:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6859      	ldr	r1, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6899      	ldr	r1, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ba:	4a58      	ldr	r2, [pc, #352]	@ (8001a1c <ADC_Init+0x1f0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d022      	beq.n	8001906 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6899      	ldr	r1, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6899      	ldr	r1, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	e00f      	b.n	8001926 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001914:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001924:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0202 	bic.w	r2, r2, #2
 8001934:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6899      	ldr	r1, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	005a      	lsls	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01b      	beq.n	800198c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001962:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001972:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6859      	ldr	r1, [r3, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	3b01      	subs	r3, #1
 8001980:	035a      	lsls	r2, r3, #13
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	e007      	b.n	800199c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800199a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	051a      	lsls	r2, r3, #20
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6899      	ldr	r1, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019de:	025a      	lsls	r2, r3, #9
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6899      	ldr	r1, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	029a      	lsls	r2, r3, #10
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	609a      	str	r2, [r3, #8]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	40012300 	.word	0x40012300
 8001a1c:	0f000001 	.word	0x0f000001

08001a20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0ed      	b.n	8001c0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7fe ff9c 	bl	800097c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a54:	f7ff fd20 	bl	8001498 <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a5a:	e012      	b.n	8001a82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a5c:	f7ff fd1c 	bl	8001498 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b0a      	cmp	r3, #10
 8001a68:	d90b      	bls.n	8001a82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2205      	movs	r2, #5
 8001a7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e0c5      	b.n	8001c0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0e5      	beq.n	8001a5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0202 	bic.w	r2, r2, #2
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aa0:	f7ff fcfa 	bl	8001498 <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aa6:	e012      	b.n	8001ace <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aa8:	f7ff fcf6 	bl	8001498 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b0a      	cmp	r3, #10
 8001ab4:	d90b      	bls.n	8001ace <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2205      	movs	r2, #5
 8001ac6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e09f      	b.n	8001c0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e5      	bne.n	8001aa8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7e1b      	ldrb	r3, [r3, #24]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d108      	bne.n	8001af6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e007      	b.n	8001b06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7e5b      	ldrb	r3, [r3, #25]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d108      	bne.n	8001b20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	e007      	b.n	8001b30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7e9b      	ldrb	r3, [r3, #26]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d108      	bne.n	8001b4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0220 	orr.w	r2, r2, #32
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e007      	b.n	8001b5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0220 	bic.w	r2, r2, #32
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7edb      	ldrb	r3, [r3, #27]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d108      	bne.n	8001b74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0210 	bic.w	r2, r2, #16
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e007      	b.n	8001b84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0210 	orr.w	r2, r2, #16
 8001b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7f1b      	ldrb	r3, [r3, #28]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d108      	bne.n	8001b9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0208 	orr.w	r2, r2, #8
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e007      	b.n	8001bae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0208 	bic.w	r2, r2, #8
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7f5b      	ldrb	r3, [r3, #29]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d108      	bne.n	8001bc8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0204 	orr.w	r2, r2, #4
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	e007      	b.n	8001bd8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0204 	bic.w	r2, r2, #4
 8001bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	ea42 0103 	orr.w	r1, r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	1e5a      	subs	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c2e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c30:	7cfb      	ldrb	r3, [r7, #19]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d003      	beq.n	8001c3e <HAL_CAN_ConfigFilter+0x26>
 8001c36:	7cfb      	ldrb	r3, [r7, #19]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	f040 80c7 	bne.w	8001dcc <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a69      	ldr	r2, [pc, #420]	@ (8001de8 <HAL_CAN_ConfigFilter+0x1d0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d001      	beq.n	8001c4c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001c48:	4b68      	ldr	r3, [pc, #416]	@ (8001dec <HAL_CAN_ConfigFilter+0x1d4>)
 8001c4a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c52:	f043 0201 	orr.w	r2, r3, #1
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	4a63      	ldr	r2, [pc, #396]	@ (8001dec <HAL_CAN_ConfigFilter+0x1d4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d111      	bne.n	8001c88 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c6a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	431a      	orrs	r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	2201      	movs	r2, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d123      	bne.n	8001cfa <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cd4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3248      	adds	r2, #72	@ 0x48
 8001cda:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cf0:	6979      	ldr	r1, [r7, #20]
 8001cf2:	3348      	adds	r3, #72	@ 0x48
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d122      	bne.n	8001d48 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	3248      	adds	r2, #72	@ 0x48
 8001d28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d3e:	6979      	ldr	r1, [r7, #20]
 8001d40:	3348      	adds	r3, #72	@ 0x48
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001d62:	e007      	b.n	8001d74 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001d8e:	e007      	b.n	8001da0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d107      	bne.n	8001db8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001dbe:	f023 0201 	bic.w	r2, r3, #1
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e006      	b.n	8001dda <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
  }
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40003400 	.word	0x40003400
 8001dec:	40006400 	.word	0x40006400

08001df0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d12e      	bne.n	8001e62 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e1c:	f7ff fb3c 	bl	8001498 <HAL_GetTick>
 8001e20:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e22:	e012      	b.n	8001e4a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e24:	f7ff fb38 	bl	8001498 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b0a      	cmp	r3, #10
 8001e30:	d90b      	bls.n	8001e4a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e36:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2205      	movs	r2, #5
 8001e42:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e012      	b.n	8001e70 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e5      	bne.n	8001e24 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e006      	b.n	8001e70 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
  }
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e8c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d003      	beq.n	8001e9c <HAL_CAN_GetRxMessage+0x24>
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	f040 8103 	bne.w	80020a2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d116      	bne.n	8001ede <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0f7      	b.n	80020b0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d107      	bne.n	8001ede <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0e8      	b.n	80020b0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	331b      	adds	r3, #27
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	4413      	add	r3, r2
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0204 	and.w	r2, r3, #4
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10c      	bne.n	8001f16 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	331b      	adds	r3, #27
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	4413      	add	r3, r2
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0d5b      	lsrs	r3, r3, #21
 8001f0c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e00b      	b.n	8001f2e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	331b      	adds	r3, #27
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	4413      	add	r3, r2
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	331b      	adds	r3, #27
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	4413      	add	r3, r2
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0202 	and.w	r2, r3, #2
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	331b      	adds	r3, #27
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	4413      	add	r3, r2
 8001f50:	3304      	adds	r3, #4
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2208      	movs	r2, #8
 8001f60:	611a      	str	r2, [r3, #16]
 8001f62:	e00b      	b.n	8001f7c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	331b      	adds	r3, #27
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	4413      	add	r3, r2
 8001f70:	3304      	adds	r3, #4
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 020f 	and.w	r2, r3, #15
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	331b      	adds	r3, #27
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4413      	add	r3, r2
 8001f88:	3304      	adds	r3, #4
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	331b      	adds	r3, #27
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	0a1a      	lsrs	r2, r3, #8
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0c1a      	lsrs	r2, r3, #16
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0e1a      	lsrs	r2, r3, #24
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	3303      	adds	r3, #3
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	4413      	add	r3, r2
 800201a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	3304      	adds	r3, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	4413      	add	r3, r2
 8002032:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0a1a      	lsrs	r2, r3, #8
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	3305      	adds	r3, #5
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	4413      	add	r3, r2
 800204c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	0c1a      	lsrs	r2, r3, #16
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	3306      	adds	r3, #6
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	4413      	add	r3, r2
 8002066:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e1a      	lsrs	r2, r3, #24
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	3307      	adds	r3, #7
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d108      	bne.n	800208e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0220 	orr.w	r2, r2, #32
 800208a:	60da      	str	r2, [r3, #12]
 800208c:	e007      	b.n	800209e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0220 	orr.w	r2, r2, #32
 800209c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e006      	b.n	80020b0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
  }
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020cc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d002      	beq.n	80020da <HAL_CAN_ActivateNotification+0x1e>
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d109      	bne.n	80020ee <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6959      	ldr	r1, [r3, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e006      	b.n	80020fc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
  }
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	@ 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d07c      	beq.n	8002248 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d023      	beq.n	80021a0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2201      	movs	r2, #1
 800215e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f983 	bl	8002476 <HAL_CAN_TxMailbox0CompleteCallback>
 8002170:	e016      	b.n	80021a0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d004      	beq.n	8002186 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
 8002184:	e00c      	b.n	80021a0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24
 8002198:	e002      	b.n	80021a0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f989 	bl	80024b2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d024      	beq.n	80021f4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f963 	bl	800248a <HAL_CAN_TxMailbox1CompleteCallback>
 80021c4:	e016      	b.n	80021f4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d8:	e00c      	b.n	80021f4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d004      	beq.n	80021ee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ec:	e002      	b.n	80021f4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f969 	bl	80024c6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d024      	beq.n	8002248 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002206:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f943 	bl	800249e <HAL_CAN_TxMailbox2CompleteCallback>
 8002218:	e016      	b.n	8002248 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d004      	beq.n	800222e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
 800222c:	e00c      	b.n	8002248 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d004      	beq.n	8002242 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002240:	e002      	b.n	8002248 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f949 	bl	80024da <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00c      	beq.n	800226c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2210      	movs	r2, #16
 800226a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2208      	movs	r2, #8
 8002286:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f930 	bl	80024ee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d009      	beq.n	80022ac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe fd10 	bl	8000ccc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00c      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d007      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2210      	movs	r2, #16
 80022ce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	f003 0320 	and.w	r3, r3, #32
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2208      	movs	r2, #8
 80022ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f912 	bl	8002516 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d009      	beq.n	8002310 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8f9 	bl	8002502 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	d006      	beq.n	8002332 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2210      	movs	r2, #16
 800232a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f8fc 	bl	800252a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00b      	beq.n	8002354 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2208      	movs	r2, #8
 800234c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f8f5 	bl	800253e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d07b      	beq.n	8002456 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d072      	beq.n	800244e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800237c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d008      	beq.n	80023bc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b6:	f043 0304 	orr.w	r3, r3, #4
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d043      	beq.n	800244e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d03e      	beq.n	800244e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023d6:	2b60      	cmp	r3, #96	@ 0x60
 80023d8:	d02b      	beq.n	8002432 <HAL_CAN_IRQHandler+0x32a>
 80023da:	2b60      	cmp	r3, #96	@ 0x60
 80023dc:	d82e      	bhi.n	800243c <HAL_CAN_IRQHandler+0x334>
 80023de:	2b50      	cmp	r3, #80	@ 0x50
 80023e0:	d022      	beq.n	8002428 <HAL_CAN_IRQHandler+0x320>
 80023e2:	2b50      	cmp	r3, #80	@ 0x50
 80023e4:	d82a      	bhi.n	800243c <HAL_CAN_IRQHandler+0x334>
 80023e6:	2b40      	cmp	r3, #64	@ 0x40
 80023e8:	d019      	beq.n	800241e <HAL_CAN_IRQHandler+0x316>
 80023ea:	2b40      	cmp	r3, #64	@ 0x40
 80023ec:	d826      	bhi.n	800243c <HAL_CAN_IRQHandler+0x334>
 80023ee:	2b30      	cmp	r3, #48	@ 0x30
 80023f0:	d010      	beq.n	8002414 <HAL_CAN_IRQHandler+0x30c>
 80023f2:	2b30      	cmp	r3, #48	@ 0x30
 80023f4:	d822      	bhi.n	800243c <HAL_CAN_IRQHandler+0x334>
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	d002      	beq.n	8002400 <HAL_CAN_IRQHandler+0x2f8>
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d005      	beq.n	800240a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80023fe:	e01d      	b.n	800243c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	f043 0308 	orr.w	r3, r3, #8
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002408:	e019      	b.n	800243e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	f043 0310 	orr.w	r3, r3, #16
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002412:	e014      	b.n	800243e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002416:	f043 0320 	orr.w	r3, r3, #32
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800241c:	e00f      	b.n	800243e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002426:	e00a      	b.n	800243e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002430:	e005      	b.n	800243e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800243a:	e000      	b.n	800243e <HAL_CAN_IRQHandler+0x336>
            break;
 800243c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800244c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2204      	movs	r2, #4
 8002454:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f872 	bl	8002552 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800246e:	bf00      	nop
 8002470:	3728      	adds	r7, #40	@ 0x28
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <__NVIC_SetPriorityGrouping+0x40>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002584:	4013      	ands	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002590:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 8002592:	4313      	orrs	r3, r2
 8002594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002596:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	60d3      	str	r3, [r2, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00
 80025ac:	05fa0000 	.word	0x05fa0000

080025b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b4:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <__NVIC_GetPriorityGrouping+0x18>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	f003 0307 	and.w	r3, r3, #7
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	db0b      	blt.n	80025f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	f003 021f 	and.w	r2, r3, #31
 80025e4:	4907      	ldr	r1, [pc, #28]	@ (8002604 <__NVIC_EnableIRQ+0x38>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	2001      	movs	r0, #1
 80025ee:	fa00 f202 	lsl.w	r2, r0, r2
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000e100 	.word	0xe000e100

08002608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	2b00      	cmp	r3, #0
 800261a:	db0a      	blt.n	8002632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	490c      	ldr	r1, [pc, #48]	@ (8002654 <__NVIC_SetPriority+0x4c>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	0112      	lsls	r2, r2, #4
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	440b      	add	r3, r1
 800262c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002630:	e00a      	b.n	8002648 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4908      	ldr	r1, [pc, #32]	@ (8002658 <__NVIC_SetPriority+0x50>)
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	3b04      	subs	r3, #4
 8002640:	0112      	lsls	r2, r2, #4
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	440b      	add	r3, r1
 8002646:	761a      	strb	r2, [r3, #24]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000e100 	.word	0xe000e100
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800265c:	b480      	push	{r7}
 800265e:	b089      	sub	sp, #36	@ 0x24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f1c3 0307 	rsb	r3, r3, #7
 8002676:	2b04      	cmp	r3, #4
 8002678:	bf28      	it	cs
 800267a:	2304      	movcs	r3, #4
 800267c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3304      	adds	r3, #4
 8002682:	2b06      	cmp	r3, #6
 8002684:	d902      	bls.n	800268c <NVIC_EncodePriority+0x30>
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3b03      	subs	r3, #3
 800268a:	e000      	b.n	800268e <NVIC_EncodePriority+0x32>
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	f04f 32ff 	mov.w	r2, #4294967295
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43da      	mvns	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	401a      	ands	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a4:	f04f 31ff 	mov.w	r1, #4294967295
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	43d9      	mvns	r1, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	4313      	orrs	r3, r2
         );
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3724      	adds	r7, #36	@ 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026d4:	d301      	bcc.n	80026da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00f      	b.n	80026fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026da:	4a0a      	ldr	r2, [pc, #40]	@ (8002704 <SysTick_Config+0x40>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e2:	210f      	movs	r1, #15
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295
 80026e8:	f7ff ff8e 	bl	8002608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ec:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <SysTick_Config+0x40>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f2:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <SysTick_Config+0x40>)
 80026f4:	2207      	movs	r2, #7
 80026f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	e000e010 	.word	0xe000e010

08002708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff29 	bl	8002568 <__NVIC_SetPriorityGrouping>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002730:	f7ff ff3e 	bl	80025b0 <__NVIC_GetPriorityGrouping>
 8002734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	6978      	ldr	r0, [r7, #20]
 800273c:	f7ff ff8e 	bl	800265c <NVIC_EncodePriority>
 8002740:	4602      	mov	r2, r0
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff5d 	bl	8002608 <__NVIC_SetPriority>
}
 800274e:	bf00      	nop
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff31 	bl	80025cc <__NVIC_EnableIRQ>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ffa2 	bl	80026c4 <SysTick_Config>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800278c:	b480      	push	{r7}
 800278e:	b089      	sub	sp, #36	@ 0x24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e175      	b.n	8002a98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 8164 	bne.w	8002a92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_GPIO_Init+0x56>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d130      	bne.n	8002844 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 0201 	and.w	r2, r3, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b03      	cmp	r3, #3
 800284e:	d017      	beq.n	8002880 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d123      	bne.n	80028d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80be 	beq.w	8002a92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	4b66      	ldr	r3, [pc, #408]	@ (8002ab0 <HAL_GPIO_Init+0x324>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291a:	4a65      	ldr	r2, [pc, #404]	@ (8002ab0 <HAL_GPIO_Init+0x324>)
 800291c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002920:	6453      	str	r3, [r2, #68]	@ 0x44
 8002922:	4b63      	ldr	r3, [pc, #396]	@ (8002ab0 <HAL_GPIO_Init+0x324>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800292e:	4a61      	ldr	r2, [pc, #388]	@ (8002ab4 <HAL_GPIO_Init+0x328>)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	3302      	adds	r3, #2
 8002936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	220f      	movs	r2, #15
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a58      	ldr	r2, [pc, #352]	@ (8002ab8 <HAL_GPIO_Init+0x32c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d037      	beq.n	80029ca <HAL_GPIO_Init+0x23e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a57      	ldr	r2, [pc, #348]	@ (8002abc <HAL_GPIO_Init+0x330>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d031      	beq.n	80029c6 <HAL_GPIO_Init+0x23a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a56      	ldr	r2, [pc, #344]	@ (8002ac0 <HAL_GPIO_Init+0x334>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d02b      	beq.n	80029c2 <HAL_GPIO_Init+0x236>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a55      	ldr	r2, [pc, #340]	@ (8002ac4 <HAL_GPIO_Init+0x338>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d025      	beq.n	80029be <HAL_GPIO_Init+0x232>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a54      	ldr	r2, [pc, #336]	@ (8002ac8 <HAL_GPIO_Init+0x33c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d01f      	beq.n	80029ba <HAL_GPIO_Init+0x22e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a53      	ldr	r2, [pc, #332]	@ (8002acc <HAL_GPIO_Init+0x340>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d019      	beq.n	80029b6 <HAL_GPIO_Init+0x22a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a52      	ldr	r2, [pc, #328]	@ (8002ad0 <HAL_GPIO_Init+0x344>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <HAL_GPIO_Init+0x226>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a51      	ldr	r2, [pc, #324]	@ (8002ad4 <HAL_GPIO_Init+0x348>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00d      	beq.n	80029ae <HAL_GPIO_Init+0x222>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a50      	ldr	r2, [pc, #320]	@ (8002ad8 <HAL_GPIO_Init+0x34c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d007      	beq.n	80029aa <HAL_GPIO_Init+0x21e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4f      	ldr	r2, [pc, #316]	@ (8002adc <HAL_GPIO_Init+0x350>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d101      	bne.n	80029a6 <HAL_GPIO_Init+0x21a>
 80029a2:	2309      	movs	r3, #9
 80029a4:	e012      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029a6:	230a      	movs	r3, #10
 80029a8:	e010      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029aa:	2308      	movs	r3, #8
 80029ac:	e00e      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029ae:	2307      	movs	r3, #7
 80029b0:	e00c      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029b2:	2306      	movs	r3, #6
 80029b4:	e00a      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029b6:	2305      	movs	r3, #5
 80029b8:	e008      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029ba:	2304      	movs	r3, #4
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029be:	2303      	movs	r3, #3
 80029c0:	e004      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e002      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029ca:	2300      	movs	r3, #0
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	f002 0203 	and.w	r2, r2, #3
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	4093      	lsls	r3, r2
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029dc:	4935      	ldr	r1, [pc, #212]	@ (8002ab4 <HAL_GPIO_Init+0x328>)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	3302      	adds	r3, #2
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a0e:	4a34      	ldr	r2, [pc, #208]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a14:	4b32      	ldr	r3, [pc, #200]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a38:	4a29      	ldr	r2, [pc, #164]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a3e:	4b28      	ldr	r3, [pc, #160]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a62:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a68:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3301      	adds	r3, #1
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b0f      	cmp	r3, #15
 8002a9c:	f67f ae86 	bls.w	80027ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3724      	adds	r7, #36	@ 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40013800 	.word	0x40013800
 8002ab8:	40020000 	.word	0x40020000
 8002abc:	40020400 	.word	0x40020400
 8002ac0:	40020800 	.word	0x40020800
 8002ac4:	40020c00 	.word	0x40020c00
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40021400 	.word	0x40021400
 8002ad0:	40021800 	.word	0x40021800
 8002ad4:	40021c00 	.word	0x40021c00
 8002ad8:	40022000 	.word	0x40022000
 8002adc:	40022400 	.word	0x40022400
 8002ae0:	40013c00 	.word	0x40013c00

08002ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	807b      	strh	r3, [r7, #2]
 8002af0:	4613      	mov	r3, r2
 8002af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002af4:	787b      	ldrb	r3, [r7, #1]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002afa:	887a      	ldrh	r2, [r7, #2]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b00:	e003      	b.n	8002b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b02:	887b      	ldrh	r3, [r7, #2]
 8002b04:	041a      	lsls	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	619a      	str	r2, [r3, #24]
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b28:	887a      	ldrh	r2, [r7, #2]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	041a      	lsls	r2, r3, #16
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	43d9      	mvns	r1, r3
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	400b      	ands	r3, r1
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	619a      	str	r2, [r3, #24]
}
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b54:	2300      	movs	r3, #0
 8002b56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e29b      	b.n	800309a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8087 	beq.w	8002c7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b70:	4b96      	ldr	r3, [pc, #600]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d00c      	beq.n	8002b96 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7c:	4b93      	ldr	r3, [pc, #588]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d112      	bne.n	8002bae <HAL_RCC_OscConfig+0x62>
 8002b88:	4b90      	ldr	r3, [pc, #576]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b94:	d10b      	bne.n	8002bae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b96:	4b8d      	ldr	r3, [pc, #564]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d06c      	beq.n	8002c7c <HAL_RCC_OscConfig+0x130>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d168      	bne.n	8002c7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e275      	b.n	800309a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x7a>
 8002bb8:	4b84      	ldr	r3, [pc, #528]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a83      	ldr	r2, [pc, #524]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	e02e      	b.n	8002c24 <HAL_RCC_OscConfig+0xd8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x9c>
 8002bce:	4b7f      	ldr	r3, [pc, #508]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a7e      	ldr	r2, [pc, #504]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002bd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b7c      	ldr	r3, [pc, #496]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a7b      	ldr	r2, [pc, #492]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002be0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e01d      	b.n	8002c24 <HAL_RCC_OscConfig+0xd8>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0xc0>
 8002bf2:	4b76      	ldr	r3, [pc, #472]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a75      	ldr	r2, [pc, #468]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b73      	ldr	r3, [pc, #460]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a72      	ldr	r2, [pc, #456]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0xd8>
 8002c0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a6e      	ldr	r2, [pc, #440]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b6c      	ldr	r3, [pc, #432]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a6b      	ldr	r2, [pc, #428]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002c1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d013      	beq.n	8002c54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fc34 	bl	8001498 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c34:	f7fe fc30 	bl	8001498 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	@ 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e229      	b.n	800309a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b61      	ldr	r3, [pc, #388]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0xe8>
 8002c52:	e014      	b.n	8002c7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe fc20 	bl	8001498 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fc1c 	bl	8001498 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	@ 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e215      	b.n	800309a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6e:	4b57      	ldr	r3, [pc, #348]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x110>
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d069      	beq.n	8002d5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c8a:	4b50      	ldr	r3, [pc, #320]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c96:	4b4d      	ldr	r3, [pc, #308]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d11c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x190>
 8002ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d116      	bne.n	8002cdc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cae:	4b47      	ldr	r3, [pc, #284]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x17a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e1e9      	b.n	800309a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc6:	4b41      	ldr	r3, [pc, #260]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	493d      	ldr	r1, [pc, #244]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	e040      	b.n	8002d5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d023      	beq.n	8002d2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce4:	4b39      	ldr	r3, [pc, #228]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a38      	ldr	r2, [pc, #224]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fbd2 	bl	8001498 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf8:	f7fe fbce 	bl	8001498 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1c7      	b.n	800309a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0a:	4b30      	ldr	r3, [pc, #192]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d16:	4b2d      	ldr	r3, [pc, #180]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4929      	ldr	r1, [pc, #164]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
 8002d2a:	e018      	b.n	8002d5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2c:	4b27      	ldr	r3, [pc, #156]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a26      	ldr	r2, [pc, #152]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002d32:	f023 0301 	bic.w	r3, r3, #1
 8002d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe fbae 	bl	8001498 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d40:	f7fe fbaa 	bl	8001498 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1a3      	b.n	800309a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d52:	4b1e      	ldr	r3, [pc, #120]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d038      	beq.n	8002ddc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d019      	beq.n	8002da6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d72:	4b16      	ldr	r3, [pc, #88]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d76:	4a15      	ldr	r2, [pc, #84]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7e:	f7fe fb8b 	bl	8001498 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d86:	f7fe fb87 	bl	8001498 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e180      	b.n	800309a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d98:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x23a>
 8002da4:	e01a      	b.n	8002ddc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da6:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002daa:	4a08      	ldr	r2, [pc, #32]	@ (8002dcc <HAL_RCC_OscConfig+0x280>)
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db2:	f7fe fb71 	bl	8001498 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dba:	f7fe fb6d 	bl	8001498 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d903      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e166      	b.n	800309a <HAL_RCC_OscConfig+0x54e>
 8002dcc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd0:	4b92      	ldr	r3, [pc, #584]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002dd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1ee      	bne.n	8002dba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80a4 	beq.w	8002f32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dea:	4b8c      	ldr	r3, [pc, #560]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10d      	bne.n	8002e12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	4b89      	ldr	r3, [pc, #548]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	4a88      	ldr	r2, [pc, #544]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e02:	4b86      	ldr	r3, [pc, #536]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e12:	4b83      	ldr	r3, [pc, #524]	@ (8003020 <HAL_RCC_OscConfig+0x4d4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d118      	bne.n	8002e50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e1e:	4b80      	ldr	r3, [pc, #512]	@ (8003020 <HAL_RCC_OscConfig+0x4d4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7f      	ldr	r2, [pc, #508]	@ (8003020 <HAL_RCC_OscConfig+0x4d4>)
 8002e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fb35 	bl	8001498 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e32:	f7fe fb31 	bl	8001498 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b64      	cmp	r3, #100	@ 0x64
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e12a      	b.n	800309a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e44:	4b76      	ldr	r3, [pc, #472]	@ (8003020 <HAL_RCC_OscConfig+0x4d4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x31a>
 8002e58:	4b70      	ldr	r3, [pc, #448]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5c:	4a6f      	ldr	r2, [pc, #444]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e64:	e02d      	b.n	8002ec2 <HAL_RCC_OscConfig+0x376>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x33c>
 8002e6e:	4b6b      	ldr	r3, [pc, #428]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e72:	4a6a      	ldr	r2, [pc, #424]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e7a:	4b68      	ldr	r3, [pc, #416]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7e:	4a67      	ldr	r2, [pc, #412]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	f023 0304 	bic.w	r3, r3, #4
 8002e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e86:	e01c      	b.n	8002ec2 <HAL_RCC_OscConfig+0x376>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d10c      	bne.n	8002eaa <HAL_RCC_OscConfig+0x35e>
 8002e90:	4b62      	ldr	r3, [pc, #392]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e94:	4a61      	ldr	r2, [pc, #388]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e9c:	4b5f      	ldr	r3, [pc, #380]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea0:	4a5e      	ldr	r2, [pc, #376]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea8:	e00b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x376>
 8002eaa:	4b5c      	ldr	r3, [pc, #368]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eae:	4a5b      	ldr	r2, [pc, #364]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb6:	4b59      	ldr	r3, [pc, #356]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eba:	4a58      	ldr	r2, [pc, #352]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002ebc:	f023 0304 	bic.w	r3, r3, #4
 8002ec0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d015      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eca:	f7fe fae5 	bl	8001498 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe fae1 	bl	8001498 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e0d8      	b.n	800309a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee8:	4b4c      	ldr	r3, [pc, #304]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ee      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x386>
 8002ef4:	e014      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef6:	f7fe facf 	bl	8001498 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fe facb 	bl	8001498 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0c2      	b.n	800309a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f14:	4b41      	ldr	r3, [pc, #260]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1ee      	bne.n	8002efe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d105      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f26:	4b3d      	ldr	r3, [pc, #244]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	4a3c      	ldr	r2, [pc, #240]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002f2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f30:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80ae 	beq.w	8003098 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f3c:	4b37      	ldr	r3, [pc, #220]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d06d      	beq.n	8003024 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d14b      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f50:	4b32      	ldr	r3, [pc, #200]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a31      	ldr	r2, [pc, #196]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002f56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fa9c 	bl	8001498 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fe fa98 	bl	8001498 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e091      	b.n	800309a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f76:	4b29      	ldr	r3, [pc, #164]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	019b      	lsls	r3, r3, #6
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	041b      	lsls	r3, r3, #16
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa4:	061b      	lsls	r3, r3, #24
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fac:	071b      	lsls	r3, r3, #28
 8002fae:	491b      	ldr	r1, [pc, #108]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb4:	4b19      	ldr	r3, [pc, #100]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a18      	ldr	r2, [pc, #96]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fa6a 	bl	8001498 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7fe fa66 	bl	8001498 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e05f      	b.n	800309a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fda:	4b10      	ldr	r3, [pc, #64]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x47c>
 8002fe6:	e057      	b.n	8003098 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0b      	ldr	r2, [pc, #44]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8002fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fa50 	bl	8001498 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7fe fa4c 	bl	8001498 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e045      	b.n	800309a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300e:	4b03      	ldr	r3, [pc, #12]	@ (800301c <HAL_RCC_OscConfig+0x4d0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4b0>
 800301a:	e03d      	b.n	8003098 <HAL_RCC_OscConfig+0x54c>
 800301c:	40023800 	.word	0x40023800
 8003020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003024:	4b1f      	ldr	r3, [pc, #124]	@ (80030a4 <HAL_RCC_OscConfig+0x558>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d030      	beq.n	8003094 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d129      	bne.n	8003094 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d122      	bne.n	8003094 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003054:	4013      	ands	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800305a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800305c:	4293      	cmp	r3, r2
 800305e:	d119      	bne.n	8003094 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	3b01      	subs	r3, #1
 800306e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d10f      	bne.n	8003094 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d107      	bne.n	8003094 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800

080030a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0d0      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	4b6a      	ldr	r3, [pc, #424]	@ (800326c <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d910      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b67      	ldr	r3, [pc, #412]	@ (800326c <HAL_RCC_ClockConfig+0x1c4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 020f 	bic.w	r2, r3, #15
 80030d6:	4965      	ldr	r1, [pc, #404]	@ (800326c <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b63      	ldr	r3, [pc, #396]	@ (800326c <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0b8      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003108:	4b59      	ldr	r3, [pc, #356]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4a58      	ldr	r2, [pc, #352]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 800310e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003112:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003120:	4b53      	ldr	r3, [pc, #332]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a52      	ldr	r2, [pc, #328]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 8003126:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800312a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4b50      	ldr	r3, [pc, #320]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	494d      	ldr	r1, [pc, #308]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d040      	beq.n	80031cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b47      	ldr	r3, [pc, #284]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d115      	bne.n	800318a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e07f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d107      	bne.n	800317a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316a:	4b41      	ldr	r3, [pc, #260]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e073      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317a:	4b3d      	ldr	r3, [pc, #244]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e06b      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318a:	4b39      	ldr	r3, [pc, #228]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f023 0203 	bic.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4936      	ldr	r1, [pc, #216]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 8003198:	4313      	orrs	r3, r2
 800319a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800319c:	f7fe f97c 	bl	8001498 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a4:	f7fe f978 	bl	8001498 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e053      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 020c 	and.w	r2, r3, #12
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d1eb      	bne.n	80031a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031cc:	4b27      	ldr	r3, [pc, #156]	@ (800326c <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d210      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b24      	ldr	r3, [pc, #144]	@ (800326c <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 020f 	bic.w	r2, r3, #15
 80031e2:	4922      	ldr	r1, [pc, #136]	@ (800326c <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b20      	ldr	r3, [pc, #128]	@ (800326c <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e032      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003208:	4b19      	ldr	r3, [pc, #100]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4916      	ldr	r1, [pc, #88]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003226:	4b12      	ldr	r3, [pc, #72]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	490e      	ldr	r1, [pc, #56]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800323a:	f000 f821 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800323e:	4602      	mov	r2, r0
 8003240:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	490a      	ldr	r1, [pc, #40]	@ (8003274 <HAL_RCC_ClockConfig+0x1cc>)
 800324c:	5ccb      	ldrb	r3, [r1, r3]
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	4a09      	ldr	r2, [pc, #36]	@ (8003278 <HAL_RCC_ClockConfig+0x1d0>)
 8003254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003256:	4b09      	ldr	r3, [pc, #36]	@ (800327c <HAL_RCC_ClockConfig+0x1d4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe f8d8 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40023c00 	.word	0x40023c00
 8003270:	40023800 	.word	0x40023800
 8003274:	080055f8 	.word	0x080055f8
 8003278:	20000000 	.word	0x20000000
 800327c:	20000004 	.word	0x20000004

08003280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003284:	b090      	sub	sp, #64	@ 0x40
 8003286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	637b      	str	r3, [r7, #52]	@ 0x34
 800328c:	2300      	movs	r3, #0
 800328e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003290:	2300      	movs	r3, #0
 8003292:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003298:	4b59      	ldr	r3, [pc, #356]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x180>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d00d      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x40>
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	f200 80a1 	bhi.w	80033ec <HAL_RCC_GetSysClockFreq+0x16c>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x34>
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d003      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0x3a>
 80032b2:	e09b      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b4:	4b53      	ldr	r3, [pc, #332]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x184>)
 80032b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032b8:	e09b      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ba:	4b53      	ldr	r3, [pc, #332]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x188>)
 80032bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032be:	e098      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x180>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x180>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d028      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x180>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	099b      	lsrs	r3, r3, #6
 80032dc:	2200      	movs	r2, #0
 80032de:	623b      	str	r3, [r7, #32]
 80032e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032e8:	2100      	movs	r1, #0
 80032ea:	4b47      	ldr	r3, [pc, #284]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x188>)
 80032ec:	fb03 f201 	mul.w	r2, r3, r1
 80032f0:	2300      	movs	r3, #0
 80032f2:	fb00 f303 	mul.w	r3, r0, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	4a43      	ldr	r2, [pc, #268]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x188>)
 80032fa:	fba0 1202 	umull	r1, r2, r0, r2
 80032fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003300:	460a      	mov	r2, r1
 8003302:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003304:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003306:	4413      	add	r3, r2
 8003308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800330a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330c:	2200      	movs	r2, #0
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	61fa      	str	r2, [r7, #28]
 8003312:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003316:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800331a:	f7fc ff8d 	bl	8000238 <__aeabi_uldivmod>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4613      	mov	r3, r2
 8003324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003326:	e053      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003328:	4b35      	ldr	r3, [pc, #212]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x180>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	099b      	lsrs	r3, r3, #6
 800332e:	2200      	movs	r2, #0
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	617a      	str	r2, [r7, #20]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800333a:	f04f 0b00 	mov.w	fp, #0
 800333e:	4652      	mov	r2, sl
 8003340:	465b      	mov	r3, fp
 8003342:	f04f 0000 	mov.w	r0, #0
 8003346:	f04f 0100 	mov.w	r1, #0
 800334a:	0159      	lsls	r1, r3, #5
 800334c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003350:	0150      	lsls	r0, r2, #5
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	ebb2 080a 	subs.w	r8, r2, sl
 800335a:	eb63 090b 	sbc.w	r9, r3, fp
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800336a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800336e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003372:	ebb2 0408 	subs.w	r4, r2, r8
 8003376:	eb63 0509 	sbc.w	r5, r3, r9
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	00eb      	lsls	r3, r5, #3
 8003384:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003388:	00e2      	lsls	r2, r4, #3
 800338a:	4614      	mov	r4, r2
 800338c:	461d      	mov	r5, r3
 800338e:	eb14 030a 	adds.w	r3, r4, sl
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	eb45 030b 	adc.w	r3, r5, fp
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033a6:	4629      	mov	r1, r5
 80033a8:	028b      	lsls	r3, r1, #10
 80033aa:	4621      	mov	r1, r4
 80033ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033b0:	4621      	mov	r1, r4
 80033b2:	028a      	lsls	r2, r1, #10
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ba:	2200      	movs	r2, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	60fa      	str	r2, [r7, #12]
 80033c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033c4:	f7fc ff38 	bl	8000238 <__aeabi_uldivmod>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4613      	mov	r3, r2
 80033ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x180>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	3301      	adds	r3, #1
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80033e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033ea:	e002      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033ec:	4b05      	ldr	r3, [pc, #20]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x184>)
 80033ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3740      	adds	r7, #64	@ 0x40
 80033f8:	46bd      	mov	sp, r7
 80033fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800
 8003404:	00f42400 	.word	0x00f42400
 8003408:	017d7840 	.word	0x017d7840

0800340c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e09d      	b.n	800355a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	2b00      	cmp	r3, #0
 8003424:	d108      	bne.n	8003438 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800342e:	d009      	beq.n	8003444 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	61da      	str	r2, [r3, #28]
 8003436:	e005      	b.n	8003444 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fd fcec 	bl	8000e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800347a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003484:	d902      	bls.n	800348c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	e002      	b.n	8003492 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800348c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003490:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800349a:	d007      	beq.n	80034ac <HAL_SPI_Init+0xa0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034a4:	d002      	beq.n	80034ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ee:	ea42 0103 	orr.w	r1, r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	0c1b      	lsrs	r3, r3, #16
 8003508:	f003 0204 	and.w	r2, r3, #4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003528:	ea42 0103 	orr.w	r1, r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003548:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b088      	sub	sp, #32
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_SPI_Transmit+0x22>
 8003580:	2302      	movs	r3, #2
 8003582:	e15f      	b.n	8003844 <HAL_SPI_Transmit+0x2e2>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800358c:	f7fd ff84 	bl	8001498 <HAL_GetTick>
 8003590:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d002      	beq.n	80035a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
 80035a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035a6:	e148      	b.n	800383a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_SPI_Transmit+0x52>
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035b8:	e13f      	b.n	800383a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2203      	movs	r2, #3
 80035be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	88fa      	ldrh	r2, [r7, #6]
 80035d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	88fa      	ldrh	r2, [r7, #6]
 80035d8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003604:	d10f      	bne.n	8003626 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003614:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003624:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003630:	2b40      	cmp	r3, #64	@ 0x40
 8003632:	d007      	beq.n	8003644 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800364c:	d94f      	bls.n	80036ee <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_SPI_Transmit+0xfa>
 8003656:	8afb      	ldrh	r3, [r7, #22]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d142      	bne.n	80036e2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003660:	881a      	ldrh	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366c:	1c9a      	adds	r2, r3, #2
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003680:	e02f      	b.n	80036e2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d112      	bne.n	80036b6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a0:	1c9a      	adds	r2, r3, #2
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036b4:	e015      	b.n	80036e2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b6:	f7fd feef 	bl	8001498 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d803      	bhi.n	80036ce <HAL_SPI_Transmit+0x16c>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d102      	bne.n	80036d4 <HAL_SPI_Transmit+0x172>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80036e0:	e0ab      	b.n	800383a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1ca      	bne.n	8003682 <HAL_SPI_Transmit+0x120>
 80036ec:	e080      	b.n	80037f0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_SPI_Transmit+0x19a>
 80036f6:	8afb      	ldrh	r3, [r7, #22]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d174      	bne.n	80037e6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d912      	bls.n	800372c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370a:	881a      	ldrh	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003716:	1c9a      	adds	r2, r3, #2
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b02      	subs	r3, #2
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800372a:	e05c      	b.n	80037e6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	330c      	adds	r3, #12
 8003736:	7812      	ldrb	r2, [r2, #0]
 8003738:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003752:	e048      	b.n	80037e6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b02      	cmp	r3, #2
 8003760:	d12b      	bne.n	80037ba <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	d912      	bls.n	8003792 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003770:	881a      	ldrh	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377c:	1c9a      	adds	r2, r3, #2
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b02      	subs	r3, #2
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003790:	e029      	b.n	80037e6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	7812      	ldrb	r2, [r2, #0]
 800379e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037b8:	e015      	b.n	80037e6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ba:	f7fd fe6d 	bl	8001498 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d803      	bhi.n	80037d2 <HAL_SPI_Transmit+0x270>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d102      	bne.n	80037d8 <HAL_SPI_Transmit+0x276>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d106      	bne.n	80037e6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80037e4:	e029      	b.n	800383a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1b1      	bne.n	8003754 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	6839      	ldr	r1, [r7, #0]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 fd1d 	bl	8004234 <SPI_EndRxTxTransaction>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10a      	bne.n	8003824 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e003      	b.n	800383a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003842:	7ffb      	ldrb	r3, [r7, #31]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3720      	adds	r7, #32
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	4613      	mov	r3, r2
 800385a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b01      	cmp	r3, #1
 800386a:	d002      	beq.n	8003872 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800386c:	2302      	movs	r3, #2
 800386e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003870:	e11a      	b.n	8003aa8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800387a:	d112      	bne.n	80038a2 <HAL_SPI_Receive+0x56>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10e      	bne.n	80038a2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2204      	movs	r2, #4
 8003888:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800388c:	88fa      	ldrh	r2, [r7, #6]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	4613      	mov	r3, r2
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f90e 	bl	8003aba <HAL_SPI_TransmitReceive>
 800389e:	4603      	mov	r3, r0
 80038a0:	e107      	b.n	8003ab2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_SPI_Receive+0x64>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e100      	b.n	8003ab2 <HAL_SPI_Receive+0x266>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038b8:	f7fd fdee 	bl	8001498 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_SPI_Receive+0x7e>
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038ce:	e0eb      	b.n	8003aa8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2204      	movs	r2, #4
 80038d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	88fa      	ldrh	r2, [r7, #6]
 80038e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800391a:	d908      	bls.n	800392e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800392a:	605a      	str	r2, [r3, #4]
 800392c:	e007      	b.n	800393e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800393c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003946:	d10f      	bne.n	8003968 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003956:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003966:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003972:	2b40      	cmp	r3, #64	@ 0x40
 8003974:	d007      	beq.n	8003986 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003984:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800398e:	d86f      	bhi.n	8003a70 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003990:	e034      	b.n	80039fc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d117      	bne.n	80039d0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f103 020c 	add.w	r2, r3, #12
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	7812      	ldrb	r2, [r2, #0]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80039ce:	e015      	b.n	80039fc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d0:	f7fd fd62 	bl	8001498 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d803      	bhi.n	80039e8 <HAL_SPI_Receive+0x19c>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e6:	d102      	bne.n	80039ee <HAL_SPI_Receive+0x1a2>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80039fa:	e055      	b.n	8003aa8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1c4      	bne.n	8003992 <HAL_SPI_Receive+0x146>
 8003a08:	e038      	b.n	8003a7c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d115      	bne.n	8003a44 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	b292      	uxth	r2, r2
 8003a24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2a:	1c9a      	adds	r2, r3, #2
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003a42:	e015      	b.n	8003a70 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a44:	f7fd fd28 	bl	8001498 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d803      	bhi.n	8003a5c <HAL_SPI_Receive+0x210>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d102      	bne.n	8003a62 <HAL_SPI_Receive+0x216>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003a6e:	e01b      	b.n	8003aa8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1c6      	bne.n	8003a0a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	6839      	ldr	r1, [r7, #0]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fb5b 	bl	800413c <SPI_EndRxTransaction>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
 8003a9e:	e003      	b.n	8003aa8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b08a      	sub	sp, #40	@ 0x28
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_SPI_TransmitReceive+0x26>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e20a      	b.n	8003ef6 <HAL_SPI_TransmitReceive+0x43c>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ae8:	f7fd fcd6 	bl	8001498 <HAL_GetTick>
 8003aec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003af4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003afc:	887b      	ldrh	r3, [r7, #2]
 8003afe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b00:	887b      	ldrh	r3, [r7, #2]
 8003b02:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b04:	7efb      	ldrb	r3, [r7, #27]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d00e      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x6e>
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b10:	d106      	bne.n	8003b20 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <HAL_SPI_TransmitReceive+0x66>
 8003b1a:	7efb      	ldrb	r3, [r7, #27]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d003      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
 8003b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003b26:	e1e0      	b.n	8003eea <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_SPI_TransmitReceive+0x80>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <HAL_SPI_TransmitReceive+0x80>
 8003b34:	887b      	ldrh	r3, [r7, #2]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003b40:	e1d3      	b.n	8003eea <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d003      	beq.n	8003b56 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2205      	movs	r2, #5
 8003b52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	887a      	ldrh	r2, [r7, #2]
 8003b66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	887a      	ldrh	r2, [r7, #2]
 8003b6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	887a      	ldrh	r2, [r7, #2]
 8003b82:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b98:	d802      	bhi.n	8003ba0 <HAL_SPI_TransmitReceive+0xe6>
 8003b9a:	8a3b      	ldrh	r3, [r7, #16]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d908      	bls.n	8003bb2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bae:	605a      	str	r2, [r3, #4]
 8003bb0:	e007      	b.n	8003bc2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bc0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bcc:	2b40      	cmp	r3, #64	@ 0x40
 8003bce:	d007      	beq.n	8003be0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003be8:	f240 8081 	bls.w	8003cee <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_SPI_TransmitReceive+0x140>
 8003bf4:	8a7b      	ldrh	r3, [r7, #18]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d16d      	bne.n	8003cd6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfe:	881a      	ldrh	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0a:	1c9a      	adds	r2, r3, #2
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c1e:	e05a      	b.n	8003cd6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d11b      	bne.n	8003c66 <HAL_SPI_TransmitReceive+0x1ac>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d016      	beq.n	8003c66 <HAL_SPI_TransmitReceive+0x1ac>
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d113      	bne.n	8003c66 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c42:	881a      	ldrh	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4e:	1c9a      	adds	r2, r3, #2
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d11c      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x1f4>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d016      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	b292      	uxth	r2, r2
 8003c8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	1c9a      	adds	r2, r3, #2
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003caa:	2301      	movs	r3, #1
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cae:	f7fd fbf3 	bl	8001498 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d80b      	bhi.n	8003cd6 <HAL_SPI_TransmitReceive+0x21c>
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d007      	beq.n	8003cd6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003cd4:	e109      	b.n	8003eea <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d19f      	bne.n	8003c20 <HAL_SPI_TransmitReceive+0x166>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d199      	bne.n	8003c20 <HAL_SPI_TransmitReceive+0x166>
 8003cec:	e0e3      	b.n	8003eb6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_SPI_TransmitReceive+0x244>
 8003cf6:	8a7b      	ldrh	r3, [r7, #18]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	f040 80cf 	bne.w	8003e9c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d912      	bls.n	8003d2e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0c:	881a      	ldrh	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d18:	1c9a      	adds	r2, r3, #2
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b02      	subs	r3, #2
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d2c:	e0b6      	b.n	8003e9c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	330c      	adds	r3, #12
 8003d38:	7812      	ldrb	r2, [r2, #0]
 8003d3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d54:	e0a2      	b.n	8003e9c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d134      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x314>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d02f      	beq.n	8003dce <HAL_SPI_TransmitReceive+0x314>
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d12c      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d912      	bls.n	8003da4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d82:	881a      	ldrh	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8e:	1c9a      	adds	r2, r3, #2
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b02      	subs	r3, #2
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003da2:	e012      	b.n	8003dca <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	7812      	ldrb	r2, [r2, #0]
 8003db0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d148      	bne.n	8003e6e <HAL_SPI_TransmitReceive+0x3b4>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d042      	beq.n	8003e6e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d923      	bls.n	8003e3c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	b292      	uxth	r2, r2
 8003e00:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	1c9a      	adds	r2, r3, #2
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b02      	subs	r3, #2
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d81f      	bhi.n	8003e6a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	e016      	b.n	8003e6a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f103 020c 	add.w	r2, r3, #12
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e48:	7812      	ldrb	r2, [r2, #0]
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e6e:	f7fd fb13 	bl	8001498 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d803      	bhi.n	8003e86 <HAL_SPI_TransmitReceive+0x3cc>
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d102      	bne.n	8003e8c <HAL_SPI_TransmitReceive+0x3d2>
 8003e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d107      	bne.n	8003e9c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003e9a:	e026      	b.n	8003eea <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f47f af57 	bne.w	8003d56 <HAL_SPI_TransmitReceive+0x29c>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f47f af50 	bne.w	8003d56 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 f9ba 	bl	8004234 <SPI_EndRxTxTransaction>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee0:	e003      	b.n	8003eea <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003ef2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3728      	adds	r7, #40	@ 0x28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f10:	f7fd fac2 	bl	8001498 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f20:	f7fd faba 	bl	8001498 <HAL_GetTick>
 8003f24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f26:	4b39      	ldr	r3, [pc, #228]	@ (800400c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	015b      	lsls	r3, r3, #5
 8003f2c:	0d1b      	lsrs	r3, r3, #20
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	fb02 f303 	mul.w	r3, r2, r3
 8003f34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f36:	e054      	b.n	8003fe2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3e:	d050      	beq.n	8003fe2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f40:	f7fd faaa 	bl	8001498 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d902      	bls.n	8003f56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d13d      	bne.n	8003fd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f6e:	d111      	bne.n	8003f94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f78:	d004      	beq.n	8003f84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f82:	d107      	bne.n	8003f94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f9c:	d10f      	bne.n	8003fbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e017      	b.n	8004002 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4013      	ands	r3, r2
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	bf0c      	ite	eq
 8003ff2:	2301      	moveq	r3, #1
 8003ff4:	2300      	movne	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d19b      	bne.n	8003f38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000000 	.word	0x20000000

08004010 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	@ 0x28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004022:	f7fd fa39 	bl	8001498 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	4413      	add	r3, r2
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004032:	f7fd fa31 	bl	8001498 <HAL_GetTick>
 8004036:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004040:	4b3d      	ldr	r3, [pc, #244]	@ (8004138 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	00da      	lsls	r2, r3, #3
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	0d1b      	lsrs	r3, r3, #20
 8004050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004058:	e060      	b.n	800411c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004060:	d107      	bne.n	8004072 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d104      	bne.n	8004072 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004070:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d050      	beq.n	800411c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800407a:	f7fd fa0d 	bl	8001498 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004086:	429a      	cmp	r2, r3
 8004088:	d902      	bls.n	8004090 <SPI_WaitFifoStateUntilTimeout+0x80>
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	2b00      	cmp	r3, #0
 800408e:	d13d      	bne.n	800410c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800409e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040a8:	d111      	bne.n	80040ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040b2:	d004      	beq.n	80040be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040bc:	d107      	bne.n	80040ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d6:	d10f      	bne.n	80040f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e010      	b.n	800412e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	3b01      	subs	r3, #1
 800411a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4013      	ands	r3, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	d196      	bne.n	800405a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3728      	adds	r7, #40	@ 0x28
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000000 	.word	0x20000000

0800413c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004150:	d111      	bne.n	8004176 <SPI_EndRxTransaction+0x3a>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800415a:	d004      	beq.n	8004166 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004164:	d107      	bne.n	8004176 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004174:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800417e:	d112      	bne.n	80041a6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2200      	movs	r2, #0
 8004188:	2180      	movs	r1, #128	@ 0x80
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f7ff feb8 	bl	8003f00 <SPI_WaitFlagStateUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d021      	beq.n	80041da <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419a:	f043 0220 	orr.w	r2, r3, #32
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e03d      	b.n	8004222 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041a6:	4b21      	ldr	r3, [pc, #132]	@ (800422c <SPI_EndRxTransaction+0xf0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a21      	ldr	r2, [pc, #132]	@ (8004230 <SPI_EndRxTransaction+0xf4>)
 80041ac:	fba2 2303 	umull	r2, r3, r2, r3
 80041b0:	0d5b      	lsrs	r3, r3, #21
 80041b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d2:	2b80      	cmp	r3, #128	@ 0x80
 80041d4:	d0f2      	beq.n	80041bc <SPI_EndRxTransaction+0x80>
 80041d6:	e000      	b.n	80041da <SPI_EndRxTransaction+0x9e>
        break;
 80041d8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041e2:	d11d      	bne.n	8004220 <SPI_EndRxTransaction+0xe4>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041ec:	d004      	beq.n	80041f8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041f6:	d113      	bne.n	8004220 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2200      	movs	r2, #0
 8004200:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f7ff ff03 	bl	8004010 <SPI_WaitFifoStateUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004214:	f043 0220 	orr.w	r2, r3, #32
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e000      	b.n	8004222 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000000 	.word	0x20000000
 8004230:	165e9f81 	.word	0x165e9f81

08004234 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2200      	movs	r2, #0
 8004248:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7ff fedf 	bl	8004010 <SPI_WaitFifoStateUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800425c:	f043 0220 	orr.w	r2, r3, #32
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e046      	b.n	80042f6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004268:	4b25      	ldr	r3, [pc, #148]	@ (8004300 <SPI_EndRxTxTransaction+0xcc>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a25      	ldr	r2, [pc, #148]	@ (8004304 <SPI_EndRxTxTransaction+0xd0>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	0d5b      	lsrs	r3, r3, #21
 8004274:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004278:	fb02 f303 	mul.w	r3, r2, r3
 800427c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004286:	d112      	bne.n	80042ae <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2200      	movs	r2, #0
 8004290:	2180      	movs	r1, #128	@ 0x80
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff fe34 	bl	8003f00 <SPI_WaitFlagStateUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d016      	beq.n	80042cc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a2:	f043 0220 	orr.w	r2, r3, #32
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e023      	b.n	80042f6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c4:	2b80      	cmp	r3, #128	@ 0x80
 80042c6:	d0f2      	beq.n	80042ae <SPI_EndRxTxTransaction+0x7a>
 80042c8:	e000      	b.n	80042cc <SPI_EndRxTxTransaction+0x98>
        break;
 80042ca:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f7ff fe99 	bl	8004010 <SPI_WaitFifoStateUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e8:	f043 0220 	orr.w	r2, r3, #32
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e000      	b.n	80042f6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000000 	.word	0x20000000
 8004304:	165e9f81 	.word	0x165e9f81

08004308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e049      	b.n	80043ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fc ff88 	bl	8001244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	4619      	mov	r1, r3
 8004346:	4610      	mov	r0, r2
 8004348:	f000 fca8 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e049      	b.n	800445c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f841 	bl	8004464 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3304      	adds	r3, #4
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f000 fc51 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d109      	bne.n	800449c <HAL_TIM_PWM_Start+0x24>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	bf14      	ite	ne
 8004494:	2301      	movne	r3, #1
 8004496:	2300      	moveq	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	e03c      	b.n	8004516 <HAL_TIM_PWM_Start+0x9e>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d109      	bne.n	80044b6 <HAL_TIM_PWM_Start+0x3e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	bf14      	ite	ne
 80044ae:	2301      	movne	r3, #1
 80044b0:	2300      	moveq	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	e02f      	b.n	8004516 <HAL_TIM_PWM_Start+0x9e>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d109      	bne.n	80044d0 <HAL_TIM_PWM_Start+0x58>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e022      	b.n	8004516 <HAL_TIM_PWM_Start+0x9e>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	d109      	bne.n	80044ea <HAL_TIM_PWM_Start+0x72>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	bf14      	ite	ne
 80044e2:	2301      	movne	r3, #1
 80044e4:	2300      	moveq	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	e015      	b.n	8004516 <HAL_TIM_PWM_Start+0x9e>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d109      	bne.n	8004504 <HAL_TIM_PWM_Start+0x8c>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e008      	b.n	8004516 <HAL_TIM_PWM_Start+0x9e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	bf14      	ite	ne
 8004510:	2301      	movne	r3, #1
 8004512:	2300      	moveq	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e092      	b.n	8004644 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <HAL_TIM_PWM_Start+0xb6>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800452c:	e023      	b.n	8004576 <HAL_TIM_PWM_Start+0xfe>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b04      	cmp	r3, #4
 8004532:	d104      	bne.n	800453e <HAL_TIM_PWM_Start+0xc6>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800453c:	e01b      	b.n	8004576 <HAL_TIM_PWM_Start+0xfe>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d104      	bne.n	800454e <HAL_TIM_PWM_Start+0xd6>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800454c:	e013      	b.n	8004576 <HAL_TIM_PWM_Start+0xfe>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b0c      	cmp	r3, #12
 8004552:	d104      	bne.n	800455e <HAL_TIM_PWM_Start+0xe6>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800455c:	e00b      	b.n	8004576 <HAL_TIM_PWM_Start+0xfe>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b10      	cmp	r3, #16
 8004562:	d104      	bne.n	800456e <HAL_TIM_PWM_Start+0xf6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800456c:	e003      	b.n	8004576 <HAL_TIM_PWM_Start+0xfe>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2202      	movs	r2, #2
 8004572:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2201      	movs	r2, #1
 800457c:	6839      	ldr	r1, [r7, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f000 ff30 	bl	80053e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a30      	ldr	r2, [pc, #192]	@ (800464c <HAL_TIM_PWM_Start+0x1d4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d004      	beq.n	8004598 <HAL_TIM_PWM_Start+0x120>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a2f      	ldr	r2, [pc, #188]	@ (8004650 <HAL_TIM_PWM_Start+0x1d8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d101      	bne.n	800459c <HAL_TIM_PWM_Start+0x124>
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <HAL_TIM_PWM_Start+0x126>
 800459c:	2300      	movs	r3, #0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a25      	ldr	r2, [pc, #148]	@ (800464c <HAL_TIM_PWM_Start+0x1d4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <HAL_TIM_PWM_Start+0x18a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c4:	d01d      	beq.n	8004602 <HAL_TIM_PWM_Start+0x18a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a22      	ldr	r2, [pc, #136]	@ (8004654 <HAL_TIM_PWM_Start+0x1dc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d018      	beq.n	8004602 <HAL_TIM_PWM_Start+0x18a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a20      	ldr	r2, [pc, #128]	@ (8004658 <HAL_TIM_PWM_Start+0x1e0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <HAL_TIM_PWM_Start+0x18a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1f      	ldr	r2, [pc, #124]	@ (800465c <HAL_TIM_PWM_Start+0x1e4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <HAL_TIM_PWM_Start+0x18a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a19      	ldr	r2, [pc, #100]	@ (8004650 <HAL_TIM_PWM_Start+0x1d8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_TIM_PWM_Start+0x18a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004660 <HAL_TIM_PWM_Start+0x1e8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_TIM_PWM_Start+0x18a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a19      	ldr	r2, [pc, #100]	@ (8004664 <HAL_TIM_PWM_Start+0x1ec>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d115      	bne.n	800462e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	4b17      	ldr	r3, [pc, #92]	@ (8004668 <HAL_TIM_PWM_Start+0x1f0>)
 800460a:	4013      	ands	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b06      	cmp	r3, #6
 8004612:	d015      	beq.n	8004640 <HAL_TIM_PWM_Start+0x1c8>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800461a:	d011      	beq.n	8004640 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462c:	e008      	b.n	8004640 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0201 	orr.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e000      	b.n	8004642 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004640:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40010000 	.word	0x40010000
 8004650:	40010400 	.word	0x40010400
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800
 800465c:	40000c00 	.word	0x40000c00
 8004660:	40014000 	.word	0x40014000
 8004664:	40001800 	.word	0x40001800
 8004668:	00010007 	.word	0x00010007

0800466c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d020      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01b      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0202 	mvn.w	r2, #2
 80046a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fad2 	bl	8004c60 <HAL_TIM_IC_CaptureCallback>
 80046bc:	e005      	b.n	80046ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fac4 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fad5 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d020      	beq.n	800471c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01b      	beq.n	800471c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0204 	mvn.w	r2, #4
 80046ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 faac 	bl	8004c60 <HAL_TIM_IC_CaptureCallback>
 8004708:	e005      	b.n	8004716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fa9e 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 faaf 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d020      	beq.n	8004768 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01b      	beq.n	8004768 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0208 	mvn.w	r2, #8
 8004738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2204      	movs	r2, #4
 800473e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fa86 	bl	8004c60 <HAL_TIM_IC_CaptureCallback>
 8004754:	e005      	b.n	8004762 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fa78 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 fa89 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	d020      	beq.n	80047b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01b      	beq.n	80047b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0210 	mvn.w	r2, #16
 8004784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2208      	movs	r2, #8
 800478a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fa60 	bl	8004c60 <HAL_TIM_IC_CaptureCallback>
 80047a0:	e005      	b.n	80047ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fa52 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fa63 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00c      	beq.n	80047d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0201 	mvn.w	r2, #1
 80047d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fa30 	bl	8004c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d104      	bne.n	80047ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00c      	beq.n	8004806 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80047fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fead 	bl	8005560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00c      	beq.n	800482a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fea5 	bl	8005574 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00c      	beq.n	800484e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d007      	beq.n	800484e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fa1d 	bl	8004c88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f003 0320 	and.w	r3, r3, #32
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00c      	beq.n	8004872 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b00      	cmp	r3, #0
 8004860:	d007      	beq.n	8004872 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f06f 0220 	mvn.w	r2, #32
 800486a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fe6d 	bl	800554c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004896:	2302      	movs	r3, #2
 8004898:	e0ff      	b.n	8004a9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b14      	cmp	r3, #20
 80048a6:	f200 80f0 	bhi.w	8004a8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048aa:	a201      	add	r2, pc, #4	@ (adr r2, 80048b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	08004905 	.word	0x08004905
 80048b4:	08004a8b 	.word	0x08004a8b
 80048b8:	08004a8b 	.word	0x08004a8b
 80048bc:	08004a8b 	.word	0x08004a8b
 80048c0:	08004945 	.word	0x08004945
 80048c4:	08004a8b 	.word	0x08004a8b
 80048c8:	08004a8b 	.word	0x08004a8b
 80048cc:	08004a8b 	.word	0x08004a8b
 80048d0:	08004987 	.word	0x08004987
 80048d4:	08004a8b 	.word	0x08004a8b
 80048d8:	08004a8b 	.word	0x08004a8b
 80048dc:	08004a8b 	.word	0x08004a8b
 80048e0:	080049c7 	.word	0x080049c7
 80048e4:	08004a8b 	.word	0x08004a8b
 80048e8:	08004a8b 	.word	0x08004a8b
 80048ec:	08004a8b 	.word	0x08004a8b
 80048f0:	08004a09 	.word	0x08004a09
 80048f4:	08004a8b 	.word	0x08004a8b
 80048f8:	08004a8b 	.word	0x08004a8b
 80048fc:	08004a8b 	.word	0x08004a8b
 8004900:	08004a49 	.word	0x08004a49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fa72 	bl	8004df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0208 	orr.w	r2, r2, #8
 800491e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0204 	bic.w	r2, r2, #4
 800492e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6999      	ldr	r1, [r3, #24]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	619a      	str	r2, [r3, #24]
      break;
 8004942:	e0a5      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fac4 	bl	8004ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800495e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800496e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6999      	ldr	r1, [r3, #24]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	021a      	lsls	r2, r3, #8
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	619a      	str	r2, [r3, #24]
      break;
 8004984:	e084      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fb1b 	bl	8004fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0208 	orr.w	r2, r2, #8
 80049a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69da      	ldr	r2, [r3, #28]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0204 	bic.w	r2, r2, #4
 80049b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69d9      	ldr	r1, [r3, #28]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	61da      	str	r2, [r3, #28]
      break;
 80049c4:	e064      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fb71 	bl	80050b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69d9      	ldr	r1, [r3, #28]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	021a      	lsls	r2, r3, #8
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	61da      	str	r2, [r3, #28]
      break;
 8004a06:	e043      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fba8 	bl	8005164 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0208 	orr.w	r2, r2, #8
 8004a22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0204 	bic.w	r2, r2, #4
 8004a32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004a46:	e023      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fbda 	bl	8005208 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	021a      	lsls	r2, r3, #8
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004a88:	e002      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop

08004aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e0b4      	b.n	8004c2a <HAL_TIM_ConfigClockSource+0x186>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	4b56      	ldr	r3, [pc, #344]	@ (8004c34 <HAL_TIM_ConfigClockSource+0x190>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004af8:	d03e      	beq.n	8004b78 <HAL_TIM_ConfigClockSource+0xd4>
 8004afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004afe:	f200 8087 	bhi.w	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b06:	f000 8086 	beq.w	8004c16 <HAL_TIM_ConfigClockSource+0x172>
 8004b0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b0e:	d87f      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b70      	cmp	r3, #112	@ 0x70
 8004b12:	d01a      	beq.n	8004b4a <HAL_TIM_ConfigClockSource+0xa6>
 8004b14:	2b70      	cmp	r3, #112	@ 0x70
 8004b16:	d87b      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b60      	cmp	r3, #96	@ 0x60
 8004b1a:	d050      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x11a>
 8004b1c:	2b60      	cmp	r3, #96	@ 0x60
 8004b1e:	d877      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b20:	2b50      	cmp	r3, #80	@ 0x50
 8004b22:	d03c      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0xfa>
 8004b24:	2b50      	cmp	r3, #80	@ 0x50
 8004b26:	d873      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b28:	2b40      	cmp	r3, #64	@ 0x40
 8004b2a:	d058      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x13a>
 8004b2c:	2b40      	cmp	r3, #64	@ 0x40
 8004b2e:	d86f      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b30      	cmp	r3, #48	@ 0x30
 8004b32:	d064      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b34:	2b30      	cmp	r3, #48	@ 0x30
 8004b36:	d86b      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d060      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d867      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d05c      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d05a      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b48:	e062      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b5a:	f000 fc23 	bl	80053a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	609a      	str	r2, [r3, #8]
      break;
 8004b76:	e04f      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b88:	f000 fc0c 	bl	80053a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b9a:	609a      	str	r2, [r3, #8]
      break;
 8004b9c:	e03c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004baa:	461a      	mov	r2, r3
 8004bac:	f000 fb80 	bl	80052b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2150      	movs	r1, #80	@ 0x50
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fbd9 	bl	800536e <TIM_ITRx_SetConfig>
      break;
 8004bbc:	e02c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f000 fb9f 	bl	800530e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2160      	movs	r1, #96	@ 0x60
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fbc9 	bl	800536e <TIM_ITRx_SetConfig>
      break;
 8004bdc:	e01c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bea:	461a      	mov	r2, r3
 8004bec:	f000 fb60 	bl	80052b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2140      	movs	r1, #64	@ 0x40
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fbb9 	bl	800536e <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e00c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f000 fbb0 	bl	800536e <TIM_ITRx_SetConfig>
      break;
 8004c0e:	e003      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
      break;
 8004c14:	e000      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	fffeff88 	.word	0xfffeff88

08004c38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a46      	ldr	r2, [pc, #280]	@ (8004dc8 <TIM_Base_SetConfig+0x12c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d013      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cba:	d00f      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a43      	ldr	r2, [pc, #268]	@ (8004dcc <TIM_Base_SetConfig+0x130>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a42      	ldr	r2, [pc, #264]	@ (8004dd0 <TIM_Base_SetConfig+0x134>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d007      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a41      	ldr	r2, [pc, #260]	@ (8004dd4 <TIM_Base_SetConfig+0x138>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a40      	ldr	r2, [pc, #256]	@ (8004dd8 <TIM_Base_SetConfig+0x13c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d108      	bne.n	8004cee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a35      	ldr	r2, [pc, #212]	@ (8004dc8 <TIM_Base_SetConfig+0x12c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d02b      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cfc:	d027      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a32      	ldr	r2, [pc, #200]	@ (8004dcc <TIM_Base_SetConfig+0x130>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d023      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a31      	ldr	r2, [pc, #196]	@ (8004dd0 <TIM_Base_SetConfig+0x134>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01f      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a30      	ldr	r2, [pc, #192]	@ (8004dd4 <TIM_Base_SetConfig+0x138>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01b      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a2f      	ldr	r2, [pc, #188]	@ (8004dd8 <TIM_Base_SetConfig+0x13c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d017      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a2e      	ldr	r2, [pc, #184]	@ (8004ddc <TIM_Base_SetConfig+0x140>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d013      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a2d      	ldr	r2, [pc, #180]	@ (8004de0 <TIM_Base_SetConfig+0x144>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00f      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a2c      	ldr	r2, [pc, #176]	@ (8004de4 <TIM_Base_SetConfig+0x148>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a2b      	ldr	r2, [pc, #172]	@ (8004de8 <TIM_Base_SetConfig+0x14c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d007      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a2a      	ldr	r2, [pc, #168]	@ (8004dec <TIM_Base_SetConfig+0x150>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a29      	ldr	r2, [pc, #164]	@ (8004df0 <TIM_Base_SetConfig+0x154>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d108      	bne.n	8004d60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a10      	ldr	r2, [pc, #64]	@ (8004dc8 <TIM_Base_SetConfig+0x12c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_Base_SetConfig+0xf8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a12      	ldr	r2, [pc, #72]	@ (8004dd8 <TIM_Base_SetConfig+0x13c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d103      	bne.n	8004d9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d105      	bne.n	8004dba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f023 0201 	bic.w	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	611a      	str	r2, [r3, #16]
  }
}
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800
 8004dd4:	40000c00 	.word	0x40000c00
 8004dd8:	40010400 	.word	0x40010400
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40014400 	.word	0x40014400
 8004de4:	40014800 	.word	0x40014800
 8004de8:	40001800 	.word	0x40001800
 8004dec:	40001c00 	.word	0x40001c00
 8004df0:	40002000 	.word	0x40002000

08004df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	f023 0201 	bic.w	r2, r3, #1
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8004ecc <TIM_OC1_SetConfig+0xd8>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0303 	bic.w	r3, r3, #3
 8004e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f023 0302 	bic.w	r3, r3, #2
 8004e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a21      	ldr	r2, [pc, #132]	@ (8004ed0 <TIM_OC1_SetConfig+0xdc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_OC1_SetConfig+0x64>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a20      	ldr	r2, [pc, #128]	@ (8004ed4 <TIM_OC1_SetConfig+0xe0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d10c      	bne.n	8004e72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f023 0308 	bic.w	r3, r3, #8
 8004e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f023 0304 	bic.w	r3, r3, #4
 8004e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a16      	ldr	r2, [pc, #88]	@ (8004ed0 <TIM_OC1_SetConfig+0xdc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <TIM_OC1_SetConfig+0x8e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a15      	ldr	r2, [pc, #84]	@ (8004ed4 <TIM_OC1_SetConfig+0xe0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d111      	bne.n	8004ea6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	621a      	str	r2, [r3, #32]
}
 8004ec0:	bf00      	nop
 8004ec2:	371c      	adds	r7, #28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	fffeff8f 	.word	0xfffeff8f
 8004ed0:	40010000 	.word	0x40010000
 8004ed4:	40010400 	.word	0x40010400

08004ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f023 0210 	bic.w	r2, r3, #16
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4b2e      	ldr	r3, [pc, #184]	@ (8004fbc <TIM_OC2_SetConfig+0xe4>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f023 0320 	bic.w	r3, r3, #32
 8004f22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a23      	ldr	r2, [pc, #140]	@ (8004fc0 <TIM_OC2_SetConfig+0xe8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_OC2_SetConfig+0x68>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a22      	ldr	r2, [pc, #136]	@ (8004fc4 <TIM_OC2_SetConfig+0xec>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10d      	bne.n	8004f5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a18      	ldr	r2, [pc, #96]	@ (8004fc0 <TIM_OC2_SetConfig+0xe8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_OC2_SetConfig+0x94>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a17      	ldr	r2, [pc, #92]	@ (8004fc4 <TIM_OC2_SetConfig+0xec>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d113      	bne.n	8004f94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	feff8fff 	.word	0xfeff8fff
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	40010400 	.word	0x40010400

08004fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80050a8 <TIM_OC3_SetConfig+0xe0>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a22      	ldr	r2, [pc, #136]	@ (80050ac <TIM_OC3_SetConfig+0xe4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d003      	beq.n	800502e <TIM_OC3_SetConfig+0x66>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a21      	ldr	r2, [pc, #132]	@ (80050b0 <TIM_OC3_SetConfig+0xe8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d10d      	bne.n	800504a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005034:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a17      	ldr	r2, [pc, #92]	@ (80050ac <TIM_OC3_SetConfig+0xe4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d003      	beq.n	800505a <TIM_OC3_SetConfig+0x92>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a16      	ldr	r2, [pc, #88]	@ (80050b0 <TIM_OC3_SetConfig+0xe8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d113      	bne.n	8005082 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	621a      	str	r2, [r3, #32]
}
 800509c:	bf00      	nop
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	fffeff8f 	.word	0xfffeff8f
 80050ac:	40010000 	.word	0x40010000
 80050b0:	40010400 	.word	0x40010400

080050b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4b1e      	ldr	r3, [pc, #120]	@ (8005158 <TIM_OC4_SetConfig+0xa4>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	031b      	lsls	r3, r3, #12
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a13      	ldr	r2, [pc, #76]	@ (800515c <TIM_OC4_SetConfig+0xa8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <TIM_OC4_SetConfig+0x68>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a12      	ldr	r2, [pc, #72]	@ (8005160 <TIM_OC4_SetConfig+0xac>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d109      	bne.n	8005130 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005122:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	019b      	lsls	r3, r3, #6
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	621a      	str	r2, [r3, #32]
}
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	feff8fff 	.word	0xfeff8fff
 800515c:	40010000 	.word	0x40010000
 8005160:	40010400 	.word	0x40010400

08005164 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4b1b      	ldr	r3, [pc, #108]	@ (80051fc <TIM_OC5_SetConfig+0x98>)
 8005190:	4013      	ands	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80051a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	041b      	lsls	r3, r3, #16
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a12      	ldr	r2, [pc, #72]	@ (8005200 <TIM_OC5_SetConfig+0x9c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d003      	beq.n	80051c2 <TIM_OC5_SetConfig+0x5e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a11      	ldr	r2, [pc, #68]	@ (8005204 <TIM_OC5_SetConfig+0xa0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d109      	bne.n	80051d6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	621a      	str	r2, [r3, #32]
}
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	fffeff8f 	.word	0xfffeff8f
 8005200:	40010000 	.word	0x40010000
 8005204:	40010400 	.word	0x40010400

08005208 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4b1c      	ldr	r3, [pc, #112]	@ (80052a4 <TIM_OC6_SetConfig+0x9c>)
 8005234:	4013      	ands	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800524a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	051b      	lsls	r3, r3, #20
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a13      	ldr	r2, [pc, #76]	@ (80052a8 <TIM_OC6_SetConfig+0xa0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_OC6_SetConfig+0x60>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a12      	ldr	r2, [pc, #72]	@ (80052ac <TIM_OC6_SetConfig+0xa4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d109      	bne.n	800527c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800526e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	029b      	lsls	r3, r3, #10
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	621a      	str	r2, [r3, #32]
}
 8005296:	bf00      	nop
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	feff8fff 	.word	0xfeff8fff
 80052a8:	40010000 	.word	0x40010000
 80052ac:	40010400 	.word	0x40010400

080052b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	f023 0201 	bic.w	r2, r3, #1
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f023 030a 	bic.w	r3, r3, #10
 80052ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800530e:	b480      	push	{r7}
 8005310:	b087      	sub	sp, #28
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	f023 0210 	bic.w	r2, r3, #16
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	031b      	lsls	r3, r3, #12
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800534a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	621a      	str	r2, [r3, #32]
}
 8005362:	bf00      	nop
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005384:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	f043 0307 	orr.w	r3, r3, #7
 8005390:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	609a      	str	r2, [r3, #8]
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	021a      	lsls	r2, r3, #8
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	609a      	str	r2, [r3, #8]
}
 80053d8:	bf00      	nop
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f003 031f 	and.w	r3, r3, #31
 80053f6:	2201      	movs	r2, #1
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a1a      	ldr	r2, [r3, #32]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	43db      	mvns	r3, r3
 8005406:	401a      	ands	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f003 031f 	and.w	r3, r3, #31
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	fa01 f303 	lsl.w	r3, r1, r3
 800541c:	431a      	orrs	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
	...

08005430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005444:	2302      	movs	r3, #2
 8005446:	e06d      	b.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a30      	ldr	r2, [pc, #192]	@ (8005530 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a2f      	ldr	r2, [pc, #188]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d108      	bne.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005482:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005494:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a20      	ldr	r2, [pc, #128]	@ (8005530 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d022      	beq.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ba:	d01d      	beq.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005538 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d018      	beq.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1c      	ldr	r2, [pc, #112]	@ (800553c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005540 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00e      	beq.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a15      	ldr	r2, [pc, #84]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d009      	beq.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a16      	ldr	r2, [pc, #88]	@ (8005544 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a15      	ldr	r2, [pc, #84]	@ (8005548 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d10c      	bne.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	4313      	orrs	r3, r2
 8005508:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	40010000 	.word	0x40010000
 8005534:	40010400 	.word	0x40010400
 8005538:	40000400 	.word	0x40000400
 800553c:	40000800 	.word	0x40000800
 8005540:	40000c00 	.word	0x40000c00
 8005544:	40014000 	.word	0x40014000
 8005548:	40001800 	.word	0x40001800

0800554c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <memset>:
 8005588:	4402      	add	r2, r0
 800558a:	4603      	mov	r3, r0
 800558c:	4293      	cmp	r3, r2
 800558e:	d100      	bne.n	8005592 <memset+0xa>
 8005590:	4770      	bx	lr
 8005592:	f803 1b01 	strb.w	r1, [r3], #1
 8005596:	e7f9      	b.n	800558c <memset+0x4>

08005598 <__libc_init_array>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	4d0d      	ldr	r5, [pc, #52]	@ (80055d0 <__libc_init_array+0x38>)
 800559c:	4c0d      	ldr	r4, [pc, #52]	@ (80055d4 <__libc_init_array+0x3c>)
 800559e:	1b64      	subs	r4, r4, r5
 80055a0:	10a4      	asrs	r4, r4, #2
 80055a2:	2600      	movs	r6, #0
 80055a4:	42a6      	cmp	r6, r4
 80055a6:	d109      	bne.n	80055bc <__libc_init_array+0x24>
 80055a8:	4d0b      	ldr	r5, [pc, #44]	@ (80055d8 <__libc_init_array+0x40>)
 80055aa:	4c0c      	ldr	r4, [pc, #48]	@ (80055dc <__libc_init_array+0x44>)
 80055ac:	f000 f818 	bl	80055e0 <_init>
 80055b0:	1b64      	subs	r4, r4, r5
 80055b2:	10a4      	asrs	r4, r4, #2
 80055b4:	2600      	movs	r6, #0
 80055b6:	42a6      	cmp	r6, r4
 80055b8:	d105      	bne.n	80055c6 <__libc_init_array+0x2e>
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
 80055bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c0:	4798      	blx	r3
 80055c2:	3601      	adds	r6, #1
 80055c4:	e7ee      	b.n	80055a4 <__libc_init_array+0xc>
 80055c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ca:	4798      	blx	r3
 80055cc:	3601      	adds	r6, #1
 80055ce:	e7f2      	b.n	80055b6 <__libc_init_array+0x1e>
 80055d0:	08005610 	.word	0x08005610
 80055d4:	08005610 	.word	0x08005610
 80055d8:	08005610 	.word	0x08005610
 80055dc:	08005614 	.word	0x08005614

080055e0 <_init>:
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e2:	bf00      	nop
 80055e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e6:	bc08      	pop	{r3}
 80055e8:	469e      	mov	lr, r3
 80055ea:	4770      	bx	lr

080055ec <_fini>:
 80055ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ee:	bf00      	nop
 80055f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f2:	bc08      	pop	{r3}
 80055f4:	469e      	mov	lr, r3
 80055f6:	4770      	bx	lr

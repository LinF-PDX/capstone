
profileograph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a44  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006c40  08006c40  00007c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006db0  08006db0  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006db0  08006db0  00007db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006db8  08006db8  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006db8  08006db8  00007db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dbc  08006dbc  00007dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006dc0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  20000060  08006e20  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08006e20  00008478  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c1a  00000000  00000000  0000808e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002942  00000000  00000000  00018ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  0001b5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bcd  00000000  00000000  0001c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290e6  00000000  00000000  0001d0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013058  00000000  00000000  000461e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001005e0  00000000  00000000  0005923b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015981b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  00159860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0015db34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000060 	.word	0x20000060
 8000214:	00000000 	.word	0x00000000
 8000218:	08006c24 	.word	0x08006c24

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000064 	.word	0x20000064
 8000234:	08006c24 	.word	0x08006c24

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_uldivmod>:
 80005b0:	b953      	cbnz	r3, 80005c8 <__aeabi_uldivmod+0x18>
 80005b2:	b94a      	cbnz	r2, 80005c8 <__aeabi_uldivmod+0x18>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	bf08      	it	eq
 80005b8:	2800      	cmpeq	r0, #0
 80005ba:	bf1c      	itt	ne
 80005bc:	f04f 31ff 	movne.w	r1, #4294967295
 80005c0:	f04f 30ff 	movne.w	r0, #4294967295
 80005c4:	f000 b96a 	b.w	800089c <__aeabi_idiv0>
 80005c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d0:	f000 f806 	bl	80005e0 <__udivmoddi4>
 80005d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005dc:	b004      	add	sp, #16
 80005de:	4770      	bx	lr

080005e0 <__udivmoddi4>:
 80005e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e4:	9d08      	ldr	r5, [sp, #32]
 80005e6:	460c      	mov	r4, r1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d14e      	bne.n	800068a <__udivmoddi4+0xaa>
 80005ec:	4694      	mov	ip, r2
 80005ee:	458c      	cmp	ip, r1
 80005f0:	4686      	mov	lr, r0
 80005f2:	fab2 f282 	clz	r2, r2
 80005f6:	d962      	bls.n	80006be <__udivmoddi4+0xde>
 80005f8:	b14a      	cbz	r2, 800060e <__udivmoddi4+0x2e>
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	4091      	lsls	r1, r2
 8000600:	fa20 f303 	lsr.w	r3, r0, r3
 8000604:	fa0c fc02 	lsl.w	ip, ip, r2
 8000608:	4319      	orrs	r1, r3
 800060a:	fa00 fe02 	lsl.w	lr, r0, r2
 800060e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000612:	fa1f f68c 	uxth.w	r6, ip
 8000616:	fbb1 f4f7 	udiv	r4, r1, r7
 800061a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800061e:	fb07 1114 	mls	r1, r7, r4, r1
 8000622:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000626:	fb04 f106 	mul.w	r1, r4, r6
 800062a:	4299      	cmp	r1, r3
 800062c:	d90a      	bls.n	8000644 <__udivmoddi4+0x64>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f104 30ff 	add.w	r0, r4, #4294967295
 8000636:	f080 8112 	bcs.w	800085e <__udivmoddi4+0x27e>
 800063a:	4299      	cmp	r1, r3
 800063c:	f240 810f 	bls.w	800085e <__udivmoddi4+0x27e>
 8000640:	3c02      	subs	r4, #2
 8000642:	4463      	add	r3, ip
 8000644:	1a59      	subs	r1, r3, r1
 8000646:	fa1f f38e 	uxth.w	r3, lr
 800064a:	fbb1 f0f7 	udiv	r0, r1, r7
 800064e:	fb07 1110 	mls	r1, r7, r0, r1
 8000652:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000656:	fb00 f606 	mul.w	r6, r0, r6
 800065a:	429e      	cmp	r6, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x94>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 31ff 	add.w	r1, r0, #4294967295
 8000666:	f080 80fc 	bcs.w	8000862 <__udivmoddi4+0x282>
 800066a:	429e      	cmp	r6, r3
 800066c:	f240 80f9 	bls.w	8000862 <__udivmoddi4+0x282>
 8000670:	4463      	add	r3, ip
 8000672:	3802      	subs	r0, #2
 8000674:	1b9b      	subs	r3, r3, r6
 8000676:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800067a:	2100      	movs	r1, #0
 800067c:	b11d      	cbz	r5, 8000686 <__udivmoddi4+0xa6>
 800067e:	40d3      	lsrs	r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	e9c5 3200 	strd	r3, r2, [r5]
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	428b      	cmp	r3, r1
 800068c:	d905      	bls.n	800069a <__udivmoddi4+0xba>
 800068e:	b10d      	cbz	r5, 8000694 <__udivmoddi4+0xb4>
 8000690:	e9c5 0100 	strd	r0, r1, [r5]
 8000694:	2100      	movs	r1, #0
 8000696:	4608      	mov	r0, r1
 8000698:	e7f5      	b.n	8000686 <__udivmoddi4+0xa6>
 800069a:	fab3 f183 	clz	r1, r3
 800069e:	2900      	cmp	r1, #0
 80006a0:	d146      	bne.n	8000730 <__udivmoddi4+0x150>
 80006a2:	42a3      	cmp	r3, r4
 80006a4:	d302      	bcc.n	80006ac <__udivmoddi4+0xcc>
 80006a6:	4290      	cmp	r0, r2
 80006a8:	f0c0 80f0 	bcc.w	800088c <__udivmoddi4+0x2ac>
 80006ac:	1a86      	subs	r6, r0, r2
 80006ae:	eb64 0303 	sbc.w	r3, r4, r3
 80006b2:	2001      	movs	r0, #1
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d0e6      	beq.n	8000686 <__udivmoddi4+0xa6>
 80006b8:	e9c5 6300 	strd	r6, r3, [r5]
 80006bc:	e7e3      	b.n	8000686 <__udivmoddi4+0xa6>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	f040 8090 	bne.w	80007e4 <__udivmoddi4+0x204>
 80006c4:	eba1 040c 	sub.w	r4, r1, ip
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	fa1f f78c 	uxth.w	r7, ip
 80006d0:	2101      	movs	r1, #1
 80006d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80006d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006da:	fb08 4416 	mls	r4, r8, r6, r4
 80006de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006e2:	fb07 f006 	mul.w	r0, r7, r6
 80006e6:	4298      	cmp	r0, r3
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x11c>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80006f2:	d202      	bcs.n	80006fa <__udivmoddi4+0x11a>
 80006f4:	4298      	cmp	r0, r3
 80006f6:	f200 80cd 	bhi.w	8000894 <__udivmoddi4+0x2b4>
 80006fa:	4626      	mov	r6, r4
 80006fc:	1a1c      	subs	r4, r3, r0
 80006fe:	fa1f f38e 	uxth.w	r3, lr
 8000702:	fbb4 f0f8 	udiv	r0, r4, r8
 8000706:	fb08 4410 	mls	r4, r8, r0, r4
 800070a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800070e:	fb00 f707 	mul.w	r7, r0, r7
 8000712:	429f      	cmp	r7, r3
 8000714:	d908      	bls.n	8000728 <__udivmoddi4+0x148>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 34ff 	add.w	r4, r0, #4294967295
 800071e:	d202      	bcs.n	8000726 <__udivmoddi4+0x146>
 8000720:	429f      	cmp	r7, r3
 8000722:	f200 80b0 	bhi.w	8000886 <__udivmoddi4+0x2a6>
 8000726:	4620      	mov	r0, r4
 8000728:	1bdb      	subs	r3, r3, r7
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	e7a5      	b.n	800067c <__udivmoddi4+0x9c>
 8000730:	f1c1 0620 	rsb	r6, r1, #32
 8000734:	408b      	lsls	r3, r1
 8000736:	fa22 f706 	lsr.w	r7, r2, r6
 800073a:	431f      	orrs	r7, r3
 800073c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000740:	fa04 f301 	lsl.w	r3, r4, r1
 8000744:	ea43 030c 	orr.w	r3, r3, ip
 8000748:	40f4      	lsrs	r4, r6
 800074a:	fa00 f801 	lsl.w	r8, r0, r1
 800074e:	0c38      	lsrs	r0, r7, #16
 8000750:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000754:	fbb4 fef0 	udiv	lr, r4, r0
 8000758:	fa1f fc87 	uxth.w	ip, r7
 800075c:	fb00 441e 	mls	r4, r0, lr, r4
 8000760:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000764:	fb0e f90c 	mul.w	r9, lr, ip
 8000768:	45a1      	cmp	r9, r4
 800076a:	fa02 f201 	lsl.w	r2, r2, r1
 800076e:	d90a      	bls.n	8000786 <__udivmoddi4+0x1a6>
 8000770:	193c      	adds	r4, r7, r4
 8000772:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000776:	f080 8084 	bcs.w	8000882 <__udivmoddi4+0x2a2>
 800077a:	45a1      	cmp	r9, r4
 800077c:	f240 8081 	bls.w	8000882 <__udivmoddi4+0x2a2>
 8000780:	f1ae 0e02 	sub.w	lr, lr, #2
 8000784:	443c      	add	r4, r7
 8000786:	eba4 0409 	sub.w	r4, r4, r9
 800078a:	fa1f f983 	uxth.w	r9, r3
 800078e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000792:	fb00 4413 	mls	r4, r0, r3, r4
 8000796:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079a:	fb03 fc0c 	mul.w	ip, r3, ip
 800079e:	45a4      	cmp	ip, r4
 80007a0:	d907      	bls.n	80007b2 <__udivmoddi4+0x1d2>
 80007a2:	193c      	adds	r4, r7, r4
 80007a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80007a8:	d267      	bcs.n	800087a <__udivmoddi4+0x29a>
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d965      	bls.n	800087a <__udivmoddi4+0x29a>
 80007ae:	3b02      	subs	r3, #2
 80007b0:	443c      	add	r4, r7
 80007b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007b6:	fba0 9302 	umull	r9, r3, r0, r2
 80007ba:	eba4 040c 	sub.w	r4, r4, ip
 80007be:	429c      	cmp	r4, r3
 80007c0:	46ce      	mov	lr, r9
 80007c2:	469c      	mov	ip, r3
 80007c4:	d351      	bcc.n	800086a <__udivmoddi4+0x28a>
 80007c6:	d04e      	beq.n	8000866 <__udivmoddi4+0x286>
 80007c8:	b155      	cbz	r5, 80007e0 <__udivmoddi4+0x200>
 80007ca:	ebb8 030e 	subs.w	r3, r8, lr
 80007ce:	eb64 040c 	sbc.w	r4, r4, ip
 80007d2:	fa04 f606 	lsl.w	r6, r4, r6
 80007d6:	40cb      	lsrs	r3, r1
 80007d8:	431e      	orrs	r6, r3
 80007da:	40cc      	lsrs	r4, r1
 80007dc:	e9c5 6400 	strd	r6, r4, [r5]
 80007e0:	2100      	movs	r1, #0
 80007e2:	e750      	b.n	8000686 <__udivmoddi4+0xa6>
 80007e4:	f1c2 0320 	rsb	r3, r2, #32
 80007e8:	fa20 f103 	lsr.w	r1, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	fa24 f303 	lsr.w	r3, r4, r3
 80007f4:	4094      	lsls	r4, r2
 80007f6:	430c      	orrs	r4, r1
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000800:	fa1f f78c 	uxth.w	r7, ip
 8000804:	fbb3 f0f8 	udiv	r0, r3, r8
 8000808:	fb08 3110 	mls	r1, r8, r0, r3
 800080c:	0c23      	lsrs	r3, r4, #16
 800080e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000812:	fb00 f107 	mul.w	r1, r0, r7
 8000816:	4299      	cmp	r1, r3
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x24c>
 800081a:	eb1c 0303 	adds.w	r3, ip, r3
 800081e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000822:	d22c      	bcs.n	800087e <__udivmoddi4+0x29e>
 8000824:	4299      	cmp	r1, r3
 8000826:	d92a      	bls.n	800087e <__udivmoddi4+0x29e>
 8000828:	3802      	subs	r0, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f1f8 	udiv	r1, r3, r8
 8000834:	fb08 3311 	mls	r3, r8, r1, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb01 f307 	mul.w	r3, r1, r7
 8000840:	42a3      	cmp	r3, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x276>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f101 36ff 	add.w	r6, r1, #4294967295
 800084c:	d213      	bcs.n	8000876 <__udivmoddi4+0x296>
 800084e:	42a3      	cmp	r3, r4
 8000850:	d911      	bls.n	8000876 <__udivmoddi4+0x296>
 8000852:	3902      	subs	r1, #2
 8000854:	4464      	add	r4, ip
 8000856:	1ae4      	subs	r4, r4, r3
 8000858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800085c:	e739      	b.n	80006d2 <__udivmoddi4+0xf2>
 800085e:	4604      	mov	r4, r0
 8000860:	e6f0      	b.n	8000644 <__udivmoddi4+0x64>
 8000862:	4608      	mov	r0, r1
 8000864:	e706      	b.n	8000674 <__udivmoddi4+0x94>
 8000866:	45c8      	cmp	r8, r9
 8000868:	d2ae      	bcs.n	80007c8 <__udivmoddi4+0x1e8>
 800086a:	ebb9 0e02 	subs.w	lr, r9, r2
 800086e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000872:	3801      	subs	r0, #1
 8000874:	e7a8      	b.n	80007c8 <__udivmoddi4+0x1e8>
 8000876:	4631      	mov	r1, r6
 8000878:	e7ed      	b.n	8000856 <__udivmoddi4+0x276>
 800087a:	4603      	mov	r3, r0
 800087c:	e799      	b.n	80007b2 <__udivmoddi4+0x1d2>
 800087e:	4630      	mov	r0, r6
 8000880:	e7d4      	b.n	800082c <__udivmoddi4+0x24c>
 8000882:	46d6      	mov	lr, sl
 8000884:	e77f      	b.n	8000786 <__udivmoddi4+0x1a6>
 8000886:	4463      	add	r3, ip
 8000888:	3802      	subs	r0, #2
 800088a:	e74d      	b.n	8000728 <__udivmoddi4+0x148>
 800088c:	4606      	mov	r6, r0
 800088e:	4623      	mov	r3, r4
 8000890:	4608      	mov	r0, r1
 8000892:	e70f      	b.n	80006b4 <__udivmoddi4+0xd4>
 8000894:	3e02      	subs	r6, #2
 8000896:	4463      	add	r3, ip
 8000898:	e730      	b.n	80006fc <__udivmoddi4+0x11c>
 800089a:	bf00      	nop

0800089c <__aeabi_idiv0>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <writeRegister>:
 * @param num Number of bytes to be written
 * @retval none
 * @note Since the register values to be written are 8-bit, there is no need to multiple writing
 */
static void writeRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	4613      	mov	r3, r2
 80008ae:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80008b4:	d901      	bls.n	80008ba <writeRegister+0x1a>
		address = 63;
 80008b6:	233f      	movs	r3, #63	@ 0x3f
 80008b8:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
		address = (address << 1 & ~0x01);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2104      	movs	r1, #4
 80008c6:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <writeRegister+0x58>)
 80008c8:	f003 f85c 	bl	8003984 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 80008cc:	1df9      	adds	r1, r7, #7
 80008ce:	230a      	movs	r3, #10
 80008d0:	2201      	movs	r2, #1
 80008d2:	480a      	ldr	r0, [pc, #40]	@ (80008fc <writeRegister+0x5c>)
 80008d4:	f003 fd95 	bl	8004402 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,value,num,10);
 80008d8:	79bb      	ldrb	r3, [r7, #6]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	230a      	movs	r3, #10
 80008de:	6839      	ldr	r1, [r7, #0]
 80008e0:	4806      	ldr	r0, [pc, #24]	@ (80008fc <writeRegister+0x5c>)
 80008e2:	f003 fd8e 	bl	8004402 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2104      	movs	r1, #4
 80008ea:	4803      	ldr	r0, [pc, #12]	@ (80008f8 <writeRegister+0x58>)
 80008ec:	f003 f84a 	bl	8003984 <HAL_GPIO_WritePin>
	

}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40020c00 	.word	0x40020c00
 80008fc:	200001a8 	.word	0x200001a8

08000900 <readRegister>:
 *	@param value Pointer to buffer that stores the read value
 *	@param num Number of bytes to be written
 * 	@retval none
 */
static void readRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b3f      	cmp	r3, #63	@ 0x3f
 8000914:	d901      	bls.n	800091a <readRegister+0x1a>
		address = 63;
 8000916:	233f      	movs	r3, #63	@ 0x3f
 8000918:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
		address = (address << 1 | 0x01);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	b25b      	sxtb	r3, r3
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	b25b      	sxtb	r3, r3
 8000926:	b2db      	uxtb	r3, r3
 8000928:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2104      	movs	r1, #4
 800092e:	480c      	ldr	r0, [pc, #48]	@ (8000960 <readRegister+0x60>)
 8000930:	f003 f828 	bl	8003984 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000934:	1df9      	adds	r1, r7, #7
 8000936:	230a      	movs	r3, #10
 8000938:	2201      	movs	r2, #1
 800093a:	480a      	ldr	r0, [pc, #40]	@ (8000964 <readRegister+0x64>)
 800093c:	f003 fd61 	bl	8004402 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	b29a      	uxth	r2, r3
 8000944:	230a      	movs	r3, #10
 8000946:	6839      	ldr	r1, [r7, #0]
 8000948:	4806      	ldr	r0, [pc, #24]	@ (8000964 <readRegister+0x64>)
 800094a:	f003 fecf 	bl	80046ec <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2104      	movs	r1, #4
 8000952:	4803      	ldr	r0, [pc, #12]	@ (8000960 <readRegister+0x60>)
 8000954:	f003 f816 	bl	8003984 <HAL_GPIO_WritePin>
	
	
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40020c00 	.word	0x40020c00
 8000964:	200001a8 	.word	0x200001a8

08000968 <adxlFormat>:
						2 		|  				+-8g		
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	uint8_t formatreg=0;
 8000970:	2300      	movs	r3, #0
 8000972:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1); //Set register to 0
 8000974:	f107 030f 	add.w	r3, r7, #15
 8000978:	2201      	movs	r2, #1
 800097a:	4619      	mov	r1, r3
 800097c:	202c      	movs	r0, #44	@ 0x2c
 800097e:	f7ff ff8f 	bl	80008a0 <writeRegister>
	formatreg = (adxl->IntMode << 6 | adxl->Range) & RANGE_REG_MASK;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	78db      	ldrb	r3, [r3, #3]
 8000986:	019b      	lsls	r3, r3, #6
 8000988:	b25a      	sxtb	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	791b      	ldrb	r3, [r3, #4]
 800098e:	b25b      	sxtb	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b25b      	sxtb	r3, r3
 8000994:	b2db      	uxtb	r3, r3
 8000996:	f003 0343 	and.w	r3, r3, #67	@ 0x43
 800099a:	b2db      	uxtb	r3, r3
 800099c:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1);
 800099e:	f107 030f 	add.w	r3, r7, #15
 80009a2:	2201      	movs	r2, #1
 80009a4:	4619      	mov	r1, r3
 80009a6:	202c      	movs	r0, #44	@ 0x2c
 80009a8:	f7ff ff7a 	bl	80008a0 <writeRegister>

	formatreg = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg,1);
 80009b0:	f107 030f 	add.w	r3, r7, #15
 80009b4:	2201      	movs	r2, #1
 80009b6:	4619      	mov	r1, r3
 80009b8:	202d      	movs	r0, #45	@ 0x2d
 80009ba:	f7ff ff71 	bl	80008a0 <writeRegister>
	formatreg = (adxl->DataReadyMode << 2 | adxl->TempMode << 1 | adxl->StandbyMode) & POWER_CTL_REG_MASK;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	789b      	ldrb	r3, [r3, #2]
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	b25a      	sxtb	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	785b      	ldrb	r3, [r3, #1]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	4313      	orrs	r3, r2
 80009d0:	b25a      	sxtb	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	4313      	orrs	r3, r2
 80009da:	b25b      	sxtb	r3, r3
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg, 1);
 80009e6:	f107 030f 	add.w	r3, r7, #15
 80009ea:	2201      	movs	r2, #1
 80009ec:	4619      	mov	r1, r3
 80009ee:	202d      	movs	r0, #45	@ 0x2d
 80009f0:	f7ff ff56 	bl	80008a0 <writeRegister>
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <adxlReset>:

/**
 * @brief Call to reset ADXL355
 */
static void adxlReset(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
    uint8_t shadow_reg_store[5] = {};
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	2300      	movs	r3, #0
 8000a08:	753b      	strb	r3, [r7, #20]
    uint8_t shadow_reg_read[5] = {};
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	733b      	strb	r3, [r7, #12]
    uint8_t reset_write = ADXL_RESET_WRITE;
 8000a12:	2352      	movs	r3, #82	@ 0x52
 8000a14:	71fb      	strb	r3, [r7, #7]
    //Store values from shadow registers
    readRegister(SHADOW_REG1, shadow_reg_store, 5);
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	2205      	movs	r2, #5
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	2050      	movs	r0, #80	@ 0x50
 8000a20:	f7ff ff6e 	bl	8000900 <readRegister>
    while (1) {
        //Perform a software reset
        writeRegister(ADXL_RESET, &reset_write, 1);
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	2201      	movs	r2, #1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	202f      	movs	r0, #47	@ 0x2f
 8000a2c:	f7ff ff38 	bl	80008a0 <writeRegister>
        //Read shadow registers after reset
        readRegister(SHADOW_REG1, shadow_reg_read, 5);
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	2205      	movs	r2, #5
 8000a36:	4619      	mov	r1, r3
 8000a38:	2050      	movs	r0, #80	@ 0x50
 8000a3a:	f7ff ff61 	bl	8000900 <readRegister>
        // Check if shadow registers match the stored values
        uint8_t match = 1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	77fb      	strb	r3, [r7, #31]
        for (int i = 0; i < 5; i++) {
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
 8000a46:	e011      	b.n	8000a6c <adxlReset+0x70>
            if (shadow_reg_read[i] != shadow_reg_store[i]) {
 8000a48:	f107 0208 	add.w	r2, r7, #8
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	4413      	add	r3, r2
 8000a50:	781a      	ldrb	r2, [r3, #0]
 8000a52:	f107 0110 	add.w	r1, r7, #16
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	440b      	add	r3, r1
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d002      	beq.n	8000a66 <adxlReset+0x6a>
                match = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	77fb      	strb	r3, [r7, #31]
                break;
 8000a64:	e005      	b.n	8000a72 <adxlReset+0x76>
        for (int i = 0; i < 5; i++) {
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	ddea      	ble.n	8000a48 <adxlReset+0x4c>
            }
        }
        // If all shadow registers match, exit the loop
        if (match) break;
 8000a72:	7ffb      	ldrb	r3, [r7, #31]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d100      	bne.n	8000a7a <adxlReset+0x7e>
    while (1) {
 8000a78:	e7d4      	b.n	8000a24 <adxlReset+0x28>
        if (match) break;
 8000a7a:	bf00      	nop
    }
}
 8000a7c:	bf00      	nop
 8000a7e:	3720      	adds	r7, #32
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2104      	movs	r1, #4
 8000a90:	482d      	ldr	r0, [pc, #180]	@ (8000b48 <ADXL_Init+0xc4>)
 8000a92:	f002 ff77 	bl	8003984 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f001 fb8a 	bl	80021b0 <HAL_Delay>
	//Reset device
	adxlReset();
 8000a9c:	f7ff ffae 	bl	80009fc <adxlReset>
	uint8_t testval[2] = {};
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	81bb      	strh	r3, [r7, #12]
	// The Device Address register is constant, i.e. = 0xAD
	readRegister(DEVID_AD, testval, 2);
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	4619      	mov	r1, r3
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff ff27 	bl	8000900 <readRegister>
	if (testval[0] != DEVID_AD_DEFAULT_VAL || testval[1] != DEVID_MST_DEFAULT_VAL) return ADXL_ERR;
 8000ab2:	7b3b      	ldrb	r3, [r7, #12]
 8000ab4:	2bad      	cmp	r3, #173	@ 0xad
 8000ab6:	d102      	bne.n	8000abe <ADXL_Init+0x3a>
 8000ab8:	7b7b      	ldrb	r3, [r7, #13]
 8000aba:	2b1d      	cmp	r3, #29
 8000abc:	d001      	beq.n	8000ac2 <ADXL_Init+0x3e>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e03d      	b.n	8000b3e <ADXL_Init+0xba>

	//Init of BW_RATE and DATAFORMAT registers
	adxlFormat(adxl);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ff50 	bl	8000968 <adxlFormat>
	
	// Settings gains 
	switch (adxl->Range) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	791b      	ldrb	r3, [r3, #4]
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d01e      	beq.n	8000b0e <ADXL_Init+0x8a>
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	dc28      	bgt.n	8000b26 <ADXL_Init+0xa2>
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d002      	beq.n	8000ade <ADXL_Init+0x5a>
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d00c      	beq.n	8000af6 <ADXL_Init+0x72>
 8000adc:	e023      	b.n	8000b26 <ADXL_Init+0xa2>
		case ADXL_RANGE_2G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <ADXL_Init+0xc8>)
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b50 <ADXL_Init+0xcc>)
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <ADXL_Init+0xc8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8000b54 <ADXL_Init+0xd0>)
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <ADXL_Init+0xd0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <ADXL_Init+0xd4>)
 8000af2:	6013      	str	r3, [r2, #0]
			break;
 8000af4:	e022      	b.n	8000b3c <ADXL_Init+0xb8>
		case ADXL_RANGE_4G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_4G;
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <ADXL_Init+0xc8>)
 8000af8:	4a18      	ldr	r2, [pc, #96]	@ (8000b5c <ADXL_Init+0xd8>)
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <ADXL_Init+0xc8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a13      	ldr	r2, [pc, #76]	@ (8000b58 <ADXL_Init+0xd4>)
 8000b0a:	6013      	str	r3, [r2, #0]
			break;
 8000b0c:	e016      	b.n	8000b3c <ADXL_Init+0xb8>
		case ADXL_RANGE_8G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_8G;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <ADXL_Init+0xc8>)
 8000b10:	4a13      	ldr	r2, [pc, #76]	@ (8000b60 <ADXL_Init+0xdc>)
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <ADXL_Init+0xc8>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <ADXL_Init+0xd4>)
 8000b22:	6013      	str	r3, [r2, #0]
			break;
 8000b24:	e00a      	b.n	8000b3c <ADXL_Init+0xb8>
		default:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <ADXL_Init+0xc8>)
 8000b28:	4a09      	ldr	r2, [pc, #36]	@ (8000b50 <ADXL_Init+0xcc>)
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <ADXL_Init+0xc8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <ADXL_Init+0xd0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <ADXL_Init+0xd4>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
			
	return ADXL_OK;
 8000b3c:	2300      	movs	r3, #0
	
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	20000084 	.word	0x20000084
 8000b50:	36831049 	.word	0x36831049
 8000b54:	20000080 	.word	0x20000080
 8000b58:	2000007c 	.word	0x2000007c
 8000b5c:	37031494 	.word	0x37031494
 8000b60:	3783126f 	.word	0x3783126f

08000b64 <ADXL_getAccelRaw>:
 * @brief Read accelerometer data in all 3 axis
 * @param[out] Data	pointer to buffer that stores the 3 axis acceleration value
 * @retval none
 */
void ADXL_getAccelRaw(void *Data)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    uint8_t data[9] = {};
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	711a      	strb	r2, [r3, #4]
    readRegister(XDATA3, data, 9);
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2209      	movs	r2, #9
 8000b80:	4619      	mov	r1, r3
 8000b82:	2008      	movs	r0, #8
 8000b84:	f7ff febc 	bl	8000900 <readRegister>

	int32_t *acc = Data;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	617b      	str	r3, [r7, #20]

	// Two's Complement 20-bit conversion
	acc[0] = (int32_t)((data[0] << 12) | (data[1] << 4) | (data[2] >> 4));
 8000b8c:	7a3b      	ldrb	r3, [r7, #8]
 8000b8e:	031a      	lsls	r2, r3, #12
 8000b90:	7a7b      	ldrb	r3, [r7, #9]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	4313      	orrs	r3, r2
 8000b96:	7aba      	ldrb	r2, [r7, #10]
 8000b98:	0912      	lsrs	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	601a      	str	r2, [r3, #0]
	acc[1] = (int32_t)((data[3] << 12) | (data[4] << 4) | (data[5] >> 4));
 8000ba2:	7afb      	ldrb	r3, [r7, #11]
 8000ba4:	031a      	lsls	r2, r3, #12
 8000ba6:	7b3b      	ldrb	r3, [r7, #12]
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	431a      	orrs	r2, r3
 8000bac:	7b7b      	ldrb	r3, [r7, #13]
 8000bae:	091b      	lsrs	r3, r3, #4
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
	acc[2] = (int32_t)((data[6] << 12) | (data[7] << 4) | (data[8] >> 4));
 8000bbc:	7bbb      	ldrb	r3, [r7, #14]
 8000bbe:	031a      	lsls	r2, r3, #12
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	011b      	lsls	r3, r3, #4
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	7c3b      	ldrb	r3, [r7, #16]
 8000bc8:	091b      	lsrs	r3, r3, #4
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4619      	mov	r1, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]

	// Sign extension for 20-bit values
	if (acc[0] & 0x80000) acc[0] |= 0xFFF00000;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d007      	beq.n	8000bf2 <ADXL_getAccelRaw+0x8e>
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <ADXL_getAccelRaw+0xd8>)
 8000bea:	4313      	orrs	r3, r2
 8000bec:	461a      	mov	r2, r3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	601a      	str	r2, [r3, #0]
	if (acc[1] & 0x80000) acc[1] |= 0xFFF00000;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d008      	beq.n	8000c12 <ADXL_getAccelRaw+0xae>
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	3304      	adds	r3, #4
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <ADXL_getAccelRaw+0xd8>)
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	3204      	adds	r2, #4
 8000c10:	6013      	str	r3, [r2, #0]
	if (acc[2] & 0x80000) acc[2] |= 0xFFF00000;
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3308      	adds	r3, #8
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d008      	beq.n	8000c32 <ADXL_getAccelRaw+0xce>
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	3308      	adds	r3, #8
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <ADXL_getAccelRaw+0xd8>)
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	3208      	adds	r2, #8
 8000c30:	6013      	str	r3, [r2, #0]
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	fff00000 	.word	0xfff00000

08000c40 <ADXL_getAccelFloat>:
/**
 * @brief Read accelerometer data and convert it to float
 * @param pData Pointer to buffer that stores acceleration value
 * @retval none
 */
void ADXL_getAccelFloat(void *pData) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	int32_t rawdata[3] = {};
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
	float *dataout = pData;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	617b      	str	r3, [r7, #20]
	ADXL_getAccelRaw(rawdata);
 8000c58:	f107 0308 	add.w	r3, r7, #8
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff81 	bl	8000b64 <ADXL_getAccelRaw>

	//Convert raw data to float
	dataout[0] = (float)rawdata[0] * GAINX;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	ee07 3a90 	vmov	s15, r3
 8000c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <ADXL_getAccelFloat+0x7c>)
 8000c6e:	edd3 7a00 	vldr	s15, [r3]
 8000c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	edc3 7a00 	vstr	s15, [r3]
	dataout[1] = (float)rawdata[1] * GAINY;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <ADXL_getAccelFloat+0x80>)
 8000c88:	edd3 7a00 	vldr	s15, [r3]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3304      	adds	r3, #4
 8000c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c94:	edc3 7a00 	vstr	s15, [r3]
	dataout[2] = (float)rawdata[2] * GAINZ;
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	ee07 3a90 	vmov	s15, r3
 8000c9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ca2:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <ADXL_getAccelFloat+0x84>)
 8000ca4:	edd3 7a00 	vldr	s15, [r3]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3308      	adds	r3, #8
 8000cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb0:	edc3 7a00 	vstr	s15, [r3]
}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000007c 	.word	0x2000007c
 8000cc0:	20000080 	.word	0x20000080
 8000cc4:	20000084 	.word	0x20000084

08000cc8 <ADXL_Measure>:
/** Starts Measure Mode
* @param: s = ON or OFF				

*/
void ADXL_Measure(Switch s)
		{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 8000cd2:	f107 030f 	add.w	r3, r7, #15
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4619      	mov	r1, r3
 8000cda:	202d      	movs	r0, #45	@ 0x2d
 8000cdc:	f7ff fe10 	bl	8000900 <readRegister>
			switch (s) {
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d002      	beq.n	8000cec <ADXL_Measure+0x24>
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d012      	beq.n	8000d10 <ADXL_Measure+0x48>
				case OFF:
				reg &= ~(1<<3);
				writeRegister(POWER_CTL,&reg,1);
				break;				
				}
		}
 8000cea:	e01e      	b.n	8000d2a <ADXL_Measure+0x62>
				reg &= ~(1<<2);
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	f023 0304 	bic.w	r3, r3, #4
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	73fb      	strb	r3, [r7, #15]
				reg |= (1<<3);
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,&reg,1);
 8000d00:	f107 030f 	add.w	r3, r7, #15
 8000d04:	2201      	movs	r2, #1
 8000d06:	4619      	mov	r1, r3
 8000d08:	202d      	movs	r0, #45	@ 0x2d
 8000d0a:	f7ff fdc9 	bl	80008a0 <writeRegister>
				break;
 8000d0e:	e00c      	b.n	8000d2a <ADXL_Measure+0x62>
				reg &= ~(1<<3);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	f023 0308 	bic.w	r3, r3, #8
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,&reg,1);
 8000d1a:	f107 030f 	add.w	r3, r7, #15
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4619      	mov	r1, r3
 8000d22:	202d      	movs	r0, #45	@ 0x2d
 8000d24:	f7ff fdbc 	bl	80008a0 <writeRegister>
				break;				
 8000d28:	bf00      	nop
		}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <ADXL_setFilter>:

void ADXL_setFilter(void) {
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
	uint8_t reg;
	readRegister(FILTER, &reg, 1);
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	2028      	movs	r0, #40	@ 0x28
 8000d40:	f7ff fdde 	bl	8000900 <readRegister>
	reg = 0b00001010;
 8000d44:	230a      	movs	r3, #10
 8000d46:	71fb      	strb	r3, [r7, #7]
	writeRegister(FILTER, &reg, 1);
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	2028      	movs	r0, #40	@ 0x28
 8000d50:	f7ff fda6 	bl	80008a0 <writeRegister>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d70:	4a21      	ldr	r2, [pc, #132]	@ (8000df8 <MX_ADC1_Init+0x9c>)
 8000d72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d80:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d86:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d8c:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d94:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000d9c:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <MX_ADC1_Init+0xa0>)
 8000d9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dba:	480e      	ldr	r0, [pc, #56]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000dbc:	f001 fa1c 	bl	80021f8 <HAL_ADC_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dc6:	f000 fd95 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000dca:	230a      	movs	r3, #10
 8000dcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <MX_ADC1_Init+0x98>)
 8000ddc:	f001 fa50 	bl	8002280 <HAL_ADC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000de6:	f000 fd85 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000088 	.word	0x20000088
 8000df8:	40012000 	.word	0x40012000
 8000dfc:	0f000001 	.word	0x0f000001

08000e00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a15      	ldr	r2, [pc, #84]	@ (8000e74 <HAL_ADC_MspInit+0x74>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d123      	bne.n	8000e6a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <HAL_ADC_MspInit+0x78>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	4a14      	ldr	r2, [pc, #80]	@ (8000e78 <HAL_ADC_MspInit+0x78>)
 8000e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2e:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <HAL_ADC_MspInit+0x78>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <HAL_ADC_MspInit+0x78>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e78 <HAL_ADC_MspInit+0x78>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <HAL_ADC_MspInit+0x78>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e52:	2301      	movs	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e56:	2303      	movs	r3, #3
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <HAL_ADC_MspInit+0x7c>)
 8000e66:	f002 fbe1 	bl	800362c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	@ 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40012000 	.word	0x40012000
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020800 	.word	0x40020800

08000e80 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e84:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000e86:	4a18      	ldr	r2, [pc, #96]	@ (8000ee8 <MX_CAN1_Init+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e90:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e96:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000e9e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000ea2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000ea6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000eaa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000ed2:	f001 fc25 	bl	8002720 <HAL_CAN_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000edc:	f000 fd0a 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200000d0 	.word	0x200000d0
 8000ee8:	40006400 	.word	0x40006400

08000eec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1b      	ldr	r2, [pc, #108]	@ (8000f78 <HAL_CAN_MspInit+0x8c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12f      	bne.n	8000f6e <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <HAL_CAN_MspInit+0x90>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	4a1a      	ldr	r2, [pc, #104]	@ (8000f7c <HAL_CAN_MspInit+0x90>)
 8000f14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <HAL_CAN_MspInit+0x90>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f26:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <HAL_CAN_MspInit+0x90>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a14      	ldr	r2, [pc, #80]	@ (8000f7c <HAL_CAN_MspInit+0x90>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_CAN_MspInit+0x90>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f4e:	2309      	movs	r3, #9
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4809      	ldr	r0, [pc, #36]	@ (8000f80 <HAL_CAN_MspInit+0x94>)
 8000f5a:	f002 fb67 	bl	800362c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2014      	movs	r0, #20
 8000f64:	f002 fb2b 	bl	80035be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f68:	2014      	movs	r0, #20
 8000f6a:	f002 fb44 	bl	80035f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	@ 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40006400 	.word	0x40006400
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020c00 	.word	0x40020c00

08000f84 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9a:	4b34      	ldr	r3, [pc, #208]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a33      	ldr	r2, [pc, #204]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b31      	ldr	r3, [pc, #196]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a2d      	ldr	r2, [pc, #180]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b28      	ldr	r3, [pc, #160]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a27      	ldr	r2, [pc, #156]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b25      	ldr	r3, [pc, #148]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b22      	ldr	r3, [pc, #136]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a21      	ldr	r2, [pc, #132]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800106c <MX_GPIO_Init+0xe8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800106c <MX_GPIO_Init+0xe8>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b19      	ldr	r3, [pc, #100]	@ (800106c <MX_GPIO_Init+0xe8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001018:	4815      	ldr	r0, [pc, #84]	@ (8001070 <MX_GPIO_Init+0xec>)
 800101a:	f002 fcb3 	bl	8003984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2104      	movs	r1, #4
 8001022:	4814      	ldr	r0, [pc, #80]	@ (8001074 <MX_GPIO_Init+0xf0>)
 8001024:	f002 fcae 	bl	8003984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001028:	f244 0381 	movw	r3, #16513	@ 0x4081
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	480b      	ldr	r0, [pc, #44]	@ (8001070 <MX_GPIO_Init+0xec>)
 8001042:	f002 faf3 	bl	800362c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001046:	2304      	movs	r3, #4
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_GPIO_Init+0xf0>)
 800105e:	f002 fae5 	bl	800362c <HAL_GPIO_Init>

}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	@ 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40020400 	.word	0x40020400
 8001074:	40020c00 	.word	0x40020c00

08001078 <HAL_TIM_IC_CaptureCallback>:
void C_transverseHeight(uint16_t transverseLength);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
//	static uint32_t encoder_position = 0;
//	static uint32_t overflow_counter = 0;
//	static uint32_t encoder_temp = 0;

    // Read the current value from the timer counter
	current_encoder_value  = __HAL_TIM_GET_COUNTER(htim);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001086:	4a22      	ldr	r2, [pc, #136]	@ (8001110 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001088:	6013      	str	r3, [r2, #0]

    // Detect overflow: if the current value is less than the previous value,
    // it means the counter has wrapped around from 65535 back to 0.
	if (current_encoder_value < prev_encoder_value) {
 800108a:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <HAL_TIM_IC_CaptureCallback+0x98>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	429a      	cmp	r2, r3
 8001094:	d205      	bcs.n	80010a2 <HAL_TIM_IC_CaptureCallback+0x2a>
	        extended_counter += 65536; // add one full count cycle (0x10000)
 8001096:	4b20      	ldr	r3, [pc, #128]	@ (8001118 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800109e:	4a1e      	ldr	r2, [pc, #120]	@ (8001118 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80010a0:	6013      	str	r3, [r2, #0]
	}

    prev_encoder_value = current_encoder_value;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <HAL_TIM_IC_CaptureCallback+0x98>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001114 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80010a8:	6013      	str	r3, [r2, #0]

//	if (current_encoder_value  >= 65531) {
//		extended_counter += 65536;
//		overflow_counter = extended_counter - 1;
//	} else {
		total_count = extended_counter + current_encoder_value;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <HAL_TIM_IC_CaptureCallback+0x98>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a19      	ldr	r2, [pc, #100]	@ (800111c <HAL_TIM_IC_CaptureCallback+0xa4>)
 80010b6:	6013      	str	r3, [r2, #0]
//	}
	encoder_position = total_count/4;
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <HAL_TIM_IC_CaptureCallback+0xa4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	4a18      	ldr	r2, [pc, #96]	@ (8001120 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80010c0:	6013      	str	r3, [r2, #0]
	C_drivenDistance = (float) (encoder_position/ENCODER_PULSES_PER_WHEEL_TURN_26RPM) * DRIVE_WHEEL_CIRCUMFERENCE_METER;
 80010c2:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80010ce:	ed9f 5b0c 	vldr	d5, [pc, #48]	@ 8001100 <HAL_TIM_IC_CaptureCallback+0x88>
 80010d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010de:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8001108 <HAL_TIM_IC_CaptureCallback+0x90>
 80010e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <HAL_TIM_IC_CaptureCallback+0xac>)
 80010ec:	edc3 7a00 	vstr	s15, [r3]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	f3af 8000 	nop.w
 8001100:	00000000 	.word	0x00000000
 8001104:	40a2a600 	.word	0x40a2a600
 8001108:	c0ebedfa 	.word	0xc0ebedfa
 800110c:	3fca2339 	.word	0x3fca2339
 8001110:	20000184 	.word	0x20000184
 8001114:	20000194 	.word	0x20000194
 8001118:	20000190 	.word	0x20000190
 800111c:	2000018c 	.word	0x2000018c
 8001120:	20000188 	.word	0x20000188
 8001124:	20000198 	.word	0x20000198

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112e:	f000 ffe2 	bl	80020f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001132:	f000 f963 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001136:	f7ff ff25 	bl	8000f84 <MX_GPIO_Init>
  MX_CAN1_Init();
 800113a:	f7ff fea1 	bl	8000e80 <MX_CAN1_Init>
  MX_TIM2_Init();
 800113e:	f000 fce5 	bl	8001b0c <MX_TIM2_Init>
  MX_ADC1_Init();
 8001142:	f7ff fe0b 	bl	8000d5c <MX_ADC1_Init>
  MX_TIM3_Init();
 8001146:	f000 fd57 	bl	8001bf8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800114a:	f000 fdcd 	bl	8001ce8 <MX_TIM4_Init>
  MX_TIM9_Init();
 800114e:	f000 fe21 	bl	8001d94 <MX_TIM9_Init>
  MX_SPI3_Init();
 8001152:	f000 fbd5 	bl	8001900 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_MspInit(&hcan1);
 8001156:	4893      	ldr	r0, [pc, #588]	@ (80013a4 <main+0x27c>)
 8001158:	f7ff fec8 	bl	8000eec <HAL_CAN_MspInit>
  CAN_Config();
 800115c:	f000 fa14 	bl	8001588 <CAN_Config>

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001160:	2102      	movs	r1, #2
 8001162:	4890      	ldr	r0, [pc, #576]	@ (80013a4 <main+0x27c>)
 8001164:	f001 fefa 	bl	8002f5c <HAL_CAN_ActivateNotification>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <main+0x4a>
	  Error_Handler();
 800116e:	f000 fbc1 	bl	80018f4 <Error_Handler>
  }

  ADXL.StandbyMode = ADXL_MODE_MEASUREMENT;
 8001172:	4b8d      	ldr	r3, [pc, #564]	@ (80013a8 <main+0x280>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
  ADXL.TempMode = ADXL_TEMP_OFF;
 8001178:	4b8b      	ldr	r3, [pc, #556]	@ (80013a8 <main+0x280>)
 800117a:	2201      	movs	r2, #1
 800117c:	705a      	strb	r2, [r3, #1]
  ADXL.DataReadyMode = ADXL_DRDY_ON;
 800117e:	4b8a      	ldr	r3, [pc, #552]	@ (80013a8 <main+0x280>)
 8001180:	2200      	movs	r2, #0
 8001182:	709a      	strb	r2, [r3, #2]
  ADXL.IntMode = ADXL_INT_ACTIVELOW;
 8001184:	4b88      	ldr	r3, [pc, #544]	@ (80013a8 <main+0x280>)
 8001186:	2200      	movs	r2, #0
 8001188:	70da      	strb	r2, [r3, #3]
  ADXL.Range = ADXL_RANGE_2G;
 800118a:	4b87      	ldr	r3, [pc, #540]	@ (80013a8 <main+0x280>)
 800118c:	2201      	movs	r2, #1
 800118e:	711a      	strb	r2, [r3, #4]

  TxHeader.StdId = 0x101;
 8001190:	4b86      	ldr	r3, [pc, #536]	@ (80013ac <main+0x284>)
 8001192:	f240 1201 	movw	r2, #257	@ 0x101
 8001196:	601a      	str	r2, [r3, #0]
  TxHeader.DLC = 5;
 8001198:	4b84      	ldr	r3, [pc, #528]	@ (80013ac <main+0x284>)
 800119a:	2205      	movs	r2, #5
 800119c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800119e:	4b83      	ldr	r3, [pc, #524]	@ (80013ac <main+0x284>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80011a4:	4b81      	ldr	r3, [pc, #516]	@ (80013ac <main+0x284>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  TxHeader.TransmitGlobalTime = DISABLE;
 80011aa:	4b80      	ldr	r3, [pc, #512]	@ (80013ac <main+0x284>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0x00;
 80011b0:	4b7f      	ldr	r3, [pc, #508]	@ (80013b0 <main+0x288>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x00;
 80011b6:	4b7e      	ldr	r3, [pc, #504]	@ (80013b0 <main+0x288>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	705a      	strb	r2, [r3, #1]
//  TxData[3] = 0x00;
//  TxData[4] = 0x00;
//  TxData[5] = 0x00;


  ADXL_Init(&ADXL);
 80011bc:	487a      	ldr	r0, [pc, #488]	@ (80013a8 <main+0x280>)
 80011be:	f7ff fc61 	bl	8000a84 <ADXL_Init>
  ADXL_Measure(ON);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff fd80 	bl	8000cc8 <ADXL_Measure>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011c8:	2100      	movs	r1, #0
 80011ca:	487a      	ldr	r0, [pc, #488]	@ (80013b4 <main+0x28c>)
 80011cc:	f004 f8a4 	bl	8005318 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011d0:	2100      	movs	r1, #0
 80011d2:	4879      	ldr	r0, [pc, #484]	@ (80013b8 <main+0x290>)
 80011d4:	f004 f8a0 	bl	8005318 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80011d8:	2100      	movs	r1, #0
 80011da:	4878      	ldr	r0, [pc, #480]	@ (80013bc <main+0x294>)
 80011dc:	f004 f89c 	bl	8005318 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 80011e0:	2104      	movs	r1, #4
 80011e2:	4876      	ldr	r0, [pc, #472]	@ (80013bc <main+0x294>)
 80011e4:	f004 f898 	bl	8005318 <HAL_TIM_PWM_Start>

  htim2.Instance->CCR1 = SERVO_CCR_AT_CENTER;
 80011e8:	4b72      	ldr	r3, [pc, #456]	@ (80013b4 <main+0x28c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f240 22fd 	movw	r2, #765	@ 0x2fd
 80011f0:	635a      	str	r2, [r3, #52]	@ 0x34
  htim9.Instance->CCR1 = MARKER_SERVO_HIGH_CCR;
 80011f2:	4b72      	ldr	r3, [pc, #456]	@ (80013bc <main+0x294>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	22fa      	movs	r2, #250	@ 0xfa
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
  htim9.Instance->CCR2 = MARKER_SERVO_HIGH_CCR;
 80011fa:	4b70      	ldr	r3, [pc, #448]	@ (80013bc <main+0x294>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	22fa      	movs	r2, #250	@ 0xfa
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38

  State nextState = STATE_IDLE;
 8001202:	2300      	movs	r3, #0
 8001204:	71fb      	strb	r3, [r7, #7]

  ADXL_setFilter();
 8001206:	f7ff fd94 	bl	8000d32 <ADXL_setFilter>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  switch (nextState){
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b04      	cmp	r3, #4
 800120e:	f200 80bc 	bhi.w	800138a <main+0x262>
 8001212:	a201      	add	r2, pc, #4	@ (adr r2, 8001218 <main+0xf0>)
 8001214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001218:	0800122d 	.word	0x0800122d
 800121c:	08001279 	.word	0x08001279
 8001220:	080012a7 	.word	0x080012a7
 8001224:	0800133b 	.word	0x0800133b
 8001228:	08001383 	.word	0x08001383
	  	  case STATE_IDLE:
	  		  currentState = STATE_IDLE;
 800122c:	4b64      	ldr	r3, [pc, #400]	@ (80013c0 <main+0x298>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
	  		  dis_off = DIS_OFF_DEFAULT;
 8001232:	4b64      	ldr	r3, [pc, #400]	@ (80013c4 <main+0x29c>)
 8001234:	229c      	movs	r2, #156	@ 0x9c
 8001236:	701a      	strb	r2, [r3, #0]
	  		  Drive_Motor_Control(DRIVE_MOTOR_MIN_SPEED);
 8001238:	2000      	movs	r0, #0
 800123a:	f000 fafd 	bl	8001838 <Drive_Motor_Control>
//	  		  Drive_Motor_Control(DRIVE_MOTOR_MAX_SPEED);
	  		  Steering_Servo_Position(STEERING_ANGLE_CENTER);
 800123e:	2000      	movs	r0, #0
 8001240:	f000 fa3a 	bl	80016b8 <Steering_Servo_Position>
	  		  current_encoder_value = __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001244:	4b60      	ldr	r3, [pc, #384]	@ (80013c8 <main+0x2a0>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2300      	movs	r3, #0
 800124a:	6253      	str	r3, [r2, #36]	@ 0x24
 800124c:	4a5f      	ldr	r2, [pc, #380]	@ (80013cc <main+0x2a4>)
 800124e:	6013      	str	r3, [r2, #0]
	  		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001256:	485e      	ldr	r0, [pc, #376]	@ (80013d0 <main+0x2a8>)
 8001258:	f002 fb94 	bl	8003984 <HAL_GPIO_WritePin>
	  		  if (S_startSurvey){
 800125c:	4b5d      	ldr	r3, [pc, #372]	@ (80013d4 <main+0x2ac>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 8095 	beq.w	8001390 <main+0x268>
	  			  nextState = STATE_STARTUP;
 8001266:	2301      	movs	r3, #1
 8001268:	71fb      	strb	r3, [r7, #7]
		  		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001270:	4857      	ldr	r0, [pc, #348]	@ (80013d0 <main+0x2a8>)
 8001272:	f002 fb87 	bl	8003984 <HAL_GPIO_WritePin>
	  		  }
	  		  break;
 8001276:	e08b      	b.n	8001390 <main+0x268>

	  	  case STATE_STARTUP:
	  		  currentState = STATE_STARTUP;
 8001278:	4b51      	ldr	r3, [pc, #324]	@ (80013c0 <main+0x298>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800127e:	2201      	movs	r2, #1
 8001280:	2180      	movs	r1, #128	@ 0x80
 8001282:	4853      	ldr	r0, [pc, #332]	@ (80013d0 <main+0x2a8>)
 8001284:	f002 fb7e 	bl	8003984 <HAL_GPIO_WritePin>
	  		  if (dis_off != (DIS_OFF_DEFAULT)){
 8001288:	4b4e      	ldr	r3, [pc, #312]	@ (80013c4 <main+0x29c>)
 800128a:	f993 3000 	ldrsb.w	r3, [r3]
 800128e:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001292:	d07f      	beq.n	8001394 <main+0x26c>
	  			  nextState = STATE_RUNNING;
 8001294:	2302      	movs	r3, #2
 8001296:	71fb      	strb	r3, [r7, #7]
		  		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800129e:	484c      	ldr	r0, [pc, #304]	@ (80013d0 <main+0x2a8>)
 80012a0:	f002 fb70 	bl	8003984 <HAL_GPIO_WritePin>
	  		  }
	  		  break;
 80012a4:	e076      	b.n	8001394 <main+0x26c>

	  	  case STATE_RUNNING:
	  		  currentState = STATE_RUNNING;
 80012a6:	4b46      	ldr	r3, [pc, #280]	@ (80013c0 <main+0x298>)
 80012a8:	2202      	movs	r2, #2
 80012aa:	701a      	strb	r2, [r3, #0]
	  		  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80012ac:	213c      	movs	r1, #60	@ 0x3c
 80012ae:	4846      	ldr	r0, [pc, #280]	@ (80013c8 <main+0x2a0>)
 80012b0:	f004 f9d2 	bl	8005658 <HAL_TIM_Encoder_Start_IT>
	  		  Steering_Servo_Control(dis_off);
 80012b4:	4b43      	ldr	r3, [pc, #268]	@ (80013c4 <main+0x29c>)
 80012b6:	f993 3000 	ldrsb.w	r3, [r3]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fa40 	bl	8001740 <Steering_Servo_Control>
			  Drive_Motor_Start(S_surveyDistanceSet);
 80012c0:	4b45      	ldr	r3, [pc, #276]	@ (80013d8 <main+0x2b0>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	ee07 3a90 	vmov	s15, r3
 80012c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012cc:	eeb0 0a67 	vmov.f32	s0, s15
 80012d0:	f000 facc 	bl	800186c <Drive_Motor_Start>
			  C_drivenDistanceSend = C_drivenDistance * 100;
 80012d4:	4b41      	ldr	r3, [pc, #260]	@ (80013dc <main+0x2b4>)
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80013e0 <main+0x2b8>
 80012de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e6:	ee17 3a90 	vmov	r3, s15
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b3d      	ldr	r3, [pc, #244]	@ (80013e4 <main+0x2bc>)
 80012ee:	801a      	strh	r2, [r3, #0]
			  TxData[0] = C_drivenDistanceSend & 0xFF;
 80012f0:	4b3c      	ldr	r3, [pc, #240]	@ (80013e4 <main+0x2bc>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b2e      	ldr	r3, [pc, #184]	@ (80013b0 <main+0x288>)
 80012f8:	701a      	strb	r2, [r3, #0]
			  TxData[1] = (C_drivenDistanceSend >> 8) & 0xFF;
 80012fa:	4b3a      	ldr	r3, [pc, #232]	@ (80013e4 <main+0x2bc>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	0a1b      	lsrs	r3, r3, #8
 8001300:	b29b      	uxth	r3, r3
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <main+0x288>)
 8001306:	705a      	strb	r2, [r3, #1]
			  //Add can message broadcast
			  ADXL_getAccelRaw(accelData);
 8001308:	4837      	ldr	r0, [pc, #220]	@ (80013e8 <main+0x2c0>)
 800130a:	f7ff fc2b 	bl	8000b64 <ADXL_getAccelRaw>
			  C_transverseHeight(S_WHEELBASE);
 800130e:	f240 40f1 	movw	r0, #1265	@ 0x4f1
 8001312:	f000 f8cf 	bl	80014b4 <C_transverseHeight>
//			  if (C_drivenDistance >= 2 && C_drivenDistance < 2.2) {
//				  htim9.Instance->CCR1 = 400;
//			  } else {
//				  htim9.Instance->CCR1 = MARKER_SERVO_HIGH_CCR;
//			  }
			  if (C_drivenDistance >= S_surveyDistanceSet){
 8001316:	4b30      	ldr	r3, [pc, #192]	@ (80013d8 <main+0x2b0>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001322:	4b2e      	ldr	r3, [pc, #184]	@ (80013dc <main+0x2b4>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	d900      	bls.n	8001334 <main+0x20c>
				  nextState = STATE_STOPPING;
			  }
	  		  break;
 8001332:	e032      	b.n	800139a <main+0x272>
				  nextState = STATE_STOPPING;
 8001334:	2303      	movs	r3, #3
 8001336:	71fb      	strb	r3, [r7, #7]
	  		  break;
 8001338:	e02f      	b.n	800139a <main+0x272>

	  	  case STATE_STOPPING:
	  		  currentState = STATE_STOPPING;
 800133a:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <main+0x298>)
 800133c:	2203      	movs	r2, #3
 800133e:	701a      	strb	r2, [r3, #0]
	  		  Drive_Motor_Control(DRIVE_MOTOR_MIN_SPEED);
 8001340:	2000      	movs	r0, #0
 8001342:	f000 fa79 	bl	8001838 <Drive_Motor_Control>
	  		  HAL_TIM_Encoder_Stop_IT(&htim4, TIM_CHANNEL_ALL);
 8001346:	213c      	movs	r1, #60	@ 0x3c
 8001348:	481f      	ldr	r0, [pc, #124]	@ (80013c8 <main+0x2a0>)
 800134a:	f004 fa33 	bl	80057b4 <HAL_TIM_Encoder_Stop_IT>
	  		  C_drivenDistance = 0;
 800134e:	4b23      	ldr	r3, [pc, #140]	@ (80013dc <main+0x2b4>)
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
	  		  current_encoder_value  = 0;
 8001356:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <main+0x2a4>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
	  		  encoder_position = 0;
 800135c:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <main+0x2c4>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
	  		  total_count = 0;
 8001362:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <main+0x2c8>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
	  		  extended_counter = 0;
 8001368:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <main+0x2cc>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
	  		  prev_encoder_value = 0;
 800136e:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <main+0x2d0>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
	  		  if (!S_startSurvey){
 8001374:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <main+0x2ac>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10d      	bne.n	8001398 <main+0x270>
	  			  nextState = STATE_IDLE;
 800137c:	2300      	movs	r3, #0
 800137e:	71fb      	strb	r3, [r7, #7]
	  		  }
	  		  break;
 8001380:	e00a      	b.n	8001398 <main+0x270>

	  	  case STATE_ERROR:
	  		  currentState = STATE_ERROR;
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <main+0x298>)
 8001384:	2204      	movs	r2, #4
 8001386:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001388:	e007      	b.n	800139a <main+0x272>

	  	  default:
	  		  nextState = STATE_ERROR;
 800138a:	2304      	movs	r3, #4
 800138c:	71fb      	strb	r3, [r7, #7]
	  		  break;
 800138e:	e004      	b.n	800139a <main+0x272>
	  		  break;
 8001390:	bf00      	nop
 8001392:	e002      	b.n	800139a <main+0x272>
	  		  break;
 8001394:	bf00      	nop
 8001396:	e000      	b.n	800139a <main+0x272>
	  		  break;
 8001398:	bf00      	nop
//	 	  }

//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

//	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  HAL_Delay(10);
 800139a:	200a      	movs	r0, #10
 800139c:	f000 ff08 	bl	80021b0 <HAL_Delay>
	  switch (nextState){
 80013a0:	e733      	b.n	800120a <main+0xe2>
 80013a2:	bf00      	nop
 80013a4:	200000d0 	.word	0x200000d0
 80013a8:	20000144 	.word	0x20000144
 80013ac:	200000fc 	.word	0x200000fc
 80013b0:	20000130 	.word	0x20000130
 80013b4:	2000020c 	.word	0x2000020c
 80013b8:	20000258 	.word	0x20000258
 80013bc:	200002f0 	.word	0x200002f0
 80013c0:	200000f8 	.word	0x200000f8
 80013c4:	20000164 	.word	0x20000164
 80013c8:	200002a4 	.word	0x200002a4
 80013cc:	20000184 	.word	0x20000184
 80013d0:	40020400 	.word	0x40020400
 80013d4:	20000168 	.word	0x20000168
 80013d8:	20000165 	.word	0x20000165
 80013dc:	20000198 	.word	0x20000198
 80013e0:	42c80000 	.word	0x42c80000
 80013e4:	2000019c 	.word	0x2000019c
 80013e8:	2000014c 	.word	0x2000014c
 80013ec:	20000188 	.word	0x20000188
 80013f0:	2000018c 	.word	0x2000018c
 80013f4:	20000190 	.word	0x20000190
 80013f8:	20000194 	.word	0x20000194

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b094      	sub	sp, #80	@ 0x50
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	2234      	movs	r2, #52	@ 0x34
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f005 fa1a 	bl	8006844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001420:	4b22      	ldr	r3, [pc, #136]	@ (80014ac <SystemClock_Config+0xb0>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	4a21      	ldr	r2, [pc, #132]	@ (80014ac <SystemClock_Config+0xb0>)
 8001426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800142a:	6413      	str	r3, [r2, #64]	@ 0x40
 800142c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <SystemClock_Config+0xb0>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001438:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <SystemClock_Config+0xb4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001440:	4a1b      	ldr	r2, [pc, #108]	@ (80014b0 <SystemClock_Config+0xb4>)
 8001442:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <SystemClock_Config+0xb4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001454:	2302      	movs	r3, #2
 8001456:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001458:	2301      	movs	r3, #1
 800145a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145c:	2310      	movs	r3, #16
 800145e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001460:	2300      	movs	r3, #0
 8001462:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	4618      	mov	r0, r3
 800146a:	f002 fabf 	bl	80039ec <HAL_RCC_OscConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001474:	f000 fa3e 	bl	80018f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	230f      	movs	r3, #15
 800147a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f002 fd58 	bl	8003f48 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800149e:	f000 fa29 	bl	80018f4 <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3750      	adds	r7, #80	@ 0x50
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40007000 	.word	0x40007000

080014b4 <C_transverseHeight>:

/* USER CODE BEGIN 4 */
void C_transverseHeight(uint16_t transverseLength) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	ed2d 8b02 	vpush	{d8}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
//    float accelData_g[3];
    ADXL_getAccelFloat(accelData_g);
 80014c2:	4829      	ldr	r0, [pc, #164]	@ (8001568 <C_transverseHeight+0xb4>)
 80014c4:	f7ff fbbc 	bl	8000c40 <ADXL_getAccelFloat>
    float accel_x = accelData_g[0];
 80014c8:	4b27      	ldr	r3, [pc, #156]	@ (8001568 <C_transverseHeight+0xb4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
    float accel_z = accelData_g[2];
 80014ce:	4b26      	ldr	r3, [pc, #152]	@ (8001568 <C_transverseHeight+0xb4>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	60bb      	str	r3, [r7, #8]
    //static float theta = 0;

    theta = atanf(accel_x / accel_z);
 80014d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80014d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80014dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014e0:	eeb0 0a66 	vmov.f32	s0, s13
 80014e4:	f005 f9e0 	bl	80068a8 <atanf>
 80014e8:	eef0 7a40 	vmov.f32	s15, s0
 80014ec:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <C_transverseHeight+0xb8>)
 80014ee:	edc3 7a00 	vstr	s15, [r3]
    //theta_deg =  theta * (180.0f / 3.14)
    height_diff = transverseLength * sinf(theta);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	ee07 3a90 	vmov	s15, r3
 80014f8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <C_transverseHeight+0xb8>)
 80014fe:	edd3 7a00 	vldr	s15, [r3]
 8001502:	eeb0 0a67 	vmov.f32	s0, s15
 8001506:	f005 fad7 	bl	8006ab8 <sinf>
 800150a:	eef0 7a40 	vmov.f32	s15, s0
 800150e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001512:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <C_transverseHeight+0xbc>)
 8001514:	edc3 7a00 	vstr	s15, [r3]
    height_diff_send = height_diff * 10;
 8001518:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <C_transverseHeight+0xbc>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800152a:	ee17 3a90 	vmov	r3, s15
 800152e:	b21a      	sxth	r2, r3
 8001530:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <C_transverseHeight+0xc0>)
 8001532:	801a      	strh	r2, [r3, #0]

    TxData[2] = (height_diff_send) & 0xFF;
 8001534:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <C_transverseHeight+0xc0>)
 8001536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <C_transverseHeight+0xc4>)
 800153e:	709a      	strb	r2, [r3, #2]
    TxData[3] = ((height_diff_send) >> 8) & 0xFF;
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <C_transverseHeight+0xc0>)
 8001542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001546:	121b      	asrs	r3, r3, #8
 8001548:	b21b      	sxth	r3, r3
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <C_transverseHeight+0xc4>)
 800154e:	70da      	strb	r2, [r3, #3]
    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001550:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <C_transverseHeight+0xc8>)
 8001552:	4a09      	ldr	r2, [pc, #36]	@ (8001578 <C_transverseHeight+0xc4>)
 8001554:	490a      	ldr	r1, [pc, #40]	@ (8001580 <C_transverseHeight+0xcc>)
 8001556:	480b      	ldr	r0, [pc, #44]	@ (8001584 <C_transverseHeight+0xd0>)
 8001558:	f001 fb0e 	bl	8002b78 <HAL_CAN_AddTxMessage>
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	ecbd 8b02 	vpop	{d8}
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000158 	.word	0x20000158
 800156c:	20000178 	.word	0x20000178
 8001570:	2000017c 	.word	0x2000017c
 8001574:	20000180 	.word	0x20000180
 8001578:	20000130 	.word	0x20000130
 800157c:	20000140 	.word	0x20000140
 8001580:	200000fc 	.word	0x200000fc
 8001584:	200000d0 	.word	0x200000d0

08001588 <CAN_Config>:

static void CAN_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	@ 0x28
 800158c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 800158e:	230d      	movs	r3, #13
 8001590:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001596:	2301      	movs	r3, #1
 8001598:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000; //Only ID 0x284 and 0x285 can pass through
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80015ae:	2301      	movs	r3, #1
 80015b0:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80015b6:	463b      	mov	r3, r7
 80015b8:	4619      	mov	r1, r3
 80015ba:	480a      	ldr	r0, [pc, #40]	@ (80015e4 <CAN_Config+0x5c>)
 80015bc:	f001 f9ac 	bl	8002918 <HAL_CAN_ConfigFilter>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <CAN_Config+0x42>
	{
		/* Filter configuration Error */
		Error_Handler();
 80015c6:	f000 f995 	bl	80018f4 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80015ca:	4806      	ldr	r0, [pc, #24]	@ (80015e4 <CAN_Config+0x5c>)
 80015cc:	f001 fa90 	bl	8002af0 <HAL_CAN_Start>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <CAN_Config+0x52>
	{
		/* Start Error */
		Error_Handler();
 80015d6:	f000 f98d 	bl	80018f4 <Error_Handler>
	}
}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	@ 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200000d0 	.word	0x200000d0

080015e8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80015f0:	4b28      	ldr	r3, [pc, #160]	@ (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80015f2:	4a29      	ldr	r2, [pc, #164]	@ (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80015f4:	2100      	movs	r1, #0
 80015f6:	4829      	ldr	r0, [pc, #164]	@ (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80015f8:	f001 fb8e 	bl	8002d18 <HAL_CAN_GetRxMessage>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001602:	2180      	movs	r1, #128	@ 0x80
 8001604:	4826      	ldr	r0, [pc, #152]	@ (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8001606:	f002 f9d6 	bl	80039b6 <HAL_GPIO_TogglePin>
		Error_Handler();
 800160a:	f000 f973 	bl	80018f4 <Error_Handler>
	}

	if (RxHeader.StdId == 0x123) {
 800160e:	4b22      	ldr	r3, [pc, #136]	@ (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f240 1223 	movw	r2, #291	@ 0x123
 8001616:	4293      	cmp	r3, r2
 8001618:	d10b      	bne.n	8001632 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800161a:	2101      	movs	r1, #1
 800161c:	4820      	ldr	r0, [pc, #128]	@ (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800161e:	f002 f9ca 	bl	80039b6 <HAL_GPIO_TogglePin>
		dis_off = RxData[0]*(-1);
 8001622:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	425b      	negs	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	b25a      	sxtb	r2, r3
 800162c:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	e01f      	b.n	8001672 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
	} else if (RxHeader.StdId == 0x102) {
 8001632:	4b19      	ldr	r3, [pc, #100]	@ (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800163a:	d11a      	bne.n	8001672 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
		S_surveyDistanceSet = RxData[0];
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800163e:	781a      	ldrb	r2, [r3, #0]
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001642:	701a      	strb	r2, [r3, #0]
		S_heightThreashold = RxData[1];
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001646:	785a      	ldrb	r2, [r3, #1]
 8001648:	4b18      	ldr	r3, [pc, #96]	@ (80016ac <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800164a:	701a      	strb	r2, [r3, #0]
		S_wheelBase = RxData[2] | (RxData[3] << 8);
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800164e:	789b      	ldrb	r3, [r3, #2]
 8001650:	b21a      	sxth	r2, r3
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001654:	78db      	ldrb	r3, [r3, #3]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	b21b      	sxth	r3, r3
 800165a:	4313      	orrs	r3, r2
 800165c:	b21b      	sxth	r3, r3
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8001662:	801a      	strh	r2, [r3, #0]
		S_startSurvey = RxData[4] & 0x01;
 8001664:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001666:	791b      	ldrb	r3, [r3, #4]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8001670:	701a      	strb	r2, [r3, #0]
	}

	if (RxHeader.StdId == 0x103) {
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f240 1203 	movw	r2, #259	@ 0x103
 800167a:	4293      	cmp	r3, r2
 800167c:	d106      	bne.n	800168c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
		S_startSurvey = RxData[0] & 0x01;
 800167e:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	b2da      	uxtb	r2, r3
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800168a:	701a      	strb	r2, [r3, #0]
	}

}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000138 	.word	0x20000138
 8001698:	20000114 	.word	0x20000114
 800169c:	200000d0 	.word	0x200000d0
 80016a0:	40020400 	.word	0x40020400
 80016a4:	20000164 	.word	0x20000164
 80016a8:	20000165 	.word	0x20000165
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000166 	.word	0x20000166
 80016b4:	20000168 	.word	0x20000168

080016b8 <Steering_Servo_Position>:

void Steering_Servo_Position(int8_t steeringAngle){
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
	if (steeringAngle < STEERING_ANGLE_MAX_LEFT) {
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	f113 0f14 	cmn.w	r3, #20
 80016ca:	da02      	bge.n	80016d2 <Steering_Servo_Position+0x1a>
		steeringAngle = STEERING_ANGLE_MAX_LEFT;   // clamp to -20°
 80016cc:	23ec      	movs	r3, #236	@ 0xec
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	e005      	b.n	80016de <Steering_Servo_Position+0x26>
	}
	else if (steeringAngle > STEERING_ANGLE_MAX_RIGHT) {
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b14      	cmp	r3, #20
 80016d8:	dd01      	ble.n	80016de <Steering_Servo_Position+0x26>
		steeringAngle = STEERING_ANGLE_MAX_RIGHT;  // clamp to +20°
 80016da:	2314      	movs	r3, #20
 80016dc:	71fb      	strb	r3, [r7, #7]
	}
	//Linear interpolation from steering angle to ccr value
	float ccrValue = SERVO_CCR_AT_NEG20
		+ ( (steeringAngle - STEERING_ANGLE_MAX_LEFT)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ea:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80016ee:	ee37 7a87 	vadd.f32	s14, s15, s14
			/ (STEERING_ANGLE_MAX_RIGHT - STEERING_ANGLE_MAX_LEFT) )
 80016f2:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001730 <Steering_Servo_Position+0x78>
 80016f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
		  * (SERVO_CCR_AT_POS20 - SERVO_CCR_AT_NEG20);
 80016fa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001734 <Steering_Servo_Position+0x7c>
 80016fe:	ee67 7a87 	vmul.f32	s15, s15, s14
	float ccrValue = SERVO_CCR_AT_NEG20
 8001702:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001738 <Steering_Servo_Position+0x80>
 8001706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800170a:	edc7 7a03 	vstr	s15, [r7, #12]

	//Write to the timer’s CCR register (cast to uint16_t)
	htim2.Instance->CCR1 = (uint16_t) ccrValue;
 800170e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001716:	ee17 3a90 	vmov	r3, s15
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b07      	ldr	r3, [pc, #28]	@ (800173c <Steering_Servo_Position+0x84>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	42200000 	.word	0x42200000
 8001734:	43160000 	.word	0x43160000
 8001738:	442c8000 	.word	0x442c8000
 800173c:	2000020c 	.word	0x2000020c

08001740 <Steering_Servo_Control>:

void Steering_Servo_Control(int8_t offsetVal){
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
	//Clamp dis_off to valid range
	static float integral = 0.0f;     // integral term (accumulated error)

	if (offsetVal != -100){
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001752:	d05b      	beq.n	800180c <Steering_Servo_Control+0xcc>
		if (offsetVal < DIS_OFF_MAX_LEFT) {
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	f113 0f43 	cmn.w	r3, #67	@ 0x43
 800175c:	da02      	bge.n	8001764 <Steering_Servo_Control+0x24>
			offsetVal = DIS_OFF_MAX_LEFT;
 800175e:	23bd      	movs	r3, #189	@ 0xbd
 8001760:	71fb      	strb	r3, [r7, #7]
 8001762:	e005      	b.n	8001770 <Steering_Servo_Control+0x30>
		} else if (offsetVal >= DIS_OFF_MAX_RIGHT) {
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	2b42      	cmp	r3, #66	@ 0x42
 800176a:	dd01      	ble.n	8001770 <Steering_Servo_Control+0x30>
			offsetVal = DIS_OFF_MAX_RIGHT;
 800176c:	2343      	movs	r3, #67	@ 0x43
 800176e:	71fb      	strb	r3, [r7, #7]
		}

		float error = offsetVal;   // setpoint is zero offset
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177c:	edc7 7a05 	vstr	s15, [r7, #20]
		integral += error * DT;           // integrate
 8001780:	edd7 7a05 	vldr	s15, [r7, #20]
 8001784:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001814 <Steering_Servo_Control+0xd4>
 8001788:	ee27 7a87 	vmul.f32	s14, s15, s14
 800178c:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <Steering_Servo_Control+0xd8>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <Steering_Servo_Control+0xd8>)
 8001798:	edc3 7a00 	vstr	s15, [r3]

		// PID output = KP*error + KI*integral + KD*derivative
		float pidOutput = (KP * error) + (KI * integral);
 800179c:	edd7 7a05 	vldr	s15, [r7, #20]
 80017a0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001818 <Steering_Servo_Control+0xd8>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800181c <Steering_Servo_Control+0xdc>
 80017ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b6:	edc7 7a04 	vstr	s15, [r7, #16]

		//Linear interpolation from dis_off to steering angle
		float steerAngle = STEERING_ANGLE_MAX_LEFT
			+ ( (float)(pidOutput - DIS_OFF_MAX_LEFT)
 80017ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80017be:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001820 <Steering_Servo_Control+0xe0>
 80017c2:	ee37 7a87 	vadd.f32	s14, s15, s14
				/ (float)(DIS_OFF_MAX_RIGHT - DIS_OFF_MAX_LEFT) )
 80017c6:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001824 <Steering_Servo_Control+0xe4>
 80017ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
			  * ( STEERING_ANGLE_MAX_RIGHT - STEERING_ANGLE_MAX_LEFT );
 80017ce:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001828 <Steering_Servo_Control+0xe8>
 80017d2:	ee67 7a87 	vmul.f32	s15, s15, s14
		float steerAngle = STEERING_ANGLE_MAX_LEFT
 80017d6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80017da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017de:	edc7 7a03 	vstr	s15, [r7, #12]

		Steering_Servo_Position(steerAngle);
 80017e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ea:	edc7 7a00 	vstr	s15, [r7]
 80017ee:	783b      	ldrb	r3, [r7, #0]
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff60 	bl	80016b8 <Steering_Servo_Position>
		integral_global = integral;
 80017f8:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <Steering_Servo_Control+0xd8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0b      	ldr	r2, [pc, #44]	@ (800182c <Steering_Servo_Control+0xec>)
 80017fe:	6013      	str	r3, [r2, #0]
		pidOutput_global = pidOutput;
 8001800:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <Steering_Servo_Control+0xf0>)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	6013      	str	r3, [r2, #0]
		steerAngle_global = steerAngle;
 8001806:	4a0b      	ldr	r2, [pc, #44]	@ (8001834 <Steering_Servo_Control+0xf4>)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6013      	str	r3, [r2, #0]
	}
}
 800180c:	bf00      	nop
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	3c23d70a 	.word	0x3c23d70a
 8001818:	200001a0 	.word	0x200001a0
 800181c:	00000000 	.word	0x00000000
 8001820:	42860000 	.word	0x42860000
 8001824:	43060000 	.word	0x43060000
 8001828:	42200000 	.word	0x42200000
 800182c:	2000016c 	.word	0x2000016c
 8001830:	20000170 	.word	0x20000170
 8001834:	20000174 	.word	0x20000174

08001838 <Drive_Motor_Control>:

void Drive_Motor_Control(uint16_t speed){
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
	//Clamp input speed
	if (speed >= DRIVE_MOTOR_MIN_SPEED && speed <= DRIVE_MOTOR_MAX_SPEED){
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001848:	d804      	bhi.n	8001854 <Drive_Motor_Control+0x1c>
		  htim3.Instance->CCR1 = speed;
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <Drive_Motor_Control+0x30>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	88fa      	ldrh	r2, [r7, #6]
 8001850:	635a      	str	r2, [r3, #52]	@ 0x34
	} else {
		  htim3.Instance->CCR1 = DRIVE_MOTOR_MIN_SPEED;
	}
}
 8001852:	e003      	b.n	800185c <Drive_Motor_Control+0x24>
		  htim3.Instance->CCR1 = DRIVE_MOTOR_MIN_SPEED;
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <Drive_Motor_Control+0x30>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2200      	movs	r2, #0
 800185a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	20000258 	.word	0x20000258

0800186c <Drive_Motor_Start>:

void Drive_Motor_Start(float drivenDistance){
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint8_t fullSpeed = 0;
	//Speed ramp up
	if (!fullSpeed) {
 8001876:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <Drive_Motor_Start+0x80>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d115      	bne.n	80018aa <Drive_Motor_Start+0x3e>
		for (int speed = 100; speed < DRIVE_MOTOR_MAX_SPEED; speed += 2){
 800187e:	2364      	movs	r3, #100	@ 0x64
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	e00a      	b.n	800189a <Drive_Motor_Start+0x2e>
			Drive_Motor_Control(speed);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	b29b      	uxth	r3, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ffd5 	bl	8001838 <Drive_Motor_Control>
			HAL_Delay(1);
 800188e:	2001      	movs	r0, #1
 8001890:	f000 fc8e 	bl	80021b0 <HAL_Delay>
		for (int speed = 100; speed < DRIVE_MOTOR_MAX_SPEED; speed += 2){
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3302      	adds	r3, #2
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018a0:	dbf0      	blt.n	8001884 <Drive_Motor_Start+0x18>
		}
		fullSpeed = 1;
 80018a2:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <Drive_Motor_Start+0x80>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
	} else if (C_drivenDistance >= drivenDistance){
		Drive_Motor_Control(DRIVE_MOTOR_MIN_SPEED);
	} else if (C_drivenDistance < drivenDistance){
		Drive_Motor_Control(DRIVE_MOTOR_MAX_SPEED);
	}
}
 80018a8:	e01c      	b.n	80018e4 <Drive_Motor_Start+0x78>
	} else if (C_drivenDistance >= drivenDistance){
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <Drive_Motor_Start+0x84>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80018b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	d803      	bhi.n	80018c6 <Drive_Motor_Start+0x5a>
		Drive_Motor_Control(DRIVE_MOTOR_MIN_SPEED);
 80018be:	2000      	movs	r0, #0
 80018c0:	f7ff ffba 	bl	8001838 <Drive_Motor_Control>
}
 80018c4:	e00e      	b.n	80018e4 <Drive_Motor_Start+0x78>
	} else if (C_drivenDistance < drivenDistance){
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <Drive_Motor_Start+0x84>)
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80018d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d8:	dc00      	bgt.n	80018dc <Drive_Motor_Start+0x70>
}
 80018da:	e003      	b.n	80018e4 <Drive_Motor_Start+0x78>
		Drive_Motor_Control(DRIVE_MOTOR_MAX_SPEED);
 80018dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018e0:	f7ff ffaa 	bl	8001838 <Drive_Motor_Control>
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200001a4 	.word	0x200001a4
 80018f0:	20000198 	.word	0x20000198

080018f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f8:	b672      	cpsid	i
}
 80018fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <Error_Handler+0x8>

08001900 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001904:	4b1b      	ldr	r3, [pc, #108]	@ (8001974 <MX_SPI3_Init+0x74>)
 8001906:	4a1c      	ldr	r2, [pc, #112]	@ (8001978 <MX_SPI3_Init+0x78>)
 8001908:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800190a:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <MX_SPI3_Init+0x74>)
 800190c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001910:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001912:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <MX_SPI3_Init+0x74>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001918:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <MX_SPI3_Init+0x74>)
 800191a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800191e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <MX_SPI3_Init+0x74>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001926:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <MX_SPI3_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800192c:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <MX_SPI3_Init+0x74>)
 800192e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001932:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001934:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <MX_SPI3_Init+0x74>)
 8001936:	2210      	movs	r2, #16
 8001938:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800193a:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <MX_SPI3_Init+0x74>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001940:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <MX_SPI3_Init+0x74>)
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001946:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <MX_SPI3_Init+0x74>)
 8001948:	2200      	movs	r2, #0
 800194a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800194c:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <MX_SPI3_Init+0x74>)
 800194e:	2207      	movs	r2, #7
 8001950:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001952:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <MX_SPI3_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <MX_SPI3_Init+0x74>)
 800195a:	2208      	movs	r2, #8
 800195c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	@ (8001974 <MX_SPI3_Init+0x74>)
 8001960:	f002 fca4 	bl	80042ac <HAL_SPI_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800196a:	f7ff ffc3 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200001a8 	.word	0x200001a8
 8001978:	40003c00 	.word	0x40003c00

0800197c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	@ 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a17      	ldr	r2, [pc, #92]	@ (80019f8 <HAL_SPI_MspInit+0x7c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d128      	bne.n	80019f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800199e:	4b17      	ldr	r3, [pc, #92]	@ (80019fc <HAL_SPI_MspInit+0x80>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	4a16      	ldr	r2, [pc, #88]	@ (80019fc <HAL_SPI_MspInit+0x80>)
 80019a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019aa:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <HAL_SPI_MspInit+0x80>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <HAL_SPI_MspInit+0x80>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a10      	ldr	r2, [pc, #64]	@ (80019fc <HAL_SPI_MspInit+0x80>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <HAL_SPI_MspInit+0x80>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80019ce:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80019d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019e0:	2306      	movs	r3, #6
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <HAL_SPI_MspInit+0x84>)
 80019ec:	f001 fe1e 	bl	800362c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80019f0:	bf00      	nop
 80019f2:	3728      	adds	r7, #40	@ 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40003c00 	.word	0x40003c00
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020800 	.word	0x40020800

08001a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <HAL_MspInit+0x44>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a48 <HAL_MspInit+0x44>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a16:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <HAL_MspInit+0x44>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <HAL_MspInit+0x44>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a26:	4a08      	ldr	r2, [pc, #32]	@ (8001a48 <HAL_MspInit+0x44>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_MspInit+0x44>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <NMI_Handler+0x4>

08001a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <MemManage_Handler+0x4>

08001a64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa2:	f000 fb65 	bl	8002170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <CAN1_RX0_IRQHandler+0x10>)
 8001ab2:	f001 fa79 	bl	8002fa8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200000d0 	.word	0x200000d0

08001ac0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ac4:	4802      	ldr	r0, [pc, #8]	@ (8001ad0 <TIM2_IRQHandler+0x10>)
 8001ac6:	f003 ff3a 	bl	800593e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000020c 	.word	0x2000020c

08001ad4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ad8:	4802      	ldr	r0, [pc, #8]	@ (8001ae4 <TIM4_IRQHandler+0x10>)
 8001ada:	f003 ff30 	bl	800593e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002a4 	.word	0x200002a4

08001ae8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aec:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <SystemInit+0x20>)
 8001aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001af2:	4a05      	ldr	r2, [pc, #20]	@ (8001b08 <SystemInit+0x20>)
 8001af4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001af8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08e      	sub	sp, #56	@ 0x38
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b20:	f107 031c 	add.w	r3, r7, #28
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	611a      	str	r2, [r3, #16]
 8001b3a:	615a      	str	r2, [r3, #20]
 8001b3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf4 <MX_TIM2_Init+0xe8>)
 8001b40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001b46:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <MX_TIM2_Init+0xe8>)
 8001b48:	221f      	movs	r2, #31
 8001b4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4c:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <MX_TIM2_Init+0xe8>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001b52:	4b28      	ldr	r3, [pc, #160]	@ (8001bf4 <MX_TIM2_Init+0xe8>)
 8001b54:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5a:	4b26      	ldr	r3, [pc, #152]	@ (8001bf4 <MX_TIM2_Init+0xe8>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <MX_TIM2_Init+0xe8>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b66:	4823      	ldr	r0, [pc, #140]	@ (8001bf4 <MX_TIM2_Init+0xe8>)
 8001b68:	f003 fb1e 	bl	80051a8 <HAL_TIM_Base_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b72:	f7ff febf 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b80:	4619      	mov	r1, r3
 8001b82:	481c      	ldr	r0, [pc, #112]	@ (8001bf4 <MX_TIM2_Init+0xe8>)
 8001b84:	f004 f8f6 	bl	8005d74 <HAL_TIM_ConfigClockSource>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b8e:	f7ff feb1 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b92:	4818      	ldr	r0, [pc, #96]	@ (8001bf4 <MX_TIM2_Init+0xe8>)
 8001b94:	f003 fb5f 	bl	8005256 <HAL_TIM_PWM_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b9e:	f7ff fea9 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4810      	ldr	r0, [pc, #64]	@ (8001bf4 <MX_TIM2_Init+0xe8>)
 8001bb2:	f004 fd9b 	bl	80066ec <HAL_TIMEx_MasterConfigSynchronization>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001bbc:	f7ff fe9a 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc0:	2360      	movs	r3, #96	@ 0x60
 8001bc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4807      	ldr	r0, [pc, #28]	@ (8001bf4 <MX_TIM2_Init+0xe8>)
 8001bd8:	f003 ffb8 	bl	8005b4c <HAL_TIM_PWM_ConfigChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001be2:	f7ff fe87 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001be6:	4803      	ldr	r0, [pc, #12]	@ (8001bf4 <MX_TIM2_Init+0xe8>)
 8001be8:	f000 f9da 	bl	8001fa0 <HAL_TIM_MspPostInit>

}
 8001bec:	bf00      	nop
 8001bee:	3738      	adds	r7, #56	@ 0x38
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	2000020c 	.word	0x2000020c

08001bf8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08e      	sub	sp, #56	@ 0x38
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c18:	463b      	mov	r3, r7
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]
 8001c26:	615a      	str	r2, [r3, #20]
 8001c28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce0 <MX_TIM3_Init+0xe8>)
 8001c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce4 <MX_TIM3_Init+0xec>)
 8001c2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8001c30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce0 <MX_TIM3_Init+0xe8>)
 8001c32:	2207      	movs	r2, #7
 8001c34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c36:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce0 <MX_TIM3_Init+0xe8>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001c3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ce0 <MX_TIM3_Init+0xe8>)
 8001c3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c44:	4b26      	ldr	r3, [pc, #152]	@ (8001ce0 <MX_TIM3_Init+0xe8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ce0 <MX_TIM3_Init+0xe8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c50:	4823      	ldr	r0, [pc, #140]	@ (8001ce0 <MX_TIM3_Init+0xe8>)
 8001c52:	f003 faa9 	bl	80051a8 <HAL_TIM_Base_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c5c:	f7ff fe4a 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	481c      	ldr	r0, [pc, #112]	@ (8001ce0 <MX_TIM3_Init+0xe8>)
 8001c6e:	f004 f881 	bl	8005d74 <HAL_TIM_ConfigClockSource>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c78:	f7ff fe3c 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c7c:	4818      	ldr	r0, [pc, #96]	@ (8001ce0 <MX_TIM3_Init+0xe8>)
 8001c7e:	f003 faea 	bl	8005256 <HAL_TIM_PWM_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c88:	f7ff fe34 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4811      	ldr	r0, [pc, #68]	@ (8001ce0 <MX_TIM3_Init+0xe8>)
 8001c9c:	f004 fd26 	bl	80066ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001ca6:	f7ff fe25 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001caa:	2360      	movs	r3, #96	@ 0x60
 8001cac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cba:	463b      	mov	r3, r7
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4807      	ldr	r0, [pc, #28]	@ (8001ce0 <MX_TIM3_Init+0xe8>)
 8001cc2:	f003 ff43 	bl	8005b4c <HAL_TIM_PWM_ConfigChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001ccc:	f7ff fe12 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cd0:	4803      	ldr	r0, [pc, #12]	@ (8001ce0 <MX_TIM3_Init+0xe8>)
 8001cd2:	f000 f965 	bl	8001fa0 <HAL_TIM_MspPostInit>

}
 8001cd6:	bf00      	nop
 8001cd8:	3738      	adds	r7, #56	@ 0x38
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000258 	.word	0x20000258
 8001ce4:	40000400 	.word	0x40000400

08001ce8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08c      	sub	sp, #48	@ 0x30
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2224      	movs	r2, #36	@ 0x24
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 fda4 	bl	8006844 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d06:	4b21      	ldr	r3, [pc, #132]	@ (8001d8c <MX_TIM4_Init+0xa4>)
 8001d08:	4a21      	ldr	r2, [pc, #132]	@ (8001d90 <MX_TIM4_Init+0xa8>)
 8001d0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d8c <MX_TIM4_Init+0xa4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d12:	4b1e      	ldr	r3, [pc, #120]	@ (8001d8c <MX_TIM4_Init+0xa4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d18:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <MX_TIM4_Init+0xa4>)
 8001d1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d20:	4b1a      	ldr	r3, [pc, #104]	@ (8001d8c <MX_TIM4_Init+0xa4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d26:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <MX_TIM4_Init+0xa4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d34:	2301      	movs	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d44:	2301      	movs	r3, #1
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	4619      	mov	r1, r3
 8001d56:	480d      	ldr	r0, [pc, #52]	@ (8001d8c <MX_TIM4_Init+0xa4>)
 8001d58:	f003 fbd8 	bl	800550c <HAL_TIM_Encoder_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001d62:	f7ff fdc7 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d6e:	463b      	mov	r3, r7
 8001d70:	4619      	mov	r1, r3
 8001d72:	4806      	ldr	r0, [pc, #24]	@ (8001d8c <MX_TIM4_Init+0xa4>)
 8001d74:	f004 fcba 	bl	80066ec <HAL_TIMEx_MasterConfigSynchronization>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001d7e:	f7ff fdb9 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	3730      	adds	r7, #48	@ 0x30
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200002a4 	.word	0x200002a4
 8001d90:	40000800 	.word	0x40000800

08001d94 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08c      	sub	sp, #48	@ 0x30
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d9a:	f107 0320 	add.w	r3, r7, #32
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	615a      	str	r2, [r3, #20]
 8001db8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001dba:	4b2b      	ldr	r3, [pc, #172]	@ (8001e68 <MX_TIM9_Init+0xd4>)
 8001dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8001e6c <MX_TIM9_Init+0xd8>)
 8001dbe:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 32-1;
 8001dc0:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <MX_TIM9_Init+0xd4>)
 8001dc2:	221f      	movs	r2, #31
 8001dc4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc6:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <MX_TIM9_Init+0xd4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 8001dcc:	4b26      	ldr	r3, [pc, #152]	@ (8001e68 <MX_TIM9_Init+0xd4>)
 8001dce:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001dd2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd4:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <MX_TIM9_Init+0xd4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dda:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <MX_TIM9_Init+0xd4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001de0:	4821      	ldr	r0, [pc, #132]	@ (8001e68 <MX_TIM9_Init+0xd4>)
 8001de2:	f003 f9e1 	bl	80051a8 <HAL_TIM_Base_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001dec:	f7ff fd82 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001df6:	f107 0320 	add.w	r3, r7, #32
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	481a      	ldr	r0, [pc, #104]	@ (8001e68 <MX_TIM9_Init+0xd4>)
 8001dfe:	f003 ffb9 	bl	8005d74 <HAL_TIM_ConfigClockSource>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001e08:	f7ff fd74 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001e0c:	4816      	ldr	r0, [pc, #88]	@ (8001e68 <MX_TIM9_Init+0xd4>)
 8001e0e:	f003 fa22 	bl	8005256 <HAL_TIM_PWM_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001e18:	f7ff fd6c 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e1c:	2360      	movs	r3, #96	@ 0x60
 8001e1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2200      	movs	r2, #0
 8001e30:	4619      	mov	r1, r3
 8001e32:	480d      	ldr	r0, [pc, #52]	@ (8001e68 <MX_TIM9_Init+0xd4>)
 8001e34:	f003 fe8a 	bl	8005b4c <HAL_TIM_PWM_ConfigChannel>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001e3e:	f7ff fd59 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2204      	movs	r2, #4
 8001e46:	4619      	mov	r1, r3
 8001e48:	4807      	ldr	r0, [pc, #28]	@ (8001e68 <MX_TIM9_Init+0xd4>)
 8001e4a:	f003 fe7f 	bl	8005b4c <HAL_TIM_PWM_ConfigChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8001e54:	f7ff fd4e 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001e58:	4803      	ldr	r0, [pc, #12]	@ (8001e68 <MX_TIM9_Init+0xd4>)
 8001e5a:	f000 f8a1 	bl	8001fa0 <HAL_TIM_MspPostInit>

}
 8001e5e:	bf00      	nop
 8001e60:	3730      	adds	r7, #48	@ 0x30
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200002f0 	.word	0x200002f0
 8001e6c:	40014000 	.word	0x40014000

08001e70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e80:	d114      	bne.n	8001eac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e82:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <HAL_TIM_Base_MspInit+0x8c>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <HAL_TIM_Base_MspInit+0x8c>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <HAL_TIM_Base_MspInit+0x8c>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	201c      	movs	r0, #28
 8001ea0:	f001 fb8d 	bl	80035be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ea4:	201c      	movs	r0, #28
 8001ea6:	f001 fba6 	bl	80035f6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001eaa:	e022      	b.n	8001ef2 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a13      	ldr	r2, [pc, #76]	@ (8001f00 <HAL_TIM_Base_MspInit+0x90>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eb6:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <HAL_TIM_Base_MspInit+0x8c>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	4a10      	ldr	r2, [pc, #64]	@ (8001efc <HAL_TIM_Base_MspInit+0x8c>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <HAL_TIM_Base_MspInit+0x8c>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
}
 8001ece:	e010      	b.n	8001ef2 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM9)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8001f04 <HAL_TIM_Base_MspInit+0x94>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <HAL_TIM_Base_MspInit+0x8c>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	4a07      	ldr	r2, [pc, #28]	@ (8001efc <HAL_TIM_Base_MspInit+0x8c>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee6:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <HAL_TIM_Base_MspInit+0x8c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40014000 	.word	0x40014000

08001f08 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1b      	ldr	r2, [pc, #108]	@ (8001f94 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d130      	bne.n	8001f8c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f36:	4b18      	ldr	r3, [pc, #96]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f42:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	4a14      	ldr	r2, [pc, #80]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4e:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f5a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	4809      	ldr	r0, [pc, #36]	@ (8001f9c <HAL_TIM_Encoder_MspInit+0x94>)
 8001f78:	f001 fb58 	bl	800362c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	201e      	movs	r0, #30
 8001f82:	f001 fb1c 	bl	80035be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f86:	201e      	movs	r0, #30
 8001f88:	f001 fb35 	bl	80035f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	@ 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40000800 	.word	0x40000800
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020c00 	.word	0x40020c00

08001fa0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	@ 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc0:	d11c      	bne.n	8001ffc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	4b32      	ldr	r3, [pc, #200]	@ (800208c <HAL_TIM_MspPostInit+0xec>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a31      	ldr	r2, [pc, #196]	@ (800208c <HAL_TIM_MspPostInit+0xec>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b2f      	ldr	r3, [pc, #188]	@ (800208c <HAL_TIM_MspPostInit+0xec>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fea:	2301      	movs	r3, #1
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4826      	ldr	r0, [pc, #152]	@ (8002090 <HAL_TIM_MspPostInit+0xf0>)
 8001ff6:	f001 fb19 	bl	800362c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001ffa:	e042      	b.n	8002082 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM3)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a24      	ldr	r2, [pc, #144]	@ (8002094 <HAL_TIM_MspPostInit+0xf4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d11c      	bne.n	8002040 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002006:	4b21      	ldr	r3, [pc, #132]	@ (800208c <HAL_TIM_MspPostInit+0xec>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a20      	ldr	r2, [pc, #128]	@ (800208c <HAL_TIM_MspPostInit+0xec>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b1e      	ldr	r3, [pc, #120]	@ (800208c <HAL_TIM_MspPostInit+0xec>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800201e:	2340      	movs	r3, #64	@ 0x40
 8002020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800202a:	2302      	movs	r3, #2
 800202c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800202e:	2302      	movs	r3, #2
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	4619      	mov	r1, r3
 8002038:	4817      	ldr	r0, [pc, #92]	@ (8002098 <HAL_TIM_MspPostInit+0xf8>)
 800203a:	f001 faf7 	bl	800362c <HAL_GPIO_Init>
}
 800203e:	e020      	b.n	8002082 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM9)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a15      	ldr	r2, [pc, #84]	@ (800209c <HAL_TIM_MspPostInit+0xfc>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d11b      	bne.n	8002082 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800204a:	4b10      	ldr	r3, [pc, #64]	@ (800208c <HAL_TIM_MspPostInit+0xec>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	4a0f      	ldr	r2, [pc, #60]	@ (800208c <HAL_TIM_MspPostInit+0xec>)
 8002050:	f043 0310 	orr.w	r3, r3, #16
 8002054:	6313      	str	r3, [r2, #48]	@ 0x30
 8002056:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <HAL_TIM_MspPostInit+0xec>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002062:	2360      	movs	r3, #96	@ 0x60
 8002064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002072:	2303      	movs	r3, #3
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	4619      	mov	r1, r3
 800207c:	4808      	ldr	r0, [pc, #32]	@ (80020a0 <HAL_TIM_MspPostInit+0x100>)
 800207e:	f001 fad5 	bl	800362c <HAL_GPIO_Init>
}
 8002082:	bf00      	nop
 8002084:	3728      	adds	r7, #40	@ 0x28
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	40020000 	.word	0x40020000
 8002094:	40000400 	.word	0x40000400
 8002098:	40020800 	.word	0x40020800
 800209c:	40014000 	.word	0x40014000
 80020a0:	40021000 	.word	0x40021000

080020a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020a8:	f7ff fd1e 	bl	8001ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020ac:	480c      	ldr	r0, [pc, #48]	@ (80020e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ae:	490d      	ldr	r1, [pc, #52]	@ (80020e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020b0:	4a0d      	ldr	r2, [pc, #52]	@ (80020e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b4:	e002      	b.n	80020bc <LoopCopyDataInit>

080020b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ba:	3304      	adds	r3, #4

080020bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c0:	d3f9      	bcc.n	80020b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c2:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020c4:	4c0a      	ldr	r4, [pc, #40]	@ (80020f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c8:	e001      	b.n	80020ce <LoopFillZerobss>

080020ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020cc:	3204      	adds	r2, #4

080020ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d0:	d3fb      	bcc.n	80020ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020d2:	f004 fbc5 	bl	8006860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020d6:	f7ff f827 	bl	8001128 <main>
  bx  lr    
 80020da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020dc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80020e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80020e8:	08006dc0 	.word	0x08006dc0
  ldr r2, =_sbss
 80020ec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80020f0:	20000478 	.word	0x20000478

080020f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f4:	e7fe      	b.n	80020f4 <ADC_IRQHandler>

080020f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fa:	2003      	movs	r0, #3
 80020fc:	f001 fa54 	bl	80035a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002100:	200f      	movs	r0, #15
 8002102:	f000 f805 	bl	8002110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002106:	f7ff fc7d 	bl	8001a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <HAL_InitTick+0x54>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <HAL_InitTick+0x58>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
 8002122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002126:	fbb3 f3f1 	udiv	r3, r3, r1
 800212a:	fbb2 f3f3 	udiv	r3, r2, r3
 800212e:	4618      	mov	r0, r3
 8002130:	f001 fa6f 	bl	8003612 <HAL_SYSTICK_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e00e      	b.n	800215c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b0f      	cmp	r3, #15
 8002142:	d80a      	bhi.n	800215a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002144:	2200      	movs	r2, #0
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f001 fa37 	bl	80035be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002150:	4a06      	ldr	r2, [pc, #24]	@ (800216c <HAL_InitTick+0x5c>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000004 	.word	0x20000004
 8002168:	2000000c 	.word	0x2000000c
 800216c:	20000008 	.word	0x20000008

08002170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <HAL_IncTick+0x20>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_IncTick+0x24>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4413      	add	r3, r2
 8002180:	4a04      	ldr	r2, [pc, #16]	@ (8002194 <HAL_IncTick+0x24>)
 8002182:	6013      	str	r3, [r2, #0]
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	2000000c 	.word	0x2000000c
 8002194:	2000033c 	.word	0x2000033c

08002198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return uwTick;
 800219c:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <HAL_GetTick+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	2000033c 	.word	0x2000033c

080021b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff ffee 	bl	8002198 <HAL_GetTick>
 80021bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c8:	d005      	beq.n	80021d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ca:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <HAL_Delay+0x44>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4413      	add	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021d6:	bf00      	nop
 80021d8:	f7ff ffde 	bl	8002198 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d8f7      	bhi.n	80021d8 <HAL_Delay+0x28>
  {
  }
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000000c 	.word	0x2000000c

080021f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e031      	b.n	8002272 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fdf2 	bl	8000e00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	d116      	bne.n	8002264 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800223a:	4b10      	ldr	r3, [pc, #64]	@ (800227c <HAL_ADC_Init+0x84>)
 800223c:	4013      	ands	r3, r2
 800223e:	f043 0202 	orr.w	r2, r3, #2
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f970 	bl	800252c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	f023 0303 	bic.w	r3, r3, #3
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	641a      	str	r2, [r3, #64]	@ 0x40
 8002262:	e001      	b.n	8002268 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	ffffeefd 	.word	0xffffeefd

08002280 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x1c>
 8002298:	2302      	movs	r3, #2
 800229a:	e136      	b.n	800250a <HAL_ADC_ConfigChannel+0x28a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b09      	cmp	r3, #9
 80022aa:	d93a      	bls.n	8002322 <HAL_ADC_ConfigChannel+0xa2>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022b4:	d035      	beq.n	8002322 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68d9      	ldr	r1, [r3, #12]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	3b1e      	subs	r3, #30
 80022cc:	2207      	movs	r2, #7
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	400a      	ands	r2, r1
 80022da:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a8d      	ldr	r2, [pc, #564]	@ (8002518 <HAL_ADC_ConfigChannel+0x298>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d10a      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68d9      	ldr	r1, [r3, #12]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	061a      	lsls	r2, r3, #24
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022fa:	e035      	b.n	8002368 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68d9      	ldr	r1, [r3, #12]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	4603      	mov	r3, r0
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4403      	add	r3, r0
 8002314:	3b1e      	subs	r3, #30
 8002316:	409a      	lsls	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002320:	e022      	b.n	8002368 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6919      	ldr	r1, [r3, #16]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	2207      	movs	r2, #7
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43da      	mvns	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	400a      	ands	r2, r1
 8002344:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6919      	ldr	r1, [r3, #16]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	4618      	mov	r0, r3
 8002358:	4603      	mov	r3, r0
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4403      	add	r3, r0
 800235e:	409a      	lsls	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b06      	cmp	r3, #6
 800236e:	d824      	bhi.n	80023ba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	3b05      	subs	r3, #5
 8002382:	221f      	movs	r2, #31
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43da      	mvns	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	400a      	ands	r2, r1
 8002390:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	3b05      	subs	r3, #5
 80023ac:	fa00 f203 	lsl.w	r2, r0, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80023b8:	e04c      	b.n	8002454 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b0c      	cmp	r3, #12
 80023c0:	d824      	bhi.n	800240c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	3b23      	subs	r3, #35	@ 0x23
 80023d4:	221f      	movs	r2, #31
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	400a      	ands	r2, r1
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	3b23      	subs	r3, #35	@ 0x23
 80023fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	631a      	str	r2, [r3, #48]	@ 0x30
 800240a:	e023      	b.n	8002454 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	3b41      	subs	r3, #65	@ 0x41
 800241e:	221f      	movs	r2, #31
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43da      	mvns	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	400a      	ands	r2, r1
 800242c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	4618      	mov	r0, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3b41      	subs	r3, #65	@ 0x41
 8002448:	fa00 f203 	lsl.w	r2, r0, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a30      	ldr	r2, [pc, #192]	@ (800251c <HAL_ADC_ConfigChannel+0x29c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d10a      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1f4>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002466:	d105      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002468:	4b2d      	ldr	r3, [pc, #180]	@ (8002520 <HAL_ADC_ConfigChannel+0x2a0>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a2c      	ldr	r2, [pc, #176]	@ (8002520 <HAL_ADC_ConfigChannel+0x2a0>)
 800246e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002472:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a28      	ldr	r2, [pc, #160]	@ (800251c <HAL_ADC_ConfigChannel+0x29c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d10f      	bne.n	800249e <HAL_ADC_ConfigChannel+0x21e>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b12      	cmp	r3, #18
 8002484:	d10b      	bne.n	800249e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002486:	4b26      	ldr	r3, [pc, #152]	@ (8002520 <HAL_ADC_ConfigChannel+0x2a0>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4a25      	ldr	r2, [pc, #148]	@ (8002520 <HAL_ADC_ConfigChannel+0x2a0>)
 800248c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002490:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002492:	4b23      	ldr	r3, [pc, #140]	@ (8002520 <HAL_ADC_ConfigChannel+0x2a0>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4a22      	ldr	r2, [pc, #136]	@ (8002520 <HAL_ADC_ConfigChannel+0x2a0>)
 8002498:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800249c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1e      	ldr	r2, [pc, #120]	@ (800251c <HAL_ADC_ConfigChannel+0x29c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d12b      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x280>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002518 <HAL_ADC_ConfigChannel+0x298>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d003      	beq.n	80024ba <HAL_ADC_ConfigChannel+0x23a>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b11      	cmp	r3, #17
 80024b8:	d122      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80024ba:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <HAL_ADC_ConfigChannel+0x2a0>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4a18      	ldr	r2, [pc, #96]	@ (8002520 <HAL_ADC_ConfigChannel+0x2a0>)
 80024c0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80024c4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80024c6:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <HAL_ADC_ConfigChannel+0x2a0>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4a15      	ldr	r2, [pc, #84]	@ (8002520 <HAL_ADC_ConfigChannel+0x2a0>)
 80024cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024d0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a10      	ldr	r2, [pc, #64]	@ (8002518 <HAL_ADC_ConfigChannel+0x298>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d111      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <HAL_ADC_ConfigChannel+0x2a4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a11      	ldr	r2, [pc, #68]	@ (8002528 <HAL_ADC_ConfigChannel+0x2a8>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	0c9a      	lsrs	r2, r3, #18
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024f2:	e002      	b.n	80024fa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f9      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	10000012 	.word	0x10000012
 800251c:	40012000 	.word	0x40012000
 8002520:	40012300 	.word	0x40012300
 8002524:	20000004 	.word	0x20000004
 8002528:	431bde83 	.word	0x431bde83

0800252c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002534:	4b78      	ldr	r3, [pc, #480]	@ (8002718 <ADC_Init+0x1ec>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	4a77      	ldr	r2, [pc, #476]	@ (8002718 <ADC_Init+0x1ec>)
 800253a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800253e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002540:	4b75      	ldr	r3, [pc, #468]	@ (8002718 <ADC_Init+0x1ec>)
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4973      	ldr	r1, [pc, #460]	@ (8002718 <ADC_Init+0x1ec>)
 800254a:	4313      	orrs	r3, r2
 800254c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800255c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	021a      	lsls	r2, r3, #8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002580:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6899      	ldr	r1, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ba:	4a58      	ldr	r2, [pc, #352]	@ (800271c <ADC_Init+0x1f0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d022      	beq.n	8002606 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6899      	ldr	r1, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6899      	ldr	r1, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	e00f      	b.n	8002626 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002624:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0202 	bic.w	r2, r2, #2
 8002634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6899      	ldr	r1, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	005a      	lsls	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01b      	beq.n	800268c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002662:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002672:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6859      	ldr	r1, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	3b01      	subs	r3, #1
 8002680:	035a      	lsls	r2, r3, #13
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	e007      	b.n	800269c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800269a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	051a      	lsls	r2, r3, #20
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6899      	ldr	r1, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026de:	025a      	lsls	r2, r3, #9
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6899      	ldr	r1, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	029a      	lsls	r2, r3, #10
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	609a      	str	r2, [r3, #8]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	40012300 	.word	0x40012300
 800271c:	0f000001 	.word	0x0f000001

08002720 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0ed      	b.n	800290e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fe fbd4 	bl	8000eec <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002754:	f7ff fd20 	bl	8002198 <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800275a:	e012      	b.n	8002782 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800275c:	f7ff fd1c 	bl	8002198 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b0a      	cmp	r3, #10
 8002768:	d90b      	bls.n	8002782 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2205      	movs	r2, #5
 800277a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e0c5      	b.n	800290e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0e5      	beq.n	800275c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0202 	bic.w	r2, r2, #2
 800279e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027a0:	f7ff fcfa 	bl	8002198 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027a6:	e012      	b.n	80027ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027a8:	f7ff fcf6 	bl	8002198 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b0a      	cmp	r3, #10
 80027b4:	d90b      	bls.n	80027ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2205      	movs	r2, #5
 80027c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e09f      	b.n	800290e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1e5      	bne.n	80027a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7e1b      	ldrb	r3, [r3, #24]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d108      	bne.n	80027f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	e007      	b.n	8002806 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	7e5b      	ldrb	r3, [r3, #25]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d108      	bne.n	8002820 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e007      	b.n	8002830 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800282e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7e9b      	ldrb	r3, [r3, #26]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d108      	bne.n	800284a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0220 	orr.w	r2, r2, #32
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	e007      	b.n	800285a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0220 	bic.w	r2, r2, #32
 8002858:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	7edb      	ldrb	r3, [r3, #27]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d108      	bne.n	8002874 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0210 	bic.w	r2, r2, #16
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e007      	b.n	8002884 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0210 	orr.w	r2, r2, #16
 8002882:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7f1b      	ldrb	r3, [r3, #28]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d108      	bne.n	800289e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0208 	orr.w	r2, r2, #8
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e007      	b.n	80028ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0208 	bic.w	r2, r2, #8
 80028ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7f5b      	ldrb	r3, [r3, #29]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d108      	bne.n	80028c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0204 	orr.w	r2, r2, #4
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e007      	b.n	80028d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0204 	bic.w	r2, r2, #4
 80028d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	ea42 0103 	orr.w	r1, r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	1e5a      	subs	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800292e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d003      	beq.n	800293e <HAL_CAN_ConfigFilter+0x26>
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	2b02      	cmp	r3, #2
 800293a:	f040 80c7 	bne.w	8002acc <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a69      	ldr	r2, [pc, #420]	@ (8002ae8 <HAL_CAN_ConfigFilter+0x1d0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d001      	beq.n	800294c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002948:	4b68      	ldr	r3, [pc, #416]	@ (8002aec <HAL_CAN_ConfigFilter+0x1d4>)
 800294a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002952:	f043 0201 	orr.w	r2, r3, #1
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	4a63      	ldr	r2, [pc, #396]	@ (8002aec <HAL_CAN_ConfigFilter+0x1d4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d111      	bne.n	8002988 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800296a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	431a      	orrs	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	2201      	movs	r2, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d123      	bne.n	80029fa <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	401a      	ands	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029d4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	3248      	adds	r2, #72	@ 0x48
 80029da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029ee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029f0:	6979      	ldr	r1, [r7, #20]
 80029f2:	3348      	adds	r3, #72	@ 0x48
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	440b      	add	r3, r1
 80029f8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d122      	bne.n	8002a48 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3248      	adds	r2, #72	@ 0x48
 8002a28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a3e:	6979      	ldr	r1, [r7, #20]
 8002a40:	3348      	adds	r3, #72	@ 0x48
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d109      	bne.n	8002a64 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002a62:	e007      	b.n	8002a74 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d109      	bne.n	8002a90 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002a8e:	e007      	b.n	8002aa0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d107      	bne.n	8002ab8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002abe:	f023 0201 	bic.w	r2, r3, #1
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e006      	b.n	8002ada <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
  }
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40003400 	.word	0x40003400
 8002aec:	40006400 	.word	0x40006400

08002af0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d12e      	bne.n	8002b62 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b1c:	f7ff fb3c 	bl	8002198 <HAL_GetTick>
 8002b20:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b22:	e012      	b.n	8002b4a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b24:	f7ff fb38 	bl	8002198 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b0a      	cmp	r3, #10
 8002b30:	d90b      	bls.n	8002b4a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2205      	movs	r2, #5
 8002b42:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e012      	b.n	8002b70 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1e5      	bne.n	8002b24 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e006      	b.n	8002b70 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
  }
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	@ 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b8c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b96:	7ffb      	ldrb	r3, [r7, #31]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d003      	beq.n	8002ba4 <HAL_CAN_AddTxMessage+0x2c>
 8002b9c:	7ffb      	ldrb	r3, [r7, #31]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	f040 80ad 	bne.w	8002cfe <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 8095 	beq.w	8002cee <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	0e1b      	lsrs	r3, r3, #24
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002bce:	2201      	movs	r2, #1
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10d      	bne.n	8002bfc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bea:	68f9      	ldr	r1, [r7, #12]
 8002bec:	6809      	ldr	r1, [r1, #0]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3318      	adds	r3, #24
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	440b      	add	r3, r1
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e00f      	b.n	8002c1c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c06:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c0c:	68f9      	ldr	r1, [r7, #12]
 8002c0e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c10:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	3318      	adds	r3, #24
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	440b      	add	r3, r1
 8002c1a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6819      	ldr	r1, [r3, #0]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	3318      	adds	r3, #24
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	7d1b      	ldrb	r3, [r3, #20]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d111      	bne.n	8002c5c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	3318      	adds	r3, #24
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	4413      	add	r3, r2
 8002c44:	3304      	adds	r3, #4
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	6811      	ldr	r1, [r2, #0]
 8002c4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	3318      	adds	r3, #24
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	440b      	add	r3, r1
 8002c58:	3304      	adds	r3, #4
 8002c5a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3307      	adds	r3, #7
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	061a      	lsls	r2, r3, #24
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3306      	adds	r3, #6
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3305      	adds	r3, #5
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	4313      	orrs	r3, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	3204      	adds	r2, #4
 8002c7c:	7812      	ldrb	r2, [r2, #0]
 8002c7e:	4610      	mov	r0, r2
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	6811      	ldr	r1, [r2, #0]
 8002c84:	ea43 0200 	orr.w	r2, r3, r0
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	440b      	add	r3, r1
 8002c8e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002c92:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3303      	adds	r3, #3
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	061a      	lsls	r2, r3, #24
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	041b      	lsls	r3, r3, #16
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	7812      	ldrb	r2, [r2, #0]
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	6811      	ldr	r1, [r2, #0]
 8002cba:	ea43 0200 	orr.w	r2, r3, r0
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002cc8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	3318      	adds	r3, #24
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	4413      	add	r3, r2
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	6811      	ldr	r1, [r2, #0]
 8002cdc:	f043 0201 	orr.w	r2, r3, #1
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	3318      	adds	r3, #24
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	440b      	add	r3, r1
 8002ce8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e00e      	b.n	8002d0c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e006      	b.n	8002d0c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
  }
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3724      	adds	r7, #36	@ 0x24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d2c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d2e:	7dfb      	ldrb	r3, [r7, #23]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d003      	beq.n	8002d3c <HAL_CAN_GetRxMessage+0x24>
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	f040 8103 	bne.w	8002f42 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10e      	bne.n	8002d60 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d116      	bne.n	8002d7e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d54:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0f7      	b.n	8002f50 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d107      	bne.n	8002d7e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e0e8      	b.n	8002f50 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	331b      	adds	r3, #27
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	4413      	add	r3, r2
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0204 	and.w	r2, r3, #4
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10c      	bne.n	8002db6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	331b      	adds	r3, #27
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	4413      	add	r3, r2
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	0d5b      	lsrs	r3, r3, #21
 8002dac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e00b      	b.n	8002dce <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	331b      	adds	r3, #27
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	4413      	add	r3, r2
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	08db      	lsrs	r3, r3, #3
 8002dc6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	331b      	adds	r3, #27
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	4413      	add	r3, r2
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0202 	and.w	r2, r3, #2
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	331b      	adds	r3, #27
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	4413      	add	r3, r2
 8002df0:	3304      	adds	r3, #4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2208      	movs	r2, #8
 8002e00:	611a      	str	r2, [r3, #16]
 8002e02:	e00b      	b.n	8002e1c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	331b      	adds	r3, #27
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	4413      	add	r3, r2
 8002e10:	3304      	adds	r3, #4
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 020f 	and.w	r2, r3, #15
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	331b      	adds	r3, #27
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	4413      	add	r3, r2
 8002e28:	3304      	adds	r3, #4
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	331b      	adds	r3, #27
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	4413      	add	r3, r2
 8002e40:	3304      	adds	r3, #4
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	0a1a      	lsrs	r2, r3, #8
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	3301      	adds	r3, #1
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0c1a      	lsrs	r2, r3, #16
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	3302      	adds	r3, #2
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	0e1a      	lsrs	r2, r3, #24
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	3303      	adds	r3, #3
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0a1a      	lsrs	r2, r3, #8
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	3305      	adds	r3, #5
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	0c1a      	lsrs	r2, r3, #16
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	3306      	adds	r3, #6
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0e1a      	lsrs	r2, r3, #24
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	3307      	adds	r3, #7
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d108      	bne.n	8002f2e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0220 	orr.w	r2, r2, #32
 8002f2a:	60da      	str	r2, [r3, #12]
 8002f2c:	e007      	b.n	8002f3e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0220 	orr.w	r2, r2, #32
 8002f3c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e006      	b.n	8002f50 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f46:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
  }
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f6c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d002      	beq.n	8002f7a <HAL_CAN_ActivateNotification+0x1e>
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d109      	bne.n	8002f8e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6959      	ldr	r1, [r3, #20]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e006      	b.n	8002f9c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
  }
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	@ 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d07c      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d023      	beq.n	8003040 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f983 	bl	8003316 <HAL_CAN_TxMailbox0CompleteCallback>
 8003010:	e016      	b.n	8003040 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d004      	beq.n	8003026 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
 8003024:	e00c      	b.n	8003040 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
 8003038:	e002      	b.n	8003040 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f989 	bl	8003352 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d024      	beq.n	8003094 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003052:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f963 	bl	800332a <HAL_CAN_TxMailbox1CompleteCallback>
 8003064:	e016      	b.n	8003094 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306c:	2b00      	cmp	r3, #0
 800306e:	d004      	beq.n	800307a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003076:	627b      	str	r3, [r7, #36]	@ 0x24
 8003078:	e00c      	b.n	8003094 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003080:	2b00      	cmp	r3, #0
 8003082:	d004      	beq.n	800308e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
 800308c:	e002      	b.n	8003094 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f969 	bl	8003366 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d024      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80030a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f943 	bl	800333e <HAL_CAN_TxMailbox2CompleteCallback>
 80030b8:	e016      	b.n	80030e8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d004      	beq.n	80030ce <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80030c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80030cc:	e00c      	b.n	80030e8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d004      	beq.n	80030e2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e0:	e002      	b.n	80030e8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f949 	bl	800337a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00c      	beq.n	800310c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2210      	movs	r2, #16
 800310a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d006      	beq.n	800312e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2208      	movs	r2, #8
 8003126:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f930 	bl	800338e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d009      	beq.n	800314c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fe fa4e 	bl	80015e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00c      	beq.n	8003170 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	d007      	beq.n	8003170 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003162:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2210      	movs	r2, #16
 800316e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d006      	beq.n	8003192 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2208      	movs	r2, #8
 800318a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f912 	bl	80033b6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	d009      	beq.n	80031b0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8f9 	bl	80033a2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d006      	beq.n	80031d2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2210      	movs	r2, #16
 80031ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f8fc 	bl	80033ca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00b      	beq.n	80031f4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d006      	beq.n	80031f4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2208      	movs	r2, #8
 80031ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f8f5 	bl	80033de <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d07b      	beq.n	80032f6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d072      	beq.n	80032ee <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800321c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800322a:	2b00      	cmp	r3, #0
 800322c:	d008      	beq.n	8003240 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	f043 0302 	orr.w	r3, r3, #2
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003262:	2b00      	cmp	r3, #0
 8003264:	d043      	beq.n	80032ee <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800326c:	2b00      	cmp	r3, #0
 800326e:	d03e      	beq.n	80032ee <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003276:	2b60      	cmp	r3, #96	@ 0x60
 8003278:	d02b      	beq.n	80032d2 <HAL_CAN_IRQHandler+0x32a>
 800327a:	2b60      	cmp	r3, #96	@ 0x60
 800327c:	d82e      	bhi.n	80032dc <HAL_CAN_IRQHandler+0x334>
 800327e:	2b50      	cmp	r3, #80	@ 0x50
 8003280:	d022      	beq.n	80032c8 <HAL_CAN_IRQHandler+0x320>
 8003282:	2b50      	cmp	r3, #80	@ 0x50
 8003284:	d82a      	bhi.n	80032dc <HAL_CAN_IRQHandler+0x334>
 8003286:	2b40      	cmp	r3, #64	@ 0x40
 8003288:	d019      	beq.n	80032be <HAL_CAN_IRQHandler+0x316>
 800328a:	2b40      	cmp	r3, #64	@ 0x40
 800328c:	d826      	bhi.n	80032dc <HAL_CAN_IRQHandler+0x334>
 800328e:	2b30      	cmp	r3, #48	@ 0x30
 8003290:	d010      	beq.n	80032b4 <HAL_CAN_IRQHandler+0x30c>
 8003292:	2b30      	cmp	r3, #48	@ 0x30
 8003294:	d822      	bhi.n	80032dc <HAL_CAN_IRQHandler+0x334>
 8003296:	2b10      	cmp	r3, #16
 8003298:	d002      	beq.n	80032a0 <HAL_CAN_IRQHandler+0x2f8>
 800329a:	2b20      	cmp	r3, #32
 800329c:	d005      	beq.n	80032aa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800329e:	e01d      	b.n	80032dc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80032a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a2:	f043 0308 	orr.w	r3, r3, #8
 80032a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032a8:	e019      	b.n	80032de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	f043 0310 	orr.w	r3, r3, #16
 80032b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032b2:	e014      	b.n	80032de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	f043 0320 	orr.w	r3, r3, #32
 80032ba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032bc:	e00f      	b.n	80032de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032c6:	e00a      	b.n	80032de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032d0:	e005      	b.n	80032de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032da:	e000      	b.n	80032de <HAL_CAN_IRQHandler+0x336>
            break;
 80032dc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699a      	ldr	r2, [r3, #24]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80032ec:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2204      	movs	r2, #4
 80032f4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f872 	bl	80033f2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800330e:	bf00      	nop
 8003310:	3728      	adds	r7, #40	@ 0x28
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003418:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <__NVIC_SetPriorityGrouping+0x40>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003424:	4013      	ands	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003430:	4b06      	ldr	r3, [pc, #24]	@ (800344c <__NVIC_SetPriorityGrouping+0x44>)
 8003432:	4313      	orrs	r3, r2
 8003434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003436:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <__NVIC_SetPriorityGrouping+0x40>)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	60d3      	str	r3, [r2, #12]
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000ed00 	.word	0xe000ed00
 800344c:	05fa0000 	.word	0x05fa0000

08003450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003454:	4b04      	ldr	r3, [pc, #16]	@ (8003468 <__NVIC_GetPriorityGrouping+0x18>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	f003 0307 	and.w	r3, r3, #7
}
 800345e:	4618      	mov	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	2b00      	cmp	r3, #0
 800347c:	db0b      	blt.n	8003496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	f003 021f 	and.w	r2, r3, #31
 8003484:	4907      	ldr	r1, [pc, #28]	@ (80034a4 <__NVIC_EnableIRQ+0x38>)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2001      	movs	r0, #1
 800348e:	fa00 f202 	lsl.w	r2, r0, r2
 8003492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	e000e100 	.word	0xe000e100

080034a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	6039      	str	r1, [r7, #0]
 80034b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	db0a      	blt.n	80034d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	490c      	ldr	r1, [pc, #48]	@ (80034f4 <__NVIC_SetPriority+0x4c>)
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	0112      	lsls	r2, r2, #4
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	440b      	add	r3, r1
 80034cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034d0:	e00a      	b.n	80034e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	4908      	ldr	r1, [pc, #32]	@ (80034f8 <__NVIC_SetPriority+0x50>)
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	3b04      	subs	r3, #4
 80034e0:	0112      	lsls	r2, r2, #4
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	440b      	add	r3, r1
 80034e6:	761a      	strb	r2, [r3, #24]
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000e100 	.word	0xe000e100
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b089      	sub	sp, #36	@ 0x24
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f1c3 0307 	rsb	r3, r3, #7
 8003516:	2b04      	cmp	r3, #4
 8003518:	bf28      	it	cs
 800351a:	2304      	movcs	r3, #4
 800351c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	3304      	adds	r3, #4
 8003522:	2b06      	cmp	r3, #6
 8003524:	d902      	bls.n	800352c <NVIC_EncodePriority+0x30>
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3b03      	subs	r3, #3
 800352a:	e000      	b.n	800352e <NVIC_EncodePriority+0x32>
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003530:	f04f 32ff 	mov.w	r2, #4294967295
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43da      	mvns	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	401a      	ands	r2, r3
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003544:	f04f 31ff 	mov.w	r1, #4294967295
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	fa01 f303 	lsl.w	r3, r1, r3
 800354e:	43d9      	mvns	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003554:	4313      	orrs	r3, r2
         );
}
 8003556:	4618      	mov	r0, r3
 8003558:	3724      	adds	r7, #36	@ 0x24
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3b01      	subs	r3, #1
 8003570:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003574:	d301      	bcc.n	800357a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003576:	2301      	movs	r3, #1
 8003578:	e00f      	b.n	800359a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800357a:	4a0a      	ldr	r2, [pc, #40]	@ (80035a4 <SysTick_Config+0x40>)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003582:	210f      	movs	r1, #15
 8003584:	f04f 30ff 	mov.w	r0, #4294967295
 8003588:	f7ff ff8e 	bl	80034a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800358c:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <SysTick_Config+0x40>)
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003592:	4b04      	ldr	r3, [pc, #16]	@ (80035a4 <SysTick_Config+0x40>)
 8003594:	2207      	movs	r2, #7
 8003596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	e000e010 	.word	0xe000e010

080035a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff ff29 	bl	8003408 <__NVIC_SetPriorityGrouping>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035be:	b580      	push	{r7, lr}
 80035c0:	b086      	sub	sp, #24
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	4603      	mov	r3, r0
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035d0:	f7ff ff3e 	bl	8003450 <__NVIC_GetPriorityGrouping>
 80035d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	6978      	ldr	r0, [r7, #20]
 80035dc:	f7ff ff8e 	bl	80034fc <NVIC_EncodePriority>
 80035e0:	4602      	mov	r2, r0
 80035e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff5d 	bl	80034a8 <__NVIC_SetPriority>
}
 80035ee:	bf00      	nop
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	4603      	mov	r3, r0
 80035fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff ff31 	bl	800346c <__NVIC_EnableIRQ>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff ffa2 	bl	8003564 <SysTick_Config>
 8003620:	4603      	mov	r3, r0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800362c:	b480      	push	{r7}
 800362e:	b089      	sub	sp, #36	@ 0x24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	e175      	b.n	8003938 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800364c:	2201      	movs	r2, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4013      	ands	r3, r2
 800365e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	429a      	cmp	r2, r3
 8003666:	f040 8164 	bne.w	8003932 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d005      	beq.n	8003682 <HAL_GPIO_Init+0x56>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d130      	bne.n	80036e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	2203      	movs	r2, #3
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4013      	ands	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036b8:	2201      	movs	r2, #1
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 0201 	and.w	r2, r3, #1
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d017      	beq.n	8003720 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	2203      	movs	r2, #3
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d123      	bne.n	8003774 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	08da      	lsrs	r2, r3, #3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3208      	adds	r2, #8
 8003734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	220f      	movs	r2, #15
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	08da      	lsrs	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3208      	adds	r2, #8
 800376e:	69b9      	ldr	r1, [r7, #24]
 8003770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	2203      	movs	r2, #3
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 0203 	and.w	r2, r3, #3
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80be 	beq.w	8003932 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b6:	4b66      	ldr	r3, [pc, #408]	@ (8003950 <HAL_GPIO_Init+0x324>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	4a65      	ldr	r2, [pc, #404]	@ (8003950 <HAL_GPIO_Init+0x324>)
 80037bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80037c2:	4b63      	ldr	r3, [pc, #396]	@ (8003950 <HAL_GPIO_Init+0x324>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037ce:	4a61      	ldr	r2, [pc, #388]	@ (8003954 <HAL_GPIO_Init+0x328>)
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	089b      	lsrs	r3, r3, #2
 80037d4:	3302      	adds	r3, #2
 80037d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	220f      	movs	r2, #15
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a58      	ldr	r2, [pc, #352]	@ (8003958 <HAL_GPIO_Init+0x32c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d037      	beq.n	800386a <HAL_GPIO_Init+0x23e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a57      	ldr	r2, [pc, #348]	@ (800395c <HAL_GPIO_Init+0x330>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d031      	beq.n	8003866 <HAL_GPIO_Init+0x23a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a56      	ldr	r2, [pc, #344]	@ (8003960 <HAL_GPIO_Init+0x334>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d02b      	beq.n	8003862 <HAL_GPIO_Init+0x236>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a55      	ldr	r2, [pc, #340]	@ (8003964 <HAL_GPIO_Init+0x338>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d025      	beq.n	800385e <HAL_GPIO_Init+0x232>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a54      	ldr	r2, [pc, #336]	@ (8003968 <HAL_GPIO_Init+0x33c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d01f      	beq.n	800385a <HAL_GPIO_Init+0x22e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a53      	ldr	r2, [pc, #332]	@ (800396c <HAL_GPIO_Init+0x340>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d019      	beq.n	8003856 <HAL_GPIO_Init+0x22a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a52      	ldr	r2, [pc, #328]	@ (8003970 <HAL_GPIO_Init+0x344>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <HAL_GPIO_Init+0x226>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a51      	ldr	r2, [pc, #324]	@ (8003974 <HAL_GPIO_Init+0x348>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00d      	beq.n	800384e <HAL_GPIO_Init+0x222>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a50      	ldr	r2, [pc, #320]	@ (8003978 <HAL_GPIO_Init+0x34c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d007      	beq.n	800384a <HAL_GPIO_Init+0x21e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a4f      	ldr	r2, [pc, #316]	@ (800397c <HAL_GPIO_Init+0x350>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <HAL_GPIO_Init+0x21a>
 8003842:	2309      	movs	r3, #9
 8003844:	e012      	b.n	800386c <HAL_GPIO_Init+0x240>
 8003846:	230a      	movs	r3, #10
 8003848:	e010      	b.n	800386c <HAL_GPIO_Init+0x240>
 800384a:	2308      	movs	r3, #8
 800384c:	e00e      	b.n	800386c <HAL_GPIO_Init+0x240>
 800384e:	2307      	movs	r3, #7
 8003850:	e00c      	b.n	800386c <HAL_GPIO_Init+0x240>
 8003852:	2306      	movs	r3, #6
 8003854:	e00a      	b.n	800386c <HAL_GPIO_Init+0x240>
 8003856:	2305      	movs	r3, #5
 8003858:	e008      	b.n	800386c <HAL_GPIO_Init+0x240>
 800385a:	2304      	movs	r3, #4
 800385c:	e006      	b.n	800386c <HAL_GPIO_Init+0x240>
 800385e:	2303      	movs	r3, #3
 8003860:	e004      	b.n	800386c <HAL_GPIO_Init+0x240>
 8003862:	2302      	movs	r3, #2
 8003864:	e002      	b.n	800386c <HAL_GPIO_Init+0x240>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_GPIO_Init+0x240>
 800386a:	2300      	movs	r3, #0
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	f002 0203 	and.w	r2, r2, #3
 8003872:	0092      	lsls	r2, r2, #2
 8003874:	4093      	lsls	r3, r2
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800387c:	4935      	ldr	r1, [pc, #212]	@ (8003954 <HAL_GPIO_Init+0x328>)
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	3302      	adds	r3, #2
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800388a:	4b3d      	ldr	r3, [pc, #244]	@ (8003980 <HAL_GPIO_Init+0x354>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ae:	4a34      	ldr	r2, [pc, #208]	@ (8003980 <HAL_GPIO_Init+0x354>)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038b4:	4b32      	ldr	r3, [pc, #200]	@ (8003980 <HAL_GPIO_Init+0x354>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038d8:	4a29      	ldr	r2, [pc, #164]	@ (8003980 <HAL_GPIO_Init+0x354>)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038de:	4b28      	ldr	r3, [pc, #160]	@ (8003980 <HAL_GPIO_Init+0x354>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	43db      	mvns	r3, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4013      	ands	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003902:	4a1f      	ldr	r2, [pc, #124]	@ (8003980 <HAL_GPIO_Init+0x354>)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003908:	4b1d      	ldr	r3, [pc, #116]	@ (8003980 <HAL_GPIO_Init+0x354>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800392c:	4a14      	ldr	r2, [pc, #80]	@ (8003980 <HAL_GPIO_Init+0x354>)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3301      	adds	r3, #1
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2b0f      	cmp	r3, #15
 800393c:	f67f ae86 	bls.w	800364c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	3724      	adds	r7, #36	@ 0x24
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800
 8003954:	40013800 	.word	0x40013800
 8003958:	40020000 	.word	0x40020000
 800395c:	40020400 	.word	0x40020400
 8003960:	40020800 	.word	0x40020800
 8003964:	40020c00 	.word	0x40020c00
 8003968:	40021000 	.word	0x40021000
 800396c:	40021400 	.word	0x40021400
 8003970:	40021800 	.word	0x40021800
 8003974:	40021c00 	.word	0x40021c00
 8003978:	40022000 	.word	0x40022000
 800397c:	40022400 	.word	0x40022400
 8003980:	40013c00 	.word	0x40013c00

08003984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	807b      	strh	r3, [r7, #2]
 8003990:	4613      	mov	r3, r2
 8003992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003994:	787b      	ldrb	r3, [r7, #1]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800399a:	887a      	ldrh	r2, [r7, #2]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039a0:	e003      	b.n	80039aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039a2:	887b      	ldrh	r3, [r7, #2]
 80039a4:	041a      	lsls	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	619a      	str	r2, [r3, #24]
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b085      	sub	sp, #20
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	460b      	mov	r3, r1
 80039c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039c8:	887a      	ldrh	r2, [r7, #2]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4013      	ands	r3, r2
 80039ce:	041a      	lsls	r2, r3, #16
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	43d9      	mvns	r1, r3
 80039d4:	887b      	ldrh	r3, [r7, #2]
 80039d6:	400b      	ands	r3, r1
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	619a      	str	r2, [r3, #24]
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039f4:	2300      	movs	r3, #0
 80039f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e29b      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8087 	beq.w	8003b1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a10:	4b96      	ldr	r3, [pc, #600]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 030c 	and.w	r3, r3, #12
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d00c      	beq.n	8003a36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a1c:	4b93      	ldr	r3, [pc, #588]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 030c 	and.w	r3, r3, #12
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d112      	bne.n	8003a4e <HAL_RCC_OscConfig+0x62>
 8003a28:	4b90      	ldr	r3, [pc, #576]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a34:	d10b      	bne.n	8003a4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a36:	4b8d      	ldr	r3, [pc, #564]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d06c      	beq.n	8003b1c <HAL_RCC_OscConfig+0x130>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d168      	bne.n	8003b1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e275      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a56:	d106      	bne.n	8003a66 <HAL_RCC_OscConfig+0x7a>
 8003a58:	4b84      	ldr	r3, [pc, #528]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a83      	ldr	r2, [pc, #524]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	e02e      	b.n	8003ac4 <HAL_RCC_OscConfig+0xd8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x9c>
 8003a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a7e      	ldr	r2, [pc, #504]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a7b      	ldr	r2, [pc, #492]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003a80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	e01d      	b.n	8003ac4 <HAL_RCC_OscConfig+0xd8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a90:	d10c      	bne.n	8003aac <HAL_RCC_OscConfig+0xc0>
 8003a92:	4b76      	ldr	r3, [pc, #472]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a75      	ldr	r2, [pc, #468]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	4b73      	ldr	r3, [pc, #460]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a72      	ldr	r2, [pc, #456]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	e00b      	b.n	8003ac4 <HAL_RCC_OscConfig+0xd8>
 8003aac:	4b6f      	ldr	r3, [pc, #444]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a6e      	ldr	r2, [pc, #440]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a6b      	ldr	r2, [pc, #428]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d013      	beq.n	8003af4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fe fb64 	bl	8002198 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad4:	f7fe fb60 	bl	8002198 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	@ 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e229      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae6:	4b61      	ldr	r3, [pc, #388]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0xe8>
 8003af2:	e014      	b.n	8003b1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fe fb50 	bl	8002198 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003afc:	f7fe fb4c 	bl	8002198 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b64      	cmp	r3, #100	@ 0x64
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e215      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0e:	4b57      	ldr	r3, [pc, #348]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x110>
 8003b1a:	e000      	b.n	8003b1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d069      	beq.n	8003bfe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b2a:	4b50      	ldr	r3, [pc, #320]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00b      	beq.n	8003b4e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b36:	4b4d      	ldr	r3, [pc, #308]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d11c      	bne.n	8003b7c <HAL_RCC_OscConfig+0x190>
 8003b42:	4b4a      	ldr	r3, [pc, #296]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d116      	bne.n	8003b7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4e:	4b47      	ldr	r3, [pc, #284]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <HAL_RCC_OscConfig+0x17a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d001      	beq.n	8003b66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e1e9      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b66:	4b41      	ldr	r3, [pc, #260]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	493d      	ldr	r1, [pc, #244]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7a:	e040      	b.n	8003bfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d023      	beq.n	8003bcc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b84:	4b39      	ldr	r3, [pc, #228]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a38      	ldr	r2, [pc, #224]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fe fb02 	bl	8002198 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b98:	f7fe fafe 	bl	8002198 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e1c7      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003baa:	4b30      	ldr	r3, [pc, #192]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4929      	ldr	r1, [pc, #164]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]
 8003bca:	e018      	b.n	8003bfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bcc:	4b27      	ldr	r3, [pc, #156]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a26      	ldr	r2, [pc, #152]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fe fade 	bl	8002198 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be0:	f7fe fada 	bl	8002198 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e1a3      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d038      	beq.n	8003c7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d019      	beq.n	8003c46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c12:	4b16      	ldr	r3, [pc, #88]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c16:	4a15      	ldr	r2, [pc, #84]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1e:	f7fe fabb 	bl	8002198 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c26:	f7fe fab7 	bl	8002198 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e180      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c38:	4b0c      	ldr	r3, [pc, #48]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x23a>
 8003c44:	e01a      	b.n	8003c7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c46:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c4a:	4a08      	ldr	r2, [pc, #32]	@ (8003c6c <HAL_RCC_OscConfig+0x280>)
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c52:	f7fe faa1 	bl	8002198 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c5a:	f7fe fa9d 	bl	8002198 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d903      	bls.n	8003c70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e166      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>
 8003c6c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c70:	4b92      	ldr	r3, [pc, #584]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1ee      	bne.n	8003c5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80a4 	beq.w	8003dd2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c8a:	4b8c      	ldr	r3, [pc, #560]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10d      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c96:	4b89      	ldr	r3, [pc, #548]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	4a88      	ldr	r2, [pc, #544]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ca2:	4b86      	ldr	r3, [pc, #536]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003caa:	60bb      	str	r3, [r7, #8]
 8003cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cb2:	4b83      	ldr	r3, [pc, #524]	@ (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d118      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cbe:	4b80      	ldr	r3, [pc, #512]	@ (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cca:	f7fe fa65 	bl	8002198 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd2:	f7fe fa61 	bl	8002198 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b64      	cmp	r3, #100	@ 0x64
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e12a      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce4:	4b76      	ldr	r3, [pc, #472]	@ (8003ec0 <HAL_RCC_OscConfig+0x4d4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCC_OscConfig+0x31a>
 8003cf8:	4b70      	ldr	r3, [pc, #448]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfc:	4a6f      	ldr	r2, [pc, #444]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d04:	e02d      	b.n	8003d62 <HAL_RCC_OscConfig+0x376>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x33c>
 8003d0e:	4b6b      	ldr	r3, [pc, #428]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d12:	4a6a      	ldr	r2, [pc, #424]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d1a:	4b68      	ldr	r3, [pc, #416]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1e:	4a67      	ldr	r2, [pc, #412]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003d20:	f023 0304 	bic.w	r3, r3, #4
 8003d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d26:	e01c      	b.n	8003d62 <HAL_RCC_OscConfig+0x376>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b05      	cmp	r3, #5
 8003d2e:	d10c      	bne.n	8003d4a <HAL_RCC_OscConfig+0x35e>
 8003d30:	4b62      	ldr	r3, [pc, #392]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d34:	4a61      	ldr	r2, [pc, #388]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003d36:	f043 0304 	orr.w	r3, r3, #4
 8003d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d3c:	4b5f      	ldr	r3, [pc, #380]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d40:	4a5e      	ldr	r2, [pc, #376]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d48:	e00b      	b.n	8003d62 <HAL_RCC_OscConfig+0x376>
 8003d4a:	4b5c      	ldr	r3, [pc, #368]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4e:	4a5b      	ldr	r2, [pc, #364]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d56:	4b59      	ldr	r3, [pc, #356]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5a:	4a58      	ldr	r2, [pc, #352]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003d5c:	f023 0304 	bic.w	r3, r3, #4
 8003d60:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d015      	beq.n	8003d96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6a:	f7fe fa15 	bl	8002198 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d70:	e00a      	b.n	8003d88 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d72:	f7fe fa11 	bl	8002198 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0d8      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d88:	4b4c      	ldr	r3, [pc, #304]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0ee      	beq.n	8003d72 <HAL_RCC_OscConfig+0x386>
 8003d94:	e014      	b.n	8003dc0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d96:	f7fe f9ff 	bl	8002198 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9e:	f7fe f9fb 	bl	8002198 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e0c2      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db4:	4b41      	ldr	r3, [pc, #260]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1ee      	bne.n	8003d9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d105      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	4a3c      	ldr	r2, [pc, #240]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003dcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dd0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 80ae 	beq.w	8003f38 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ddc:	4b37      	ldr	r3, [pc, #220]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 030c 	and.w	r3, r3, #12
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d06d      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d14b      	bne.n	8003e88 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df0:	4b32      	ldr	r3, [pc, #200]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a31      	ldr	r2, [pc, #196]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003df6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fe f9cc 	bl	8002198 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fe f9c8 	bl	8002198 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e091      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e16:	4b29      	ldr	r3, [pc, #164]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69da      	ldr	r2, [r3, #28]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	019b      	lsls	r3, r3, #6
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	041b      	lsls	r3, r3, #16
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	061b      	lsls	r3, r3, #24
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4c:	071b      	lsls	r3, r3, #28
 8003e4e:	491b      	ldr	r1, [pc, #108]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e54:	4b19      	ldr	r3, [pc, #100]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a18      	ldr	r2, [pc, #96]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe f99a 	bl	8002198 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fe f996 	bl	8002198 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e05f      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7a:	4b10      	ldr	r3, [pc, #64]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0x47c>
 8003e86:	e057      	b.n	8003f38 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e88:	4b0c      	ldr	r3, [pc, #48]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003e8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fe f980 	bl	8002198 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fe f97c 	bl	8002198 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e045      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eae:	4b03      	ldr	r3, [pc, #12]	@ (8003ebc <HAL_RCC_OscConfig+0x4d0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x4b0>
 8003eba:	e03d      	b.n	8003f38 <HAL_RCC_OscConfig+0x54c>
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f44 <HAL_RCC_OscConfig+0x558>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d030      	beq.n	8003f34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d129      	bne.n	8003f34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d122      	bne.n	8003f34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003efa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d119      	bne.n	8003f34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	085b      	lsrs	r3, r3, #1
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d10f      	bne.n	8003f34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d107      	bne.n	8003f34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800

08003f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0d0      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f60:	4b6a      	ldr	r3, [pc, #424]	@ (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d910      	bls.n	8003f90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6e:	4b67      	ldr	r3, [pc, #412]	@ (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 020f 	bic.w	r2, r3, #15
 8003f76:	4965      	ldr	r1, [pc, #404]	@ (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b63      	ldr	r3, [pc, #396]	@ (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0b8      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d020      	beq.n	8003fde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa8:	4b59      	ldr	r3, [pc, #356]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4a58      	ldr	r2, [pc, #352]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 8003fae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc0:	4b53      	ldr	r3, [pc, #332]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4a52      	ldr	r2, [pc, #328]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fcc:	4b50      	ldr	r3, [pc, #320]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	494d      	ldr	r1, [pc, #308]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d040      	beq.n	800406c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	4b47      	ldr	r3, [pc, #284]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d115      	bne.n	800402a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e07f      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d107      	bne.n	800401a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400a:	4b41      	ldr	r3, [pc, #260]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d109      	bne.n	800402a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e073      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401a:	4b3d      	ldr	r3, [pc, #244]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e06b      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800402a:	4b39      	ldr	r3, [pc, #228]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f023 0203 	bic.w	r2, r3, #3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	4936      	ldr	r1, [pc, #216]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 8004038:	4313      	orrs	r3, r2
 800403a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403c:	f7fe f8ac 	bl	8002198 <HAL_GetTick>
 8004040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	e00a      	b.n	800405a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004044:	f7fe f8a8 	bl	8002198 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004052:	4293      	cmp	r3, r2
 8004054:	d901      	bls.n	800405a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e053      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405a:	4b2d      	ldr	r3, [pc, #180]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 020c 	and.w	r2, r3, #12
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	429a      	cmp	r2, r3
 800406a:	d1eb      	bne.n	8004044 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800406c:	4b27      	ldr	r3, [pc, #156]	@ (800410c <HAL_RCC_ClockConfig+0x1c4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d210      	bcs.n	800409c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407a:	4b24      	ldr	r3, [pc, #144]	@ (800410c <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f023 020f 	bic.w	r2, r3, #15
 8004082:	4922      	ldr	r1, [pc, #136]	@ (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	4313      	orrs	r3, r2
 8004088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800408a:	4b20      	ldr	r3, [pc, #128]	@ (800410c <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e032      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a8:	4b19      	ldr	r3, [pc, #100]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4916      	ldr	r1, [pc, #88]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040c6:	4b12      	ldr	r3, [pc, #72]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	490e      	ldr	r1, [pc, #56]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040da:	f000 f821 	bl	8004120 <HAL_RCC_GetSysClockFreq>
 80040de:	4602      	mov	r2, r0
 80040e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	490a      	ldr	r1, [pc, #40]	@ (8004114 <HAL_RCC_ClockConfig+0x1cc>)
 80040ec:	5ccb      	ldrb	r3, [r1, r3]
 80040ee:	fa22 f303 	lsr.w	r3, r2, r3
 80040f2:	4a09      	ldr	r2, [pc, #36]	@ (8004118 <HAL_RCC_ClockConfig+0x1d0>)
 80040f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040f6:	4b09      	ldr	r3, [pc, #36]	@ (800411c <HAL_RCC_ClockConfig+0x1d4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe f808 	bl	8002110 <HAL_InitTick>

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40023c00 	.word	0x40023c00
 8004110:	40023800 	.word	0x40023800
 8004114:	08006c40 	.word	0x08006c40
 8004118:	20000004 	.word	0x20000004
 800411c:	20000008 	.word	0x20000008

08004120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004124:	b090      	sub	sp, #64	@ 0x40
 8004126:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	637b      	str	r3, [r7, #52]	@ 0x34
 800412c:	2300      	movs	r3, #0
 800412e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004130:	2300      	movs	r3, #0
 8004132:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004138:	4b59      	ldr	r3, [pc, #356]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 030c 	and.w	r3, r3, #12
 8004140:	2b08      	cmp	r3, #8
 8004142:	d00d      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0x40>
 8004144:	2b08      	cmp	r3, #8
 8004146:	f200 80a1 	bhi.w	800428c <HAL_RCC_GetSysClockFreq+0x16c>
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_RCC_GetSysClockFreq+0x34>
 800414e:	2b04      	cmp	r3, #4
 8004150:	d003      	beq.n	800415a <HAL_RCC_GetSysClockFreq+0x3a>
 8004152:	e09b      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004154:	4b53      	ldr	r3, [pc, #332]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004156:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004158:	e09b      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800415a:	4b53      	ldr	r3, [pc, #332]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800415c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800415e:	e098      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004160:	4b4f      	ldr	r3, [pc, #316]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004168:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800416a:	4b4d      	ldr	r3, [pc, #308]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d028      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004176:	4b4a      	ldr	r3, [pc, #296]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	099b      	lsrs	r3, r3, #6
 800417c:	2200      	movs	r2, #0
 800417e:	623b      	str	r3, [r7, #32]
 8004180:	627a      	str	r2, [r7, #36]	@ 0x24
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004188:	2100      	movs	r1, #0
 800418a:	4b47      	ldr	r3, [pc, #284]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800418c:	fb03 f201 	mul.w	r2, r3, r1
 8004190:	2300      	movs	r3, #0
 8004192:	fb00 f303 	mul.w	r3, r0, r3
 8004196:	4413      	add	r3, r2
 8004198:	4a43      	ldr	r2, [pc, #268]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800419a:	fba0 1202 	umull	r1, r2, r0, r2
 800419e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041a0:	460a      	mov	r2, r1
 80041a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041a6:	4413      	add	r3, r2
 80041a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ac:	2200      	movs	r2, #0
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	61fa      	str	r2, [r7, #28]
 80041b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80041ba:	f7fc f9f9 	bl	80005b0 <__aeabi_uldivmod>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4613      	mov	r3, r2
 80041c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041c6:	e053      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c8:	4b35      	ldr	r3, [pc, #212]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	099b      	lsrs	r3, r3, #6
 80041ce:	2200      	movs	r2, #0
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	617a      	str	r2, [r7, #20]
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041da:	f04f 0b00 	mov.w	fp, #0
 80041de:	4652      	mov	r2, sl
 80041e0:	465b      	mov	r3, fp
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f04f 0100 	mov.w	r1, #0
 80041ea:	0159      	lsls	r1, r3, #5
 80041ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f0:	0150      	lsls	r0, r2, #5
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	ebb2 080a 	subs.w	r8, r2, sl
 80041fa:	eb63 090b 	sbc.w	r9, r3, fp
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800420a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800420e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004212:	ebb2 0408 	subs.w	r4, r2, r8
 8004216:	eb63 0509 	sbc.w	r5, r3, r9
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	00eb      	lsls	r3, r5, #3
 8004224:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004228:	00e2      	lsls	r2, r4, #3
 800422a:	4614      	mov	r4, r2
 800422c:	461d      	mov	r5, r3
 800422e:	eb14 030a 	adds.w	r3, r4, sl
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	eb45 030b 	adc.w	r3, r5, fp
 8004238:	607b      	str	r3, [r7, #4]
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004246:	4629      	mov	r1, r5
 8004248:	028b      	lsls	r3, r1, #10
 800424a:	4621      	mov	r1, r4
 800424c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004250:	4621      	mov	r1, r4
 8004252:	028a      	lsls	r2, r1, #10
 8004254:	4610      	mov	r0, r2
 8004256:	4619      	mov	r1, r3
 8004258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425a:	2200      	movs	r2, #0
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	60fa      	str	r2, [r7, #12]
 8004260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004264:	f7fc f9a4 	bl	80005b0 <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4613      	mov	r3, r2
 800426e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004270:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	0c1b      	lsrs	r3, r3, #16
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	3301      	adds	r3, #1
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004280:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004284:	fbb2 f3f3 	udiv	r3, r2, r3
 8004288:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800428a:	e002      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800428c:	4b05      	ldr	r3, [pc, #20]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800428e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004294:	4618      	mov	r0, r3
 8004296:	3740      	adds	r7, #64	@ 0x40
 8004298:	46bd      	mov	sp, r7
 800429a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800
 80042a4:	00f42400 	.word	0x00f42400
 80042a8:	017d7840 	.word	0x017d7840

080042ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e09d      	b.n	80043fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d108      	bne.n	80042d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042ce:	d009      	beq.n	80042e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	61da      	str	r2, [r3, #28]
 80042d6:	e005      	b.n	80042e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fd fb3c 	bl	800197c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800431a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004324:	d902      	bls.n	800432c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	e002      	b.n	8004332 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800432c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004330:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800433a:	d007      	beq.n	800434c <HAL_SPI_Init+0xa0>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004344:	d002      	beq.n	800434c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438e:	ea42 0103 	orr.w	r1, r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004396:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	0c1b      	lsrs	r3, r3, #16
 80043a8:	f003 0204 	and.w	r2, r3, #4
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80043c8:	ea42 0103 	orr.w	r1, r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b088      	sub	sp, #32
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	603b      	str	r3, [r7, #0]
 800440e:	4613      	mov	r3, r2
 8004410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_SPI_Transmit+0x22>
 8004420:	2302      	movs	r3, #2
 8004422:	e15f      	b.n	80046e4 <HAL_SPI_Transmit+0x2e2>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800442c:	f7fd feb4 	bl	8002198 <HAL_GetTick>
 8004430:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d002      	beq.n	8004448 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004442:	2302      	movs	r3, #2
 8004444:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004446:	e148      	b.n	80046da <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_SPI_Transmit+0x52>
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d102      	bne.n	800445a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004458:	e13f      	b.n	80046da <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2203      	movs	r2, #3
 800445e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	88fa      	ldrh	r2, [r7, #6]
 8004472:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	88fa      	ldrh	r2, [r7, #6]
 8004478:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a4:	d10f      	bne.n	80044c6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d0:	2b40      	cmp	r3, #64	@ 0x40
 80044d2:	d007      	beq.n	80044e4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044ec:	d94f      	bls.n	800458e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_SPI_Transmit+0xfa>
 80044f6:	8afb      	ldrh	r3, [r7, #22]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d142      	bne.n	8004582 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004500:	881a      	ldrh	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450c:	1c9a      	adds	r2, r3, #2
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004520:	e02f      	b.n	8004582 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b02      	cmp	r3, #2
 800452e:	d112      	bne.n	8004556 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004534:	881a      	ldrh	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	1c9a      	adds	r2, r3, #2
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004554:	e015      	b.n	8004582 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004556:	f7fd fe1f 	bl	8002198 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d803      	bhi.n	800456e <HAL_SPI_Transmit+0x16c>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d102      	bne.n	8004574 <HAL_SPI_Transmit+0x172>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d106      	bne.n	8004582 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004580:	e0ab      	b.n	80046da <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1ca      	bne.n	8004522 <HAL_SPI_Transmit+0x120>
 800458c:	e080      	b.n	8004690 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_SPI_Transmit+0x19a>
 8004596:	8afb      	ldrh	r3, [r7, #22]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d174      	bne.n	8004686 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d912      	bls.n	80045cc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045aa:	881a      	ldrh	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b6:	1c9a      	adds	r2, r3, #2
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b02      	subs	r3, #2
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045ca:	e05c      	b.n	8004686 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	330c      	adds	r3, #12
 80045d6:	7812      	ldrb	r2, [r2, #0]
 80045d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80045f2:	e048      	b.n	8004686 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d12b      	bne.n	800465a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	d912      	bls.n	8004632 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004610:	881a      	ldrh	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461c:	1c9a      	adds	r2, r3, #2
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b02      	subs	r3, #2
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004630:	e029      	b.n	8004686 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004658:	e015      	b.n	8004686 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800465a:	f7fd fd9d 	bl	8002198 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d803      	bhi.n	8004672 <HAL_SPI_Transmit+0x270>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004670:	d102      	bne.n	8004678 <HAL_SPI_Transmit+0x276>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d106      	bne.n	8004686 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004684:	e029      	b.n	80046da <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1b1      	bne.n	80045f4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	6839      	ldr	r1, [r7, #0]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fd1d 	bl	80050d4 <SPI_EndRxTxTransaction>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	77fb      	strb	r3, [r7, #31]
 80046d0:	e003      	b.n	80046da <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80046e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3720      	adds	r7, #32
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	4613      	mov	r3, r2
 80046fa:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	d002      	beq.n	8004712 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800470c:	2302      	movs	r3, #2
 800470e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004710:	e11a      	b.n	8004948 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800471a:	d112      	bne.n	8004742 <HAL_SPI_Receive+0x56>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10e      	bne.n	8004742 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2204      	movs	r2, #4
 8004728:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800472c:	88fa      	ldrh	r2, [r7, #6]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	4613      	mov	r3, r2
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f90e 	bl	800495a <HAL_SPI_TransmitReceive>
 800473e:	4603      	mov	r3, r0
 8004740:	e107      	b.n	8004952 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_SPI_Receive+0x64>
 800474c:	2302      	movs	r3, #2
 800474e:	e100      	b.n	8004952 <HAL_SPI_Receive+0x266>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004758:	f7fd fd1e 	bl	8002198 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <HAL_SPI_Receive+0x7e>
 8004764:	88fb      	ldrh	r3, [r7, #6]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d102      	bne.n	8004770 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800476e:	e0eb      	b.n	8004948 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2204      	movs	r2, #4
 8004774:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	88fa      	ldrh	r2, [r7, #6]
 8004788:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	88fa      	ldrh	r2, [r7, #6]
 8004790:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80047ba:	d908      	bls.n	80047ce <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047ca:	605a      	str	r2, [r3, #4]
 80047cc:	e007      	b.n	80047de <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047dc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047e6:	d10f      	bne.n	8004808 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004806:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004812:	2b40      	cmp	r3, #64	@ 0x40
 8004814:	d007      	beq.n	8004826 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004824:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800482e:	d86f      	bhi.n	8004910 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004830:	e034      	b.n	800489c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b01      	cmp	r3, #1
 800483e:	d117      	bne.n	8004870 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f103 020c 	add.w	r2, r3, #12
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484c:	7812      	ldrb	r2, [r2, #0]
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800486e:	e015      	b.n	800489c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004870:	f7fd fc92 	bl	8002198 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d803      	bhi.n	8004888 <HAL_SPI_Receive+0x19c>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004886:	d102      	bne.n	800488e <HAL_SPI_Receive+0x1a2>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800489a:	e055      	b.n	8004948 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1c4      	bne.n	8004832 <HAL_SPI_Receive+0x146>
 80048a8:	e038      	b.n	800491c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d115      	bne.n	80048e4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c2:	b292      	uxth	r2, r2
 80048c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	1c9a      	adds	r2, r3, #2
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80048e2:	e015      	b.n	8004910 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048e4:	f7fd fc58 	bl	8002198 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d803      	bhi.n	80048fc <HAL_SPI_Receive+0x210>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d102      	bne.n	8004902 <HAL_SPI_Receive+0x216>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800490e:	e01b      	b.n	8004948 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1c6      	bne.n	80048aa <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	6839      	ldr	r1, [r7, #0]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fb5b 	bl	8004fdc <SPI_EndRxTransaction>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	75fb      	strb	r3, [r7, #23]
 800493e:	e003      	b.n	8004948 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004950:	7dfb      	ldrb	r3, [r7, #23]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b08a      	sub	sp, #40	@ 0x28
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004968:	2301      	movs	r3, #1
 800496a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_SPI_TransmitReceive+0x26>
 800497c:	2302      	movs	r3, #2
 800497e:	e20a      	b.n	8004d96 <HAL_SPI_TransmitReceive+0x43c>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004988:	f7fd fc06 	bl	8002198 <HAL_GetTick>
 800498c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004994:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800499c:	887b      	ldrh	r3, [r7, #2]
 800499e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80049a0:	887b      	ldrh	r3, [r7, #2]
 80049a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049a4:	7efb      	ldrb	r3, [r7, #27]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d00e      	beq.n	80049c8 <HAL_SPI_TransmitReceive+0x6e>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049b0:	d106      	bne.n	80049c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d102      	bne.n	80049c0 <HAL_SPI_TransmitReceive+0x66>
 80049ba:	7efb      	ldrb	r3, [r7, #27]
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d003      	beq.n	80049c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80049c0:	2302      	movs	r3, #2
 80049c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80049c6:	e1e0      	b.n	8004d8a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <HAL_SPI_TransmitReceive+0x80>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_SPI_TransmitReceive+0x80>
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d103      	bne.n	80049e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80049e0:	e1d3      	b.n	8004d8a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d003      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2205      	movs	r2, #5
 80049f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	887a      	ldrh	r2, [r7, #2]
 8004a06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	887a      	ldrh	r2, [r7, #2]
 8004a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	887a      	ldrh	r2, [r7, #2]
 8004a1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	887a      	ldrh	r2, [r7, #2]
 8004a22:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a38:	d802      	bhi.n	8004a40 <HAL_SPI_TransmitReceive+0xe6>
 8004a3a:	8a3b      	ldrh	r3, [r7, #16]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d908      	bls.n	8004a52 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a4e:	605a      	str	r2, [r3, #4]
 8004a50:	e007      	b.n	8004a62 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a60:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6c:	2b40      	cmp	r3, #64	@ 0x40
 8004a6e:	d007      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a88:	f240 8081 	bls.w	8004b8e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <HAL_SPI_TransmitReceive+0x140>
 8004a94:	8a7b      	ldrh	r3, [r7, #18]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d16d      	bne.n	8004b76 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9e:	881a      	ldrh	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aaa:	1c9a      	adds	r2, r3, #2
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004abe:	e05a      	b.n	8004b76 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d11b      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x1ac>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d016      	beq.n	8004b06 <HAL_SPI_TransmitReceive+0x1ac>
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d113      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae2:	881a      	ldrh	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aee:	1c9a      	adds	r2, r3, #2
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d11c      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x1f4>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d016      	beq.n	8004b4e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	b292      	uxth	r2, r2
 8004b2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	1c9a      	adds	r2, r3, #2
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b4e:	f7fd fb23 	bl	8002198 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d80b      	bhi.n	8004b76 <HAL_SPI_TransmitReceive+0x21c>
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b64:	d007      	beq.n	8004b76 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004b74:	e109      	b.n	8004d8a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d19f      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x166>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d199      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x166>
 8004b8c:	e0e3      	b.n	8004d56 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_SPI_TransmitReceive+0x244>
 8004b96:	8a7b      	ldrh	r3, [r7, #18]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	f040 80cf 	bne.w	8004d3c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d912      	bls.n	8004bce <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bac:	881a      	ldrh	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb8:	1c9a      	adds	r2, r3, #2
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b02      	subs	r3, #2
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bcc:	e0b6      	b.n	8004d3c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	330c      	adds	r3, #12
 8004bd8:	7812      	ldrb	r2, [r2, #0]
 8004bda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bf4:	e0a2      	b.n	8004d3c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d134      	bne.n	8004c6e <HAL_SPI_TransmitReceive+0x314>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d02f      	beq.n	8004c6e <HAL_SPI_TransmitReceive+0x314>
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d12c      	bne.n	8004c6e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d912      	bls.n	8004c44 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c22:	881a      	ldrh	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2e:	1c9a      	adds	r2, r3, #2
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b02      	subs	r3, #2
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c42:	e012      	b.n	8004c6a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	7812      	ldrb	r2, [r2, #0]
 8004c50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d148      	bne.n	8004d0e <HAL_SPI_TransmitReceive+0x3b4>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d042      	beq.n	8004d0e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d923      	bls.n	8004cdc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	b292      	uxth	r2, r2
 8004ca0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	1c9a      	adds	r2, r3, #2
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b02      	subs	r3, #2
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d81f      	bhi.n	8004d0a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	e016      	b.n	8004d0a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f103 020c 	add.w	r2, r3, #12
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce8:	7812      	ldrb	r2, [r2, #0]
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d0e:	f7fd fa43 	bl	8002198 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d803      	bhi.n	8004d26 <HAL_SPI_TransmitReceive+0x3cc>
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d102      	bne.n	8004d2c <HAL_SPI_TransmitReceive+0x3d2>
 8004d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d107      	bne.n	8004d3c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004d3a:	e026      	b.n	8004d8a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f47f af57 	bne.w	8004bf6 <HAL_SPI_TransmitReceive+0x29c>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f47f af50 	bne.w	8004bf6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f9ba 	bl	80050d4 <SPI_EndRxTxTransaction>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d005      	beq.n	8004d72 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d80:	e003      	b.n	8004d8a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004d92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3728      	adds	r7, #40	@ 0x28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	603b      	str	r3, [r7, #0]
 8004dac:	4613      	mov	r3, r2
 8004dae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004db0:	f7fd f9f2 	bl	8002198 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dc0:	f7fd f9ea 	bl	8002198 <HAL_GetTick>
 8004dc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dc6:	4b39      	ldr	r3, [pc, #228]	@ (8004eac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	015b      	lsls	r3, r3, #5
 8004dcc:	0d1b      	lsrs	r3, r3, #20
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	fb02 f303 	mul.w	r3, r2, r3
 8004dd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dd6:	e054      	b.n	8004e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dde:	d050      	beq.n	8004e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004de0:	f7fd f9da 	bl	8002198 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d902      	bls.n	8004df6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d13d      	bne.n	8004e72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e0e:	d111      	bne.n	8004e34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e18:	d004      	beq.n	8004e24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e22:	d107      	bne.n	8004e34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e3c:	d10f      	bne.n	8004e5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e017      	b.n	8004ea2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	bf0c      	ite	eq
 8004e92:	2301      	moveq	r3, #1
 8004e94:	2300      	movne	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d19b      	bne.n	8004dd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3720      	adds	r7, #32
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	20000004 	.word	0x20000004

08004eb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	@ 0x28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ec2:	f7fd f969 	bl	8002198 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	4413      	add	r3, r2
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004ed2:	f7fd f961 	bl	8002198 <HAL_GetTick>
 8004ed6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	330c      	adds	r3, #12
 8004ede:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8004fd8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	00da      	lsls	r2, r3, #3
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	0d1b      	lsrs	r3, r3, #20
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ef8:	e060      	b.n	8004fbc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f00:	d107      	bne.n	8004f12 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d104      	bne.n	8004f12 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d050      	beq.n	8004fbc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f1a:	f7fd f93d 	bl	8002198 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d902      	bls.n	8004f30 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d13d      	bne.n	8004fac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f48:	d111      	bne.n	8004f6e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f52:	d004      	beq.n	8004f5e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f5c:	d107      	bne.n	8004f6e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f76:	d10f      	bne.n	8004f98 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e010      	b.n	8004fce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d196      	bne.n	8004efa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3728      	adds	r7, #40	@ 0x28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000004 	.word	0x20000004

08004fdc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af02      	add	r7, sp, #8
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ff0:	d111      	bne.n	8005016 <SPI_EndRxTransaction+0x3a>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ffa:	d004      	beq.n	8005006 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005004:	d107      	bne.n	8005016 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005014:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800501e:	d112      	bne.n	8005046 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2200      	movs	r2, #0
 8005028:	2180      	movs	r1, #128	@ 0x80
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7ff feb8 	bl	8004da0 <SPI_WaitFlagStateUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d021      	beq.n	800507a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800503a:	f043 0220 	orr.w	r2, r3, #32
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e03d      	b.n	80050c2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005046:	4b21      	ldr	r3, [pc, #132]	@ (80050cc <SPI_EndRxTransaction+0xf0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a21      	ldr	r2, [pc, #132]	@ (80050d0 <SPI_EndRxTransaction+0xf4>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	0d5b      	lsrs	r3, r3, #21
 8005052:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005056:	fb02 f303 	mul.w	r3, r2, r3
 800505a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	3b01      	subs	r3, #1
 8005066:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005072:	2b80      	cmp	r3, #128	@ 0x80
 8005074:	d0f2      	beq.n	800505c <SPI_EndRxTransaction+0x80>
 8005076:	e000      	b.n	800507a <SPI_EndRxTransaction+0x9e>
        break;
 8005078:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005082:	d11d      	bne.n	80050c0 <SPI_EndRxTransaction+0xe4>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800508c:	d004      	beq.n	8005098 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005096:	d113      	bne.n	80050c0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2200      	movs	r2, #0
 80050a0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7ff ff03 	bl	8004eb0 <SPI_WaitFifoStateUntilTimeout>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d007      	beq.n	80050c0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b4:	f043 0220 	orr.w	r2, r3, #32
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e000      	b.n	80050c2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000004 	.word	0x20000004
 80050d0:	165e9f81 	.word	0x165e9f81

080050d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7ff fedf 	bl	8004eb0 <SPI_WaitFifoStateUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050fc:	f043 0220 	orr.w	r2, r3, #32
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e046      	b.n	8005196 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005108:	4b25      	ldr	r3, [pc, #148]	@ (80051a0 <SPI_EndRxTxTransaction+0xcc>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a25      	ldr	r2, [pc, #148]	@ (80051a4 <SPI_EndRxTxTransaction+0xd0>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	0d5b      	lsrs	r3, r3, #21
 8005114:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005126:	d112      	bne.n	800514e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2200      	movs	r2, #0
 8005130:	2180      	movs	r1, #128	@ 0x80
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f7ff fe34 	bl	8004da0 <SPI_WaitFlagStateUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d016      	beq.n	800516c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005142:	f043 0220 	orr.w	r2, r3, #32
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e023      	b.n	8005196 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	3b01      	subs	r3, #1
 8005158:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005164:	2b80      	cmp	r3, #128	@ 0x80
 8005166:	d0f2      	beq.n	800514e <SPI_EndRxTxTransaction+0x7a>
 8005168:	e000      	b.n	800516c <SPI_EndRxTxTransaction+0x98>
        break;
 800516a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2200      	movs	r2, #0
 8005174:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f7ff fe99 	bl	8004eb0 <SPI_WaitFifoStateUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005188:	f043 0220 	orr.w	r2, r3, #32
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e000      	b.n	8005196 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20000004 	.word	0x20000004
 80051a4:	165e9f81 	.word	0x165e9f81

080051a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e049      	b.n	800524e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fc fe4e 	bl	8001e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	f000 feb6 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b082      	sub	sp, #8
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e049      	b.n	80052fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d106      	bne.n	8005282 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f841 	bl	8005304 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3304      	adds	r3, #4
 8005292:	4619      	mov	r1, r3
 8005294:	4610      	mov	r0, r2
 8005296:	f000 fe5f 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d109      	bne.n	800533c <HAL_TIM_PWM_Start+0x24>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	bf14      	ite	ne
 8005334:	2301      	movne	r3, #1
 8005336:	2300      	moveq	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	e03c      	b.n	80053b6 <HAL_TIM_PWM_Start+0x9e>
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	2b04      	cmp	r3, #4
 8005340:	d109      	bne.n	8005356 <HAL_TIM_PWM_Start+0x3e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b01      	cmp	r3, #1
 800534c:	bf14      	ite	ne
 800534e:	2301      	movne	r3, #1
 8005350:	2300      	moveq	r3, #0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	e02f      	b.n	80053b6 <HAL_TIM_PWM_Start+0x9e>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d109      	bne.n	8005370 <HAL_TIM_PWM_Start+0x58>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	e022      	b.n	80053b6 <HAL_TIM_PWM_Start+0x9e>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b0c      	cmp	r3, #12
 8005374:	d109      	bne.n	800538a <HAL_TIM_PWM_Start+0x72>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	bf14      	ite	ne
 8005382:	2301      	movne	r3, #1
 8005384:	2300      	moveq	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	e015      	b.n	80053b6 <HAL_TIM_PWM_Start+0x9e>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b10      	cmp	r3, #16
 800538e:	d109      	bne.n	80053a4 <HAL_TIM_PWM_Start+0x8c>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	bf14      	ite	ne
 800539c:	2301      	movne	r3, #1
 800539e:	2300      	moveq	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e008      	b.n	80053b6 <HAL_TIM_PWM_Start+0x9e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	bf14      	ite	ne
 80053b0:	2301      	movne	r3, #1
 80053b2:	2300      	moveq	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e092      	b.n	80054e4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_PWM_Start+0xb6>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053cc:	e023      	b.n	8005416 <HAL_TIM_PWM_Start+0xfe>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d104      	bne.n	80053de <HAL_TIM_PWM_Start+0xc6>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053dc:	e01b      	b.n	8005416 <HAL_TIM_PWM_Start+0xfe>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d104      	bne.n	80053ee <HAL_TIM_PWM_Start+0xd6>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053ec:	e013      	b.n	8005416 <HAL_TIM_PWM_Start+0xfe>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b0c      	cmp	r3, #12
 80053f2:	d104      	bne.n	80053fe <HAL_TIM_PWM_Start+0xe6>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053fc:	e00b      	b.n	8005416 <HAL_TIM_PWM_Start+0xfe>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b10      	cmp	r3, #16
 8005402:	d104      	bne.n	800540e <HAL_TIM_PWM_Start+0xf6>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800540c:	e003      	b.n	8005416 <HAL_TIM_PWM_Start+0xfe>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2202      	movs	r2, #2
 8005412:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2201      	movs	r2, #1
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f001 f93e 	bl	80066a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a30      	ldr	r2, [pc, #192]	@ (80054ec <HAL_TIM_PWM_Start+0x1d4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d004      	beq.n	8005438 <HAL_TIM_PWM_Start+0x120>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a2f      	ldr	r2, [pc, #188]	@ (80054f0 <HAL_TIM_PWM_Start+0x1d8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d101      	bne.n	800543c <HAL_TIM_PWM_Start+0x124>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <HAL_TIM_PWM_Start+0x126>
 800543c:	2300      	movs	r3, #0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005450:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a25      	ldr	r2, [pc, #148]	@ (80054ec <HAL_TIM_PWM_Start+0x1d4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d022      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x18a>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005464:	d01d      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x18a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a22      	ldr	r2, [pc, #136]	@ (80054f4 <HAL_TIM_PWM_Start+0x1dc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d018      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x18a>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a20      	ldr	r2, [pc, #128]	@ (80054f8 <HAL_TIM_PWM_Start+0x1e0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d013      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x18a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a1f      	ldr	r2, [pc, #124]	@ (80054fc <HAL_TIM_PWM_Start+0x1e4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00e      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x18a>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a19      	ldr	r2, [pc, #100]	@ (80054f0 <HAL_TIM_PWM_Start+0x1d8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d009      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x18a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1b      	ldr	r2, [pc, #108]	@ (8005500 <HAL_TIM_PWM_Start+0x1e8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d004      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x18a>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a19      	ldr	r2, [pc, #100]	@ (8005504 <HAL_TIM_PWM_Start+0x1ec>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d115      	bne.n	80054ce <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	4b17      	ldr	r3, [pc, #92]	@ (8005508 <HAL_TIM_PWM_Start+0x1f0>)
 80054aa:	4013      	ands	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b06      	cmp	r3, #6
 80054b2:	d015      	beq.n	80054e0 <HAL_TIM_PWM_Start+0x1c8>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ba:	d011      	beq.n	80054e0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054cc:	e008      	b.n	80054e0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0201 	orr.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	e000      	b.n	80054e2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40010400 	.word	0x40010400
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800
 80054fc:	40000c00 	.word	0x40000c00
 8005500:	40014000 	.word	0x40014000
 8005504:	40001800 	.word	0x40001800
 8005508:	00010007 	.word	0x00010007

0800550c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e08f      	b.n	8005640 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d106      	bne.n	800553a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7fc fce7 	bl	8001f08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2202      	movs	r2, #2
 800553e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6899      	ldr	r1, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	4b3e      	ldr	r3, [pc, #248]	@ (8005648 <HAL_TIM_Encoder_Init+0x13c>)
 800554e:	400b      	ands	r3, r1
 8005550:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3304      	adds	r3, #4
 800555a:	4619      	mov	r1, r3
 800555c:	4610      	mov	r0, r2
 800555e:	f000 fcfb 	bl	8005f58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4b31      	ldr	r3, [pc, #196]	@ (800564c <HAL_TIM_Encoder_Init+0x140>)
 8005588:	4013      	ands	r3, r2
 800558a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	4313      	orrs	r3, r2
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005650 <HAL_TIM_Encoder_Init+0x144>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005654 <HAL_TIM_Encoder_Init+0x148>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	4313      	orrs	r3, r2
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	011a      	lsls	r2, r3, #4
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	031b      	lsls	r3, r3, #12
 80055cc:	4313      	orrs	r3, r2
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80055da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80055e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	4313      	orrs	r3, r2
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	fffebff8 	.word	0xfffebff8
 800564c:	fffffcfc 	.word	0xfffffcfc
 8005650:	fffff3f3 	.word	0xfffff3f3
 8005654:	ffff0f0f 	.word	0xffff0f0f

08005658 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005668:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005670:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005678:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005680:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d110      	bne.n	80056aa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d102      	bne.n	8005694 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800568e:	7b7b      	ldrb	r3, [r7, #13]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d001      	beq.n	8005698 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e089      	b.n	80057ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056a8:	e031      	b.n	800570e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d110      	bne.n	80056d2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056b0:	7bbb      	ldrb	r3, [r7, #14]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d102      	bne.n	80056bc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056b6:	7b3b      	ldrb	r3, [r7, #12]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d001      	beq.n	80056c0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e075      	b.n	80057ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056d0:	e01d      	b.n	800570e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d108      	bne.n	80056ea <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056d8:	7bbb      	ldrb	r3, [r7, #14]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d105      	bne.n	80056ea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056de:	7b7b      	ldrb	r3, [r7, #13]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d102      	bne.n	80056ea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056e4:	7b3b      	ldrb	r3, [r7, #12]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d001      	beq.n	80056ee <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e05e      	b.n	80057ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2202      	movs	r2, #2
 80056f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2202      	movs	r2, #2
 8005702:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2202      	movs	r2, #2
 800570a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_TIM_Encoder_Start_IT+0xc4>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b04      	cmp	r3, #4
 8005718:	d010      	beq.n	800573c <HAL_TIM_Encoder_Start_IT+0xe4>
 800571a:	e01f      	b.n	800575c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2201      	movs	r2, #1
 8005722:	2100      	movs	r1, #0
 8005724:	4618      	mov	r0, r3
 8005726:	f000 ffbb 	bl	80066a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0202 	orr.w	r2, r2, #2
 8005738:	60da      	str	r2, [r3, #12]
      break;
 800573a:	e02e      	b.n	800579a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2201      	movs	r2, #1
 8005742:	2104      	movs	r1, #4
 8005744:	4618      	mov	r0, r3
 8005746:	f000 ffab 	bl	80066a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f042 0204 	orr.w	r2, r2, #4
 8005758:	60da      	str	r2, [r3, #12]
      break;
 800575a:	e01e      	b.n	800579a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2201      	movs	r2, #1
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f000 ff9b 	bl	80066a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2201      	movs	r2, #1
 8005770:	2104      	movs	r1, #4
 8005772:	4618      	mov	r0, r3
 8005774:	f000 ff94 	bl	80066a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0202 	orr.w	r2, r2, #2
 8005786:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0204 	orr.w	r2, r2, #4
 8005796:	60da      	str	r2, [r3, #12]
      break;
 8005798:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0201 	orr.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10f      	bne.n	80057e4 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2200      	movs	r2, #0
 80057ca:	2100      	movs	r1, #0
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 ff67 	bl	80066a0 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0202 	bic.w	r2, r2, #2
 80057e0:	60da      	str	r2, [r3, #12]
 80057e2:	e030      	b.n	8005846 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d10f      	bne.n	800580a <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2200      	movs	r2, #0
 80057f0:	2104      	movs	r1, #4
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 ff54 	bl	80066a0 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0204 	bic.w	r2, r2, #4
 8005806:	60da      	str	r2, [r3, #12]
 8005808:	e01d      	b.n	8005846 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2200      	movs	r2, #0
 8005810:	2100      	movs	r1, #0
 8005812:	4618      	mov	r0, r3
 8005814:	f000 ff44 	bl	80066a0 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2200      	movs	r2, #0
 800581e:	2104      	movs	r1, #4
 8005820:	4618      	mov	r0, r3
 8005822:	f000 ff3d 	bl	80066a0 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0202 	bic.w	r2, r2, #2
 8005834:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0204 	bic.w	r2, r2, #4
 8005844:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6a1a      	ldr	r2, [r3, #32]
 800584c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005850:	4013      	ands	r3, r2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10f      	bne.n	8005876 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005860:	4013      	ands	r3, r2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d107      	bne.n	8005876 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0201 	bic.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <HAL_TIM_Encoder_Stop_IT+0xce>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b04      	cmp	r3, #4
 8005880:	d148      	bne.n	8005914 <HAL_TIM_Encoder_Stop_IT+0x160>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d104      	bne.n	8005892 <HAL_TIM_Encoder_Stop_IT+0xde>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005890:	e023      	b.n	80058da <HAL_TIM_Encoder_Stop_IT+0x126>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b04      	cmp	r3, #4
 8005896:	d104      	bne.n	80058a2 <HAL_TIM_Encoder_Stop_IT+0xee>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058a0:	e01b      	b.n	80058da <HAL_TIM_Encoder_Stop_IT+0x126>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d104      	bne.n	80058b2 <HAL_TIM_Encoder_Stop_IT+0xfe>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058b0:	e013      	b.n	80058da <HAL_TIM_Encoder_Stop_IT+0x126>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b0c      	cmp	r3, #12
 80058b6:	d104      	bne.n	80058c2 <HAL_TIM_Encoder_Stop_IT+0x10e>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058c0:	e00b      	b.n	80058da <HAL_TIM_Encoder_Stop_IT+0x126>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d104      	bne.n	80058d2 <HAL_TIM_Encoder_Stop_IT+0x11e>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058d0:	e003      	b.n	80058da <HAL_TIM_Encoder_Stop_IT+0x126>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d104      	bne.n	80058ea <HAL_TIM_Encoder_Stop_IT+0x136>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058e8:	e024      	b.n	8005934 <HAL_TIM_Encoder_Stop_IT+0x180>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d104      	bne.n	80058fa <HAL_TIM_Encoder_Stop_IT+0x146>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058f8:	e01c      	b.n	8005934 <HAL_TIM_Encoder_Stop_IT+0x180>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d104      	bne.n	800590a <HAL_TIM_Encoder_Stop_IT+0x156>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005908:	e014      	b.n	8005934 <HAL_TIM_Encoder_Stop_IT+0x180>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8005912:	e00f      	b.n	8005934 <HAL_TIM_Encoder_Stop_IT+0x180>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d020      	beq.n	80059a2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01b      	beq.n	80059a2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f06f 0202 	mvn.w	r2, #2
 8005972:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7fb fb75 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 800598e:	e005      	b.n	800599c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fac3 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 faca 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d020      	beq.n	80059ee <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d01b      	beq.n	80059ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f06f 0204 	mvn.w	r2, #4
 80059be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7fb fb4f 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 80059da:	e005      	b.n	80059e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fa9d 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 faa4 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d020      	beq.n	8005a3a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d01b      	beq.n	8005a3a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f06f 0208 	mvn.w	r2, #8
 8005a0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2204      	movs	r2, #4
 8005a10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	f003 0303 	and.w	r3, r3, #3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7fb fb29 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 8005a26:	e005      	b.n	8005a34 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fa77 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fa7e 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d020      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d01b      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f06f 0210 	mvn.w	r2, #16
 8005a56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2208      	movs	r2, #8
 8005a5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7fb fb03 	bl	8001078 <HAL_TIM_IC_CaptureCallback>
 8005a72:	e005      	b.n	8005a80 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fa51 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fa58 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00c      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f06f 0201 	mvn.w	r2, #1
 8005aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fa2f 	bl	8005f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d104      	bne.n	8005abe <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00c      	beq.n	8005ad8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fea2 	bl	800681c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00c      	beq.n	8005afc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d007      	beq.n	8005afc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fe9a 	bl	8006830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00c      	beq.n	8005b20 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d007      	beq.n	8005b20 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fa12 	bl	8005f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00c      	beq.n	8005b44 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d007      	beq.n	8005b44 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0220 	mvn.w	r2, #32
 8005b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fe62 	bl	8006808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b44:	bf00      	nop
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e0ff      	b.n	8005d6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b14      	cmp	r3, #20
 8005b76:	f200 80f0 	bhi.w	8005d5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b80:	08005bd5 	.word	0x08005bd5
 8005b84:	08005d5b 	.word	0x08005d5b
 8005b88:	08005d5b 	.word	0x08005d5b
 8005b8c:	08005d5b 	.word	0x08005d5b
 8005b90:	08005c15 	.word	0x08005c15
 8005b94:	08005d5b 	.word	0x08005d5b
 8005b98:	08005d5b 	.word	0x08005d5b
 8005b9c:	08005d5b 	.word	0x08005d5b
 8005ba0:	08005c57 	.word	0x08005c57
 8005ba4:	08005d5b 	.word	0x08005d5b
 8005ba8:	08005d5b 	.word	0x08005d5b
 8005bac:	08005d5b 	.word	0x08005d5b
 8005bb0:	08005c97 	.word	0x08005c97
 8005bb4:	08005d5b 	.word	0x08005d5b
 8005bb8:	08005d5b 	.word	0x08005d5b
 8005bbc:	08005d5b 	.word	0x08005d5b
 8005bc0:	08005cd9 	.word	0x08005cd9
 8005bc4:	08005d5b 	.word	0x08005d5b
 8005bc8:	08005d5b 	.word	0x08005d5b
 8005bcc:	08005d5b 	.word	0x08005d5b
 8005bd0:	08005d19 	.word	0x08005d19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fa68 	bl	80060b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699a      	ldr	r2, [r3, #24]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0208 	orr.w	r2, r2, #8
 8005bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699a      	ldr	r2, [r3, #24]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0204 	bic.w	r2, r2, #4
 8005bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6999      	ldr	r1, [r3, #24]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	691a      	ldr	r2, [r3, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	619a      	str	r2, [r3, #24]
      break;
 8005c12:	e0a5      	b.n	8005d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 faba 	bl	8006194 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6999      	ldr	r1, [r3, #24]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	021a      	lsls	r2, r3, #8
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	619a      	str	r2, [r3, #24]
      break;
 8005c54:	e084      	b.n	8005d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fb11 	bl	8006284 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0208 	orr.w	r2, r2, #8
 8005c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69da      	ldr	r2, [r3, #28]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0204 	bic.w	r2, r2, #4
 8005c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69d9      	ldr	r1, [r3, #28]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	61da      	str	r2, [r3, #28]
      break;
 8005c94:	e064      	b.n	8005d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68b9      	ldr	r1, [r7, #8]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fb67 	bl	8006370 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69da      	ldr	r2, [r3, #28]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69d9      	ldr	r1, [r3, #28]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	021a      	lsls	r2, r3, #8
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	61da      	str	r2, [r3, #28]
      break;
 8005cd6:	e043      	b.n	8005d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fb9e 	bl	8006420 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0208 	orr.w	r2, r2, #8
 8005cf2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0204 	bic.w	r2, r2, #4
 8005d02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d16:	e023      	b.n	8005d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fbd0 	bl	80064c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d32:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d42:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	021a      	lsls	r2, r3, #8
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d58:	e002      	b.n	8005d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop

08005d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_TIM_ConfigClockSource+0x1c>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e0b4      	b.n	8005efa <HAL_TIM_ConfigClockSource+0x186>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	4b56      	ldr	r3, [pc, #344]	@ (8005f04 <HAL_TIM_ConfigClockSource+0x190>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dc8:	d03e      	beq.n	8005e48 <HAL_TIM_ConfigClockSource+0xd4>
 8005dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dce:	f200 8087 	bhi.w	8005ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dd6:	f000 8086 	beq.w	8005ee6 <HAL_TIM_ConfigClockSource+0x172>
 8005dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dde:	d87f      	bhi.n	8005ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8005de0:	2b70      	cmp	r3, #112	@ 0x70
 8005de2:	d01a      	beq.n	8005e1a <HAL_TIM_ConfigClockSource+0xa6>
 8005de4:	2b70      	cmp	r3, #112	@ 0x70
 8005de6:	d87b      	bhi.n	8005ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8005de8:	2b60      	cmp	r3, #96	@ 0x60
 8005dea:	d050      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x11a>
 8005dec:	2b60      	cmp	r3, #96	@ 0x60
 8005dee:	d877      	bhi.n	8005ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8005df0:	2b50      	cmp	r3, #80	@ 0x50
 8005df2:	d03c      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0xfa>
 8005df4:	2b50      	cmp	r3, #80	@ 0x50
 8005df6:	d873      	bhi.n	8005ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8005df8:	2b40      	cmp	r3, #64	@ 0x40
 8005dfa:	d058      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0x13a>
 8005dfc:	2b40      	cmp	r3, #64	@ 0x40
 8005dfe:	d86f      	bhi.n	8005ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8005e00:	2b30      	cmp	r3, #48	@ 0x30
 8005e02:	d064      	beq.n	8005ece <HAL_TIM_ConfigClockSource+0x15a>
 8005e04:	2b30      	cmp	r3, #48	@ 0x30
 8005e06:	d86b      	bhi.n	8005ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d060      	beq.n	8005ece <HAL_TIM_ConfigClockSource+0x15a>
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	d867      	bhi.n	8005ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d05c      	beq.n	8005ece <HAL_TIM_ConfigClockSource+0x15a>
 8005e14:	2b10      	cmp	r3, #16
 8005e16:	d05a      	beq.n	8005ece <HAL_TIM_ConfigClockSource+0x15a>
 8005e18:	e062      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e2a:	f000 fc19 	bl	8006660 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	609a      	str	r2, [r3, #8]
      break;
 8005e46:	e04f      	b.n	8005ee8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e58:	f000 fc02 	bl	8006660 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689a      	ldr	r2, [r3, #8]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e6a:	609a      	str	r2, [r3, #8]
      break;
 8005e6c:	e03c      	b.n	8005ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f000 fb76 	bl	800656c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2150      	movs	r1, #80	@ 0x50
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fbcf 	bl	800662a <TIM_ITRx_SetConfig>
      break;
 8005e8c:	e02c      	b.n	8005ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f000 fb95 	bl	80065ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2160      	movs	r1, #96	@ 0x60
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fbbf 	bl	800662a <TIM_ITRx_SetConfig>
      break;
 8005eac:	e01c      	b.n	8005ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f000 fb56 	bl	800656c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2140      	movs	r1, #64	@ 0x40
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fbaf 	bl	800662a <TIM_ITRx_SetConfig>
      break;
 8005ecc:	e00c      	b.n	8005ee8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4610      	mov	r0, r2
 8005eda:	f000 fba6 	bl	800662a <TIM_ITRx_SetConfig>
      break;
 8005ede:	e003      	b.n	8005ee8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee4:	e000      	b.n	8005ee8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	fffeff88 	.word	0xfffeff88

08005f08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a46      	ldr	r2, [pc, #280]	@ (8006084 <TIM_Base_SetConfig+0x12c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d013      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f76:	d00f      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a43      	ldr	r2, [pc, #268]	@ (8006088 <TIM_Base_SetConfig+0x130>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00b      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a42      	ldr	r2, [pc, #264]	@ (800608c <TIM_Base_SetConfig+0x134>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d007      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a41      	ldr	r2, [pc, #260]	@ (8006090 <TIM_Base_SetConfig+0x138>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a40      	ldr	r2, [pc, #256]	@ (8006094 <TIM_Base_SetConfig+0x13c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d108      	bne.n	8005faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a35      	ldr	r2, [pc, #212]	@ (8006084 <TIM_Base_SetConfig+0x12c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d02b      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb8:	d027      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a32      	ldr	r2, [pc, #200]	@ (8006088 <TIM_Base_SetConfig+0x130>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d023      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a31      	ldr	r2, [pc, #196]	@ (800608c <TIM_Base_SetConfig+0x134>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d01f      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a30      	ldr	r2, [pc, #192]	@ (8006090 <TIM_Base_SetConfig+0x138>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d01b      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a2f      	ldr	r2, [pc, #188]	@ (8006094 <TIM_Base_SetConfig+0x13c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d017      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a2e      	ldr	r2, [pc, #184]	@ (8006098 <TIM_Base_SetConfig+0x140>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a2d      	ldr	r2, [pc, #180]	@ (800609c <TIM_Base_SetConfig+0x144>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00f      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a2c      	ldr	r2, [pc, #176]	@ (80060a0 <TIM_Base_SetConfig+0x148>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00b      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a2b      	ldr	r2, [pc, #172]	@ (80060a4 <TIM_Base_SetConfig+0x14c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d007      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80060a8 <TIM_Base_SetConfig+0x150>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d003      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a29      	ldr	r2, [pc, #164]	@ (80060ac <TIM_Base_SetConfig+0x154>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d108      	bne.n	800601c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a10      	ldr	r2, [pc, #64]	@ (8006084 <TIM_Base_SetConfig+0x12c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d003      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a12      	ldr	r2, [pc, #72]	@ (8006094 <TIM_Base_SetConfig+0x13c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d103      	bne.n	8006058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b01      	cmp	r3, #1
 8006068:	d105      	bne.n	8006076 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f023 0201 	bic.w	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	611a      	str	r2, [r3, #16]
  }
}
 8006076:	bf00      	nop
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40010000 	.word	0x40010000
 8006088:	40000400 	.word	0x40000400
 800608c:	40000800 	.word	0x40000800
 8006090:	40000c00 	.word	0x40000c00
 8006094:	40010400 	.word	0x40010400
 8006098:	40014000 	.word	0x40014000
 800609c:	40014400 	.word	0x40014400
 80060a0:	40014800 	.word	0x40014800
 80060a4:	40001800 	.word	0x40001800
 80060a8:	40001c00 	.word	0x40001c00
 80060ac:	40002000 	.word	0x40002000

080060b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	f023 0201 	bic.w	r2, r3, #1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4b2b      	ldr	r3, [pc, #172]	@ (8006188 <TIM_OC1_SetConfig+0xd8>)
 80060dc:	4013      	ands	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0303 	bic.w	r3, r3, #3
 80060e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f023 0302 	bic.w	r3, r3, #2
 80060f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a21      	ldr	r2, [pc, #132]	@ (800618c <TIM_OC1_SetConfig+0xdc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d003      	beq.n	8006114 <TIM_OC1_SetConfig+0x64>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a20      	ldr	r2, [pc, #128]	@ (8006190 <TIM_OC1_SetConfig+0xe0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d10c      	bne.n	800612e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f023 0308 	bic.w	r3, r3, #8
 800611a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f023 0304 	bic.w	r3, r3, #4
 800612c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a16      	ldr	r2, [pc, #88]	@ (800618c <TIM_OC1_SetConfig+0xdc>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d003      	beq.n	800613e <TIM_OC1_SetConfig+0x8e>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a15      	ldr	r2, [pc, #84]	@ (8006190 <TIM_OC1_SetConfig+0xe0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d111      	bne.n	8006162 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800614c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	621a      	str	r2, [r3, #32]
}
 800617c:	bf00      	nop
 800617e:	371c      	adds	r7, #28
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	fffeff8f 	.word	0xfffeff8f
 800618c:	40010000 	.word	0x40010000
 8006190:	40010400 	.word	0x40010400

08006194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	f023 0210 	bic.w	r2, r3, #16
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4b2e      	ldr	r3, [pc, #184]	@ (8006278 <TIM_OC2_SetConfig+0xe4>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	021b      	lsls	r3, r3, #8
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f023 0320 	bic.w	r3, r3, #32
 80061de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a23      	ldr	r2, [pc, #140]	@ (800627c <TIM_OC2_SetConfig+0xe8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d003      	beq.n	80061fc <TIM_OC2_SetConfig+0x68>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a22      	ldr	r2, [pc, #136]	@ (8006280 <TIM_OC2_SetConfig+0xec>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d10d      	bne.n	8006218 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006216:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a18      	ldr	r2, [pc, #96]	@ (800627c <TIM_OC2_SetConfig+0xe8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_OC2_SetConfig+0x94>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a17      	ldr	r2, [pc, #92]	@ (8006280 <TIM_OC2_SetConfig+0xec>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d113      	bne.n	8006250 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800622e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	feff8fff 	.word	0xfeff8fff
 800627c:	40010000 	.word	0x40010000
 8006280:	40010400 	.word	0x40010400

08006284 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4b2d      	ldr	r3, [pc, #180]	@ (8006364 <TIM_OC3_SetConfig+0xe0>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0303 	bic.w	r3, r3, #3
 80062ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	021b      	lsls	r3, r3, #8
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a22      	ldr	r2, [pc, #136]	@ (8006368 <TIM_OC3_SetConfig+0xe4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d003      	beq.n	80062ea <TIM_OC3_SetConfig+0x66>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a21      	ldr	r2, [pc, #132]	@ (800636c <TIM_OC3_SetConfig+0xe8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d10d      	bne.n	8006306 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	021b      	lsls	r3, r3, #8
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a17      	ldr	r2, [pc, #92]	@ (8006368 <TIM_OC3_SetConfig+0xe4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d003      	beq.n	8006316 <TIM_OC3_SetConfig+0x92>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a16      	ldr	r2, [pc, #88]	@ (800636c <TIM_OC3_SetConfig+0xe8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d113      	bne.n	800633e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800631c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	621a      	str	r2, [r3, #32]
}
 8006358:	bf00      	nop
 800635a:	371c      	adds	r7, #28
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	fffeff8f 	.word	0xfffeff8f
 8006368:	40010000 	.word	0x40010000
 800636c:	40010400 	.word	0x40010400

08006370 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4b1e      	ldr	r3, [pc, #120]	@ (8006414 <TIM_OC4_SetConfig+0xa4>)
 800639c:	4013      	ands	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	021b      	lsls	r3, r3, #8
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	031b      	lsls	r3, r3, #12
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a13      	ldr	r2, [pc, #76]	@ (8006418 <TIM_OC4_SetConfig+0xa8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d003      	beq.n	80063d8 <TIM_OC4_SetConfig+0x68>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a12      	ldr	r2, [pc, #72]	@ (800641c <TIM_OC4_SetConfig+0xac>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d109      	bne.n	80063ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	019b      	lsls	r3, r3, #6
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	621a      	str	r2, [r3, #32]
}
 8006406:	bf00      	nop
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	feff8fff 	.word	0xfeff8fff
 8006418:	40010000 	.word	0x40010000
 800641c:	40010400 	.word	0x40010400

08006420 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4b1b      	ldr	r3, [pc, #108]	@ (80064b8 <TIM_OC5_SetConfig+0x98>)
 800644c:	4013      	ands	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006460:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	041b      	lsls	r3, r3, #16
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a12      	ldr	r2, [pc, #72]	@ (80064bc <TIM_OC5_SetConfig+0x9c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d003      	beq.n	800647e <TIM_OC5_SetConfig+0x5e>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a11      	ldr	r2, [pc, #68]	@ (80064c0 <TIM_OC5_SetConfig+0xa0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d109      	bne.n	8006492 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006484:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	021b      	lsls	r3, r3, #8
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	4313      	orrs	r3, r2
 8006490:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	621a      	str	r2, [r3, #32]
}
 80064ac:	bf00      	nop
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	fffeff8f 	.word	0xfffeff8f
 80064bc:	40010000 	.word	0x40010000
 80064c0:	40010400 	.word	0x40010400

080064c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006560 <TIM_OC6_SetConfig+0x9c>)
 80064f0:	4013      	ands	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	051b      	lsls	r3, r3, #20
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a13      	ldr	r2, [pc, #76]	@ (8006564 <TIM_OC6_SetConfig+0xa0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_OC6_SetConfig+0x60>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a12      	ldr	r2, [pc, #72]	@ (8006568 <TIM_OC6_SetConfig+0xa4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d109      	bne.n	8006538 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800652a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	029b      	lsls	r3, r3, #10
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4313      	orrs	r3, r2
 8006536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	feff8fff 	.word	0xfeff8fff
 8006564:	40010000 	.word	0x40010000
 8006568:	40010400 	.word	0x40010400

0800656c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	f023 0201 	bic.w	r2, r3, #1
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f023 030a 	bic.w	r3, r3, #10
 80065a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	621a      	str	r2, [r3, #32]
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b087      	sub	sp, #28
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	f023 0210 	bic.w	r2, r3, #16
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	031b      	lsls	r3, r3, #12
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006606:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	621a      	str	r2, [r3, #32]
}
 800661e:	bf00      	nop
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	f043 0307 	orr.w	r3, r3, #7
 800664c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	609a      	str	r2, [r3, #8]
}
 8006654:	bf00      	nop
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
 800666c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800667a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	021a      	lsls	r2, r3, #8
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	431a      	orrs	r2, r3
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4313      	orrs	r3, r2
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	609a      	str	r2, [r3, #8]
}
 8006694:	bf00      	nop
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f003 031f 	and.w	r3, r3, #31
 80066b2:	2201      	movs	r2, #1
 80066b4:	fa02 f303 	lsl.w	r3, r2, r3
 80066b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a1a      	ldr	r2, [r3, #32]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	43db      	mvns	r3, r3
 80066c2:	401a      	ands	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a1a      	ldr	r2, [r3, #32]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	fa01 f303 	lsl.w	r3, r1, r3
 80066d8:	431a      	orrs	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	621a      	str	r2, [r3, #32]
}
 80066de:	bf00      	nop
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
	...

080066ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006700:	2302      	movs	r3, #2
 8006702:	e06d      	b.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a30      	ldr	r2, [pc, #192]	@ (80067ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d004      	beq.n	8006738 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a2f      	ldr	r2, [pc, #188]	@ (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d108      	bne.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800673e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006750:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a20      	ldr	r2, [pc, #128]	@ (80067ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d022      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006776:	d01d      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1d      	ldr	r2, [pc, #116]	@ (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d018      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1c      	ldr	r2, [pc, #112]	@ (80067f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d013      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1a      	ldr	r2, [pc, #104]	@ (80067fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00e      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a15      	ldr	r2, [pc, #84]	@ (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d009      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a16      	ldr	r2, [pc, #88]	@ (8006800 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d004      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a15      	ldr	r2, [pc, #84]	@ (8006804 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d10c      	bne.n	80067ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	40010000 	.word	0x40010000
 80067f0:	40010400 	.word	0x40010400
 80067f4:	40000400 	.word	0x40000400
 80067f8:	40000800 	.word	0x40000800
 80067fc:	40000c00 	.word	0x40000c00
 8006800:	40014000 	.word	0x40014000
 8006804:	40001800 	.word	0x40001800

08006808 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <memset>:
 8006844:	4402      	add	r2, r0
 8006846:	4603      	mov	r3, r0
 8006848:	4293      	cmp	r3, r2
 800684a:	d100      	bne.n	800684e <memset+0xa>
 800684c:	4770      	bx	lr
 800684e:	f803 1b01 	strb.w	r1, [r3], #1
 8006852:	e7f9      	b.n	8006848 <memset+0x4>

08006854 <__errno>:
 8006854:	4b01      	ldr	r3, [pc, #4]	@ (800685c <__errno+0x8>)
 8006856:	6818      	ldr	r0, [r3, #0]
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	20000010 	.word	0x20000010

08006860 <__libc_init_array>:
 8006860:	b570      	push	{r4, r5, r6, lr}
 8006862:	4d0d      	ldr	r5, [pc, #52]	@ (8006898 <__libc_init_array+0x38>)
 8006864:	4c0d      	ldr	r4, [pc, #52]	@ (800689c <__libc_init_array+0x3c>)
 8006866:	1b64      	subs	r4, r4, r5
 8006868:	10a4      	asrs	r4, r4, #2
 800686a:	2600      	movs	r6, #0
 800686c:	42a6      	cmp	r6, r4
 800686e:	d109      	bne.n	8006884 <__libc_init_array+0x24>
 8006870:	4d0b      	ldr	r5, [pc, #44]	@ (80068a0 <__libc_init_array+0x40>)
 8006872:	4c0c      	ldr	r4, [pc, #48]	@ (80068a4 <__libc_init_array+0x44>)
 8006874:	f000 f9d6 	bl	8006c24 <_init>
 8006878:	1b64      	subs	r4, r4, r5
 800687a:	10a4      	asrs	r4, r4, #2
 800687c:	2600      	movs	r6, #0
 800687e:	42a6      	cmp	r6, r4
 8006880:	d105      	bne.n	800688e <__libc_init_array+0x2e>
 8006882:	bd70      	pop	{r4, r5, r6, pc}
 8006884:	f855 3b04 	ldr.w	r3, [r5], #4
 8006888:	4798      	blx	r3
 800688a:	3601      	adds	r6, #1
 800688c:	e7ee      	b.n	800686c <__libc_init_array+0xc>
 800688e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006892:	4798      	blx	r3
 8006894:	3601      	adds	r6, #1
 8006896:	e7f2      	b.n	800687e <__libc_init_array+0x1e>
 8006898:	08006db8 	.word	0x08006db8
 800689c:	08006db8 	.word	0x08006db8
 80068a0:	08006db8 	.word	0x08006db8
 80068a4:	08006dbc 	.word	0x08006dbc

080068a8 <atanf>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	ee10 5a10 	vmov	r5, s0
 80068ae:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80068b2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80068b6:	eef0 7a40 	vmov.f32	s15, s0
 80068ba:	d30f      	bcc.n	80068dc <atanf+0x34>
 80068bc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80068c0:	d904      	bls.n	80068cc <atanf+0x24>
 80068c2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80068c6:	eeb0 0a67 	vmov.f32	s0, s15
 80068ca:	bd38      	pop	{r3, r4, r5, pc}
 80068cc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8006a04 <atanf+0x15c>
 80068d0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8006a08 <atanf+0x160>
 80068d4:	2d00      	cmp	r5, #0
 80068d6:	fe77 7a27 	vselgt.f32	s15, s14, s15
 80068da:	e7f4      	b.n	80068c6 <atanf+0x1e>
 80068dc:	4b4b      	ldr	r3, [pc, #300]	@ (8006a0c <atanf+0x164>)
 80068de:	429c      	cmp	r4, r3
 80068e0:	d810      	bhi.n	8006904 <atanf+0x5c>
 80068e2:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80068e6:	d20a      	bcs.n	80068fe <atanf+0x56>
 80068e8:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8006a10 <atanf+0x168>
 80068ec:	ee30 7a07 	vadd.f32	s14, s0, s14
 80068f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068f4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80068f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068fc:	dce3      	bgt.n	80068c6 <atanf+0x1e>
 80068fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006902:	e013      	b.n	800692c <atanf+0x84>
 8006904:	f000 f8a4 	bl	8006a50 <fabsf>
 8006908:	4b42      	ldr	r3, [pc, #264]	@ (8006a14 <atanf+0x16c>)
 800690a:	429c      	cmp	r4, r3
 800690c:	d84f      	bhi.n	80069ae <atanf+0x106>
 800690e:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8006912:	429c      	cmp	r4, r3
 8006914:	d841      	bhi.n	800699a <atanf+0xf2>
 8006916:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800691a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800691e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006922:	2300      	movs	r3, #0
 8006924:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006928:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006932:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8006a18 <atanf+0x170>
 8006936:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8006a1c <atanf+0x174>
 800693a:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8006a20 <atanf+0x178>
 800693e:	ee66 6a06 	vmul.f32	s13, s12, s12
 8006942:	eee6 5a87 	vfma.f32	s11, s13, s14
 8006946:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8006a24 <atanf+0x17c>
 800694a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800694e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8006a28 <atanf+0x180>
 8006952:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006956:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8006a2c <atanf+0x184>
 800695a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800695e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006a30 <atanf+0x188>
 8006962:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006966:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8006a34 <atanf+0x18c>
 800696a:	eea6 5a87 	vfma.f32	s10, s13, s14
 800696e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8006a38 <atanf+0x190>
 8006972:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006976:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8006a3c <atanf+0x194>
 800697a:	eea7 5a26 	vfma.f32	s10, s14, s13
 800697e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006a40 <atanf+0x198>
 8006982:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006986:	ee27 7a26 	vmul.f32	s14, s14, s13
 800698a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800698e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006992:	d121      	bne.n	80069d8 <atanf+0x130>
 8006994:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006998:	e795      	b.n	80068c6 <atanf+0x1e>
 800699a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800699e:	ee30 7a67 	vsub.f32	s14, s0, s15
 80069a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80069a6:	2301      	movs	r3, #1
 80069a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80069ac:	e7be      	b.n	800692c <atanf+0x84>
 80069ae:	4b25      	ldr	r3, [pc, #148]	@ (8006a44 <atanf+0x19c>)
 80069b0:	429c      	cmp	r4, r3
 80069b2:	d80b      	bhi.n	80069cc <atanf+0x124>
 80069b4:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80069b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069bc:	eea0 7a27 	vfma.f32	s14, s0, s15
 80069c0:	2302      	movs	r3, #2
 80069c2:	ee70 6a67 	vsub.f32	s13, s0, s15
 80069c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ca:	e7af      	b.n	800692c <atanf+0x84>
 80069cc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80069d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80069d4:	2303      	movs	r3, #3
 80069d6:	e7a9      	b.n	800692c <atanf+0x84>
 80069d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006a48 <atanf+0x1a0>)
 80069da:	491c      	ldr	r1, [pc, #112]	@ (8006a4c <atanf+0x1a4>)
 80069dc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80069e0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80069e4:	edd3 6a00 	vldr	s13, [r3]
 80069e8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80069ec:	2d00      	cmp	r5, #0
 80069ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069f2:	edd2 7a00 	vldr	s15, [r2]
 80069f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069fa:	bfb8      	it	lt
 80069fc:	eef1 7a67 	vneglt.f32	s15, s15
 8006a00:	e761      	b.n	80068c6 <atanf+0x1e>
 8006a02:	bf00      	nop
 8006a04:	bfc90fdb 	.word	0xbfc90fdb
 8006a08:	3fc90fdb 	.word	0x3fc90fdb
 8006a0c:	3edfffff 	.word	0x3edfffff
 8006a10:	7149f2ca 	.word	0x7149f2ca
 8006a14:	3f97ffff 	.word	0x3f97ffff
 8006a18:	3c8569d7 	.word	0x3c8569d7
 8006a1c:	3d4bda59 	.word	0x3d4bda59
 8006a20:	bd6ef16b 	.word	0xbd6ef16b
 8006a24:	3d886b35 	.word	0x3d886b35
 8006a28:	3dba2e6e 	.word	0x3dba2e6e
 8006a2c:	3e124925 	.word	0x3e124925
 8006a30:	3eaaaaab 	.word	0x3eaaaaab
 8006a34:	bd15a221 	.word	0xbd15a221
 8006a38:	bd9d8795 	.word	0xbd9d8795
 8006a3c:	bde38e38 	.word	0xbde38e38
 8006a40:	be4ccccd 	.word	0xbe4ccccd
 8006a44:	401bffff 	.word	0x401bffff
 8006a48:	08006c60 	.word	0x08006c60
 8006a4c:	08006c50 	.word	0x08006c50

08006a50 <fabsf>:
 8006a50:	ee10 3a10 	vmov	r3, s0
 8006a54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a58:	ee00 3a10 	vmov	s0, r3
 8006a5c:	4770      	bx	lr

08006a5e <sinf_poly>:
 8006a5e:	07cb      	lsls	r3, r1, #31
 8006a60:	d412      	bmi.n	8006a88 <sinf_poly+0x2a>
 8006a62:	ee21 5b00 	vmul.f64	d5, d1, d0
 8006a66:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8006a6a:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8006a6e:	eea6 7b01 	vfma.f64	d7, d6, d1
 8006a72:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8006a76:	ee21 1b05 	vmul.f64	d1, d1, d5
 8006a7a:	eea6 0b05 	vfma.f64	d0, d6, d5
 8006a7e:	eea7 0b01 	vfma.f64	d0, d7, d1
 8006a82:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006a86:	4770      	bx	lr
 8006a88:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8006a8c:	ee21 5b01 	vmul.f64	d5, d1, d1
 8006a90:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8006a94:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8006a98:	eea1 7b06 	vfma.f64	d7, d1, d6
 8006a9c:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8006aa0:	eea1 0b06 	vfma.f64	d0, d1, d6
 8006aa4:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8006aa8:	ee21 1b05 	vmul.f64	d1, d1, d5
 8006aac:	eea5 0b06 	vfma.f64	d0, d5, d6
 8006ab0:	e7e5      	b.n	8006a7e <sinf_poly+0x20>
 8006ab2:	0000      	movs	r0, r0
 8006ab4:	0000      	movs	r0, r0
	...

08006ab8 <sinf>:
 8006ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006aba:	ee10 4a10 	vmov	r4, s0
 8006abe:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006ac2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8006ac6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8006aca:	eef0 7a40 	vmov.f32	s15, s0
 8006ace:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8006ad2:	d218      	bcs.n	8006b06 <sinf+0x4e>
 8006ad4:	ee26 1b06 	vmul.f64	d1, d6, d6
 8006ad8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8006adc:	d20a      	bcs.n	8006af4 <sinf+0x3c>
 8006ade:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8006ae2:	d103      	bne.n	8006aec <sinf+0x34>
 8006ae4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8006ae8:	ed8d 1a01 	vstr	s2, [sp, #4]
 8006aec:	eeb0 0a67 	vmov.f32	s0, s15
 8006af0:	b003      	add	sp, #12
 8006af2:	bd30      	pop	{r4, r5, pc}
 8006af4:	483a      	ldr	r0, [pc, #232]	@ (8006be0 <sinf+0x128>)
 8006af6:	eeb0 0b46 	vmov.f64	d0, d6
 8006afa:	2100      	movs	r1, #0
 8006afc:	b003      	add	sp, #12
 8006afe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b02:	f7ff bfac 	b.w	8006a5e <sinf_poly>
 8006b06:	f240 422e 	movw	r2, #1070	@ 0x42e
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d824      	bhi.n	8006b58 <sinf+0xa0>
 8006b0e:	4b34      	ldr	r3, [pc, #208]	@ (8006be0 <sinf+0x128>)
 8006b10:	ed93 7b08 	vldr	d7, [r3, #32]
 8006b14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006b18:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006b1c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8006b20:	ee17 1a90 	vmov	r1, s15
 8006b24:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8006b28:	1609      	asrs	r1, r1, #24
 8006b2a:	ee07 1a90 	vmov	s15, r1
 8006b2e:	f001 0203 	and.w	r2, r1, #3
 8006b32:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006b36:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006b3a:	ed92 0b00 	vldr	d0, [r2]
 8006b3e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8006b42:	f011 0f02 	tst.w	r1, #2
 8006b46:	eea5 6b47 	vfms.f64	d6, d5, d7
 8006b4a:	bf08      	it	eq
 8006b4c:	4618      	moveq	r0, r3
 8006b4e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8006b52:	ee20 0b06 	vmul.f64	d0, d0, d6
 8006b56:	e7d1      	b.n	8006afc <sinf+0x44>
 8006b58:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8006b5c:	d237      	bcs.n	8006bce <sinf+0x116>
 8006b5e:	4921      	ldr	r1, [pc, #132]	@ (8006be4 <sinf+0x12c>)
 8006b60:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8006b64:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8006b68:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8006b6c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8006b70:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006b74:	6a10      	ldr	r0, [r2, #32]
 8006b76:	6912      	ldr	r2, [r2, #16]
 8006b78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006b7c:	40ab      	lsls	r3, r5
 8006b7e:	fba0 5003 	umull	r5, r0, r0, r3
 8006b82:	4359      	muls	r1, r3
 8006b84:	fbe3 0102 	umlal	r0, r1, r3, r2
 8006b88:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8006b8c:	0f9d      	lsrs	r5, r3, #30
 8006b8e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006b92:	1ac9      	subs	r1, r1, r3
 8006b94:	f7f9 fcde 	bl	8000554 <__aeabi_l2d>
 8006b98:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8006b9c:	4b10      	ldr	r3, [pc, #64]	@ (8006be0 <sinf+0x128>)
 8006b9e:	f004 0203 	and.w	r2, r4, #3
 8006ba2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006ba6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8006bd8 <sinf+0x120>
 8006baa:	ed92 0b00 	vldr	d0, [r2]
 8006bae:	ec41 0b17 	vmov	d7, r0, r1
 8006bb2:	f014 0f02 	tst.w	r4, #2
 8006bb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006bba:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	bf08      	it	eq
 8006bc2:	4618      	moveq	r0, r3
 8006bc4:	ee27 1b07 	vmul.f64	d1, d7, d7
 8006bc8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006bcc:	e796      	b.n	8006afc <sinf+0x44>
 8006bce:	b003      	add	sp, #12
 8006bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bd4:	f000 b816 	b.w	8006c04 <__math_invalidf>
 8006bd8:	54442d18 	.word	0x54442d18
 8006bdc:	3c1921fb 	.word	0x3c1921fb
 8006be0:	08006cd0 	.word	0x08006cd0
 8006be4:	08006c70 	.word	0x08006c70

08006be8 <with_errnof>:
 8006be8:	b510      	push	{r4, lr}
 8006bea:	ed2d 8b02 	vpush	{d8}
 8006bee:	eeb0 8a40 	vmov.f32	s16, s0
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	f7ff fe2e 	bl	8006854 <__errno>
 8006bf8:	eeb0 0a48 	vmov.f32	s0, s16
 8006bfc:	ecbd 8b02 	vpop	{d8}
 8006c00:	6004      	str	r4, [r0, #0]
 8006c02:	bd10      	pop	{r4, pc}

08006c04 <__math_invalidf>:
 8006c04:	eef0 7a40 	vmov.f32	s15, s0
 8006c08:	ee30 7a40 	vsub.f32	s14, s0, s0
 8006c0c:	eef4 7a67 	vcmp.f32	s15, s15
 8006c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c14:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8006c18:	d602      	bvs.n	8006c20 <__math_invalidf+0x1c>
 8006c1a:	2021      	movs	r0, #33	@ 0x21
 8006c1c:	f7ff bfe4 	b.w	8006be8 <with_errnof>
 8006c20:	4770      	bx	lr
	...

08006c24 <_init>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	bf00      	nop
 8006c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2a:	bc08      	pop	{r3}
 8006c2c:	469e      	mov	lr, r3
 8006c2e:	4770      	bx	lr

08006c30 <_fini>:
 8006c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c32:	bf00      	nop
 8006c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c36:	bc08      	pop	{r3}
 8006c38:	469e      	mov	lr, r3
 8006c3a:	4770      	bx	lr

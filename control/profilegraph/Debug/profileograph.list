
profileograph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005600  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080057f8  080057f8  000067f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005808  08005808  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005808  08005808  00006808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005810  08005810  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005810  08005810  00006810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005814  08005814  00006814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005818  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000000c  08005824  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08005824  00007240  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001097b  00000000  00000000  0000703a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ee  00000000  00000000  000179b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  0001a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba2  00000000  00000000  0001b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286e4  00000000  00000000  0001bd5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c9f  00000000  00000000  0004443e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fca67  00000000  00000000  000570dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153b44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e98  00000000  00000000  00153b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00157a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080057e0 	.word	0x080057e0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080057e0 	.word	0x080057e0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <writeRegister>:
 * @param num Number of bytes to be written
 * @retval none
 * @note Since the register values to be written are 8-bit, there is no need to multiple writing
 */
static void writeRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	6039      	str	r1, [r7, #0]
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b3f      	cmp	r3, #63	@ 0x3f
 800053c:	d901      	bls.n	8000542 <writeRegister+0x1a>
		address = 63;
 800053e:	233f      	movs	r3, #63	@ 0x3f
 8000540:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
		address = (address << 1 & ~0x01);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	480c      	ldr	r0, [pc, #48]	@ (8000580 <writeRegister+0x58>)
 8000550:	f002 fbc8 	bl	8002ce4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 8000554:	1df9      	adds	r1, r7, #7
 8000556:	230a      	movs	r3, #10
 8000558:	2201      	movs	r2, #1
 800055a:	480a      	ldr	r0, [pc, #40]	@ (8000584 <writeRegister+0x5c>)
 800055c:	f003 f901 	bl	8003762 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,value,num,10);
 8000560:	79bb      	ldrb	r3, [r7, #6]
 8000562:	b29a      	uxth	r2, r3
 8000564:	230a      	movs	r3, #10
 8000566:	6839      	ldr	r1, [r7, #0]
 8000568:	4806      	ldr	r0, [pc, #24]	@ (8000584 <writeRegister+0x5c>)
 800056a:	f003 f8fa 	bl	8003762 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2120      	movs	r1, #32
 8000572:	4803      	ldr	r0, [pc, #12]	@ (8000580 <writeRegister+0x58>)
 8000574:	f002 fbb6 	bl	8002ce4 <HAL_GPIO_WritePin>
	

}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40020400 	.word	0x40020400
 8000584:	200000f4 	.word	0x200000f4

08000588 <readRegister>:
 *	@param value Pointer to buffer that stores the read value
 *	@param num Number of bytes to be written
 * 	@retval none
 */
static void readRegister(uint8_t address,uint8_t *value, uint8_t num)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b3f      	cmp	r3, #63	@ 0x3f
 800059c:	d901      	bls.n	80005a2 <readRegister+0x1a>
		address = 63;
 800059e:	233f      	movs	r3, #63	@ 0x3f
 80005a0:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
		address = (address << 1 | 0x01);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	71fb      	strb	r3, [r7, #7]
		
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <readRegister+0x60>)
 80005b8:	f002 fb94 	bl	8002ce4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,10);
 80005bc:	1df9      	adds	r1, r7, #7
 80005be:	230a      	movs	r3, #10
 80005c0:	2201      	movs	r2, #1
 80005c2:	480a      	ldr	r0, [pc, #40]	@ (80005ec <readRegister+0x64>)
 80005c4:	f003 f8cd 	bl	8003762 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,10);
 80005c8:	79bb      	ldrb	r3, [r7, #6]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	230a      	movs	r3, #10
 80005ce:	6839      	ldr	r1, [r7, #0]
 80005d0:	4806      	ldr	r0, [pc, #24]	@ (80005ec <readRegister+0x64>)
 80005d2:	f003 fa3b 	bl	8003a4c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2120      	movs	r1, #32
 80005da:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <readRegister+0x60>)
 80005dc:	f002 fb82 	bl	8002ce4 <HAL_GPIO_WritePin>
	
	
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40020400 	.word	0x40020400
 80005ec:	200000f4 	.word	0x200000f4

080005f0 <adxlFormat>:
						2 		|  				+-8g		
						3 		|  				+-16g
	 									
		*/

static void adxlFormat(ADXL_InitTypeDef * adxl) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	uint8_t formatreg=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1); //Set register to 0
 80005fc:	f107 030f 	add.w	r3, r7, #15
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	202c      	movs	r0, #44	@ 0x2c
 8000606:	f7ff ff8f 	bl	8000528 <writeRegister>
	formatreg = (adxl->IntMode << 6 | adxl->Range) & RANGE_REG_MASK;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	78db      	ldrb	r3, [r3, #3]
 800060e:	019b      	lsls	r3, r3, #6
 8000610:	b25a      	sxtb	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	b25b      	sxtb	r3, r3
 8000618:	4313      	orrs	r3, r2
 800061a:	b25b      	sxtb	r3, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 0343 	and.w	r3, r3, #67	@ 0x43
 8000622:	b2db      	uxtb	r3, r3
 8000624:	73fb      	strb	r3, [r7, #15]
	writeRegister(RANGE,&formatreg,1);
 8000626:	f107 030f 	add.w	r3, r7, #15
 800062a:	2201      	movs	r2, #1
 800062c:	4619      	mov	r1, r3
 800062e:	202c      	movs	r0, #44	@ 0x2c
 8000630:	f7ff ff7a 	bl	8000528 <writeRegister>

	formatreg = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg,1);
 8000638:	f107 030f 	add.w	r3, r7, #15
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	202d      	movs	r0, #45	@ 0x2d
 8000642:	f7ff ff71 	bl	8000528 <writeRegister>
	formatreg = (adxl->DataReadyMode << 2 | adxl->TempMode << 1 | adxl->StandbyMode) & POWER_CTL_REG_MASK;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	b25a      	sxtb	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	b25b      	sxtb	r3, r3
 8000656:	4313      	orrs	r3, r2
 8000658:	b25a      	sxtb	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b25b      	sxtb	r3, r3
 8000660:	4313      	orrs	r3, r2
 8000662:	b25b      	sxtb	r3, r3
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	b2db      	uxtb	r3, r3
 800066c:	73fb      	strb	r3, [r7, #15]
	writeRegister(POWER_CTL, &formatreg, 1);
 800066e:	f107 030f 	add.w	r3, r7, #15
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	202d      	movs	r0, #45	@ 0x2d
 8000678:	f7ff ff56 	bl	8000528 <writeRegister>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <adxlReset>:

/**
 * @brief Call to reset ADXL355
 */
static void adxlReset(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
    uint8_t shadow_reg_store[5] = {};
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	2300      	movs	r3, #0
 8000690:	753b      	strb	r3, [r7, #20]
    uint8_t shadow_reg_read[5] = {};
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	2300      	movs	r3, #0
 8000698:	733b      	strb	r3, [r7, #12]
    uint8_t reset_write = ADXL_RESET_WRITE;
 800069a:	2352      	movs	r3, #82	@ 0x52
 800069c:	71fb      	strb	r3, [r7, #7]
    //Store values from shadow registers
    readRegister(SHADOW_REG1, shadow_reg_store, 5);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	2205      	movs	r2, #5
 80006a4:	4619      	mov	r1, r3
 80006a6:	2050      	movs	r0, #80	@ 0x50
 80006a8:	f7ff ff6e 	bl	8000588 <readRegister>
    while (1) {
        //Perform a software reset
        writeRegister(ADXL_RESET, &reset_write, 1);
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	2201      	movs	r2, #1
 80006b0:	4619      	mov	r1, r3
 80006b2:	202f      	movs	r0, #47	@ 0x2f
 80006b4:	f7ff ff38 	bl	8000528 <writeRegister>
        //Read shadow registers after reset
        readRegister(SHADOW_REG1, shadow_reg_read, 5);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2205      	movs	r2, #5
 80006be:	4619      	mov	r1, r3
 80006c0:	2050      	movs	r0, #80	@ 0x50
 80006c2:	f7ff ff61 	bl	8000588 <readRegister>
        // Check if shadow registers match the stored values
        uint8_t match = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	77fb      	strb	r3, [r7, #31]
        for (int i = 0; i < 5; i++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	e011      	b.n	80006f4 <adxlReset+0x70>
            if (shadow_reg_read[i] != shadow_reg_store[i]) {
 80006d0:	f107 0208 	add.w	r2, r7, #8
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	4413      	add	r3, r2
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	f107 0110 	add.w	r1, r7, #16
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	440b      	add	r3, r1
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d002      	beq.n	80006ee <adxlReset+0x6a>
                match = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	77fb      	strb	r3, [r7, #31]
                break;
 80006ec:	e005      	b.n	80006fa <adxlReset+0x76>
        for (int i = 0; i < 5; i++) {
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	3301      	adds	r3, #1
 80006f2:	61bb      	str	r3, [r7, #24]
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	ddea      	ble.n	80006d0 <adxlReset+0x4c>
            }
        }
        // If all shadow registers match, exit the loop
        if (match) break;
 80006fa:	7ffb      	ldrb	r3, [r7, #31]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d100      	bne.n	8000702 <adxlReset+0x7e>
    while (1) {
 8000700:	e7d4      	b.n	80006ac <adxlReset+0x28>
        if (match) break;
 8000702:	bf00      	nop
    }
}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2120      	movs	r1, #32
 8000718:	482d      	ldr	r0, [pc, #180]	@ (80007d0 <ADXL_Init+0xc4>)
 800071a:	f002 fae3 	bl	8002ce4 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	HAL_Delay(5);
 800071e:	2005      	movs	r0, #5
 8000720:	f000 fef6 	bl	8001510 <HAL_Delay>
	//Reset device
	adxlReset();
 8000724:	f7ff ffae 	bl	8000684 <adxlReset>
	uint8_t testval[2] = {};
 8000728:	2300      	movs	r3, #0
 800072a:	81bb      	strh	r3, [r7, #12]
	// The Device Address register is constant, i.e. = 0xAD
	readRegister(DEVID_AD, testval, 2);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2202      	movs	r2, #2
 8000732:	4619      	mov	r1, r3
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff ff27 	bl	8000588 <readRegister>
	if (testval[0] != DEVID_AD_DEFAULT_VAL || testval[1] != DEVID_MST_DEFAULT_VAL) return ADXL_ERR;
 800073a:	7b3b      	ldrb	r3, [r7, #12]
 800073c:	2bad      	cmp	r3, #173	@ 0xad
 800073e:	d102      	bne.n	8000746 <ADXL_Init+0x3a>
 8000740:	7b7b      	ldrb	r3, [r7, #13]
 8000742:	2b1d      	cmp	r3, #29
 8000744:	d001      	beq.n	800074a <ADXL_Init+0x3e>
 8000746:	2301      	movs	r3, #1
 8000748:	e03d      	b.n	80007c6 <ADXL_Init+0xba>

	//Init of BW_RATE and DATAFORMAT registers
	adxlFormat(adxl);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff50 	bl	80005f0 <adxlFormat>
	
	// Settings gains 
	switch (adxl->Range) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d01e      	beq.n	8000796 <ADXL_Init+0x8a>
 8000758:	2b03      	cmp	r3, #3
 800075a:	dc28      	bgt.n	80007ae <ADXL_Init+0xa2>
 800075c:	2b01      	cmp	r3, #1
 800075e:	d002      	beq.n	8000766 <ADXL_Init+0x5a>
 8000760:	2b02      	cmp	r3, #2
 8000762:	d00c      	beq.n	800077e <ADXL_Init+0x72>
 8000764:	e023      	b.n	80007ae <ADXL_Init+0xa2>
		case ADXL_RANGE_2G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 8000766:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <ADXL_Init+0xc8>)
 8000768:	4a1b      	ldr	r2, [pc, #108]	@ (80007d8 <ADXL_Init+0xcc>)
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <ADXL_Init+0xc8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1a      	ldr	r2, [pc, #104]	@ (80007dc <ADXL_Init+0xd0>)
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <ADXL_Init+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a19      	ldr	r2, [pc, #100]	@ (80007e0 <ADXL_Init+0xd4>)
 800077a:	6013      	str	r3, [r2, #0]
			break;
 800077c:	e022      	b.n	80007c4 <ADXL_Init+0xb8>
		case ADXL_RANGE_4G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_4G;
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <ADXL_Init+0xc8>)
 8000780:	4a18      	ldr	r2, [pc, #96]	@ (80007e4 <ADXL_Init+0xd8>)
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <ADXL_Init+0xc8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a14      	ldr	r2, [pc, #80]	@ (80007dc <ADXL_Init+0xd0>)
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <ADXL_Init+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a13      	ldr	r2, [pc, #76]	@ (80007e0 <ADXL_Init+0xd4>)
 8000792:	6013      	str	r3, [r2, #0]
			break;
 8000794:	e016      	b.n	80007c4 <ADXL_Init+0xb8>
		case ADXL_RANGE_8G:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_8G;
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <ADXL_Init+0xc8>)
 8000798:	4a13      	ldr	r2, [pc, #76]	@ (80007e8 <ADXL_Init+0xdc>)
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <ADXL_Init+0xc8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <ADXL_Init+0xd0>)
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <ADXL_Init+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <ADXL_Init+0xd4>)
 80007aa:	6013      	str	r3, [r2, #0]
			break;
 80007ac:	e00a      	b.n	80007c4 <ADXL_Init+0xb8>
		default:
			GAINX = GAINY = GAINZ = ADXL355_ACC_SENS_2G;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <ADXL_Init+0xc8>)
 80007b0:	4a09      	ldr	r2, [pc, #36]	@ (80007d8 <ADXL_Init+0xcc>)
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <ADXL_Init+0xc8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <ADXL_Init+0xd0>)
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <ADXL_Init+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <ADXL_Init+0xd4>)
 80007c2:	6013      	str	r3, [r2, #0]
}
			
	return ADXL_OK;
 80007c4:	2300      	movs	r3, #0
	
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40020400 	.word	0x40020400
 80007d4:	20000030 	.word	0x20000030
 80007d8:	36831049 	.word	0x36831049
 80007dc:	2000002c 	.word	0x2000002c
 80007e0:	20000028 	.word	0x20000028
 80007e4:	37031494 	.word	0x37031494
 80007e8:	3783126f 	.word	0x3783126f

080007ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000800:	4a21      	ldr	r2, [pc, #132]	@ (8000888 <MX_ADC1_Init+0x9c>)
 8000802:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000804:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800080a:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <MX_ADC1_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000810:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <MX_ADC1_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_ADC1_Init+0x98>)
 800082c:	4a17      	ldr	r2, [pc, #92]	@ (800088c <MX_ADC1_Init+0xa0>)
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000838:	2201      	movs	r2, #1
 800083a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_ADC1_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000846:	2201      	movs	r2, #1
 8000848:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800084a:	480e      	ldr	r0, [pc, #56]	@ (8000884 <MX_ADC1_Init+0x98>)
 800084c:	f000 fe84 	bl	8001558 <HAL_ADC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 fadd 	bl	8000e14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800085a:	230a      	movs	r3, #10
 800085c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085e:	2301      	movs	r3, #1
 8000860:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_ADC1_Init+0x98>)
 800086c:	f000 feb8 	bl	80015e0 <HAL_ADC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000876:	f000 facd 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000034 	.word	0x20000034
 8000888:	40012000 	.word	0x40012000
 800088c:	0f000001 	.word	0x0f000001

08000890 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	@ 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a15      	ldr	r2, [pc, #84]	@ (8000904 <HAL_ADC_MspInit+0x74>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d123      	bne.n	80008fa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	4a14      	ldr	r2, [pc, #80]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008be:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <HAL_ADC_MspInit+0x78>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e2:	2301      	movs	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e6:	2303      	movs	r3, #3
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	@ (800090c <HAL_ADC_MspInit+0x7c>)
 80008f6:	f002 f849 	bl	800298c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	@ 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40012000 	.word	0x40012000
 8000908:	40023800 	.word	0x40023800
 800090c:	40020800 	.word	0x40020800

08000910 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000916:	4a18      	ldr	r2, [pc, #96]	@ (8000978 <MX_CAN1_Init+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <MX_CAN1_Init+0x64>)
 800091c:	2202      	movs	r2, #2
 800091e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_CAN1_Init+0x64>)
 800092e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000932:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000936:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800093a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800093c:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <MX_CAN1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000942:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000944:	2201      	movs	r2, #1
 8000946:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <MX_CAN1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_CAN1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_CAN1_Init+0x64>)
 8000962:	f001 f88d 	bl	8001a80 <HAL_CAN_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800096c:	f000 fa52 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000007c 	.word	0x2000007c
 8000978:	40006400 	.word	0x40006400

0800097c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a1b      	ldr	r2, [pc, #108]	@ (8000a08 <HAL_CAN_MspInit+0x8c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12f      	bne.n	80009fe <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_CAN_MspInit+0x90>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ce:	2303      	movs	r3, #3
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009de:	2309      	movs	r3, #9
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4809      	ldr	r0, [pc, #36]	@ (8000a10 <HAL_CAN_MspInit+0x94>)
 80009ea:	f001 ffcf 	bl	800298c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2014      	movs	r0, #20
 80009f4:	f001 ff93 	bl	800291e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009f8:	2014      	movs	r0, #20
 80009fa:	f001 ffac 	bl	8002956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	@ 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40006400 	.word	0x40006400
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020c00 	.word	0x40020c00

08000a14 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a1d      	ldr	r2, [pc, #116]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a17      	ldr	r2, [pc, #92]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a11      	ldr	r2, [pc, #68]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f244 01a1 	movw	r1, #16545	@ 0x40a1
 8000a90:	480b      	ldr	r0, [pc, #44]	@ (8000ac0 <MX_GPIO_Init+0xac>)
 8000a92:	f002 f927 	bl	8002ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|SPI1_CS_Pin|LD2_Pin;
 8000a96:	f244 03a1 	movw	r3, #16545	@ 0x40a1
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <MX_GPIO_Init+0xac>)
 8000ab0:	f001 ff6c 	bl	800298c <HAL_GPIO_Init>

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	@ 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac8:	f000 fcc5 	bl	8001456 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000acc:	f000 f88c 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad0:	f7ff ffa0 	bl	8000a14 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ad4:	f000 f9a4 	bl	8000e20 <MX_SPI1_Init>
  MX_CAN1_Init();
 8000ad8:	f7ff ff1a 	bl	8000910 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000adc:	f000 faa6 	bl	800102c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000ae0:	f7ff fe84 	bl	80007ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ae4:	f000 fb18 	bl	8001118 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ae8:	f000 fb8e 	bl	8001208 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_MspInit(&hcan1);
 8000aec:	4835      	ldr	r0, [pc, #212]	@ (8000bc4 <main+0x100>)
 8000aee:	f7ff ff45 	bl	800097c <HAL_CAN_MspInit>
  CAN_Config();
 8000af2:	f000 f8d5 	bl	8000ca0 <CAN_Config>

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000af6:	2102      	movs	r1, #2
 8000af8:	4832      	ldr	r0, [pc, #200]	@ (8000bc4 <main+0x100>)
 8000afa:	f001 fbdf 	bl	80022bc <HAL_CAN_ActivateNotification>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <main+0x44>
	  Error_Handler();
 8000b04:	f000 f986 	bl	8000e14 <Error_Handler>
  }

  ADXL.StandbyMode = ADXL_MODE_MEASUREMENT;
 8000b08:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc8 <main+0x104>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
  ADXL.TempMode = ADXL_TEMP_OFF;
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc8 <main+0x104>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	705a      	strb	r2, [r3, #1]
  ADXL.DataReadyMode = ADXL_DRDY_ON;
 8000b14:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc8 <main+0x104>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	709a      	strb	r2, [r3, #2]
  ADXL.IntMode = ADXL_INT_ACTIVELOW;
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc8 <main+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	70da      	strb	r2, [r3, #3]
  ADXL.Range = ADXL_RANGE_2G;
 8000b20:	4b29      	ldr	r3, [pc, #164]	@ (8000bc8 <main+0x104>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	711a      	strb	r2, [r3, #4]

  TxHeader.StdId = 0x123;
 8000b26:	4b29      	ldr	r3, [pc, #164]	@ (8000bcc <main+0x108>)
 8000b28:	f240 1223 	movw	r2, #291	@ 0x123
 8000b2c:	601a      	str	r2, [r3, #0]
  TxHeader.DLC = 8;
 8000b2e:	4b27      	ldr	r3, [pc, #156]	@ (8000bcc <main+0x108>)
 8000b30:	2208      	movs	r2, #8
 8000b32:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000b34:	4b25      	ldr	r3, [pc, #148]	@ (8000bcc <main+0x108>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000b3a:	4b24      	ldr	r3, [pc, #144]	@ (8000bcc <main+0x108>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000b40:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <main+0x108>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0x01;
 8000b46:	4b22      	ldr	r3, [pc, #136]	@ (8000bd0 <main+0x10c>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x02;
 8000b4c:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <main+0x10c>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x03;
 8000b52:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <main+0x10c>)
 8000b54:	2203      	movs	r2, #3
 8000b56:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x04;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <main+0x10c>)
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0x05;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <main+0x10c>)
 8000b60:	2205      	movs	r2, #5
 8000b62:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x06;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <main+0x10c>)
 8000b66:	2206      	movs	r2, #6
 8000b68:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0x07;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <main+0x10c>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0x08;
 8000b70:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <main+0x10c>)
 8000b72:	2208      	movs	r2, #8
 8000b74:	71da      	strb	r2, [r3, #7]


  ADXL_Init(&ADXL);
 8000b76:	4814      	ldr	r0, [pc, #80]	@ (8000bc8 <main+0x104>)
 8000b78:	f7ff fdc8 	bl	800070c <ADXL_Init>
//  ADXL_Measure(ON);

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4815      	ldr	r0, [pc, #84]	@ (8000bd4 <main+0x110>)
 8000b80:	f003 fd7a 	bl	8004678 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b84:	2100      	movs	r1, #0
 8000b86:	4814      	ldr	r0, [pc, #80]	@ (8000bd8 <main+0x114>)
 8000b88:	f003 fd76 	bl	8004678 <HAL_TIM_PWM_Start>

  htim2.Instance->CCR1 = SERVO_CCR_AT_CENTER;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <main+0x110>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f240 22fd 	movw	r2, #765	@ 0x2fd
 8000b94:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  Drive_Motor_Start(1);
	  Steering_Servo_Control(dis_off);
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <main+0x118>)
 8000b98:	f993 3000 	ldrsb.w	r3, [r3]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 f8df 	bl	8000d60 <Steering_Servo_Control>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	480e      	ldr	r0, [pc, #56]	@ (8000be0 <main+0x11c>)
 8000ba6:	f002 f8b6 	bl	8002d16 <HAL_GPIO_TogglePin>
//	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000baa:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <main+0x120>)
 8000bac:	4a08      	ldr	r2, [pc, #32]	@ (8000bd0 <main+0x10c>)
 8000bae:	4907      	ldr	r1, [pc, #28]	@ (8000bcc <main+0x108>)
 8000bb0:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <main+0x100>)
 8000bb2:	f001 f991 	bl	8001ed8 <HAL_CAN_AddTxMessage>
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  ADXL_getAccelRaw(accelData);
//	  ADXL_getAccelFloat(accelData_g);

//	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  HAL_Delay(500);
 8000bb6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bba:	f000 fca9 	bl	8001510 <HAL_Delay>
	  Steering_Servo_Control(dis_off);
 8000bbe:	bf00      	nop
 8000bc0:	e7e9      	b.n	8000b96 <main+0xd2>
 8000bc2:	bf00      	nop
 8000bc4:	2000007c 	.word	0x2000007c
 8000bc8:	200000ec 	.word	0x200000ec
 8000bcc:	200000a4 	.word	0x200000a4
 8000bd0:	200000d8 	.word	0x200000d8
 8000bd4:	20000158 	.word	0x20000158
 8000bd8:	200001a4 	.word	0x200001a4
 8000bdc:	200000f1 	.word	0x200000f1
 8000be0:	40020400 	.word	0x40020400
 8000be4:	200000e8 	.word	0x200000e8

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b094      	sub	sp, #80	@ 0x50
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	2234      	movs	r2, #52	@ 0x34
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f004 fdc6 	bl	8005788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <SystemClock_Config+0xb0>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c10:	4a21      	ldr	r2, [pc, #132]	@ (8000c98 <SystemClock_Config+0xb0>)
 8000c12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c18:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <SystemClock_Config+0xb0>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c24:	4b1d      	ldr	r3, [pc, #116]	@ (8000c9c <SystemClock_Config+0xb4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c9c <SystemClock_Config+0xb4>)
 8000c2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <SystemClock_Config+0xb4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c44:	2301      	movs	r3, #1
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c48:	2310      	movs	r3, #16
 8000c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 f879 	bl	8002d4c <HAL_RCC_OscConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000c60:	f000 f8d8 	bl	8000e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c64:	230f      	movs	r3, #15
 8000c66:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 fb12 	bl	80032a8 <HAL_RCC_ClockConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c8a:	f000 f8c3 	bl	8000e14 <Error_Handler>
  }
}
 8000c8e:	bf00      	nop
 8000c90:	3750      	adds	r7, #80	@ 0x50
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40007000 	.word	0x40007000

08000ca0 <CAN_Config>:

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 13;
 8000ca6:	230d      	movs	r3, #13
 8000ca8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000; //Only ID 0x284 and 0x285 can pass through
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480a      	ldr	r0, [pc, #40]	@ (8000cfc <CAN_Config+0x5c>)
 8000cd4:	f000 ffd0 	bl	8001c78 <HAL_CAN_ConfigFilter>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <CAN_Config+0x42>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000cde:	f000 f899 	bl	8000e14 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000ce2:	4806      	ldr	r0, [pc, #24]	@ (8000cfc <CAN_Config+0x5c>)
 8000ce4:	f001 f8b4 	bl	8001e50 <HAL_CAN_Start>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <CAN_Config+0x52>
	{
		/* Start Error */
		Error_Handler();
 8000cee:	f000 f891 	bl	8000e14 <Error_Handler>
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	@ 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000007c 	.word	0x2000007c

08000d00 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

	//Get Rx message
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000d08:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000d0a:	4a11      	ldr	r2, [pc, #68]	@ (8000d50 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4811      	ldr	r0, [pc, #68]	@ (8000d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000d10:	f001 f9b2 	bl	8002078 <HAL_CAN_GetRxMessage>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d005      	beq.n	8000d26 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d1a:	2180      	movs	r1, #128	@ 0x80
 8000d1c:	480e      	ldr	r0, [pc, #56]	@ (8000d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000d1e:	f001 fffa 	bl	8002d16 <HAL_GPIO_TogglePin>
		Error_Handler();
 8000d22:	f000 f877 	bl	8000e14 <Error_Handler>
	}

	if (RxHeader.StdId == 0x123) {
 8000d26:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f240 1223 	movw	r2, #291	@ 0x123
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d108      	bne.n	8000d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d32:	2101      	movs	r1, #1
 8000d34:	4808      	ldr	r0, [pc, #32]	@ (8000d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000d36:	f001 ffee 	bl	8002d16 <HAL_GPIO_TogglePin>
		dis_off = RxData[0];
 8000d3a:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b25a      	sxtb	r2, r3
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000d42:	701a      	strb	r2, [r3, #0]
	}

}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200000e0 	.word	0x200000e0
 8000d50:	200000bc 	.word	0x200000bc
 8000d54:	2000007c 	.word	0x2000007c
 8000d58:	40020400 	.word	0x40020400
 8000d5c:	200000f1 	.word	0x200000f1

08000d60 <Steering_Servo_Control>:

void Steering_Servo_Control(int8_t offsetVal){
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
	//Clamp dis_off to valid range
	if (offsetVal != 100){
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b64      	cmp	r3, #100	@ 0x64
 8000d70:	d040      	beq.n	8000df4 <Steering_Servo_Control+0x94>
		if (offsetVal < DIS_OFF_MAX_LEFT) {
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	f113 0f43 	cmn.w	r3, #67	@ 0x43
 8000d7a:	da02      	bge.n	8000d82 <Steering_Servo_Control+0x22>
			offsetVal = DIS_OFF_MAX_LEFT;
 8000d7c:	23bd      	movs	r3, #189	@ 0xbd
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	e005      	b.n	8000d8e <Steering_Servo_Control+0x2e>
		} else if (offsetVal >= DIS_OFF_MAX_RIGHT) {
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b42      	cmp	r3, #66	@ 0x42
 8000d88:	dd01      	ble.n	8000d8e <Steering_Servo_Control+0x2e>
			offsetVal = DIS_OFF_MAX_RIGHT;
 8000d8a:	2343      	movs	r3, #67	@ 0x43
 8000d8c:	71fb      	strb	r3, [r7, #7]
		}

		//Linear interpolation from dis_off to steering angle
		float steerAngle = STEERING_ANGLE_MAX_LEFT
			+ ( (float)(offsetVal - DIS_OFF_MAX_LEFT)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	3343      	adds	r3, #67	@ 0x43
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
				/ (float)(DIS_OFF_MAX_RIGHT - DIS_OFF_MAX_LEFT) )
 8000d9c:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000e00 <Steering_Servo_Control+0xa0>
 8000da0:	eec7 7a26 	vdiv.f32	s15, s14, s13
			  * ( STEERING_ANGLE_MAX_RIGHT - STEERING_ANGLE_MAX_LEFT );
 8000da4:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000e04 <Steering_Servo_Control+0xa4>
 8000da8:	ee67 7a87 	vmul.f32	s15, s15, s14
		float steerAngle = STEERING_ANGLE_MAX_LEFT
 8000dac:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000db0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000db4:	edc7 7a03 	vstr	s15, [r7, #12]

		//Linear interpolation from steering angle to ccr value
		float ccrValue = SERVO_CCR_AT_NEG20
			+ ( (steerAngle - STEERING_ANGLE_MAX_LEFT)
 8000db8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dbc:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000dc0:	ee37 7a87 	vadd.f32	s14, s15, s14
				/ (STEERING_ANGLE_MAX_RIGHT - STEERING_ANGLE_MAX_LEFT) )
 8000dc4:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000e04 <Steering_Servo_Control+0xa4>
 8000dc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
			  * (SERVO_CCR_AT_POS20 - SERVO_CCR_AT_NEG20);
 8000dcc:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000e08 <Steering_Servo_Control+0xa8>
 8000dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
		float ccrValue = SERVO_CCR_AT_NEG20
 8000dd4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000e0c <Steering_Servo_Control+0xac>
 8000dd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ddc:	edc7 7a02 	vstr	s15, [r7, #8]

		//Write to the timer’s CCR register (cast to uint16_t)
		htim2.Instance->CCR1 = (uint16_t) ccrValue;
 8000de0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000de8:	ee17 3a90 	vmov	r3, s15
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <Steering_Servo_Control+0xb0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	43060000 	.word	0x43060000
 8000e04:	42200000 	.word	0x42200000
 8000e08:	43160000 	.word	0x43160000
 8000e0c:	442c8000 	.word	0x442c8000
 8000e10:	20000158 	.word	0x20000158

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
}
 8000e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <Error_Handler+0x8>

08000e20 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <MX_SPI1_Init+0x74>)
 8000e26:	4a1c      	ldr	r2, [pc, #112]	@ (8000e98 <MX_SPI1_Init+0x78>)
 8000e28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_SPI1_Init+0x74>)
 8000e2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e32:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <MX_SPI1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e38:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_SPI1_Init+0x74>)
 8000e3a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000e3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_SPI1_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <MX_SPI1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_SPI1_Init+0x74>)
 8000e4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <MX_SPI1_Init+0x74>)
 8000e56:	2210      	movs	r2, #16
 8000e58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <MX_SPI1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_SPI1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <MX_SPI1_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_SPI1_Init+0x74>)
 8000e6e:	2207      	movs	r2, #7
 8000e70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <MX_SPI1_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <MX_SPI1_Init+0x74>)
 8000e7a:	2208      	movs	r2, #8
 8000e7c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_SPI1_Init+0x74>)
 8000e80:	f002 fbc4 	bl	800360c <HAL_SPI_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e8a:	f7ff ffc3 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200000f4 	.word	0x200000f4
 8000e98:	40013000 	.word	0x40013000

08000e9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	@ 0x28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a17      	ldr	r2, [pc, #92]	@ (8000f18 <HAL_SPI_MspInit+0x7c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d127      	bne.n	8000f0e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ebe:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <HAL_SPI_MspInit+0x80>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <HAL_SPI_MspInit+0x80>)
 8000ec4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eca:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <HAL_SPI_MspInit+0x80>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ece:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <HAL_SPI_MspInit+0x80>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a10      	ldr	r2, [pc, #64]	@ (8000f1c <HAL_SPI_MspInit+0x80>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <HAL_SPI_MspInit+0x80>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eee:	23e0      	movs	r3, #224	@ 0xe0
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000efe:	2305      	movs	r3, #5
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <HAL_SPI_MspInit+0x84>)
 8000f0a:	f001 fd3f 	bl	800298c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	@ 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40013000 	.word	0x40013000
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020000 	.word	0x40020000

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f36:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	4a08      	ldr	r2, [pc, #32]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <NMI_Handler+0x4>

08000f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <MemManage_Handler+0x4>

08000f84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc2:	f000 fa85 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <CAN1_RX0_IRQHandler+0x10>)
 8000fd2:	f001 f999 	bl	8002308 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000007c 	.word	0x2000007c

08000fe0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <TIM2_IRQHandler+0x10>)
 8000fe6:	f003 fc41 	bl	800486c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000158 	.word	0x20000158

08000ff4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <TIM4_IRQHandler+0x10>)
 8000ffa:	f003 fc37 	bl	800486c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200001f0 	.word	0x200001f0

08001008 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <SystemInit+0x20>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001012:	4a05      	ldr	r2, [pc, #20]	@ (8001028 <SystemInit+0x20>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	@ 0x38
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001032:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104c:	463b      	mov	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800105e:	4b2d      	ldr	r3, [pc, #180]	@ (8001114 <MX_TIM2_Init+0xe8>)
 8001060:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001064:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001066:	4b2b      	ldr	r3, [pc, #172]	@ (8001114 <MX_TIM2_Init+0xe8>)
 8001068:	221f      	movs	r2, #31
 800106a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <MX_TIM2_Init+0xe8>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001072:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <MX_TIM2_Init+0xe8>)
 8001074:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001078:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <MX_TIM2_Init+0xe8>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001080:	4b24      	ldr	r3, [pc, #144]	@ (8001114 <MX_TIM2_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001086:	4823      	ldr	r0, [pc, #140]	@ (8001114 <MX_TIM2_Init+0xe8>)
 8001088:	f003 fa3e 	bl	8004508 <HAL_TIM_Base_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001092:	f7ff febf 	bl	8000e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001096:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800109c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010a0:	4619      	mov	r1, r3
 80010a2:	481c      	ldr	r0, [pc, #112]	@ (8001114 <MX_TIM2_Init+0xe8>)
 80010a4:	f003 fdfe 	bl	8004ca4 <HAL_TIM_ConfigClockSource>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010ae:	f7ff feb1 	bl	8000e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010b2:	4818      	ldr	r0, [pc, #96]	@ (8001114 <MX_TIM2_Init+0xe8>)
 80010b4:	f003 fa7f 	bl	80045b6 <HAL_TIM_PWM_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010be:	f7ff fea9 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	4810      	ldr	r0, [pc, #64]	@ (8001114 <MX_TIM2_Init+0xe8>)
 80010d2:	f004 faad 	bl	8005630 <HAL_TIMEx_MasterConfigSynchronization>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010dc:	f7ff fe9a 	bl	8000e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e0:	2360      	movs	r3, #96	@ 0x60
 80010e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	2200      	movs	r2, #0
 80010f4:	4619      	mov	r1, r3
 80010f6:	4807      	ldr	r0, [pc, #28]	@ (8001114 <MX_TIM2_Init+0xe8>)
 80010f8:	f003 fcc0 	bl	8004a7c <HAL_TIM_PWM_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001102:	f7ff fe87 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001106:	4803      	ldr	r0, [pc, #12]	@ (8001114 <MX_TIM2_Init+0xe8>)
 8001108:	f000 f920 	bl	800134c <HAL_TIM_MspPostInit>

}
 800110c:	bf00      	nop
 800110e:	3738      	adds	r7, #56	@ 0x38
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000158 	.word	0x20000158

08001118 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08e      	sub	sp, #56	@ 0x38
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001138:	463b      	mov	r3, r7
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
 8001146:	615a      	str	r2, [r3, #20]
 8001148:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800114a:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <MX_TIM3_Init+0xe8>)
 800114c:	4a2d      	ldr	r2, [pc, #180]	@ (8001204 <MX_TIM3_Init+0xec>)
 800114e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8001150:	4b2b      	ldr	r3, [pc, #172]	@ (8001200 <MX_TIM3_Init+0xe8>)
 8001152:	2207      	movs	r2, #7
 8001154:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <MX_TIM3_Init+0xe8>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800115c:	4b28      	ldr	r3, [pc, #160]	@ (8001200 <MX_TIM3_Init+0xe8>)
 800115e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001162:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <MX_TIM3_Init+0xe8>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116a:	4b25      	ldr	r3, [pc, #148]	@ (8001200 <MX_TIM3_Init+0xe8>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001170:	4823      	ldr	r0, [pc, #140]	@ (8001200 <MX_TIM3_Init+0xe8>)
 8001172:	f003 f9c9 	bl	8004508 <HAL_TIM_Base_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800117c:	f7ff fe4a 	bl	8000e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001184:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001186:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800118a:	4619      	mov	r1, r3
 800118c:	481c      	ldr	r0, [pc, #112]	@ (8001200 <MX_TIM3_Init+0xe8>)
 800118e:	f003 fd89 	bl	8004ca4 <HAL_TIM_ConfigClockSource>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001198:	f7ff fe3c 	bl	8000e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800119c:	4818      	ldr	r0, [pc, #96]	@ (8001200 <MX_TIM3_Init+0xe8>)
 800119e:	f003 fa0a 	bl	80045b6 <HAL_TIM_PWM_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011a8:	f7ff fe34 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4811      	ldr	r0, [pc, #68]	@ (8001200 <MX_TIM3_Init+0xe8>)
 80011bc:	f004 fa38 	bl	8005630 <HAL_TIMEx_MasterConfigSynchronization>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011c6:	f7ff fe25 	bl	8000e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ca:	2360      	movs	r3, #96	@ 0x60
 80011cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	2200      	movs	r2, #0
 80011de:	4619      	mov	r1, r3
 80011e0:	4807      	ldr	r0, [pc, #28]	@ (8001200 <MX_TIM3_Init+0xe8>)
 80011e2:	f003 fc4b 	bl	8004a7c <HAL_TIM_PWM_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80011ec:	f7ff fe12 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011f0:	4803      	ldr	r0, [pc, #12]	@ (8001200 <MX_TIM3_Init+0xe8>)
 80011f2:	f000 f8ab 	bl	800134c <HAL_TIM_MspPostInit>

}
 80011f6:	bf00      	nop
 80011f8:	3738      	adds	r7, #56	@ 0x38
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200001a4 	.word	0x200001a4
 8001204:	40000400 	.word	0x40000400

08001208 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001226:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <MX_TIM4_Init+0x94>)
 8001228:	4a1d      	ldr	r2, [pc, #116]	@ (80012a0 <MX_TIM4_Init+0x98>)
 800122a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <MX_TIM4_Init+0x94>)
 800122e:	229f      	movs	r2, #159	@ 0x9f
 8001230:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001232:	4b1a      	ldr	r3, [pc, #104]	@ (800129c <MX_TIM4_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001238:	4b18      	ldr	r3, [pc, #96]	@ (800129c <MX_TIM4_Init+0x94>)
 800123a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800123e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <MX_TIM4_Init+0x94>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <MX_TIM4_Init+0x94>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800124c:	4813      	ldr	r0, [pc, #76]	@ (800129c <MX_TIM4_Init+0x94>)
 800124e:	f003 f95b 	bl	8004508 <HAL_TIM_Base_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001258:	f7ff fddc 	bl	8000e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	@ (800129c <MX_TIM4_Init+0x94>)
 800126a:	f003 fd1b 	bl	8004ca4 <HAL_TIM_ConfigClockSource>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001274:	f7ff fdce 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_TIM4_Init+0x94>)
 8001286:	f004 f9d3 	bl	8005630 <HAL_TIMEx_MasterConfigSynchronization>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001290:	f7ff fdc0 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3720      	adds	r7, #32
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200001f0 	.word	0x200001f0
 80012a0:	40000800 	.word	0x40000800

080012a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012b4:	d114      	bne.n	80012e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b6:	4b22      	ldr	r3, [pc, #136]	@ (8001340 <HAL_TIM_Base_MspInit+0x9c>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	4a21      	ldr	r2, [pc, #132]	@ (8001340 <HAL_TIM_Base_MspInit+0x9c>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <HAL_TIM_Base_MspInit+0x9c>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	201c      	movs	r0, #28
 80012d4:	f001 fb23 	bl	800291e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012d8:	201c      	movs	r0, #28
 80012da:	f001 fb3c 	bl	8002956 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80012de:	e02a      	b.n	8001336 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a17      	ldr	r2, [pc, #92]	@ (8001344 <HAL_TIM_Base_MspInit+0xa0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10c      	bne.n	8001304 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <HAL_TIM_Base_MspInit+0x9c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	4a14      	ldr	r2, [pc, #80]	@ (8001340 <HAL_TIM_Base_MspInit+0x9c>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f6:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <HAL_TIM_Base_MspInit+0x9c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
}
 8001302:	e018      	b.n	8001336 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0f      	ldr	r2, [pc, #60]	@ (8001348 <HAL_TIM_Base_MspInit+0xa4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d113      	bne.n	8001336 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800130e:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <HAL_TIM_Base_MspInit+0x9c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	4a0b      	ldr	r2, [pc, #44]	@ (8001340 <HAL_TIM_Base_MspInit+0x9c>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6413      	str	r3, [r2, #64]	@ 0x40
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_TIM_Base_MspInit+0x9c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	201e      	movs	r0, #30
 800132c:	f001 faf7 	bl	800291e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001330:	201e      	movs	r0, #30
 8001332:	f001 fb10 	bl	8002956 <HAL_NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40000400 	.word	0x40000400
 8001348:	40000800 	.word	0x40000800

0800134c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800136c:	d11c      	bne.n	80013a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <HAL_TIM_MspPostInit+0xa8>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a20      	ldr	r2, [pc, #128]	@ (80013f4 <HAL_TIM_MspPostInit+0xa8>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <HAL_TIM_MspPostInit+0xa8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001386:	2301      	movs	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001396:	2301      	movs	r3, #1
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4815      	ldr	r0, [pc, #84]	@ (80013f8 <HAL_TIM_MspPostInit+0xac>)
 80013a2:	f001 faf3 	bl	800298c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013a6:	e020      	b.n	80013ea <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a13      	ldr	r2, [pc, #76]	@ (80013fc <HAL_TIM_MspPostInit+0xb0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d11b      	bne.n	80013ea <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <HAL_TIM_MspPostInit+0xa8>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a0f      	ldr	r2, [pc, #60]	@ (80013f4 <HAL_TIM_MspPostInit+0xa8>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <HAL_TIM_MspPostInit+0xa8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013ca:	2340      	movs	r3, #64	@ 0x40
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d6:	2302      	movs	r3, #2
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013da:	2302      	movs	r3, #2
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	4806      	ldr	r0, [pc, #24]	@ (8001400 <HAL_TIM_MspPostInit+0xb4>)
 80013e6:	f001 fad1 	bl	800298c <HAL_GPIO_Init>
}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	@ 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40000400 	.word	0x40000400
 8001400:	40020800 	.word	0x40020800

08001404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800143c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001408:	f7ff fdfe 	bl	8001008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800140c:	480c      	ldr	r0, [pc, #48]	@ (8001440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140e:	490d      	ldr	r1, [pc, #52]	@ (8001444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001410:	4a0d      	ldr	r2, [pc, #52]	@ (8001448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001424:	4c0a      	ldr	r4, [pc, #40]	@ (8001450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001432:	f004 f9b1 	bl	8005798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001436:	f7ff fb45 	bl	8000ac4 <main>
  bx  lr    
 800143a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800143c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001444:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001448:	08005818 	.word	0x08005818
  ldr r2, =_sbss
 800144c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001450:	20000240 	.word	0x20000240

08001454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC_IRQHandler>

08001456 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145a:	2003      	movs	r0, #3
 800145c:	f001 fa54 	bl	8002908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001460:	200f      	movs	r0, #15
 8001462:	f000 f805 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001466:	f7ff fd5d 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_InitTick+0x54>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <HAL_InitTick+0x58>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f001 fa6f 	bl	8002972 <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f001 fa37 	bl	800291e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	@ (80014cc <HAL_InitTick+0x5c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000004 	.word	0x20000004

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008
 80014f4:	2000023c 	.word	0x2000023c

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	2000023c 	.word	0x2000023c

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffde 	bl	80014f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008

08001558 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e031      	b.n	80015d2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	2b00      	cmp	r3, #0
 8001574:	d109      	bne.n	800158a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff f98a 	bl	8000890 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	2b00      	cmp	r3, #0
 8001594:	d116      	bne.n	80015c4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <HAL_ADC_Init+0x84>)
 800159c:	4013      	ands	r3, r2
 800159e:	f043 0202 	orr.w	r2, r3, #2
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f970 	bl	800188c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f023 0303 	bic.w	r3, r3, #3
 80015ba:	f043 0201 	orr.w	r2, r3, #1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80015c2:	e001      	b.n	80015c8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	ffffeefd 	.word	0xffffeefd

080015e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x1c>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e136      	b.n	800186a <HAL_ADC_ConfigChannel+0x28a>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b09      	cmp	r3, #9
 800160a:	d93a      	bls.n	8001682 <HAL_ADC_ConfigChannel+0xa2>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001614:	d035      	beq.n	8001682 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68d9      	ldr	r1, [r3, #12]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b29b      	uxth	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	3b1e      	subs	r3, #30
 800162c:	2207      	movs	r2, #7
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	400a      	ands	r2, r1
 800163a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a8d      	ldr	r2, [pc, #564]	@ (8001878 <HAL_ADC_ConfigChannel+0x298>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d10a      	bne.n	800165c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68d9      	ldr	r1, [r3, #12]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	061a      	lsls	r2, r3, #24
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800165a:	e035      	b.n	80016c8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68d9      	ldr	r1, [r3, #12]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	4618      	mov	r0, r3
 800166e:	4603      	mov	r3, r0
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4403      	add	r3, r0
 8001674:	3b1e      	subs	r3, #30
 8001676:	409a      	lsls	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001680:	e022      	b.n	80016c8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6919      	ldr	r1, [r3, #16]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	b29b      	uxth	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	2207      	movs	r2, #7
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43da      	mvns	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	400a      	ands	r2, r1
 80016a4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6919      	ldr	r1, [r3, #16]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	4603      	mov	r3, r0
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4403      	add	r3, r0
 80016be:	409a      	lsls	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b06      	cmp	r3, #6
 80016ce:	d824      	bhi.n	800171a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	3b05      	subs	r3, #5
 80016e2:	221f      	movs	r2, #31
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43da      	mvns	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	400a      	ands	r2, r1
 80016f0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b05      	subs	r3, #5
 800170c:	fa00 f203 	lsl.w	r2, r0, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	635a      	str	r2, [r3, #52]	@ 0x34
 8001718:	e04c      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b0c      	cmp	r3, #12
 8001720:	d824      	bhi.n	800176c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	3b23      	subs	r3, #35	@ 0x23
 8001734:	221f      	movs	r2, #31
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	400a      	ands	r2, r1
 8001742:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	4618      	mov	r0, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	3b23      	subs	r3, #35	@ 0x23
 800175e:	fa00 f203 	lsl.w	r2, r0, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	631a      	str	r2, [r3, #48]	@ 0x30
 800176a:	e023      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	3b41      	subs	r3, #65	@ 0x41
 800177e:	221f      	movs	r2, #31
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43da      	mvns	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	400a      	ands	r2, r1
 800178c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	b29b      	uxth	r3, r3
 800179a:	4618      	mov	r0, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	3b41      	subs	r3, #65	@ 0x41
 80017a8:	fa00 f203 	lsl.w	r2, r0, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a30      	ldr	r2, [pc, #192]	@ (800187c <HAL_ADC_ConfigChannel+0x29c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d10a      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x1f4>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017c6:	d105      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80017c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001880 <HAL_ADC_ConfigChannel+0x2a0>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001880 <HAL_ADC_ConfigChannel+0x2a0>)
 80017ce:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80017d2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a28      	ldr	r2, [pc, #160]	@ (800187c <HAL_ADC_ConfigChannel+0x29c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d10f      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x21e>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b12      	cmp	r3, #18
 80017e4:	d10b      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80017e6:	4b26      	ldr	r3, [pc, #152]	@ (8001880 <HAL_ADC_ConfigChannel+0x2a0>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4a25      	ldr	r2, [pc, #148]	@ (8001880 <HAL_ADC_ConfigChannel+0x2a0>)
 80017ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80017f0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80017f2:	4b23      	ldr	r3, [pc, #140]	@ (8001880 <HAL_ADC_ConfigChannel+0x2a0>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a22      	ldr	r2, [pc, #136]	@ (8001880 <HAL_ADC_ConfigChannel+0x2a0>)
 80017f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017fc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a1e      	ldr	r2, [pc, #120]	@ (800187c <HAL_ADC_ConfigChannel+0x29c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d12b      	bne.n	8001860 <HAL_ADC_ConfigChannel+0x280>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1a      	ldr	r2, [pc, #104]	@ (8001878 <HAL_ADC_ConfigChannel+0x298>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d003      	beq.n	800181a <HAL_ADC_ConfigChannel+0x23a>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b11      	cmp	r3, #17
 8001818:	d122      	bne.n	8001860 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800181a:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <HAL_ADC_ConfigChannel+0x2a0>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4a18      	ldr	r2, [pc, #96]	@ (8001880 <HAL_ADC_ConfigChannel+0x2a0>)
 8001820:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001824:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001826:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <HAL_ADC_ConfigChannel+0x2a0>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4a15      	ldr	r2, [pc, #84]	@ (8001880 <HAL_ADC_ConfigChannel+0x2a0>)
 800182c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001830:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a10      	ldr	r2, [pc, #64]	@ (8001878 <HAL_ADC_ConfigChannel+0x298>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d111      	bne.n	8001860 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <HAL_ADC_ConfigChannel+0x2a4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a11      	ldr	r2, [pc, #68]	@ (8001888 <HAL_ADC_ConfigChannel+0x2a8>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	0c9a      	lsrs	r2, r3, #18
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001852:	e002      	b.n	800185a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3b01      	subs	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f9      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	10000012 	.word	0x10000012
 800187c:	40012000 	.word	0x40012000
 8001880:	40012300 	.word	0x40012300
 8001884:	20000000 	.word	0x20000000
 8001888:	431bde83 	.word	0x431bde83

0800188c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001894:	4b78      	ldr	r3, [pc, #480]	@ (8001a78 <ADC_Init+0x1ec>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a77      	ldr	r2, [pc, #476]	@ (8001a78 <ADC_Init+0x1ec>)
 800189a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800189e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80018a0:	4b75      	ldr	r3, [pc, #468]	@ (8001a78 <ADC_Init+0x1ec>)
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4973      	ldr	r1, [pc, #460]	@ (8001a78 <ADC_Init+0x1ec>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6859      	ldr	r1, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	021a      	lsls	r2, r3, #8
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80018e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6859      	ldr	r1, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001902:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6899      	ldr	r1, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191a:	4a58      	ldr	r2, [pc, #352]	@ (8001a7c <ADC_Init+0x1f0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d022      	beq.n	8001966 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800192e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6899      	ldr	r1, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001950:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6899      	ldr	r1, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	e00f      	b.n	8001986 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001974:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001984:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0202 	bic.w	r2, r2, #2
 8001994:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6899      	ldr	r1, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	005a      	lsls	r2, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d01b      	beq.n	80019ec <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80019d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6859      	ldr	r1, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019de:	3b01      	subs	r3, #1
 80019e0:	035a      	lsls	r2, r3, #13
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	e007      	b.n	80019fc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	051a      	lsls	r2, r3, #20
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6899      	ldr	r1, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a3e:	025a      	lsls	r2, r3, #9
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6899      	ldr	r1, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	029a      	lsls	r2, r3, #10
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	609a      	str	r2, [r3, #8]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40012300 	.word	0x40012300
 8001a7c:	0f000001 	.word	0x0f000001

08001a80 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0ed      	b.n	8001c6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d102      	bne.n	8001aa4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7fe ff6c 	bl	800097c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ab4:	f7ff fd20 	bl	80014f8 <HAL_GetTick>
 8001ab8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aba:	e012      	b.n	8001ae2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001abc:	f7ff fd1c 	bl	80014f8 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b0a      	cmp	r3, #10
 8001ac8:	d90b      	bls.n	8001ae2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ace:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2205      	movs	r2, #5
 8001ada:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0c5      	b.n	8001c6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0e5      	beq.n	8001abc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0202 	bic.w	r2, r2, #2
 8001afe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b00:	f7ff fcfa 	bl	80014f8 <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b06:	e012      	b.n	8001b2e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b08:	f7ff fcf6 	bl	80014f8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b0a      	cmp	r3, #10
 8001b14:	d90b      	bls.n	8001b2e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2205      	movs	r2, #5
 8001b26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e09f      	b.n	8001c6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1e5      	bne.n	8001b08 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7e1b      	ldrb	r3, [r3, #24]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d108      	bne.n	8001b56 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e007      	b.n	8001b66 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7e5b      	ldrb	r3, [r3, #25]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d108      	bne.n	8001b80 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	e007      	b.n	8001b90 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7e9b      	ldrb	r3, [r3, #26]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d108      	bne.n	8001baa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0220 	orr.w	r2, r2, #32
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e007      	b.n	8001bba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0220 	bic.w	r2, r2, #32
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	7edb      	ldrb	r3, [r3, #27]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d108      	bne.n	8001bd4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0210 	bic.w	r2, r2, #16
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	e007      	b.n	8001be4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0210 	orr.w	r2, r2, #16
 8001be2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7f1b      	ldrb	r3, [r3, #28]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d108      	bne.n	8001bfe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0208 	orr.w	r2, r2, #8
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	e007      	b.n	8001c0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0208 	bic.w	r2, r2, #8
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	7f5b      	ldrb	r3, [r3, #29]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d108      	bne.n	8001c28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0204 	orr.w	r2, r2, #4
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e007      	b.n	8001c38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0204 	bic.w	r2, r2, #4
 8001c36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	ea42 0103 	orr.w	r1, r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	1e5a      	subs	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c8e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c90:	7cfb      	ldrb	r3, [r7, #19]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d003      	beq.n	8001c9e <HAL_CAN_ConfigFilter+0x26>
 8001c96:	7cfb      	ldrb	r3, [r7, #19]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	f040 80c7 	bne.w	8001e2c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a69      	ldr	r2, [pc, #420]	@ (8001e48 <HAL_CAN_ConfigFilter+0x1d0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d001      	beq.n	8001cac <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001ca8:	4b68      	ldr	r3, [pc, #416]	@ (8001e4c <HAL_CAN_ConfigFilter+0x1d4>)
 8001caa:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	4a63      	ldr	r2, [pc, #396]	@ (8001e4c <HAL_CAN_ConfigFilter+0x1d4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d111      	bne.n	8001ce8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001cca:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	f003 031f 	and.w	r3, r3, #31
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	401a      	ands	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d123      	bne.n	8001d5a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	401a      	ands	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d34:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3248      	adds	r2, #72	@ 0x48
 8001d3a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d4e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d50:	6979      	ldr	r1, [r7, #20]
 8001d52:	3348      	adds	r3, #72	@ 0x48
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	440b      	add	r3, r1
 8001d58:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d122      	bne.n	8001da8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3248      	adds	r2, #72	@ 0x48
 8001d88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d9e:	6979      	ldr	r1, [r7, #20]
 8001da0:	3348      	adds	r3, #72	@ 0x48
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	440b      	add	r3, r1
 8001da6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d109      	bne.n	8001dc4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	401a      	ands	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001dc2:	e007      	b.n	8001dd4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001dee:	e007      	b.n	8001e00 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d107      	bne.n	8001e18 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e1e:	f023 0201 	bic.w	r2, r3, #1
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e006      	b.n	8001e3a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
  }
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	371c      	adds	r7, #28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40003400 	.word	0x40003400
 8001e4c:	40006400 	.word	0x40006400

08001e50 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d12e      	bne.n	8001ec2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e7c:	f7ff fb3c 	bl	80014f8 <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e82:	e012      	b.n	8001eaa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e84:	f7ff fb38 	bl	80014f8 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b0a      	cmp	r3, #10
 8001e90:	d90b      	bls.n	8001eaa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2205      	movs	r2, #5
 8001ea2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e012      	b.n	8001ed0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1e5      	bne.n	8001e84 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e006      	b.n	8001ed0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
  }
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	@ 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ef6:	7ffb      	ldrb	r3, [r7, #31]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d003      	beq.n	8001f04 <HAL_CAN_AddTxMessage+0x2c>
 8001efc:	7ffb      	ldrb	r3, [r7, #31]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	f040 80ad 	bne.w	800205e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10a      	bne.n	8001f24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d105      	bne.n	8001f24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8095 	beq.w	800204e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	0e1b      	lsrs	r3, r3, #24
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f2e:	2201      	movs	r2, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10d      	bne.n	8001f5c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f4a:	68f9      	ldr	r1, [r7, #12]
 8001f4c:	6809      	ldr	r1, [r1, #0]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3318      	adds	r3, #24
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	440b      	add	r3, r1
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e00f      	b.n	8001f7c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f66:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f6c:	68f9      	ldr	r1, [r7, #12]
 8001f6e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f70:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3318      	adds	r3, #24
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	440b      	add	r3, r1
 8001f7a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3318      	adds	r3, #24
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	7d1b      	ldrb	r3, [r3, #20]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d111      	bne.n	8001fbc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3318      	adds	r3, #24
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	6811      	ldr	r1, [r2, #0]
 8001fac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	3318      	adds	r3, #24
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	440b      	add	r3, r1
 8001fb8:	3304      	adds	r3, #4
 8001fba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3307      	adds	r3, #7
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	061a      	lsls	r2, r3, #24
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3306      	adds	r3, #6
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	041b      	lsls	r3, r3, #16
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3305      	adds	r3, #5
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	3204      	adds	r2, #4
 8001fdc:	7812      	ldrb	r2, [r2, #0]
 8001fde:	4610      	mov	r0, r2
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	6811      	ldr	r1, [r2, #0]
 8001fe4:	ea43 0200 	orr.w	r2, r3, r0
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	440b      	add	r3, r1
 8001fee:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001ff2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3303      	adds	r3, #3
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	061a      	lsls	r2, r3, #24
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3302      	adds	r3, #2
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	041b      	lsls	r3, r3, #16
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3301      	adds	r3, #1
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	4313      	orrs	r3, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	7812      	ldrb	r2, [r2, #0]
 8002014:	4610      	mov	r0, r2
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	6811      	ldr	r1, [r2, #0]
 800201a:	ea43 0200 	orr.w	r2, r3, r0
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	440b      	add	r3, r1
 8002024:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002028:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3318      	adds	r3, #24
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	4413      	add	r3, r2
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	6811      	ldr	r1, [r2, #0]
 800203c:	f043 0201 	orr.w	r2, r3, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3318      	adds	r3, #24
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	440b      	add	r3, r1
 8002048:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	e00e      	b.n	800206c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e006      	b.n	800206c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002062:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
  }
}
 800206c:	4618      	mov	r0, r3
 800206e:	3724      	adds	r7, #36	@ 0x24
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800208c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800208e:	7dfb      	ldrb	r3, [r7, #23]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d003      	beq.n	800209c <HAL_CAN_GetRxMessage+0x24>
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	2b02      	cmp	r3, #2
 8002098:	f040 8103 	bne.w	80022a2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10e      	bne.n	80020c0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d116      	bne.n	80020de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0f7      	b.n	80022b0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d107      	bne.n	80020de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0e8      	b.n	80022b0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	331b      	adds	r3, #27
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	4413      	add	r3, r2
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0204 	and.w	r2, r3, #4
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10c      	bne.n	8002116 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	331b      	adds	r3, #27
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	4413      	add	r3, r2
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e00b      	b.n	800212e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	331b      	adds	r3, #27
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	4413      	add	r3, r2
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	331b      	adds	r3, #27
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	4413      	add	r3, r2
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0202 	and.w	r2, r3, #2
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	331b      	adds	r3, #27
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	4413      	add	r3, r2
 8002150:	3304      	adds	r3, #4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2208      	movs	r2, #8
 8002160:	611a      	str	r2, [r3, #16]
 8002162:	e00b      	b.n	800217c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	331b      	adds	r3, #27
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	4413      	add	r3, r2
 8002170:	3304      	adds	r3, #4
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 020f 	and.w	r2, r3, #15
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	331b      	adds	r3, #27
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	4413      	add	r3, r2
 8002188:	3304      	adds	r3, #4
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	b2da      	uxtb	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	331b      	adds	r3, #27
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	4413      	add	r3, r2
 80021a0:	3304      	adds	r3, #4
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0c1b      	lsrs	r3, r3, #16
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	0a1a      	lsrs	r2, r3, #8
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	3301      	adds	r3, #1
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0c1a      	lsrs	r2, r3, #16
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	3302      	adds	r3, #2
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	4413      	add	r3, r2
 8002200:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	0e1a      	lsrs	r2, r3, #24
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	3303      	adds	r3, #3
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	4413      	add	r3, r2
 800221a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	3304      	adds	r3, #4
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4413      	add	r3, r2
 8002232:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0a1a      	lsrs	r2, r3, #8
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3305      	adds	r3, #5
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	4413      	add	r3, r2
 800224c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0c1a      	lsrs	r2, r3, #16
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	3306      	adds	r3, #6
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	4413      	add	r3, r2
 8002266:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	0e1a      	lsrs	r2, r3, #24
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	3307      	adds	r3, #7
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d108      	bne.n	800228e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0220 	orr.w	r2, r2, #32
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	e007      	b.n	800229e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0220 	orr.w	r2, r2, #32
 800229c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e006      	b.n	80022b0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
  }
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	371c      	adds	r7, #28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022cc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d002      	beq.n	80022da <HAL_CAN_ActivateNotification+0x1e>
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d109      	bne.n	80022ee <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6959      	ldr	r1, [r3, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e006      	b.n	80022fc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
  }
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	@ 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d07c      	beq.n	8002448 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d023      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2201      	movs	r2, #1
 800235e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f983 	bl	8002676 <HAL_CAN_TxMailbox0CompleteCallback>
 8002370:	e016      	b.n	80023a0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d004      	beq.n	8002386 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800237c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
 8002384:	e00c      	b.n	80023a0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d004      	beq.n	800239a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002392:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
 8002398:	e002      	b.n	80023a0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f989 	bl	80026b2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d024      	beq.n	80023f4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f963 	bl	800268a <HAL_CAN_TxMailbox1CompleteCallback>
 80023c4:	e016      	b.n	80023f4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d004      	beq.n	80023da <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80023d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d8:	e00c      	b.n	80023f4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d004      	beq.n	80023ee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ec:	e002      	b.n	80023f4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f969 	bl	80026c6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d024      	beq.n	8002448 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002406:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f943 	bl	800269e <HAL_CAN_TxMailbox2CompleteCallback>
 8002418:	e016      	b.n	8002448 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
 800242c:	e00c      	b.n	8002448 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d004      	beq.n	8002442 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002440:	e002      	b.n	8002448 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f949 	bl	80026da <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00c      	beq.n	800246c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2210      	movs	r2, #16
 800246a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00b      	beq.n	800248e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d006      	beq.n	800248e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2208      	movs	r2, #8
 8002486:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f930 	bl	80026ee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d009      	beq.n	80024ac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe fc2a 	bl	8000d00 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00c      	beq.n	80024d0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2210      	movs	r2, #16
 80024ce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	f003 0320 	and.w	r3, r3, #32
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2208      	movs	r2, #8
 80024ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f912 	bl	8002716 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d009      	beq.n	8002510 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f8f9 	bl	8002702 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2210      	movs	r2, #16
 800252a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f8fc 	bl	800272a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00b      	beq.n	8002554 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d006      	beq.n	8002554 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2208      	movs	r2, #8
 800254c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f8f5 	bl	800273e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d07b      	beq.n	8002656 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d072      	beq.n	800264e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	f043 0302 	orr.w	r3, r3, #2
 800259e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d043      	beq.n	800264e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d03e      	beq.n	800264e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025d6:	2b60      	cmp	r3, #96	@ 0x60
 80025d8:	d02b      	beq.n	8002632 <HAL_CAN_IRQHandler+0x32a>
 80025da:	2b60      	cmp	r3, #96	@ 0x60
 80025dc:	d82e      	bhi.n	800263c <HAL_CAN_IRQHandler+0x334>
 80025de:	2b50      	cmp	r3, #80	@ 0x50
 80025e0:	d022      	beq.n	8002628 <HAL_CAN_IRQHandler+0x320>
 80025e2:	2b50      	cmp	r3, #80	@ 0x50
 80025e4:	d82a      	bhi.n	800263c <HAL_CAN_IRQHandler+0x334>
 80025e6:	2b40      	cmp	r3, #64	@ 0x40
 80025e8:	d019      	beq.n	800261e <HAL_CAN_IRQHandler+0x316>
 80025ea:	2b40      	cmp	r3, #64	@ 0x40
 80025ec:	d826      	bhi.n	800263c <HAL_CAN_IRQHandler+0x334>
 80025ee:	2b30      	cmp	r3, #48	@ 0x30
 80025f0:	d010      	beq.n	8002614 <HAL_CAN_IRQHandler+0x30c>
 80025f2:	2b30      	cmp	r3, #48	@ 0x30
 80025f4:	d822      	bhi.n	800263c <HAL_CAN_IRQHandler+0x334>
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d002      	beq.n	8002600 <HAL_CAN_IRQHandler+0x2f8>
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d005      	beq.n	800260a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025fe:	e01d      	b.n	800263c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002608:	e019      	b.n	800263e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	f043 0310 	orr.w	r3, r3, #16
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002612:	e014      	b.n	800263e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	f043 0320 	orr.w	r3, r3, #32
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800261c:	e00f      	b.n	800263e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002626:	e00a      	b.n	800263e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002630:	e005      	b.n	800263e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800263a:	e000      	b.n	800263e <HAL_CAN_IRQHandler+0x336>
            break;
 800263c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699a      	ldr	r2, [r3, #24]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800264c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2204      	movs	r2, #4
 8002654:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f872 	bl	8002752 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	@ 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <__NVIC_SetPriorityGrouping+0x40>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002784:	4013      	ands	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 8002792:	4313      	orrs	r3, r2
 8002794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002796:	4a04      	ldr	r2, [pc, #16]	@ (80027a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	60d3      	str	r3, [r2, #12]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00
 80027ac:	05fa0000 	.word	0x05fa0000

080027b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b4:	4b04      	ldr	r3, [pc, #16]	@ (80027c8 <__NVIC_GetPriorityGrouping+0x18>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	f003 0307 	and.w	r3, r3, #7
}
 80027be:	4618      	mov	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	db0b      	blt.n	80027f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	f003 021f 	and.w	r2, r3, #31
 80027e4:	4907      	ldr	r1, [pc, #28]	@ (8002804 <__NVIC_EnableIRQ+0x38>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	2001      	movs	r0, #1
 80027ee:	fa00 f202 	lsl.w	r2, r0, r2
 80027f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000e100 	.word	0xe000e100

08002808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	db0a      	blt.n	8002832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	490c      	ldr	r1, [pc, #48]	@ (8002854 <__NVIC_SetPriority+0x4c>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	0112      	lsls	r2, r2, #4
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	440b      	add	r3, r1
 800282c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002830:	e00a      	b.n	8002848 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4908      	ldr	r1, [pc, #32]	@ (8002858 <__NVIC_SetPriority+0x50>)
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	3b04      	subs	r3, #4
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	440b      	add	r3, r1
 8002846:	761a      	strb	r2, [r3, #24]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000e100 	.word	0xe000e100
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	@ 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f1c3 0307 	rsb	r3, r3, #7
 8002876:	2b04      	cmp	r3, #4
 8002878:	bf28      	it	cs
 800287a:	2304      	movcs	r3, #4
 800287c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3304      	adds	r3, #4
 8002882:	2b06      	cmp	r3, #6
 8002884:	d902      	bls.n	800288c <NVIC_EncodePriority+0x30>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3b03      	subs	r3, #3
 800288a:	e000      	b.n	800288e <NVIC_EncodePriority+0x32>
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	f04f 32ff 	mov.w	r2, #4294967295
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	401a      	ands	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a4:	f04f 31ff 	mov.w	r1, #4294967295
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	4313      	orrs	r3, r2
         );
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	@ 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028d4:	d301      	bcc.n	80028da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d6:	2301      	movs	r3, #1
 80028d8:	e00f      	b.n	80028fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028da:	4a0a      	ldr	r2, [pc, #40]	@ (8002904 <SysTick_Config+0x40>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028e2:	210f      	movs	r1, #15
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	f7ff ff8e 	bl	8002808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <SysTick_Config+0x40>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028f2:	4b04      	ldr	r3, [pc, #16]	@ (8002904 <SysTick_Config+0x40>)
 80028f4:	2207      	movs	r2, #7
 80028f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	e000e010 	.word	0xe000e010

08002908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff ff29 	bl	8002768 <__NVIC_SetPriorityGrouping>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	4603      	mov	r3, r0
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002930:	f7ff ff3e 	bl	80027b0 <__NVIC_GetPriorityGrouping>
 8002934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	6978      	ldr	r0, [r7, #20]
 800293c:	f7ff ff8e 	bl	800285c <NVIC_EncodePriority>
 8002940:	4602      	mov	r2, r0
 8002942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff5d 	bl	8002808 <__NVIC_SetPriority>
}
 800294e:	bf00      	nop
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff31 	bl	80027cc <__NVIC_EnableIRQ>
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff ffa2 	bl	80028c4 <SysTick_Config>
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	@ 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	e175      	b.n	8002c98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029ac:	2201      	movs	r2, #1
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	f040 8164 	bne.w	8002c92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d005      	beq.n	80029e2 <HAL_GPIO_Init+0x56>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d130      	bne.n	8002a44 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2203      	movs	r2, #3
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a18:	2201      	movs	r2, #1
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 0201 	and.w	r2, r3, #1
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d017      	beq.n	8002a80 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d123      	bne.n	8002ad4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	08da      	lsrs	r2, r3, #3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3208      	adds	r2, #8
 8002a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	220f      	movs	r2, #15
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	08da      	lsrs	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3208      	adds	r2, #8
 8002ace:	69b9      	ldr	r1, [r7, #24]
 8002ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0203 	and.w	r2, r3, #3
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80be 	beq.w	8002c92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b16:	4b66      	ldr	r3, [pc, #408]	@ (8002cb0 <HAL_GPIO_Init+0x324>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	4a65      	ldr	r2, [pc, #404]	@ (8002cb0 <HAL_GPIO_Init+0x324>)
 8002b1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b22:	4b63      	ldr	r3, [pc, #396]	@ (8002cb0 <HAL_GPIO_Init+0x324>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b2e:	4a61      	ldr	r2, [pc, #388]	@ (8002cb4 <HAL_GPIO_Init+0x328>)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	089b      	lsrs	r3, r3, #2
 8002b34:	3302      	adds	r3, #2
 8002b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	220f      	movs	r2, #15
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a58      	ldr	r2, [pc, #352]	@ (8002cb8 <HAL_GPIO_Init+0x32c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d037      	beq.n	8002bca <HAL_GPIO_Init+0x23e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a57      	ldr	r2, [pc, #348]	@ (8002cbc <HAL_GPIO_Init+0x330>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d031      	beq.n	8002bc6 <HAL_GPIO_Init+0x23a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a56      	ldr	r2, [pc, #344]	@ (8002cc0 <HAL_GPIO_Init+0x334>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d02b      	beq.n	8002bc2 <HAL_GPIO_Init+0x236>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a55      	ldr	r2, [pc, #340]	@ (8002cc4 <HAL_GPIO_Init+0x338>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d025      	beq.n	8002bbe <HAL_GPIO_Init+0x232>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a54      	ldr	r2, [pc, #336]	@ (8002cc8 <HAL_GPIO_Init+0x33c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d01f      	beq.n	8002bba <HAL_GPIO_Init+0x22e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a53      	ldr	r2, [pc, #332]	@ (8002ccc <HAL_GPIO_Init+0x340>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d019      	beq.n	8002bb6 <HAL_GPIO_Init+0x22a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a52      	ldr	r2, [pc, #328]	@ (8002cd0 <HAL_GPIO_Init+0x344>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_GPIO_Init+0x226>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a51      	ldr	r2, [pc, #324]	@ (8002cd4 <HAL_GPIO_Init+0x348>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00d      	beq.n	8002bae <HAL_GPIO_Init+0x222>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a50      	ldr	r2, [pc, #320]	@ (8002cd8 <HAL_GPIO_Init+0x34c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <HAL_GPIO_Init+0x21e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002cdc <HAL_GPIO_Init+0x350>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_GPIO_Init+0x21a>
 8002ba2:	2309      	movs	r3, #9
 8002ba4:	e012      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002ba6:	230a      	movs	r3, #10
 8002ba8:	e010      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002baa:	2308      	movs	r3, #8
 8002bac:	e00e      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bae:	2307      	movs	r3, #7
 8002bb0:	e00c      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bb2:	2306      	movs	r3, #6
 8002bb4:	e00a      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bb6:	2305      	movs	r3, #5
 8002bb8:	e008      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e006      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e004      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e002      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_GPIO_Init+0x240>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	f002 0203 	and.w	r2, r2, #3
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	4093      	lsls	r3, r2
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bdc:	4935      	ldr	r1, [pc, #212]	@ (8002cb4 <HAL_GPIO_Init+0x328>)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c0e:	4a34      	ldr	r2, [pc, #208]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c14:	4b32      	ldr	r3, [pc, #200]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c38:	4a29      	ldr	r2, [pc, #164]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c3e:	4b28      	ldr	r3, [pc, #160]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c62:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c68:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ce0 <HAL_GPIO_Init+0x354>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3301      	adds	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b0f      	cmp	r3, #15
 8002c9c:	f67f ae86 	bls.w	80029ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3724      	adds	r7, #36	@ 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40013800 	.word	0x40013800
 8002cb8:	40020000 	.word	0x40020000
 8002cbc:	40020400 	.word	0x40020400
 8002cc0:	40020800 	.word	0x40020800
 8002cc4:	40020c00 	.word	0x40020c00
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40021400 	.word	0x40021400
 8002cd0:	40021800 	.word	0x40021800
 8002cd4:	40021c00 	.word	0x40021c00
 8002cd8:	40022000 	.word	0x40022000
 8002cdc:	40022400 	.word	0x40022400
 8002ce0:	40013c00 	.word	0x40013c00

08002ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	807b      	strh	r3, [r7, #2]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cf4:	787b      	ldrb	r3, [r7, #1]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfa:	887a      	ldrh	r2, [r7, #2]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d00:	e003      	b.n	8002d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d02:	887b      	ldrh	r3, [r7, #2]
 8002d04:	041a      	lsls	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	619a      	str	r2, [r3, #24]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d28:	887a      	ldrh	r2, [r7, #2]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	041a      	lsls	r2, r3, #16
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	43d9      	mvns	r1, r3
 8002d34:	887b      	ldrh	r3, [r7, #2]
 8002d36:	400b      	ands	r3, r1
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	619a      	str	r2, [r3, #24]
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d54:	2300      	movs	r3, #0
 8002d56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e29b      	b.n	800329a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8087 	beq.w	8002e7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d70:	4b96      	ldr	r3, [pc, #600]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d00c      	beq.n	8002d96 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7c:	4b93      	ldr	r3, [pc, #588]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d112      	bne.n	8002dae <HAL_RCC_OscConfig+0x62>
 8002d88:	4b90      	ldr	r3, [pc, #576]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d94:	d10b      	bne.n	8002dae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d96:	4b8d      	ldr	r3, [pc, #564]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d06c      	beq.n	8002e7c <HAL_RCC_OscConfig+0x130>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d168      	bne.n	8002e7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e275      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x7a>
 8002db8:	4b84      	ldr	r3, [pc, #528]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a83      	ldr	r2, [pc, #524]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	e02e      	b.n	8002e24 <HAL_RCC_OscConfig+0xd8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x9c>
 8002dce:	4b7f      	ldr	r3, [pc, #508]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a7e      	ldr	r2, [pc, #504]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b7c      	ldr	r3, [pc, #496]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a7b      	ldr	r2, [pc, #492]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002de0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e01d      	b.n	8002e24 <HAL_RCC_OscConfig+0xd8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCC_OscConfig+0xc0>
 8002df2:	4b76      	ldr	r3, [pc, #472]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a75      	ldr	r2, [pc, #468]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	4b73      	ldr	r3, [pc, #460]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a72      	ldr	r2, [pc, #456]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e00b      	b.n	8002e24 <HAL_RCC_OscConfig+0xd8>
 8002e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a6e      	ldr	r2, [pc, #440]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4b6c      	ldr	r3, [pc, #432]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6b      	ldr	r2, [pc, #428]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fb64 	bl	80014f8 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe fb60 	bl	80014f8 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	@ 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e229      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b61      	ldr	r3, [pc, #388]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0xe8>
 8002e52:	e014      	b.n	8002e7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe fb50 	bl	80014f8 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7fe fb4c 	bl	80014f8 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	@ 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e215      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6e:	4b57      	ldr	r3, [pc, #348]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x110>
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d069      	beq.n	8002f5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e8a:	4b50      	ldr	r3, [pc, #320]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e96:	4b4d      	ldr	r3, [pc, #308]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d11c      	bne.n	8002edc <HAL_RCC_OscConfig+0x190>
 8002ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d116      	bne.n	8002edc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eae:	4b47      	ldr	r3, [pc, #284]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x17a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e1e9      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b41      	ldr	r3, [pc, #260]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	493d      	ldr	r1, [pc, #244]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eda:	e040      	b.n	8002f5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d023      	beq.n	8002f2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee4:	4b39      	ldr	r3, [pc, #228]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a38      	ldr	r2, [pc, #224]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fb02 	bl	80014f8 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef8:	f7fe fafe 	bl	80014f8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e1c7      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0a:	4b30      	ldr	r3, [pc, #192]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f16:	4b2d      	ldr	r3, [pc, #180]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4929      	ldr	r1, [pc, #164]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
 8002f2a:	e018      	b.n	8002f5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2c:	4b27      	ldr	r3, [pc, #156]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a26      	ldr	r2, [pc, #152]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fe fade 	bl	80014f8 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f40:	f7fe fada 	bl	80014f8 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e1a3      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f52:	4b1e      	ldr	r3, [pc, #120]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d038      	beq.n	8002fdc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d019      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f72:	4b16      	ldr	r3, [pc, #88]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f76:	4a15      	ldr	r2, [pc, #84]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fabb 	bl	80014f8 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f86:	f7fe fab7 	bl	80014f8 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e180      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f98:	4b0c      	ldr	r3, [pc, #48]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x23a>
 8002fa4:	e01a      	b.n	8002fdc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa6:	4b09      	ldr	r3, [pc, #36]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002faa:	4a08      	ldr	r2, [pc, #32]	@ (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb2:	f7fe faa1 	bl	80014f8 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb8:	e00a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fba:	f7fe fa9d 	bl	80014f8 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d903      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e166      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
 8002fcc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd0:	4b92      	ldr	r3, [pc, #584]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8002fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1ee      	bne.n	8002fba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80a4 	beq.w	8003132 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fea:	4b8c      	ldr	r3, [pc, #560]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10d      	bne.n	8003012 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	4b89      	ldr	r3, [pc, #548]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	4a88      	ldr	r2, [pc, #544]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8002ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003000:	6413      	str	r3, [r2, #64]	@ 0x40
 8003002:	4b86      	ldr	r3, [pc, #536]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300e:	2301      	movs	r3, #1
 8003010:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003012:	4b83      	ldr	r3, [pc, #524]	@ (8003220 <HAL_RCC_OscConfig+0x4d4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d118      	bne.n	8003050 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800301e:	4b80      	ldr	r3, [pc, #512]	@ (8003220 <HAL_RCC_OscConfig+0x4d4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7f      	ldr	r2, [pc, #508]	@ (8003220 <HAL_RCC_OscConfig+0x4d4>)
 8003024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302a:	f7fe fa65 	bl	80014f8 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003032:	f7fe fa61 	bl	80014f8 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b64      	cmp	r3, #100	@ 0x64
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e12a      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003044:	4b76      	ldr	r3, [pc, #472]	@ (8003220 <HAL_RCC_OscConfig+0x4d4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d106      	bne.n	8003066 <HAL_RCC_OscConfig+0x31a>
 8003058:	4b70      	ldr	r3, [pc, #448]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305c:	4a6f      	ldr	r2, [pc, #444]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	6713      	str	r3, [r2, #112]	@ 0x70
 8003064:	e02d      	b.n	80030c2 <HAL_RCC_OscConfig+0x376>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0x33c>
 800306e:	4b6b      	ldr	r3, [pc, #428]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003072:	4a6a      	ldr	r2, [pc, #424]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	6713      	str	r3, [r2, #112]	@ 0x70
 800307a:	4b68      	ldr	r3, [pc, #416]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307e:	4a67      	ldr	r2, [pc, #412]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003080:	f023 0304 	bic.w	r3, r3, #4
 8003084:	6713      	str	r3, [r2, #112]	@ 0x70
 8003086:	e01c      	b.n	80030c2 <HAL_RCC_OscConfig+0x376>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b05      	cmp	r3, #5
 800308e:	d10c      	bne.n	80030aa <HAL_RCC_OscConfig+0x35e>
 8003090:	4b62      	ldr	r3, [pc, #392]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003094:	4a61      	ldr	r2, [pc, #388]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003096:	f043 0304 	orr.w	r3, r3, #4
 800309a:	6713      	str	r3, [r2, #112]	@ 0x70
 800309c:	4b5f      	ldr	r3, [pc, #380]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 800309e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a0:	4a5e      	ldr	r2, [pc, #376]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a8:	e00b      	b.n	80030c2 <HAL_RCC_OscConfig+0x376>
 80030aa:	4b5c      	ldr	r3, [pc, #368]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ae:	4a5b      	ldr	r2, [pc, #364]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b6:	4b59      	ldr	r3, [pc, #356]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ba:	4a58      	ldr	r2, [pc, #352]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 80030bc:	f023 0304 	bic.w	r3, r3, #4
 80030c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d015      	beq.n	80030f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7fe fa15 	bl	80014f8 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fe fa11 	bl	80014f8 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e0d8      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e8:	4b4c      	ldr	r3, [pc, #304]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ee      	beq.n	80030d2 <HAL_RCC_OscConfig+0x386>
 80030f4:	e014      	b.n	8003120 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7fe f9ff 	bl	80014f8 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe f9fb 	bl	80014f8 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e0c2      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003114:	4b41      	ldr	r3, [pc, #260]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1ee      	bne.n	80030fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d105      	bne.n	8003132 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003126:	4b3d      	ldr	r3, [pc, #244]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	4a3c      	ldr	r2, [pc, #240]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 800312c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003130:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80ae 	beq.w	8003298 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800313c:	4b37      	ldr	r3, [pc, #220]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d06d      	beq.n	8003224 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d14b      	bne.n	80031e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003150:	4b32      	ldr	r3, [pc, #200]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a31      	ldr	r2, [pc, #196]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003156:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800315a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe f9cc 	bl	80014f8 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7fe f9c8 	bl	80014f8 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e091      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	4b29      	ldr	r3, [pc, #164]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69da      	ldr	r2, [r3, #28]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	019b      	lsls	r3, r3, #6
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	3b01      	subs	r3, #1
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	061b      	lsls	r3, r3, #24
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ac:	071b      	lsls	r3, r3, #28
 80031ae:	491b      	ldr	r1, [pc, #108]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b4:	4b19      	ldr	r3, [pc, #100]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a18      	ldr	r2, [pc, #96]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 80031ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe f99a 	bl	80014f8 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c8:	f7fe f996 	bl	80014f8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e05f      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x47c>
 80031e6:	e057      	b.n	8003298 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e8:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0b      	ldr	r2, [pc, #44]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 80031ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fe f980 	bl	80014f8 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fe f97c 	bl	80014f8 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e045      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320e:	4b03      	ldr	r3, [pc, #12]	@ (800321c <HAL_RCC_OscConfig+0x4d0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x4b0>
 800321a:	e03d      	b.n	8003298 <HAL_RCC_OscConfig+0x54c>
 800321c:	40023800 	.word	0x40023800
 8003220:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003224:	4b1f      	ldr	r3, [pc, #124]	@ (80032a4 <HAL_RCC_OscConfig+0x558>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d030      	beq.n	8003294 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800323c:	429a      	cmp	r2, r3
 800323e:	d129      	bne.n	8003294 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324a:	429a      	cmp	r2, r3
 800324c:	d122      	bne.n	8003294 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003254:	4013      	ands	r3, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800325a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800325c:	4293      	cmp	r3, r2
 800325e:	d119      	bne.n	8003294 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	3b01      	subs	r3, #1
 800326e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d10f      	bne.n	8003294 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d107      	bne.n	8003294 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800

080032a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0d0      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c0:	4b6a      	ldr	r3, [pc, #424]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d910      	bls.n	80032f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b67      	ldr	r3, [pc, #412]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 020f 	bic.w	r2, r3, #15
 80032d6:	4965      	ldr	r1, [pc, #404]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032de:	4b63      	ldr	r3, [pc, #396]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0b8      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003308:	4b59      	ldr	r3, [pc, #356]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a58      	ldr	r2, [pc, #352]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800330e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003312:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003320:	4b53      	ldr	r3, [pc, #332]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4a52      	ldr	r2, [pc, #328]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003326:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800332a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800332c:	4b50      	ldr	r3, [pc, #320]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	494d      	ldr	r1, [pc, #308]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d040      	beq.n	80033cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d107      	bne.n	8003362 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b47      	ldr	r3, [pc, #284]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d115      	bne.n	800338a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e07f      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d107      	bne.n	800337a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	4b41      	ldr	r3, [pc, #260]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e073      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337a:	4b3d      	ldr	r3, [pc, #244]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e06b      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800338a:	4b39      	ldr	r3, [pc, #228]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f023 0203 	bic.w	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4936      	ldr	r1, [pc, #216]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	4313      	orrs	r3, r2
 800339a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339c:	f7fe f8ac 	bl	80014f8 <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a2:	e00a      	b.n	80033ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a4:	f7fe f8a8 	bl	80014f8 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e053      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 020c 	and.w	r2, r3, #12
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d1eb      	bne.n	80033a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033cc:	4b27      	ldr	r3, [pc, #156]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d210      	bcs.n	80033fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b24      	ldr	r3, [pc, #144]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 020f 	bic.w	r2, r3, #15
 80033e2:	4922      	ldr	r1, [pc, #136]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b20      	ldr	r3, [pc, #128]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e032      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003408:	4b19      	ldr	r3, [pc, #100]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4916      	ldr	r1, [pc, #88]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003426:	4b12      	ldr	r3, [pc, #72]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	490e      	ldr	r1, [pc, #56]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800343a:	f000 f821 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 800343e:	4602      	mov	r2, r0
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	490a      	ldr	r1, [pc, #40]	@ (8003474 <HAL_RCC_ClockConfig+0x1cc>)
 800344c:	5ccb      	ldrb	r3, [r1, r3]
 800344e:	fa22 f303 	lsr.w	r3, r2, r3
 8003452:	4a09      	ldr	r2, [pc, #36]	@ (8003478 <HAL_RCC_ClockConfig+0x1d0>)
 8003454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003456:	4b09      	ldr	r3, [pc, #36]	@ (800347c <HAL_RCC_ClockConfig+0x1d4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe f808 	bl	8001470 <HAL_InitTick>

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023c00 	.word	0x40023c00
 8003470:	40023800 	.word	0x40023800
 8003474:	080057f8 	.word	0x080057f8
 8003478:	20000000 	.word	0x20000000
 800347c:	20000004 	.word	0x20000004

08003480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003484:	b090      	sub	sp, #64	@ 0x40
 8003486:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	637b      	str	r3, [r7, #52]	@ 0x34
 800348c:	2300      	movs	r3, #0
 800348e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003490:	2300      	movs	r3, #0
 8003492:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003498:	4b59      	ldr	r3, [pc, #356]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d00d      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x40>
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	f200 80a1 	bhi.w	80035ec <HAL_RCC_GetSysClockFreq+0x16c>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0x34>
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d003      	beq.n	80034ba <HAL_RCC_GetSysClockFreq+0x3a>
 80034b2:	e09b      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b4:	4b53      	ldr	r3, [pc, #332]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x184>)
 80034b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034b8:	e09b      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ba:	4b53      	ldr	r3, [pc, #332]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x188>)
 80034bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034be:	e098      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d028      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	099b      	lsrs	r3, r3, #6
 80034dc:	2200      	movs	r2, #0
 80034de:	623b      	str	r3, [r7, #32]
 80034e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034e8:	2100      	movs	r1, #0
 80034ea:	4b47      	ldr	r3, [pc, #284]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x188>)
 80034ec:	fb03 f201 	mul.w	r2, r3, r1
 80034f0:	2300      	movs	r3, #0
 80034f2:	fb00 f303 	mul.w	r3, r0, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	4a43      	ldr	r2, [pc, #268]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x188>)
 80034fa:	fba0 1202 	umull	r1, r2, r0, r2
 80034fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003500:	460a      	mov	r2, r1
 8003502:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003504:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003506:	4413      	add	r3, r2
 8003508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800350a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350c:	2200      	movs	r2, #0
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	61fa      	str	r2, [r7, #28]
 8003512:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003516:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800351a:	f7fc fe8d 	bl	8000238 <__aeabi_uldivmod>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4613      	mov	r3, r2
 8003524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003526:	e053      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003528:	4b35      	ldr	r3, [pc, #212]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	099b      	lsrs	r3, r3, #6
 800352e:	2200      	movs	r2, #0
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	617a      	str	r2, [r7, #20]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800353a:	f04f 0b00 	mov.w	fp, #0
 800353e:	4652      	mov	r2, sl
 8003540:	465b      	mov	r3, fp
 8003542:	f04f 0000 	mov.w	r0, #0
 8003546:	f04f 0100 	mov.w	r1, #0
 800354a:	0159      	lsls	r1, r3, #5
 800354c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003550:	0150      	lsls	r0, r2, #5
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	ebb2 080a 	subs.w	r8, r2, sl
 800355a:	eb63 090b 	sbc.w	r9, r3, fp
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800356a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800356e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003572:	ebb2 0408 	subs.w	r4, r2, r8
 8003576:	eb63 0509 	sbc.w	r5, r3, r9
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	00eb      	lsls	r3, r5, #3
 8003584:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003588:	00e2      	lsls	r2, r4, #3
 800358a:	4614      	mov	r4, r2
 800358c:	461d      	mov	r5, r3
 800358e:	eb14 030a 	adds.w	r3, r4, sl
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	eb45 030b 	adc.w	r3, r5, fp
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035a6:	4629      	mov	r1, r5
 80035a8:	028b      	lsls	r3, r1, #10
 80035aa:	4621      	mov	r1, r4
 80035ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035b0:	4621      	mov	r1, r4
 80035b2:	028a      	lsls	r2, r1, #10
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ba:	2200      	movs	r2, #0
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	60fa      	str	r2, [r7, #12]
 80035c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035c4:	f7fc fe38 	bl	8000238 <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4613      	mov	r3, r2
 80035ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	3301      	adds	r3, #1
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80035e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035ea:	e002      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035ec:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x184>)
 80035ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3740      	adds	r7, #64	@ 0x40
 80035f8:	46bd      	mov	sp, r7
 80035fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	00f42400 	.word	0x00f42400
 8003608:	017d7840 	.word	0x017d7840

0800360c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e09d      	b.n	800375a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d108      	bne.n	8003638 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800362e:	d009      	beq.n	8003644 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	61da      	str	r2, [r3, #28]
 8003636:	e005      	b.n	8003644 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd fc1c 	bl	8000e9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800367a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003684:	d902      	bls.n	800368c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e002      	b.n	8003692 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800368c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003690:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800369a:	d007      	beq.n	80036ac <HAL_SPI_Init+0xa0>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036a4:	d002      	beq.n	80036ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ee:	ea42 0103 	orr.w	r1, r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	0c1b      	lsrs	r3, r3, #16
 8003708:	f003 0204 	and.w	r2, r3, #4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003728:	ea42 0103 	orr.w	r1, r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003748:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b088      	sub	sp, #32
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	4613      	mov	r3, r2
 8003770:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_SPI_Transmit+0x22>
 8003780:	2302      	movs	r3, #2
 8003782:	e15f      	b.n	8003a44 <HAL_SPI_Transmit+0x2e2>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800378c:	f7fd feb4 	bl	80014f8 <HAL_GetTick>
 8003790:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d002      	beq.n	80037a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037a2:	2302      	movs	r3, #2
 80037a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037a6:	e148      	b.n	8003a3a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_SPI_Transmit+0x52>
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037b8:	e13f      	b.n	8003a3a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2203      	movs	r2, #3
 80037be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	88fa      	ldrh	r2, [r7, #6]
 80037d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	88fa      	ldrh	r2, [r7, #6]
 80037d8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003804:	d10f      	bne.n	8003826 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003814:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003824:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003830:	2b40      	cmp	r3, #64	@ 0x40
 8003832:	d007      	beq.n	8003844 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003842:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800384c:	d94f      	bls.n	80038ee <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_SPI_Transmit+0xfa>
 8003856:	8afb      	ldrh	r3, [r7, #22]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d142      	bne.n	80038e2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003860:	881a      	ldrh	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386c:	1c9a      	adds	r2, r3, #2
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003880:	e02f      	b.n	80038e2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b02      	cmp	r3, #2
 800388e:	d112      	bne.n	80038b6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003894:	881a      	ldrh	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a0:	1c9a      	adds	r2, r3, #2
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038b4:	e015      	b.n	80038e2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b6:	f7fd fe1f 	bl	80014f8 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d803      	bhi.n	80038ce <HAL_SPI_Transmit+0x16c>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d102      	bne.n	80038d4 <HAL_SPI_Transmit+0x172>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80038e0:	e0ab      	b.n	8003a3a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ca      	bne.n	8003882 <HAL_SPI_Transmit+0x120>
 80038ec:	e080      	b.n	80039f0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_SPI_Transmit+0x19a>
 80038f6:	8afb      	ldrh	r3, [r7, #22]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d174      	bne.n	80039e6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d912      	bls.n	800392c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390a:	881a      	ldrh	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003916:	1c9a      	adds	r2, r3, #2
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b02      	subs	r3, #2
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800392a:	e05c      	b.n	80039e6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	7812      	ldrb	r2, [r2, #0]
 8003938:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003952:	e048      	b.n	80039e6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b02      	cmp	r3, #2
 8003960:	d12b      	bne.n	80039ba <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d912      	bls.n	8003992 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003970:	881a      	ldrh	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397c:	1c9a      	adds	r2, r3, #2
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b02      	subs	r3, #2
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003990:	e029      	b.n	80039e6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039b8:	e015      	b.n	80039e6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ba:	f7fd fd9d 	bl	80014f8 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d803      	bhi.n	80039d2 <HAL_SPI_Transmit+0x270>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d102      	bne.n	80039d8 <HAL_SPI_Transmit+0x276>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80039e4:	e029      	b.n	8003a3a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1b1      	bne.n	8003954 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	6839      	ldr	r1, [r7, #0]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fd1d 	bl	8004434 <SPI_EndRxTxTransaction>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e003      	b.n	8003a3a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003a42:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d002      	beq.n	8003a72 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a70:	e11a      	b.n	8003ca8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a7a:	d112      	bne.n	8003aa2 <HAL_SPI_Receive+0x56>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10e      	bne.n	8003aa2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2204      	movs	r2, #4
 8003a88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a8c:	88fa      	ldrh	r2, [r7, #6]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f90e 	bl	8003cba <HAL_SPI_TransmitReceive>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	e107      	b.n	8003cb2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_SPI_Receive+0x64>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e100      	b.n	8003cb2 <HAL_SPI_Receive+0x266>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ab8:	f7fd fd1e 	bl	80014f8 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_SPI_Receive+0x7e>
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d102      	bne.n	8003ad0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ace:	e0eb      	b.n	8003ca8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	88fa      	ldrh	r2, [r7, #6]
 8003ae8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	88fa      	ldrh	r2, [r7, #6]
 8003af0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b1a:	d908      	bls.n	8003b2e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	e007      	b.n	8003b3e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b3c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b46:	d10f      	bne.n	8003b68 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b66:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b72:	2b40      	cmp	r3, #64	@ 0x40
 8003b74:	d007      	beq.n	8003b86 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b84:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b8e:	d86f      	bhi.n	8003c70 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b90:	e034      	b.n	8003bfc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d117      	bne.n	8003bd0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f103 020c 	add.w	r2, r3, #12
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	7812      	ldrb	r2, [r2, #0]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003bce:	e015      	b.n	8003bfc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bd0:	f7fd fc92 	bl	80014f8 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d803      	bhi.n	8003be8 <HAL_SPI_Receive+0x19c>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be6:	d102      	bne.n	8003bee <HAL_SPI_Receive+0x1a2>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003bfa:	e055      	b.n	8003ca8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1c4      	bne.n	8003b92 <HAL_SPI_Receive+0x146>
 8003c08:	e038      	b.n	8003c7c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d115      	bne.n	8003c44 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	b292      	uxth	r2, r2
 8003c24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	1c9a      	adds	r2, r3, #2
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003c42:	e015      	b.n	8003c70 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c44:	f7fd fc58 	bl	80014f8 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d803      	bhi.n	8003c5c <HAL_SPI_Receive+0x210>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5a:	d102      	bne.n	8003c62 <HAL_SPI_Receive+0x216>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003c6e:	e01b      	b.n	8003ca8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1c6      	bne.n	8003c0a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	6839      	ldr	r1, [r7, #0]
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 fb5b 	bl	800433c <SPI_EndRxTransaction>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	75fb      	strb	r3, [r7, #23]
 8003c9e:	e003      	b.n	8003ca8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b08a      	sub	sp, #40	@ 0x28
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_SPI_TransmitReceive+0x26>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e20a      	b.n	80040f6 <HAL_SPI_TransmitReceive+0x43c>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ce8:	f7fd fc06 	bl	80014f8 <HAL_GetTick>
 8003cec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003cf4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003cfc:	887b      	ldrh	r3, [r7, #2]
 8003cfe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003d00:	887b      	ldrh	r3, [r7, #2]
 8003d02:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d04:	7efb      	ldrb	r3, [r7, #27]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d00e      	beq.n	8003d28 <HAL_SPI_TransmitReceive+0x6e>
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d10:	d106      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x66>
 8003d1a:	7efb      	ldrb	r3, [r7, #27]
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d003      	beq.n	8003d28 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
 8003d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003d26:	e1e0      	b.n	80040ea <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0x80>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0x80>
 8003d34:	887b      	ldrh	r3, [r7, #2]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003d40:	e1d3      	b.n	80040ea <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d003      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2205      	movs	r2, #5
 8003d52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	887a      	ldrh	r2, [r7, #2]
 8003d66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	887a      	ldrh	r2, [r7, #2]
 8003d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	887a      	ldrh	r2, [r7, #2]
 8003d82:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d98:	d802      	bhi.n	8003da0 <HAL_SPI_TransmitReceive+0xe6>
 8003d9a:	8a3b      	ldrh	r3, [r7, #16]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d908      	bls.n	8003db2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	e007      	b.n	8003dc2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003dc0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dcc:	2b40      	cmp	r3, #64	@ 0x40
 8003dce:	d007      	beq.n	8003de0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003de8:	f240 8081 	bls.w	8003eee <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_SPI_TransmitReceive+0x140>
 8003df4:	8a7b      	ldrh	r3, [r7, #18]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d16d      	bne.n	8003ed6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfe:	881a      	ldrh	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0a:	1c9a      	adds	r2, r3, #2
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e1e:	e05a      	b.n	8003ed6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d11b      	bne.n	8003e66 <HAL_SPI_TransmitReceive+0x1ac>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d016      	beq.n	8003e66 <HAL_SPI_TransmitReceive+0x1ac>
 8003e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d113      	bne.n	8003e66 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e42:	881a      	ldrh	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4e:	1c9a      	adds	r2, r3, #2
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d11c      	bne.n	8003eae <HAL_SPI_TransmitReceive+0x1f4>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d016      	beq.n	8003eae <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	b292      	uxth	r2, r2
 8003e8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	1c9a      	adds	r2, r3, #2
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003eae:	f7fd fb23 	bl	80014f8 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d80b      	bhi.n	8003ed6 <HAL_SPI_TransmitReceive+0x21c>
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d007      	beq.n	8003ed6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003ed4:	e109      	b.n	80040ea <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d19f      	bne.n	8003e20 <HAL_SPI_TransmitReceive+0x166>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d199      	bne.n	8003e20 <HAL_SPI_TransmitReceive+0x166>
 8003eec:	e0e3      	b.n	80040b6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_SPI_TransmitReceive+0x244>
 8003ef6:	8a7b      	ldrh	r3, [r7, #18]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	f040 80cf 	bne.w	800409c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d912      	bls.n	8003f2e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0c:	881a      	ldrh	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f18:	1c9a      	adds	r2, r3, #2
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b02      	subs	r3, #2
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f2c:	e0b6      	b.n	800409c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	7812      	ldrb	r2, [r2, #0]
 8003f3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f54:	e0a2      	b.n	800409c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d134      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x314>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d02f      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x314>
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d12c      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d912      	bls.n	8003fa4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f82:	881a      	ldrh	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	1c9a      	adds	r2, r3, #2
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b02      	subs	r3, #2
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fa2:	e012      	b.n	8003fca <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d148      	bne.n	800406e <HAL_SPI_TransmitReceive+0x3b4>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d042      	beq.n	800406e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d923      	bls.n	800403c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	b292      	uxth	r2, r2
 8004000:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	1c9a      	adds	r2, r3, #2
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b02      	subs	r3, #2
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b01      	cmp	r3, #1
 8004028:	d81f      	bhi.n	800406a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	e016      	b.n	800406a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f103 020c 	add.w	r2, r3, #12
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004048:	7812      	ldrb	r2, [r2, #0]
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800406a:	2301      	movs	r3, #1
 800406c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800406e:	f7fd fa43 	bl	80014f8 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800407a:	429a      	cmp	r2, r3
 800407c:	d803      	bhi.n	8004086 <HAL_SPI_TransmitReceive+0x3cc>
 800407e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d102      	bne.n	800408c <HAL_SPI_TransmitReceive+0x3d2>
 8004086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004088:	2b00      	cmp	r3, #0
 800408a:	d107      	bne.n	800409c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800409a:	e026      	b.n	80040ea <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f47f af57 	bne.w	8003f56 <HAL_SPI_TransmitReceive+0x29c>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f47f af50 	bne.w	8003f56 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f9ba 	bl	8004434 <SPI_EndRxTxTransaction>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040e0:	e003      	b.n	80040ea <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80040f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3728      	adds	r7, #40	@ 0x28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004110:	f7fd f9f2 	bl	80014f8 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	4413      	add	r3, r2
 800411e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004120:	f7fd f9ea 	bl	80014f8 <HAL_GetTick>
 8004124:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004126:	4b39      	ldr	r3, [pc, #228]	@ (800420c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	015b      	lsls	r3, r3, #5
 800412c:	0d1b      	lsrs	r3, r3, #20
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	fb02 f303 	mul.w	r3, r2, r3
 8004134:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004136:	e054      	b.n	80041e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d050      	beq.n	80041e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004140:	f7fd f9da 	bl	80014f8 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	429a      	cmp	r2, r3
 800414e:	d902      	bls.n	8004156 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d13d      	bne.n	80041d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004164:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800416e:	d111      	bne.n	8004194 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004178:	d004      	beq.n	8004184 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004182:	d107      	bne.n	8004194 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004192:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800419c:	d10f      	bne.n	80041be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e017      	b.n	8004202 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	3b01      	subs	r3, #1
 80041e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4013      	ands	r3, r2
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	bf0c      	ite	eq
 80041f2:	2301      	moveq	r3, #1
 80041f4:	2300      	movne	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d19b      	bne.n	8004138 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000000 	.word	0x20000000

08004210 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08a      	sub	sp, #40	@ 0x28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004222:	f7fd f969 	bl	80014f8 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	4413      	add	r3, r2
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004232:	f7fd f961 	bl	80014f8 <HAL_GetTick>
 8004236:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	330c      	adds	r3, #12
 800423e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004240:	4b3d      	ldr	r3, [pc, #244]	@ (8004338 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	00da      	lsls	r2, r3, #3
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	0d1b      	lsrs	r3, r3, #20
 8004250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004252:	fb02 f303 	mul.w	r3, r2, r3
 8004256:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004258:	e060      	b.n	800431c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004260:	d107      	bne.n	8004272 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004270:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d050      	beq.n	800431c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800427a:	f7fd f93d 	bl	80014f8 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004286:	429a      	cmp	r2, r3
 8004288:	d902      	bls.n	8004290 <SPI_WaitFifoStateUntilTimeout+0x80>
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	2b00      	cmp	r3, #0
 800428e:	d13d      	bne.n	800430c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800429e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042a8:	d111      	bne.n	80042ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042b2:	d004      	beq.n	80042be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042bc:	d107      	bne.n	80042ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042d6:	d10f      	bne.n	80042f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e010      	b.n	800432e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	3b01      	subs	r3, #1
 800431a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4013      	ands	r3, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	429a      	cmp	r2, r3
 800432a:	d196      	bne.n	800425a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3728      	adds	r7, #40	@ 0x28
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000000 	.word	0x20000000

0800433c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004350:	d111      	bne.n	8004376 <SPI_EndRxTransaction+0x3a>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800435a:	d004      	beq.n	8004366 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004364:	d107      	bne.n	8004376 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004374:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800437e:	d112      	bne.n	80043a6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2200      	movs	r2, #0
 8004388:	2180      	movs	r1, #128	@ 0x80
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7ff feb8 	bl	8004100 <SPI_WaitFlagStateUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d021      	beq.n	80043da <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439a:	f043 0220 	orr.w	r2, r3, #32
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e03d      	b.n	8004422 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043a6:	4b21      	ldr	r3, [pc, #132]	@ (800442c <SPI_EndRxTransaction+0xf0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a21      	ldr	r2, [pc, #132]	@ (8004430 <SPI_EndRxTransaction+0xf4>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	0d5b      	lsrs	r3, r3, #21
 80043b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d2:	2b80      	cmp	r3, #128	@ 0x80
 80043d4:	d0f2      	beq.n	80043bc <SPI_EndRxTransaction+0x80>
 80043d6:	e000      	b.n	80043da <SPI_EndRxTransaction+0x9e>
        break;
 80043d8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043e2:	d11d      	bne.n	8004420 <SPI_EndRxTransaction+0xe4>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ec:	d004      	beq.n	80043f8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f6:	d113      	bne.n	8004420 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2200      	movs	r2, #0
 8004400:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7ff ff03 	bl	8004210 <SPI_WaitFifoStateUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004414:	f043 0220 	orr.w	r2, r3, #32
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e000      	b.n	8004422 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000000 	.word	0x20000000
 8004430:	165e9f81 	.word	0x165e9f81

08004434 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2200      	movs	r2, #0
 8004448:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff fedf 	bl	8004210 <SPI_WaitFifoStateUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445c:	f043 0220 	orr.w	r2, r3, #32
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e046      	b.n	80044f6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004468:	4b25      	ldr	r3, [pc, #148]	@ (8004500 <SPI_EndRxTxTransaction+0xcc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a25      	ldr	r2, [pc, #148]	@ (8004504 <SPI_EndRxTxTransaction+0xd0>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	0d5b      	lsrs	r3, r3, #21
 8004474:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004478:	fb02 f303 	mul.w	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004486:	d112      	bne.n	80044ae <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2200      	movs	r2, #0
 8004490:	2180      	movs	r1, #128	@ 0x80
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7ff fe34 	bl	8004100 <SPI_WaitFlagStateUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d016      	beq.n	80044cc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a2:	f043 0220 	orr.w	r2, r3, #32
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e023      	b.n	80044f6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c4:	2b80      	cmp	r3, #128	@ 0x80
 80044c6:	d0f2      	beq.n	80044ae <SPI_EndRxTxTransaction+0x7a>
 80044c8:	e000      	b.n	80044cc <SPI_EndRxTxTransaction+0x98>
        break;
 80044ca:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff fe99 	bl	8004210 <SPI_WaitFifoStateUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e8:	f043 0220 	orr.w	r2, r3, #32
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e000      	b.n	80044f6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000000 	.word	0x20000000
 8004504:	165e9f81 	.word	0x165e9f81

08004508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e049      	b.n	80045ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fc feb8 	bl	80012a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f000 fca8 	bl	8004e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e049      	b.n	800465c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f841 	bl	8004664 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2202      	movs	r2, #2
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3304      	adds	r3, #4
 80045f2:	4619      	mov	r1, r3
 80045f4:	4610      	mov	r0, r2
 80045f6:	f000 fc51 	bl	8004e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d109      	bne.n	800469c <HAL_TIM_PWM_Start+0x24>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	bf14      	ite	ne
 8004694:	2301      	movne	r3, #1
 8004696:	2300      	moveq	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	e03c      	b.n	8004716 <HAL_TIM_PWM_Start+0x9e>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d109      	bne.n	80046b6 <HAL_TIM_PWM_Start+0x3e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	bf14      	ite	ne
 80046ae:	2301      	movne	r3, #1
 80046b0:	2300      	moveq	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	e02f      	b.n	8004716 <HAL_TIM_PWM_Start+0x9e>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d109      	bne.n	80046d0 <HAL_TIM_PWM_Start+0x58>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	bf14      	ite	ne
 80046c8:	2301      	movne	r3, #1
 80046ca:	2300      	moveq	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	e022      	b.n	8004716 <HAL_TIM_PWM_Start+0x9e>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b0c      	cmp	r3, #12
 80046d4:	d109      	bne.n	80046ea <HAL_TIM_PWM_Start+0x72>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b01      	cmp	r3, #1
 80046e0:	bf14      	ite	ne
 80046e2:	2301      	movne	r3, #1
 80046e4:	2300      	moveq	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	e015      	b.n	8004716 <HAL_TIM_PWM_Start+0x9e>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b10      	cmp	r3, #16
 80046ee:	d109      	bne.n	8004704 <HAL_TIM_PWM_Start+0x8c>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	e008      	b.n	8004716 <HAL_TIM_PWM_Start+0x9e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	bf14      	ite	ne
 8004710:	2301      	movne	r3, #1
 8004712:	2300      	moveq	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e092      	b.n	8004844 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d104      	bne.n	800472e <HAL_TIM_PWM_Start+0xb6>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800472c:	e023      	b.n	8004776 <HAL_TIM_PWM_Start+0xfe>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b04      	cmp	r3, #4
 8004732:	d104      	bne.n	800473e <HAL_TIM_PWM_Start+0xc6>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800473c:	e01b      	b.n	8004776 <HAL_TIM_PWM_Start+0xfe>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b08      	cmp	r3, #8
 8004742:	d104      	bne.n	800474e <HAL_TIM_PWM_Start+0xd6>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800474c:	e013      	b.n	8004776 <HAL_TIM_PWM_Start+0xfe>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b0c      	cmp	r3, #12
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Start+0xe6>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800475c:	e00b      	b.n	8004776 <HAL_TIM_PWM_Start+0xfe>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b10      	cmp	r3, #16
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Start+0xf6>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800476c:	e003      	b.n	8004776 <HAL_TIM_PWM_Start+0xfe>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2201      	movs	r2, #1
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 ff30 	bl	80055e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a30      	ldr	r2, [pc, #192]	@ (800484c <HAL_TIM_PWM_Start+0x1d4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <HAL_TIM_PWM_Start+0x120>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a2f      	ldr	r2, [pc, #188]	@ (8004850 <HAL_TIM_PWM_Start+0x1d8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d101      	bne.n	800479c <HAL_TIM_PWM_Start+0x124>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <HAL_TIM_PWM_Start+0x126>
 800479c:	2300      	movs	r3, #0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a25      	ldr	r2, [pc, #148]	@ (800484c <HAL_TIM_PWM_Start+0x1d4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d022      	beq.n	8004802 <HAL_TIM_PWM_Start+0x18a>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c4:	d01d      	beq.n	8004802 <HAL_TIM_PWM_Start+0x18a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a22      	ldr	r2, [pc, #136]	@ (8004854 <HAL_TIM_PWM_Start+0x1dc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d018      	beq.n	8004802 <HAL_TIM_PWM_Start+0x18a>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a20      	ldr	r2, [pc, #128]	@ (8004858 <HAL_TIM_PWM_Start+0x1e0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <HAL_TIM_PWM_Start+0x18a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1f      	ldr	r2, [pc, #124]	@ (800485c <HAL_TIM_PWM_Start+0x1e4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00e      	beq.n	8004802 <HAL_TIM_PWM_Start+0x18a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a19      	ldr	r2, [pc, #100]	@ (8004850 <HAL_TIM_PWM_Start+0x1d8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d009      	beq.n	8004802 <HAL_TIM_PWM_Start+0x18a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004860 <HAL_TIM_PWM_Start+0x1e8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <HAL_TIM_PWM_Start+0x18a>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a19      	ldr	r2, [pc, #100]	@ (8004864 <HAL_TIM_PWM_Start+0x1ec>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d115      	bne.n	800482e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	4b17      	ldr	r3, [pc, #92]	@ (8004868 <HAL_TIM_PWM_Start+0x1f0>)
 800480a:	4013      	ands	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b06      	cmp	r3, #6
 8004812:	d015      	beq.n	8004840 <HAL_TIM_PWM_Start+0x1c8>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800481a:	d011      	beq.n	8004840 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482c:	e008      	b.n	8004840 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0201 	orr.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	e000      	b.n	8004842 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004840:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40010000 	.word	0x40010000
 8004850:	40010400 	.word	0x40010400
 8004854:	40000400 	.word	0x40000400
 8004858:	40000800 	.word	0x40000800
 800485c:	40000c00 	.word	0x40000c00
 8004860:	40014000 	.word	0x40014000
 8004864:	40001800 	.word	0x40001800
 8004868:	00010007 	.word	0x00010007

0800486c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d020      	beq.n	80048d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0202 	mvn.w	r2, #2
 80048a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fad2 	bl	8004e60 <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fac4 	bl	8004e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fad5 	bl	8004e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d020      	beq.n	800491c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01b      	beq.n	800491c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0204 	mvn.w	r2, #4
 80048ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 faac 	bl	8004e60 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fa9e 	bl	8004e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 faaf 	bl	8004e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d020      	beq.n	8004968 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0208 	mvn.w	r2, #8
 8004938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2204      	movs	r2, #4
 800493e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fa86 	bl	8004e60 <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa78 	bl	8004e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fa89 	bl	8004e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b00      	cmp	r3, #0
 8004970:	d020      	beq.n	80049b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01b      	beq.n	80049b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0210 	mvn.w	r2, #16
 8004984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2208      	movs	r2, #8
 800498a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fa60 	bl	8004e60 <HAL_TIM_IC_CaptureCallback>
 80049a0:	e005      	b.n	80049ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fa52 	bl	8004e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fa63 	bl	8004e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00c      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d007      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0201 	mvn.w	r2, #1
 80049d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fa30 	bl	8004e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d104      	bne.n	80049ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00c      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80049fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fead 	bl	8005760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00c      	beq.n	8004a2a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fea5 	bl	8005774 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00c      	beq.n	8004a4e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fa1d 	bl	8004e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00c      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d007      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f06f 0220 	mvn.w	r2, #32
 8004a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fe6d 	bl	800574c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e0ff      	b.n	8004c9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b14      	cmp	r3, #20
 8004aa6:	f200 80f0 	bhi.w	8004c8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004b05 	.word	0x08004b05
 8004ab4:	08004c8b 	.word	0x08004c8b
 8004ab8:	08004c8b 	.word	0x08004c8b
 8004abc:	08004c8b 	.word	0x08004c8b
 8004ac0:	08004b45 	.word	0x08004b45
 8004ac4:	08004c8b 	.word	0x08004c8b
 8004ac8:	08004c8b 	.word	0x08004c8b
 8004acc:	08004c8b 	.word	0x08004c8b
 8004ad0:	08004b87 	.word	0x08004b87
 8004ad4:	08004c8b 	.word	0x08004c8b
 8004ad8:	08004c8b 	.word	0x08004c8b
 8004adc:	08004c8b 	.word	0x08004c8b
 8004ae0:	08004bc7 	.word	0x08004bc7
 8004ae4:	08004c8b 	.word	0x08004c8b
 8004ae8:	08004c8b 	.word	0x08004c8b
 8004aec:	08004c8b 	.word	0x08004c8b
 8004af0:	08004c09 	.word	0x08004c09
 8004af4:	08004c8b 	.word	0x08004c8b
 8004af8:	08004c8b 	.word	0x08004c8b
 8004afc:	08004c8b 	.word	0x08004c8b
 8004b00:	08004c49 	.word	0x08004c49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fa72 	bl	8004ff4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0208 	orr.w	r2, r2, #8
 8004b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0204 	bic.w	r2, r2, #4
 8004b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6999      	ldr	r1, [r3, #24]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	619a      	str	r2, [r3, #24]
      break;
 8004b42:	e0a5      	b.n	8004c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fac4 	bl	80050d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699a      	ldr	r2, [r3, #24]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6999      	ldr	r1, [r3, #24]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	021a      	lsls	r2, r3, #8
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	619a      	str	r2, [r3, #24]
      break;
 8004b84:	e084      	b.n	8004c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fb1b 	bl	80051c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0208 	orr.w	r2, r2, #8
 8004ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0204 	bic.w	r2, r2, #4
 8004bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69d9      	ldr	r1, [r3, #28]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	61da      	str	r2, [r3, #28]
      break;
 8004bc4:	e064      	b.n	8004c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68b9      	ldr	r1, [r7, #8]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fb71 	bl	80052b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69d9      	ldr	r1, [r3, #28]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	021a      	lsls	r2, r3, #8
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	61da      	str	r2, [r3, #28]
      break;
 8004c06:	e043      	b.n	8004c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fba8 	bl	8005364 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0208 	orr.w	r2, r2, #8
 8004c22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0204 	bic.w	r2, r2, #4
 8004c32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	691a      	ldr	r2, [r3, #16]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c46:	e023      	b.n	8004c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fbda 	bl	8005408 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	021a      	lsls	r2, r3, #8
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c88:	e002      	b.n	8004c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop

08004ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e0b4      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x186>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	4b56      	ldr	r3, [pc, #344]	@ (8004e34 <HAL_TIM_ConfigClockSource+0x190>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf8:	d03e      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0xd4>
 8004cfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cfe:	f200 8087 	bhi.w	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d06:	f000 8086 	beq.w	8004e16 <HAL_TIM_ConfigClockSource+0x172>
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d0e:	d87f      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d10:	2b70      	cmp	r3, #112	@ 0x70
 8004d12:	d01a      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0xa6>
 8004d14:	2b70      	cmp	r3, #112	@ 0x70
 8004d16:	d87b      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d18:	2b60      	cmp	r3, #96	@ 0x60
 8004d1a:	d050      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x11a>
 8004d1c:	2b60      	cmp	r3, #96	@ 0x60
 8004d1e:	d877      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d20:	2b50      	cmp	r3, #80	@ 0x50
 8004d22:	d03c      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0xfa>
 8004d24:	2b50      	cmp	r3, #80	@ 0x50
 8004d26:	d873      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d28:	2b40      	cmp	r3, #64	@ 0x40
 8004d2a:	d058      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x13a>
 8004d2c:	2b40      	cmp	r3, #64	@ 0x40
 8004d2e:	d86f      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d30:	2b30      	cmp	r3, #48	@ 0x30
 8004d32:	d064      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d34:	2b30      	cmp	r3, #48	@ 0x30
 8004d36:	d86b      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d060      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d867      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d05c      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d44:	2b10      	cmp	r3, #16
 8004d46:	d05a      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d48:	e062      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d5a:	f000 fc23 	bl	80055a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	609a      	str	r2, [r3, #8]
      break;
 8004d76:	e04f      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d88:	f000 fc0c 	bl	80055a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d9a:	609a      	str	r2, [r3, #8]
      break;
 8004d9c:	e03c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004daa:	461a      	mov	r2, r3
 8004dac:	f000 fb80 	bl	80054b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2150      	movs	r1, #80	@ 0x50
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fbd9 	bl	800556e <TIM_ITRx_SetConfig>
      break;
 8004dbc:	e02c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f000 fb9f 	bl	800550e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2160      	movs	r1, #96	@ 0x60
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fbc9 	bl	800556e <TIM_ITRx_SetConfig>
      break;
 8004ddc:	e01c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dea:	461a      	mov	r2, r3
 8004dec:	f000 fb60 	bl	80054b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2140      	movs	r1, #64	@ 0x40
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fbb9 	bl	800556e <TIM_ITRx_SetConfig>
      break;
 8004dfc:	e00c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f000 fbb0 	bl	800556e <TIM_ITRx_SetConfig>
      break;
 8004e0e:	e003      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	73fb      	strb	r3, [r7, #15]
      break;
 8004e14:	e000      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	fffeff88 	.word	0xfffeff88

08004e38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a46      	ldr	r2, [pc, #280]	@ (8004fc8 <TIM_Base_SetConfig+0x12c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d013      	beq.n	8004edc <TIM_Base_SetConfig+0x40>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eba:	d00f      	beq.n	8004edc <TIM_Base_SetConfig+0x40>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a43      	ldr	r2, [pc, #268]	@ (8004fcc <TIM_Base_SetConfig+0x130>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00b      	beq.n	8004edc <TIM_Base_SetConfig+0x40>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a42      	ldr	r2, [pc, #264]	@ (8004fd0 <TIM_Base_SetConfig+0x134>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d007      	beq.n	8004edc <TIM_Base_SetConfig+0x40>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a41      	ldr	r2, [pc, #260]	@ (8004fd4 <TIM_Base_SetConfig+0x138>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_Base_SetConfig+0x40>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a40      	ldr	r2, [pc, #256]	@ (8004fd8 <TIM_Base_SetConfig+0x13c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d108      	bne.n	8004eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a35      	ldr	r2, [pc, #212]	@ (8004fc8 <TIM_Base_SetConfig+0x12c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d02b      	beq.n	8004f4e <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004efc:	d027      	beq.n	8004f4e <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a32      	ldr	r2, [pc, #200]	@ (8004fcc <TIM_Base_SetConfig+0x130>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d023      	beq.n	8004f4e <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a31      	ldr	r2, [pc, #196]	@ (8004fd0 <TIM_Base_SetConfig+0x134>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d01f      	beq.n	8004f4e <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a30      	ldr	r2, [pc, #192]	@ (8004fd4 <TIM_Base_SetConfig+0x138>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d01b      	beq.n	8004f4e <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a2f      	ldr	r2, [pc, #188]	@ (8004fd8 <TIM_Base_SetConfig+0x13c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d017      	beq.n	8004f4e <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a2e      	ldr	r2, [pc, #184]	@ (8004fdc <TIM_Base_SetConfig+0x140>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d013      	beq.n	8004f4e <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe0 <TIM_Base_SetConfig+0x144>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00f      	beq.n	8004f4e <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe4 <TIM_Base_SetConfig+0x148>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00b      	beq.n	8004f4e <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe8 <TIM_Base_SetConfig+0x14c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d007      	beq.n	8004f4e <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a2a      	ldr	r2, [pc, #168]	@ (8004fec <TIM_Base_SetConfig+0x150>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d003      	beq.n	8004f4e <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a29      	ldr	r2, [pc, #164]	@ (8004ff0 <TIM_Base_SetConfig+0x154>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d108      	bne.n	8004f60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a10      	ldr	r2, [pc, #64]	@ (8004fc8 <TIM_Base_SetConfig+0x12c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_Base_SetConfig+0xf8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a12      	ldr	r2, [pc, #72]	@ (8004fd8 <TIM_Base_SetConfig+0x13c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d103      	bne.n	8004f9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d105      	bne.n	8004fba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f023 0201 	bic.w	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	611a      	str	r2, [r3, #16]
  }
}
 8004fba:	bf00      	nop
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40010000 	.word	0x40010000
 8004fcc:	40000400 	.word	0x40000400
 8004fd0:	40000800 	.word	0x40000800
 8004fd4:	40000c00 	.word	0x40000c00
 8004fd8:	40010400 	.word	0x40010400
 8004fdc:	40014000 	.word	0x40014000
 8004fe0:	40014400 	.word	0x40014400
 8004fe4:	40014800 	.word	0x40014800
 8004fe8:	40001800 	.word	0x40001800
 8004fec:	40001c00 	.word	0x40001c00
 8004ff0:	40002000 	.word	0x40002000

08004ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	f023 0201 	bic.w	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4b2b      	ldr	r3, [pc, #172]	@ (80050cc <TIM_OC1_SetConfig+0xd8>)
 8005020:	4013      	ands	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0303 	bic.w	r3, r3, #3
 800502a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f023 0302 	bic.w	r3, r3, #2
 800503c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a21      	ldr	r2, [pc, #132]	@ (80050d0 <TIM_OC1_SetConfig+0xdc>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_OC1_SetConfig+0x64>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a20      	ldr	r2, [pc, #128]	@ (80050d4 <TIM_OC1_SetConfig+0xe0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d10c      	bne.n	8005072 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0308 	bic.w	r3, r3, #8
 800505e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f023 0304 	bic.w	r3, r3, #4
 8005070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a16      	ldr	r2, [pc, #88]	@ (80050d0 <TIM_OC1_SetConfig+0xdc>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d003      	beq.n	8005082 <TIM_OC1_SetConfig+0x8e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a15      	ldr	r2, [pc, #84]	@ (80050d4 <TIM_OC1_SetConfig+0xe0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d111      	bne.n	80050a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	621a      	str	r2, [r3, #32]
}
 80050c0:	bf00      	nop
 80050c2:	371c      	adds	r7, #28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	fffeff8f 	.word	0xfffeff8f
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40010400 	.word	0x40010400

080050d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f023 0210 	bic.w	r2, r3, #16
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4b2e      	ldr	r3, [pc, #184]	@ (80051bc <TIM_OC2_SetConfig+0xe4>)
 8005104:	4013      	ands	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800510e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f023 0320 	bic.w	r3, r3, #32
 8005122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a23      	ldr	r2, [pc, #140]	@ (80051c0 <TIM_OC2_SetConfig+0xe8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <TIM_OC2_SetConfig+0x68>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a22      	ldr	r2, [pc, #136]	@ (80051c4 <TIM_OC2_SetConfig+0xec>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10d      	bne.n	800515c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800515a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a18      	ldr	r2, [pc, #96]	@ (80051c0 <TIM_OC2_SetConfig+0xe8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_OC2_SetConfig+0x94>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a17      	ldr	r2, [pc, #92]	@ (80051c4 <TIM_OC2_SetConfig+0xec>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d113      	bne.n	8005194 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800517a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	621a      	str	r2, [r3, #32]
}
 80051ae:	bf00      	nop
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	feff8fff 	.word	0xfeff8fff
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40010400 	.word	0x40010400

080051c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4b2d      	ldr	r3, [pc, #180]	@ (80052a8 <TIM_OC3_SetConfig+0xe0>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0303 	bic.w	r3, r3, #3
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	021b      	lsls	r3, r3, #8
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a22      	ldr	r2, [pc, #136]	@ (80052ac <TIM_OC3_SetConfig+0xe4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d003      	beq.n	800522e <TIM_OC3_SetConfig+0x66>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a21      	ldr	r2, [pc, #132]	@ (80052b0 <TIM_OC3_SetConfig+0xe8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d10d      	bne.n	800524a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a17      	ldr	r2, [pc, #92]	@ (80052ac <TIM_OC3_SetConfig+0xe4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d003      	beq.n	800525a <TIM_OC3_SetConfig+0x92>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a16      	ldr	r2, [pc, #88]	@ (80052b0 <TIM_OC3_SetConfig+0xe8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d113      	bne.n	8005282 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	621a      	str	r2, [r3, #32]
}
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	fffeff8f 	.word	0xfffeff8f
 80052ac:	40010000 	.word	0x40010000
 80052b0:	40010400 	.word	0x40010400

080052b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4b1e      	ldr	r3, [pc, #120]	@ (8005358 <TIM_OC4_SetConfig+0xa4>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	031b      	lsls	r3, r3, #12
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a13      	ldr	r2, [pc, #76]	@ (800535c <TIM_OC4_SetConfig+0xa8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_OC4_SetConfig+0x68>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a12      	ldr	r2, [pc, #72]	@ (8005360 <TIM_OC4_SetConfig+0xac>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d109      	bne.n	8005330 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005322:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	019b      	lsls	r3, r3, #6
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	feff8fff 	.word	0xfeff8fff
 800535c:	40010000 	.word	0x40010000
 8005360:	40010400 	.word	0x40010400

08005364 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4b1b      	ldr	r3, [pc, #108]	@ (80053fc <TIM_OC5_SetConfig+0x98>)
 8005390:	4013      	ands	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80053a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	041b      	lsls	r3, r3, #16
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a12      	ldr	r2, [pc, #72]	@ (8005400 <TIM_OC5_SetConfig+0x9c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d003      	beq.n	80053c2 <TIM_OC5_SetConfig+0x5e>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a11      	ldr	r2, [pc, #68]	@ (8005404 <TIM_OC5_SetConfig+0xa0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d109      	bne.n	80053d6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	621a      	str	r2, [r3, #32]
}
 80053f0:	bf00      	nop
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	fffeff8f 	.word	0xfffeff8f
 8005400:	40010000 	.word	0x40010000
 8005404:	40010400 	.word	0x40010400

08005408 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4b1c      	ldr	r3, [pc, #112]	@ (80054a4 <TIM_OC6_SetConfig+0x9c>)
 8005434:	4013      	ands	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800544a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	051b      	lsls	r3, r3, #20
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a13      	ldr	r2, [pc, #76]	@ (80054a8 <TIM_OC6_SetConfig+0xa0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_OC6_SetConfig+0x60>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a12      	ldr	r2, [pc, #72]	@ (80054ac <TIM_OC6_SetConfig+0xa4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d109      	bne.n	800547c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800546e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	029b      	lsls	r3, r3, #10
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	621a      	str	r2, [r3, #32]
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	feff8fff 	.word	0xfeff8fff
 80054a8:	40010000 	.word	0x40010000
 80054ac:	40010400 	.word	0x40010400

080054b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f023 0201 	bic.w	r2, r3, #1
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f023 030a 	bic.w	r3, r3, #10
 80054ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	621a      	str	r2, [r3, #32]
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800550e:	b480      	push	{r7}
 8005510:	b087      	sub	sp, #28
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f023 0210 	bic.w	r2, r3, #16
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005538:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	031b      	lsls	r3, r3, #12
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800554a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	f043 0307 	orr.w	r3, r3, #7
 8005590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	609a      	str	r2, [r3, #8]
}
 8005598:	bf00      	nop
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	021a      	lsls	r2, r3, #8
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	609a      	str	r2, [r3, #8]
}
 80055d8:	bf00      	nop
 80055da:	371c      	adds	r7, #28
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	2201      	movs	r2, #1
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a1a      	ldr	r2, [r3, #32]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	43db      	mvns	r3, r3
 8005606:	401a      	ands	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a1a      	ldr	r2, [r3, #32]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	fa01 f303 	lsl.w	r3, r1, r3
 800561c:	431a      	orrs	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005644:	2302      	movs	r3, #2
 8005646:	e06d      	b.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a30      	ldr	r2, [pc, #192]	@ (8005730 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d004      	beq.n	800567c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a2f      	ldr	r2, [pc, #188]	@ (8005734 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d108      	bne.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005682:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005694:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a20      	ldr	r2, [pc, #128]	@ (8005730 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d022      	beq.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ba:	d01d      	beq.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005738 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d018      	beq.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1c      	ldr	r2, [pc, #112]	@ (800573c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d013      	beq.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005740 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00e      	beq.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a15      	ldr	r2, [pc, #84]	@ (8005734 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d009      	beq.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a16      	ldr	r2, [pc, #88]	@ (8005744 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d004      	beq.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a15      	ldr	r2, [pc, #84]	@ (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d10c      	bne.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	4313      	orrs	r3, r2
 8005708:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	40010000 	.word	0x40010000
 8005734:	40010400 	.word	0x40010400
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800
 8005740:	40000c00 	.word	0x40000c00
 8005744:	40014000 	.word	0x40014000
 8005748:	40001800 	.word	0x40001800

0800574c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <memset>:
 8005788:	4402      	add	r2, r0
 800578a:	4603      	mov	r3, r0
 800578c:	4293      	cmp	r3, r2
 800578e:	d100      	bne.n	8005792 <memset+0xa>
 8005790:	4770      	bx	lr
 8005792:	f803 1b01 	strb.w	r1, [r3], #1
 8005796:	e7f9      	b.n	800578c <memset+0x4>

08005798 <__libc_init_array>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	4d0d      	ldr	r5, [pc, #52]	@ (80057d0 <__libc_init_array+0x38>)
 800579c:	4c0d      	ldr	r4, [pc, #52]	@ (80057d4 <__libc_init_array+0x3c>)
 800579e:	1b64      	subs	r4, r4, r5
 80057a0:	10a4      	asrs	r4, r4, #2
 80057a2:	2600      	movs	r6, #0
 80057a4:	42a6      	cmp	r6, r4
 80057a6:	d109      	bne.n	80057bc <__libc_init_array+0x24>
 80057a8:	4d0b      	ldr	r5, [pc, #44]	@ (80057d8 <__libc_init_array+0x40>)
 80057aa:	4c0c      	ldr	r4, [pc, #48]	@ (80057dc <__libc_init_array+0x44>)
 80057ac:	f000 f818 	bl	80057e0 <_init>
 80057b0:	1b64      	subs	r4, r4, r5
 80057b2:	10a4      	asrs	r4, r4, #2
 80057b4:	2600      	movs	r6, #0
 80057b6:	42a6      	cmp	r6, r4
 80057b8:	d105      	bne.n	80057c6 <__libc_init_array+0x2e>
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c0:	4798      	blx	r3
 80057c2:	3601      	adds	r6, #1
 80057c4:	e7ee      	b.n	80057a4 <__libc_init_array+0xc>
 80057c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ca:	4798      	blx	r3
 80057cc:	3601      	adds	r6, #1
 80057ce:	e7f2      	b.n	80057b6 <__libc_init_array+0x1e>
 80057d0:	08005810 	.word	0x08005810
 80057d4:	08005810 	.word	0x08005810
 80057d8:	08005810 	.word	0x08005810
 80057dc:	08005814 	.word	0x08005814

080057e0 <_init>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	bf00      	nop
 80057e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e6:	bc08      	pop	{r3}
 80057e8:	469e      	mov	lr, r3
 80057ea:	4770      	bx	lr

080057ec <_fini>:
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ee:	bf00      	nop
 80057f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f2:	bc08      	pop	{r3}
 80057f4:	469e      	mov	lr, r3
 80057f6:	4770      	bx	lr
